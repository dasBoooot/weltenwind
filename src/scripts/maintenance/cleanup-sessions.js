const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function cleanupSessions() {
  try {
    console.log('üîÑ Starte Session-Bereinigung...');
    
    // Alle abgelaufenen Sessions l√∂schen
    const expiredSessions = await prisma.session.deleteMany({
      where: {
        expiresAt: {
          lt: new Date()
        }
      }
    });
    
    console.log(`‚úÖ ${expiredSessions.count} abgelaufene Sessions gel√∂scht`);
    
    // Alle Sessions √§lter als 30 Tage l√∂schen (zus√§tzliche Sicherheit)
    const thirtyDaysAgo = new Date();
    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
    
    const oldSessions = await prisma.session.deleteMany({
      where: {
        createdAt: {
          lt: thirtyDaysAgo
        }
      }
    });
    
    console.log(`‚úÖ ${oldSessions.count} alte Sessions (30+ Tage) gel√∂scht`);
    
    // Verbleibende Sessions anzeigen
    const remainingSessions = await prisma.session.findMany({
      include: {
        user: {
          select: {
            username: true
          }
        }
      }
    });
    
    console.log(`\nüìä Verbleibende Sessions: ${remainingSessions.length}`);
    remainingSessions.forEach(session => {
      console.log(`  - ID: ${session.id}, User: ${session.user.username}, Expires: ${session.expiresAt}`);
    });
    
  } catch (error) {
    console.error('‚ùå Fehler bei der Session-Bereinigung:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Script ausf√ºhren
cleanupSessions(); 