#!/bin/bash
# üóÑÔ∏è Setup Automated Backup Cron Jobs
# Installiert und konfiguriert Cron-Jobs f√ºr automatisierte Backups

set -e

# üìã Configuration
WELTENWIND_DIR="/srv/weltenwind"
BACKEND_DIR="$WELTENWIND_DIR/backend"
BACKUP_SCRIPT="$BACKEND_DIR/scripts/backup/automated-backup.js"
CRON_USER="weltenwind"
LOG_DIR="$WELTENWIND_DIR/backups/logs"

# üé® Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# üîß Utility Functions
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# üîç Check Prerequisites
check_prerequisites() {
    log "Checking prerequisites..."

    # Check if running as root
    if [[ $EUID -ne 0 ]]; then
        error "This script must be run as root"
        exit 1
    fi

    # Check if weltenwind directory exists
    if [[ ! -d "$WELTENWIND_DIR" ]]; then
        error "Weltenwind directory not found: $WELTENWIND_DIR"
        exit 1
    fi

    # Check if backup script exists
    if [[ ! -f "$BACKUP_SCRIPT" ]]; then
        error "Backup script not found: $BACKUP_SCRIPT"
        exit 1
    fi

    # Check if weltenwind user exists
    if ! id "$CRON_USER" &>/dev/null; then
        error "User '$CRON_USER' does not exist"
        exit 1
    fi

    # Check if node is available
    if ! command -v node &>/dev/null; then
        error "Node.js is not installed or not in PATH"
        exit 1
    fi

    # Check if cron is installed
    if ! command -v crontab &>/dev/null; then
        error "Cron is not installed"
        exit 1
    fi

    success "Prerequisites check passed"
}

# üìÅ Setup Directories
setup_directories() {
    log "Setting up directories..."

    # Create log directory
    mkdir -p "$LOG_DIR"
    chown "$CRON_USER:$CRON_USER" "$LOG_DIR"
    chmod 755 "$LOG_DIR"

    success "Directories setup completed"
}

# üîê Setup Permissions
setup_permissions() {
    log "Setting up permissions..."

    # Make backup script executable
    chmod +x "$BACKUP_SCRIPT"
    
    # Ensure weltenwind user can access the script
    chown -R "$CRON_USER:$CRON_USER" "$BACKEND_DIR/scripts/backup"

    success "Permissions setup completed"
}

# ‚è∞ Install Cron Jobs
install_cron_jobs() {
    log "Installing cron jobs..."

    # Create temporary cron file
    TEMP_CRON=$(mktemp)
    
    # Get existing crontab (if any)
    if crontab -u "$CRON_USER" -l 2>/dev/null > "$TEMP_CRON"; then
        log "Existing crontab found, backing up..."
        cp "$TEMP_CRON" "${LOG_DIR}/crontab_backup_$(date +%Y%m%d_%H%M%S).txt"
    fi

    # Remove any existing weltenwind backup jobs
    grep -v "weltenwind.*backup" "$TEMP_CRON" > "${TEMP_CRON}.clean" 2>/dev/null || touch "${TEMP_CRON}.clean"
    mv "${TEMP_CRON}.clean" "$TEMP_CRON"

    # Add header comment
    cat << EOF >> "$TEMP_CRON"

# =============================================================================
# üóÑÔ∏è Weltenwind Automated Backup Jobs
# Generated by setup-cron-jobs.sh on $(date)
# =============================================================================

EOF

    # Add daily backup job (2:00 AM)
    cat << EOF >> "$TEMP_CRON"
# üìÖ Daily Backup - Every day at 2:00 AM
0 2 * * * cd "$BACKEND_DIR" && /usr/bin/node "$BACKUP_SCRIPT" daily >> "$LOG_DIR/daily-backup.log" 2>&1

EOF

    # Add weekly backup job (1:00 AM on Sundays)
    cat << EOF >> "$TEMP_CRON"
# üìÖ Weekly Backup - Every Sunday at 1:00 AM
0 1 * * 0 cd "$BACKEND_DIR" && /usr/bin/node "$BACKUP_SCRIPT" weekly >> "$LOG_DIR/weekly-backup.log" 2>&1

EOF

    # Add monthly backup job (12:00 AM on 1st of month)
    cat << EOF >> "$TEMP_CRON"
# üìÖ Monthly Backup - First day of month at 12:00 AM
0 0 1 * * cd "$BACKEND_DIR" && /usr/bin/node "$BACKUP_SCRIPT" monthly >> "$LOG_DIR/monthly-backup.log" 2>&1

EOF

    # Add backup cleanup job (3:00 AM daily)
    cat << EOF >> "$TEMP_CRON"
# üßπ Backup Cleanup - Every day at 3:00 AM (after daily backup)
0 3 * * * find "$WELTENWIND_DIR/backups" -type f -name "*.log" -mtime +30 -delete 2>/dev/null || true

EOF

    # Install the crontab
    crontab -u "$CRON_USER" "$TEMP_CRON"
    rm "$TEMP_CRON"

    success "Cron jobs installed successfully"
}

# üìä Display Schedule
display_schedule() {
    echo ""
    log "Backup Schedule Summary:"
    echo "========================"
    echo ""
    echo "üìÖ Daily Backup:     Every day at 2:00 AM"
    echo "üìÖ Weekly Backup:    Every Sunday at 1:00 AM"  
    echo "üìÖ Monthly Backup:   First day of month at 12:00 AM"
    echo "üßπ Log Cleanup:      Every day at 3:00 AM"
    echo ""
    echo "üìÅ Backup Directory: $WELTENWIND_DIR/backups"
    echo "üìã Log Directory:    $LOG_DIR"
    echo "üë§ Cron User:        $CRON_USER"
    echo ""
}

# ‚úÖ Verify Installation
verify_installation() {
    log "Verifying installation..."

    # Check if cron jobs are installed
    if crontab -u "$CRON_USER" -l | grep -q "weltenwind.*backup"; then
        success "Cron jobs are installed and active"
    else
        error "Cron jobs verification failed"
        return 1
    fi

    # Check cron service status
    if systemctl is-active --quiet cron || systemctl is-active --quiet crond; then
        success "Cron service is running"
    else
        warning "Cron service is not running - starting it..."
        systemctl start cron 2>/dev/null || systemctl start crond 2>/dev/null || {
            error "Failed to start cron service"
            return 1
        }
    fi

    # Test backup script execution
    log "Testing backup script execution..."
    if sudo -u "$CRON_USER" node "$BACKUP_SCRIPT" --help >/dev/null 2>&1; then
        success "Backup script is executable"
    else
        error "Backup script test failed"
        return 1
    fi

    success "Installation verification completed"
}

# üéØ Main Installation Function
main() {
    echo "üóÑÔ∏è Weltenwind Automated Backup Setup"
    echo "====================================="
    echo ""

    log "Starting automated backup setup..."

    # Run installation steps
    check_prerequisites
    setup_directories
    setup_permissions
    install_cron_jobs
    verify_installation
    display_schedule

    echo ""
    success "üéâ Automated backup setup completed successfully!"
    echo ""
    echo "üìã Next Steps:"
    echo "1. Verify environment variables in $BACKEND_DIR/.env"
    echo "2. Test manual backup: sudo -u $CRON_USER node $BACKUP_SCRIPT manual"
    echo "3. Check cron jobs: crontab -u $CRON_USER -l"
    echo "4. Monitor logs in: $LOG_DIR"
    echo ""
    echo "‚ö†Ô∏è  Important:"
    echo "- First automated backup will run at the next scheduled time"
    echo "- Monitor the logs for the first few runs"
    echo "- Ensure sufficient disk space for backups"
    echo "- Configure offsite backup for production use"
    echo ""
}

# üîÑ Uninstall Function
uninstall() {
    log "Uninstalling automated backup cron jobs..."

    # Create temporary cron file
    TEMP_CRON=$(mktemp)
    
    # Get existing crontab and remove weltenwind backup jobs
    if crontab -u "$CRON_USER" -l 2>/dev/null > "$TEMP_CRON"; then
        grep -v "weltenwind.*backup" "$TEMP_CRON" > "${TEMP_CRON}.clean" 2>/dev/null || touch "${TEMP_CRON}.clean"
        
        # Remove backup job comments and headers
        grep -v "üóÑÔ∏è Weltenwind Automated Backup Jobs" "${TEMP_CRON}.clean" | \
        grep -v "Generated by setup-cron-jobs.sh" | \
        grep -v "üìÖ.*Backup" | \
        grep -v "üßπ.*Cleanup" > "${TEMP_CRON}.final"
        
        crontab -u "$CRON_USER" "${TEMP_CRON}.final"
        rm "$TEMP_CRON" "${TEMP_CRON}.clean" "${TEMP_CRON}.final"
        
        success "Automated backup cron jobs removed"
    else
        warning "No existing crontab found"
    fi
}

# üìã Usage Information
usage() {
    echo "Usage: $0 [install|uninstall|status]"
    echo ""
    echo "Commands:"
    echo "  install    - Install automated backup cron jobs (default)"
    echo "  uninstall  - Remove automated backup cron jobs"
    echo "  status     - Show current backup cron job status"
    echo ""
    echo "Examples:"
    echo "  sudo $0 install"
    echo "  sudo $0 uninstall"
    echo "  sudo $0 status"
    echo ""
}

# üìä Status Function
status() {
    log "Checking automated backup status..."
    echo ""

    # Check if cron jobs exist
    if crontab -u "$CRON_USER" -l 2>/dev/null | grep -q "weltenwind.*backup"; then
        success "Automated backup jobs are installed"
        echo ""
        echo "üìã Current backup jobs:"
        crontab -u "$CRON_USER" -l | grep -A1 -B1 "backup"
    else
        warning "No automated backup jobs found"
    fi

    echo ""

    # Check recent backup logs
    if [[ -d "$LOG_DIR" ]]; then
        echo "üìã Recent backup logs:"
        find "$LOG_DIR" -name "*backup*.log" -mtime -7 -exec ls -la {} \; 2>/dev/null || echo "No recent backup logs found"
    else
        warning "Backup log directory not found: $LOG_DIR"
    fi
}

# üéØ Command Processing
case "${1:-install}" in
    install)
        main
        ;;
    uninstall)
        uninstall
        ;;
    status)
        status
        ;;
    help|--help|-h)
        usage
        ;;
    *)
        error "Unknown command: $1"
        usage
        exit 1
        ;;
esac