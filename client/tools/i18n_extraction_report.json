[
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 281,
    "column": 87,
    "original": " $actionTypeText.$validityText';\n    \n    // Je nach Status unterschiedliche Logik\n    switch (status) {\n      case 'not_logged_in':\n        if (requiresAction == 'register') {\n          // Mail ist unbekannt -> nur Register\n          actionText = 'Du musst dich mit der E-Mail-Adresse $inviteEmail registrieren.';\n          infoText = '$baseInfoText\\n\\n$actionText';\n          showRegisterButton = isInviteValid; // Nur bei g√ºltigen Invites\n        }\n        break;\n        \n      case 'user_exists_not_logged_in':\n        if (requiresAction == 'login') {\n          // Mail ist bekannt, User nicht angemeldet -> nur Login\n          actionText = 'Dein Account mit $inviteEmail ist bereits registriert. Bitte melde dich an.';\n          infoText = '$baseInfoText\\n\\n$actionText';\n          showLoginButton = isInviteValid; // Nur bei g√ºltigen Invites\n        }\n        break;\n        \n      case 'wrong_email':\n        if (requiresAction == 'logout_and_register') {\n          final currentUserEmail = userStatusData['currentUser']?['email'];\n          // User mit falscher Mail angemeldet -> Logout + Register\n          actionText = 'Diese Einladung ist f√ºr $inviteEmail bestimmt, aber du bist als $currentUserEmail angemeldet.';\n          infoText = '$baseInfoText\\n\\n$actionText\\n\\nBitte melde dich ab und registriere dich mit der richtigen E-Mail-Adresse.';\n          showLogoutButton = isInviteValid; // Nur bei g√ºltigen Invites\n        }\n        break;\n        \n      case 'correct_email':\n        if (requiresAction == 'join_world') {\n          // User richtig angemeldet -> nur Accept Button (KEIN Auto-Accept!)\n          actionText = 'Du bist mit der richtigen E-Mail-Adresse angemeldet und kannst die Einladung jetzt annehmen.';\n          infoText = '$baseInfoText\\n\\n$actionText';\n          showAcceptButton = isInviteValid; // Nur bei g√ºltigen Invites\n          \n          // Auto-Accept entfernt: User soll bewusst entscheiden!\n        }\n        break;\n        \n      default:\n        AppLogger.app.w('‚ùå Unbekannter User-Status: $status');\n        actionText = 'Unbekannter Status: $status';\n        infoText = '$baseInfoText\\n\\n$actionText';\n    }\n    \n    // Bei ung√ºltigen Invites zus√§tzliche Info\n    if (!isInviteValid) {\n      infoText += '\\n\\n‚ö†Ô∏è Diese Einladung kann nicht mehr verwendet werden.';\n    }\n    \n    setState(() {\n      _infoMessage = infoText;\n      _inviteEmail = inviteEmail;\n      \n      // Button-Flags setzen\n      _showLoginButton = showLoginButton;\n      _showRegistrationButton = showRegisterButton; \n      _showLogoutButton = showLogoutButton;\n      _showAcceptInviteButton = showAcceptButton;\n      \n      // WICHTIG: Alte Fehlermeldung zur√ºcksetzen!\n      _errorMessage = null;\n      \n      _isLoading = false;\n    });\n  }\n\n  // Neue Methode: World-Status f√ºr normale Navigation pr√ºfen\n  Future<void> _checkWorldStatus() async {\n    if (_world == null) return;\n    \n    try {\n      // Pr√ºfe ob User bereits Mitglied ist\n      _isJoined = await _worldService.isPlayerInWorld(_world!.id);\n      \n      // Pr√ºfe Vorregistrierung\n      final preRegStatus = await _worldService.getPreRegistrationStatus(_world!.id);\n      _isPreRegistered = preRegStatus.isPreRegistered;\n      \n      AppLogger.app.d('‚úÖ World-Status gepr√ºft', error: {\n        'worldName': _world!.name,\n        'isJoined': _isJoined,\n        'isPreRegistered': _isPreRegistered\n      });\n    } catch (e) {\n      AppLogger.logError('Fehler beim Pr√ºfen des World-Status', e);\n    }\n  }\n\n  // Neue Methode: Automatische Invite-Akzeptierung\n  Future<void> _autoAcceptInvite() async {\n    if (widget.inviteToken == null) return;\n    \n    try {\n      final result = await _worldService.acceptInvite(widget.inviteToken!);\n      \n      if (result != null) {\n        setState(() {\n          _isJoined = true;\n          _infoMessage = 'Willkommen in der Welt ",
    "suggested_key": "worldActiontypetextvaliditytextJeNach",
    "context": "}\n    \n    final baseInfoText = 'Du wurdest von $inviterText eingeladen, der Welt \"$worldName\" $actionTypeText.$validityText';\n    \n    // Je nach Status unterschiedliche Logik",
    "category": "world",
    "confidence": 0.9
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 384,
    "column": 66,
    "original": "! Das Invite wurde automatisch akzeptiert.';\n        });\n        \n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Erfolgreich der Welt ",
    "suggested_key": "worldDasInviteWurde",
    "context": "setState(() {\n          _isJoined = true;\n          _infoMessage = 'Willkommen in der Welt \"${_world?.name}\"! Das Invite wurde automatisch akzeptiert.';\n        });",
    "category": "world",
    "confidence": 0.9
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 390,
    "column": 67,
    "original": " beigetreten!'),\n              backgroundColor: Colors.green,\n              duration: const Duration(seconds: 3),\n            ),\n          );\n        }\n      }\n    } catch (e) {\n      // SPEZIALBEHANDLUNG: ",
    "suggested_key": "worldBeigetretenBackgroundcolorColorsgreen",
    "context": "ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Erfolgreich der Welt \"${_world!.name}\" beigetreten!'),\n              backgroundColor: Colors.green,\n              duration: const Duration(seconds: 3),",
    "category": "world",
    "confidence": 0.9
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 398,
    "column": 55,
    "original": " ist KEIN Fehler!\n      if (e.toString().contains('Invite bereits akzeptiert')) {\n        setState(() {\n          _isJoined = true;\n          _infoMessage = 'Du bist bereits Mitglied dieser Welt ",
    "suggested_key": "worldIstKeinFehler",
    "context": "}\n    } catch (e) {\n      // SPEZIALBEHANDLUNG: \"Invite bereits akzeptiert\" ist KEIN Fehler!\n      if (e.toString().contains('Invite bereits akzeptiert')) {\n        setState(() {",
    "category": "world",
    "confidence": 0.9
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 402,
    "column": 80,
    "original": "!';\n        });\n        \n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Du bist bereits Mitglied der Welt ",
    "suggested_key": "worldIfMountedScaffoldmessengerofcontextshowsnackbar",
    "context": "setState(() {\n          _isJoined = true;\n          _infoMessage = 'Du bist bereits Mitglied dieser Welt \"${_world?.name}\"!';\n        });",
    "category": "world",
    "confidence": 0.9
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 408,
    "column": 80,
    "original": "!'),\n              backgroundColor: Colors.orange,\n              duration: const Duration(seconds: 3),\n            ),\n          );\n        }\n        return; // Erfolgreicher Exit\n      }\n      \n      // Andere Fehler normal behandeln\n      AppLogger.logError('Automatische Invite-Akzeptierung fehlgeschlagen', e);\n      // Fehler nicht als kritisch behandeln - User kann manuell beitreten\n      setState(() {\n        _infoMessage = 'Du kannst nun der Welt beitreten.';\n      });\n    }\n  }\n\n  Future<void> _joinWorld() async {\n    if (_world == null) return;\n\n    setState(() {\n      _isJoining = true;\n      _joinError = null;\n    });\n\n    try {\n      bool success = false;\n      \n      // **INVITE-TOKEN FLOW: Invite akzeptieren**\n      if (widget.inviteToken != null) {\n        AppLogger.app.i('üé´ Versuche Invite-Akzeptierung f√ºr World-Join');\n        final inviteResult = await _worldService.acceptInvite(widget.inviteToken!);\n        \n        if (inviteResult != null) {\n          success = true;\n          AppLogger.app.i('‚úÖ Invite erfolgreich akzeptiert', error: {\n            'worldId': _world!.id,\n            'worldName': _world!.name\n          });\n        }\n      } else {\n        // **NORMALE NAVIGATION: Standard World-Join**\n        AppLogger.app.i('üåç Versuche normalen World-Join');\n        success = await _worldService.joinWorld(_world!.id);\n      }\n      \n      if (success) {\n        setState(() {\n          _isJoined = true;\n        });\n        \n        if (mounted) {\n          final message = widget.inviteToken != null \n            ? 'Einladung akzeptiert! Willkommen in der Welt ",
    "suggested_key": "worldBackgroundcolorColorsorangeDuration",
    "context": "ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Du bist bereits Mitglied der Welt \"${_world?.name}\"!'),\n              backgroundColor: Colors.orange,\n              duration: const Duration(seconds: 3),",
    "category": "world",
    "confidence": 0.9
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 462,
    "column": 77,
    "original": "!'\n            : 'Erfolgreich der Welt ",
    "suggested_key": "worldErfolgreichDerWelt",
    "context": "if (mounted) {\n          final message = widget.inviteToken != null \n            ? 'Einladung akzeptiert! Willkommen in der Welt \"${_world!.name}\"!'\n            : 'Erfolgreich der Welt \"${_world!.name}\" beigetreten!';",
    "category": "world",
    "confidence": 0.9
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 463,
    "column": 53,
    "original": " beigetreten!';\n            \n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text(message),\n              backgroundColor: Colors.green,\n              duration: const Duration(seconds: 3),\n            ),\n          );\n        }\n      } else {\n        setState(() {\n          _joinError = 'Beitritt fehlgeschlagen. Versuche es erneut.';\n        });\n      }\n    } catch (e) {\n      AppLogger.logError('World Join fehlgeschlagen', e, context: {\n        'worldId': _world?.id,\n        'worldName': _world?.name,\n        'hasInviteToken': widget.inviteToken != null,\n        'inviteToken': widget.inviteToken?.substring(0, 8)\n      });\n      \n      setState(() {\n        // Bessere Fehlermeldungen f√ºr verschiedene Szenarien\n        if (e.toString().contains('bereits akzeptiert')) {\n          _joinError = 'Diese Einladung wurde bereits akzeptiert.';\n          _isJoined = true; // User ist bereits Mitglied\n        } else if (e.toString().contains('nicht f√ºr deine E-Mail-Adresse')) {\n          _joinError = 'Diese Einladung ist nicht f√ºr deine E-Mail-Adresse bestimmt.';\n        } else if (e.toString().contains('abgelaufen')) {\n          _joinError = 'Diese Einladung ist abgelaufen.';\n        } else {\n          _joinError = 'Ein Fehler ist aufgetreten: ${e.toString().replaceAll('Exception: ', '')}';\n        }\n      });\n    } finally {\n      setState(() {\n        _isJoining = false;\n      });\n    }\n  }\n  \n  Future<void> _preRegisterWorld() async {\n    final world = _world;\n    if (world == null) return;\n\n    setState(() {\n      _isPreRegistering = true;\n      _joinError = null;\n    });\n\n    try {\n      final success = await _worldService.preRegisterWorldAuthenticated(world.id);\n      \n      if (success) {\n        setState(() {\n          _isPreRegistered = true;\n        });\n        \n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Erfolgreich f√ºr ${world.name} vorregistriert!'),\n              backgroundColor: Colors.green,\n            ),\n          );\n        }\n      } else {\n        setState(() {\n          _joinError = 'Fehler bei der Vorregistrierung';\n        });\n      }\n    } catch (e) {\n      setState(() {\n        _joinError = e.toString().replaceAll('Exception: ', '');\n      });\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isPreRegistering = false;\n        });\n      }\n    }\n  }\n  \n  Future<void> _cancelPreRegistration() async {\n    final world = _world;\n    if (world == null) return;\n\n    setState(() {\n      _isPreRegistering = true;\n      _joinError = null;\n    });\n\n    try {\n      final success = await _worldService.cancelPreRegistrationAuthenticated(world.id);\n      if (success) {\n        setState(() {\n          _isPreRegistered = false;\n        });\n        \n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Vorregistrierung f√ºr ${world.name} zur√ºckgezogen.'),\n              backgroundColor: Colors.orange,\n            ),\n          );\n        }\n      } else {\n        setState(() {\n          _joinError = 'Fehler beim Zur√ºckziehen der Vorregistrierung';\n        });\n      }\n    } catch (e) {\n      setState(() {\n        _joinError = e.toString().replaceAll('Exception: ', '');\n      });\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isPreRegistering = false;\n        });\n      }\n    }\n  }\n  \n  Future<void> _leaveWorld() async {\n    final world = _world;\n    if (world == null) return;\n    \n    // Best√§tigungsdialog anzeigen\n    final confirmed = await showDialog<bool>(\n      context: context,\n      builder: (context) => AlertDialog(\n        title: const Text('Welt verlassen?'),\n        content: Text('M√∂chtest du die Welt ",
    "suggested_key": "worldBeigetretenScaffoldmessengerofcontextshowsnackbarSnackbar",
    "context": "final message = widget.inviteToken != null \n            ? 'Einladung akzeptiert! Willkommen in der Welt \"${_world!.name}\"!'\n            : 'Erfolgreich der Welt \"${_world!.name}\" beigetreten!';\n            \n          ScaffoldMessenger.of(context).showSnackBar(",
    "category": "world",
    "confidence": 0.9
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 600,
    "column": 59,
    "original": " wirklich verlassen?'),\n        actions: [\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(false),\n            child: const Text('Abbrechen'),\n          ),\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(true),\n            style: TextButton.styleFrom(\n              foregroundColor: Colors.red,\n            ),\n            child: const Text('Verlassen'),\n          ),\n        ],\n      ),\n    );\n    \n    if (confirmed != true) return;\n\n    setState(() {\n      _isJoining = true;\n      _joinError = null;\n    });\n\n    try {\n      await _worldService.leaveWorld(world.id);\n      setState(() {\n        _isJoined = false;\n      });\n      \n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text('Du hast ${world.name} verlassen.'),\n            backgroundColor: Colors.orange,\n          ),\n        );\n      }\n    } catch (e) {\n      setState(() {\n        _joinError = e.toString().replaceAll('Exception: ', '');\n      });\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isJoining = false;\n        });\n      }\n    }\n  }\n  \n  void _playWorld() {\n    final world = _world;\n    if (world == null) return;\n    // Navigate directly to world dashboard for playing\n    context.goNamed('world-dashboard', pathParameters: {'id': world.id.toString()});\n  }\n\n  // Welt-Status bestimmen\n  String _getWorldStatusText() {\n    final world = _world;\n    if (world == null) return 'Unbekannt';\n    return world.statusText;\n  }\n\n  // Welt-Status-Farbe\n  Color _getWorldStatusColor() {\n    final world = _world;\n    if (world == null) return Colors.grey;\n    \n    switch (world.status) {\n      case WorldStatus.upcoming:\n        return Colors.orange;\n      case WorldStatus.open:\n        return Colors.green;\n      case WorldStatus.running:\n        return Colors.blue;\n      case WorldStatus.closed:\n        return Colors.red;\n      case WorldStatus.archived:\n        return Colors.grey;\n    }\n  }\n\n  // Kann der Benutzer beitreten?\n  // Retry-Funktion\n  Future<void> _retry() async {\n    await _loadWorldData();\n  }\n\n  // Navigation zu Registration mit vorausgef√ºllter E-Mail\n  void _navigateToRegistration(String email) {\n    AppLogger.app.i('üé´ Navigation zur Registration mit Invite-E-Mail', error: {'email': email});\n    \n    // FIXED: Invite-Token f√ºr Post-Auth-Redirect setzen\n    if (widget.inviteToken != null) {\n      _authService.setPendingInviteRedirect(widget.inviteToken!);\n    }\n    \n    context.goNamed('register', queryParameters: {'email': email, 'invite_token': widget.inviteToken});\n  }\n\n  // Navigation zu Login \n  void _navigateToLogin(String email) {\n    AppLogger.app.i('üé´ Navigation zum Login f√ºr Invite', error: {'email': email});\n    \n    // FIXED: Invite-Token f√ºr Post-Auth-Redirect setzen\n    if (widget.inviteToken != null) {\n      _authService.setPendingInviteRedirect(widget.inviteToken!);\n    }\n    \n    context.goNamed('login', queryParameters: {'invite_token': widget.inviteToken});\n  }\n\n  // User abmelden und zur Registration weiterleiten\n  Future<void> _logout() async {\n    try {\n      AppLogger.app.i('üé´ User logout f√ºr Invite-Umleitung', error: {'inviteEmail': _inviteEmail});\n      \n      // FIXED: Invite-Token f√ºr Post-Auth-Redirect setzen BEVOR logout\n      if (widget.inviteToken != null) {\n        _authService.setPendingInviteRedirect(widget.inviteToken!);\n      }\n      \n      await _authService.logout();\n      \n      if (mounted && _inviteEmail != null) {\n        // Nach Logout zur Registration mit korrekter E-Mail\n        context.goNamed('register', queryParameters: {\n          'email': _inviteEmail!,\n          'invite_token': widget.inviteToken ?? ''\n        });\n      }\n    } catch (e) {\n      AppLogger.logError('Logout f√ºr Invite fehlgeschlagen', e);\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          const SnackBar(\n            content: Text('Fehler beim Abmelden'),\n            backgroundColor: Colors.red,\n          ),\n        );\n      }\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    \n    return Scaffold(\n      body: BackgroundWidget(\n        child: Stack(\n          children: [\n            // Main content\n            SafeArea(\n              child: _isLoading\n                  ? const Center(\n                      child: CircularProgressIndicator(\n                        valueColor: AlwaysStoppedAnimation<Color>(AppTheme.primaryColor),\n                      ),\n                    )\n                  : _errorMessage != null\n                      ? _buildErrorState()\n                      : _infoMessage != null\n                          ? _buildInfoState()\n                          : _world == null\n                              ? _buildNotFoundState()\n                              : _buildWorldContent(),\n            ),\n            \n            // User info widget (only show when authenticated)\n            if (_isAuthenticated)\n              const UserInfoWidget(),\n            \n            // Navigation widget (only show when authenticated)\n            if (_isAuthenticated)\n              NavigationWidget(\n                currentRoute: 'world-join',\n                routeParams: {'id': widget.worldId},\n                isJoinedWorld: _isJoined,\n              ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildErrorState() {\n    return Center(\n      child: Padding(\n        padding: const EdgeInsets.all(24.0),\n        child: Center(\n          child: ConstrainedBox(\n            constraints: const BoxConstraints(maxWidth: 500),\n            child: Card(\n              elevation: 12,\n              color: const Color(0xFF1A1A1A), // Dunkle Karte\n              shape: RoundedRectangleBorder(\n                borderRadius: BorderRadius.circular(20),\n                side: BorderSide(\n                  color: AppTheme.primaryColor.withOpacity(0.3),\n                  width: 1,\n                ),\n              ),\n              child: Container(\n                decoration: BoxDecoration(\n                  borderRadius: BorderRadius.circular(20),\n                  gradient: const LinearGradient(\n                    begin: Alignment.topLeft,\n                    end: Alignment.bottomRight,\n                    colors: [\n                      Color(0xFF1A1A1A),\n                      Color(0xFF2A2A2A),\n                    ],\n                  ),\n                ),\n                child: Padding(\n                  padding: const EdgeInsets.all(32.0),\n                  child: Column(\n                    mainAxisSize: MainAxisSize.min,\n                    children: [\n                      Icon(\n                        Icons.error_outline,\n                        size: 80,\n                        color: Colors.red[400],\n                      ),\n                      const SizedBox(height: 24),\n                      Text(\n                        'Fehler beim Laden',\n                        style: Theme.of(context).textTheme.headlineSmall?.copyWith(\n                          color: Colors.white,\n                          fontWeight: FontWeight.bold,\n                        ),\n                      ),\n                      const SizedBox(height: 16),\n                      Text(\n                        _errorMessage ?? 'Unbekannter Fehler',\n                        style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                          color: Colors.grey[300],\n                        ),\n                        textAlign: TextAlign.center,\n                      ),\n                      const SizedBox(height: 32),\n                      \n                      // Verschiedene Action-Buttons je nach Szenario\n                      if (_showRegistrationButton && _inviteEmail != null) ...[\n                        // Registration Button f√ºr neuen User\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: ElevatedButton.icon(\n                            onPressed: () => _navigateToRegistration(_inviteEmail!),\n                            icon: const Icon(Icons.person_add),\n                            label: const Text('Jetzt registrieren'),\n                            style: ElevatedButton.styleFrom(\n                              backgroundColor: AppTheme.primaryColor,\n                              foregroundColor: Colors.white,\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                        const SizedBox(height: 12),\n                        // Login Button als Alternative\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: OutlinedButton.icon(\n                            onPressed: () => _navigateToLogin(_inviteEmail!),\n                            icon: const Icon(Icons.login),\n                            label: const Text('Bereits registriert? Anmelden'),\n                            style: OutlinedButton.styleFrom(\n                              foregroundColor: AppTheme.primaryColor,\n                              side: BorderSide(color: AppTheme.primaryColor),\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                      ] else if (_showLogoutButton && _inviteEmail != null) ...[\n                        // Logout Button f√ºr falschen User\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: ElevatedButton.icon(\n                            onPressed: _logout,\n                            icon: const Icon(Icons.logout),\n                            label: const Text('Abmelden & neu registrieren'),\n                            style: ElevatedButton.styleFrom(\n                              backgroundColor: Colors.orange,\n                              foregroundColor: Colors.white,\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                        const SizedBox(height: 12),\n                        // Abbrechen Button\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: OutlinedButton.icon(\n                            onPressed: () => context.goNamed('landing'),\n                            icon: const Icon(Icons.arrow_back),\n                            label: const Text('Zur√ºck zur Startseite'),\n                            style: OutlinedButton.styleFrom(\n                              foregroundColor: Colors.grey,\n                              side: BorderSide(color: Colors.grey),\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                      ] else ...[\n                        // Standard Retry Button\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: ElevatedButton.icon(\n                            onPressed: _retry,\n                            icon: const Icon(Icons.refresh),\n                            label: const Text('Erneut versuchen'),\n                            style: ElevatedButton.styleFrom(\n                              backgroundColor: AppTheme.primaryColor,\n                              foregroundColor: Colors.white,\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                      ],\n                      const SizedBox(height: 16),\n                      TextButton(\n                        onPressed: () => context.goNamed('world-list'),\n                        child: const Text(\n                          'Zur√ºck zu den Welten',\n                          style: TextStyle(\n                            color: AppTheme.primaryColor,\n                            fontWeight: FontWeight.bold,\n                          ),\n                        ),\n                      ),\n                    ],\n                  ),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n\n  Widget _buildInfoState() {\n    return Center(\n      child: Padding(\n        padding: const EdgeInsets.all(24.0),\n        child: Center(\n          child: ConstrainedBox(\n            constraints: const BoxConstraints(maxWidth: 500),\n            child: Card(\n              elevation: 12,\n              color: const Color(0xFF1A1A1A), // Dunkle Karte\n              shape: RoundedRectangleBorder(\n                borderRadius: BorderRadius.circular(20),\n                side: BorderSide(\n                  color: AppTheme.primaryColor.withOpacity(0.3),\n                  width: 1,\n                ),\n              ),\n              child: Container(\n                decoration: BoxDecoration(\n                  borderRadius: BorderRadius.circular(20),\n                  gradient: const LinearGradient(\n                    begin: Alignment.topLeft,\n                    end: Alignment.bottomRight,\n                    colors: [\n                      Color(0xFF1A1A1A),\n                      Color(0xFF2A2A2A),\n                    ],\n                  ),\n                ),\n                child: Padding(\n                  padding: const EdgeInsets.all(32.0),\n                  child: Column(\n                    mainAxisSize: MainAxisSize.min,\n                    children: [\n                      Icon(\n                        Icons.info_outline,\n                        size: 80,\n                        color: Colors.blue[400],\n                      ),\n                      const SizedBox(height: 24),\n                      Text(\n                        'Information',\n                        style: Theme.of(context).textTheme.headlineSmall?.copyWith(\n                          color: Colors.white,\n                          fontWeight: FontWeight.bold,\n                        ),\n                      ),\n                      const SizedBox(height: 16),\n                      Text(\n                        _infoMessage ?? 'Keine Information verf√ºgbar',\n                        style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                          color: Colors.grey[300],\n                        ),\n                        textAlign: TextAlign.center,\n                      ),\n                      const SizedBox(height: 32),\n                      \n                      // **NEUE INTELLIGENTE BUTTONS**\n                      _buildActionButtons(),\n                      \n                      // **INVITE-FLOWS: Kein ",
    "suggested_key": "worldWirklichVerlassenActions",
    "context": "builder: (context) => AlertDialog(\n        title: const Text('Welt verlassen?'),\n        content: Text('M√∂chtest du die Welt \"${world.name}\" wirklich verlassen?'),\n        actions: [\n          TextButton(",
    "category": "world",
    "confidence": 0.9
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 281,
    "column": 87,
    "original": " $actionTypeText.$validityText';\n    \n    // Je nach Status unterschiedliche Logik\n    switch (status) {\n      case 'not_logged_in':\n        if (requiresAction == 'register') {\n          // Mail ist unbekannt -> nur Register\n          actionText = 'Du musst dich mit der E-Mail-Adresse $inviteEmail registrieren.';\n          infoText = '$baseInfoText\\n\\n$actionText';\n          showRegisterButton = isInviteValid; // Nur bei g√ºltigen Invites\n        }\n        break;\n        \n      case 'user_exists_not_logged_in':\n        if (requiresAction == 'login') {\n          // Mail ist bekannt, User nicht angemeldet -> nur Login\n          actionText = 'Dein Account mit $inviteEmail ist bereits registriert. Bitte melde dich an.';\n          infoText = '$baseInfoText\\n\\n$actionText';\n          showLoginButton = isInviteValid; // Nur bei g√ºltigen Invites\n        }\n        break;\n        \n      case 'wrong_email':\n        if (requiresAction == 'logout_and_register') {\n          final currentUserEmail = userStatusData['currentUser']?['email'];\n          // User mit falscher Mail angemeldet -> Logout + Register\n          actionText = 'Diese Einladung ist f√ºr $inviteEmail bestimmt, aber du bist als $currentUserEmail angemeldet.';\n          infoText = '$baseInfoText\\n\\n$actionText\\n\\nBitte melde dich ab und registriere dich mit der richtigen E-Mail-Adresse.';\n          showLogoutButton = isInviteValid; // Nur bei g√ºltigen Invites\n        }\n        break;\n        \n      case 'correct_email':\n        if (requiresAction == 'join_world') {\n          // User richtig angemeldet -> nur Accept Button (KEIN Auto-Accept!)\n          actionText = 'Du bist mit der richtigen E-Mail-Adresse angemeldet und kannst die Einladung jetzt annehmen.';\n          infoText = '$baseInfoText\\n\\n$actionText';\n          showAcceptButton = isInviteValid; // Nur bei g√ºltigen Invites\n          \n          // Auto-Accept entfernt: User soll bewusst entscheiden!\n        }\n        break;\n        \n      default:\n        AppLogger.app.w('‚ùå Unbekannter User-Status: $status');\n        actionText = 'Unbekannter Status: $status';\n        infoText = '$baseInfoText\\n\\n$actionText';\n    }\n    \n    // Bei ung√ºltigen Invites zus√§tzliche Info\n    if (!isInviteValid) {\n      infoText += '\\n\\n‚ö†Ô∏è Diese Einladung kann nicht mehr verwendet werden.';\n    }\n    \n    setState(() {\n      _infoMessage = infoText;\n      _inviteEmail = inviteEmail;\n      \n      // Button-Flags setzen\n      _showLoginButton = showLoginButton;\n      _showRegistrationButton = showRegisterButton; \n      _showLogoutButton = showLogoutButton;\n      _showAcceptInviteButton = showAcceptButton;\n      \n      // WICHTIG: Alte Fehlermeldung zur√ºcksetzen!\n      _errorMessage = null;\n      \n      _isLoading = false;\n    });\n  }\n\n  // Neue Methode: World-Status f√ºr normale Navigation pr√ºfen\n  Future<void> _checkWorldStatus() async {\n    if (_world == null) return;\n    \n    try {\n      // Pr√ºfe ob User bereits Mitglied ist\n      _isJoined = await _worldService.isPlayerInWorld(_world!.id);\n      \n      // Pr√ºfe Vorregistrierung\n      final preRegStatus = await _worldService.getPreRegistrationStatus(_world!.id);\n      _isPreRegistered = preRegStatus.isPreRegistered;\n      \n      AppLogger.app.d('‚úÖ World-Status gepr√ºft', error: {\n        'worldName': _world!.name,\n        'isJoined': _isJoined,\n        'isPreRegistered': _isPreRegistered\n      });\n    } catch (e) {\n      AppLogger.logError('Fehler beim Pr√ºfen des World-Status', e);\n    }\n  }\n\n  // Neue Methode: Automatische Invite-Akzeptierung\n  Future<void> _autoAcceptInvite() async {\n    if (widget.inviteToken == null) return;\n    \n    try {\n      final result = await _worldService.acceptInvite(widget.inviteToken!);\n      \n      if (result != null) {\n        setState(() {\n          _isJoined = true;\n          _infoMessage = 'Willkommen in der Welt ",
    "suggested_key": "worldActiontypetextvaliditytextJeNach",
    "context": "}\n    \n    final baseInfoText = 'Du wurdest von $inviterText eingeladen, der Welt \"$worldName\" $actionTypeText.$validityText';\n    \n    // Je nach Status unterschiedliche Logik",
    "category": "world",
    "confidence": 0.9
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 384,
    "column": 66,
    "original": "! Das Invite wurde automatisch akzeptiert.';\n        });\n        \n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Erfolgreich der Welt ",
    "suggested_key": "worldDasInviteWurde",
    "context": "setState(() {\n          _isJoined = true;\n          _infoMessage = 'Willkommen in der Welt \"${_world?.name}\"! Das Invite wurde automatisch akzeptiert.';\n        });",
    "category": "world",
    "confidence": 0.9
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 398,
    "column": 55,
    "original": " ist KEIN Fehler!\n      if (e.toString().contains('Invite bereits akzeptiert')) {\n        setState(() {\n          _isJoined = true;\n          _infoMessage = 'Du bist bereits Mitglied dieser Welt ",
    "suggested_key": "worldIstKeinFehler",
    "context": "}\n    } catch (e) {\n      // SPEZIALBEHANDLUNG: \"Invite bereits akzeptiert\" ist KEIN Fehler!\n      if (e.toString().contains('Invite bereits akzeptiert')) {\n        setState(() {",
    "category": "world",
    "confidence": 0.9
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 402,
    "column": 80,
    "original": "!';\n        });\n        \n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Du bist bereits Mitglied der Welt ",
    "suggested_key": "worldIfMountedScaffoldmessengerofcontextshowsnackbar",
    "context": "setState(() {\n          _isJoined = true;\n          _infoMessage = 'Du bist bereits Mitglied dieser Welt \"${_world?.name}\"!';\n        });",
    "category": "world",
    "confidence": 0.9
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 408,
    "column": 80,
    "original": "!'),\n              backgroundColor: Colors.orange,\n              duration: const Duration(seconds: 3),\n            ),\n          );\n        }\n        return; // Erfolgreicher Exit\n      }\n      \n      // Andere Fehler normal behandeln\n      AppLogger.logError('Automatische Invite-Akzeptierung fehlgeschlagen', e);\n      // Fehler nicht als kritisch behandeln - User kann manuell beitreten\n      setState(() {\n        _infoMessage = 'Du kannst nun der Welt beitreten.';\n      });\n    }\n  }\n\n  Future<void> _joinWorld() async {\n    if (_world == null) return;\n\n    setState(() {\n      _isJoining = true;\n      _joinError = null;\n    });\n\n    try {\n      bool success = false;\n      \n      // **INVITE-TOKEN FLOW: Invite akzeptieren**\n      if (widget.inviteToken != null) {\n        AppLogger.app.i('üé´ Versuche Invite-Akzeptierung f√ºr World-Join');\n        final inviteResult = await _worldService.acceptInvite(widget.inviteToken!);\n        \n        if (inviteResult != null) {\n          success = true;\n          AppLogger.app.i('‚úÖ Invite erfolgreich akzeptiert', error: {\n            'worldId': _world!.id,\n            'worldName': _world!.name\n          });\n        }\n      } else {\n        // **NORMALE NAVIGATION: Standard World-Join**\n        AppLogger.app.i('üåç Versuche normalen World-Join');\n        success = await _worldService.joinWorld(_world!.id);\n      }\n      \n      if (success) {\n        setState(() {\n          _isJoined = true;\n        });\n        \n        if (mounted) {\n          final message = widget.inviteToken != null \n            ? 'Einladung akzeptiert! Willkommen in der Welt ",
    "suggested_key": "worldBackgroundcolorColorsorangeDuration",
    "context": "ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Du bist bereits Mitglied der Welt \"${_world?.name}\"!'),\n              backgroundColor: Colors.orange,\n              duration: const Duration(seconds: 3),",
    "category": "world",
    "confidence": 0.9
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 462,
    "column": 77,
    "original": "!'\n            : 'Erfolgreich der Welt ",
    "suggested_key": "worldErfolgreichDerWelt",
    "context": "if (mounted) {\n          final message = widget.inviteToken != null \n            ? 'Einladung akzeptiert! Willkommen in der Welt \"${_world!.name}\"!'\n            : 'Erfolgreich der Welt \"${_world!.name}\" beigetreten!';",
    "category": "world",
    "confidence": 0.9
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 463,
    "column": 53,
    "original": " beigetreten!';\n            \n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text(message),\n              backgroundColor: Colors.green,\n              duration: const Duration(seconds: 3),\n            ),\n          );\n        }\n      } else {\n        setState(() {\n          _joinError = 'Beitritt fehlgeschlagen. Versuche es erneut.';\n        });\n      }\n    } catch (e) {\n      AppLogger.logError('World Join fehlgeschlagen', e, context: {\n        'worldId': _world?.id,\n        'worldName': _world?.name,\n        'hasInviteToken': widget.inviteToken != null,\n        'inviteToken': widget.inviteToken?.substring(0, 8)\n      });\n      \n      setState(() {\n        // Bessere Fehlermeldungen f√ºr verschiedene Szenarien\n        if (e.toString().contains('bereits akzeptiert')) {\n          _joinError = 'Diese Einladung wurde bereits akzeptiert.';\n          _isJoined = true; // User ist bereits Mitglied\n        } else if (e.toString().contains('nicht f√ºr deine E-Mail-Adresse')) {\n          _joinError = 'Diese Einladung ist nicht f√ºr deine E-Mail-Adresse bestimmt.';\n        } else if (e.toString().contains('abgelaufen')) {\n          _joinError = 'Diese Einladung ist abgelaufen.';\n        } else {\n          _joinError = 'Ein Fehler ist aufgetreten: ${e.toString().replaceAll('Exception: ', '')}';\n        }\n      });\n    } finally {\n      setState(() {\n        _isJoining = false;\n      });\n    }\n  }\n  \n  Future<void> _preRegisterWorld() async {\n    final world = _world;\n    if (world == null) return;\n\n    setState(() {\n      _isPreRegistering = true;\n      _joinError = null;\n    });\n\n    try {\n      final success = await _worldService.preRegisterWorldAuthenticated(world.id);\n      \n      if (success) {\n        setState(() {\n          _isPreRegistered = true;\n        });\n        \n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Erfolgreich f√ºr ${world.name} vorregistriert!'),\n              backgroundColor: Colors.green,\n            ),\n          );\n        }\n      } else {\n        setState(() {\n          _joinError = 'Fehler bei der Vorregistrierung';\n        });\n      }\n    } catch (e) {\n      setState(() {\n        _joinError = e.toString().replaceAll('Exception: ', '');\n      });\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isPreRegistering = false;\n        });\n      }\n    }\n  }\n  \n  Future<void> _cancelPreRegistration() async {\n    final world = _world;\n    if (world == null) return;\n\n    setState(() {\n      _isPreRegistering = true;\n      _joinError = null;\n    });\n\n    try {\n      final success = await _worldService.cancelPreRegistrationAuthenticated(world.id);\n      if (success) {\n        setState(() {\n          _isPreRegistered = false;\n        });\n        \n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Vorregistrierung f√ºr ${world.name} zur√ºckgezogen.'),\n              backgroundColor: Colors.orange,\n            ),\n          );\n        }\n      } else {\n        setState(() {\n          _joinError = 'Fehler beim Zur√ºckziehen der Vorregistrierung';\n        });\n      }\n    } catch (e) {\n      setState(() {\n        _joinError = e.toString().replaceAll('Exception: ', '');\n      });\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isPreRegistering = false;\n        });\n      }\n    }\n  }\n  \n  Future<void> _leaveWorld() async {\n    final world = _world;\n    if (world == null) return;\n    \n    // Best√§tigungsdialog anzeigen\n    final confirmed = await showDialog<bool>(\n      context: context,\n      builder: (context) => AlertDialog(\n        title: const Text('Welt verlassen?'),\n        content: Text('M√∂chtest du die Welt ",
    "suggested_key": "worldBeigetretenScaffoldmessengerofcontextshowsnackbarSnackbar",
    "context": "final message = widget.inviteToken != null \n            ? 'Einladung akzeptiert! Willkommen in der Welt \"${_world!.name}\"!'\n            : 'Erfolgreich der Welt \"${_world!.name}\" beigetreten!';\n            \n          ScaffoldMessenger.of(context).showSnackBar(",
    "category": "world",
    "confidence": 0.9
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 600,
    "column": 59,
    "original": " wirklich verlassen?'),\n        actions: [\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(false),\n            child: const Text('Abbrechen'),\n          ),\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(true),\n            style: TextButton.styleFrom(\n              foregroundColor: Colors.red,\n            ),\n            child: const Text('Verlassen'),\n          ),\n        ],\n      ),\n    );\n    \n    if (confirmed != true) return;\n\n    setState(() {\n      _isJoining = true;\n      _joinError = null;\n    });\n\n    try {\n      await _worldService.leaveWorld(world.id);\n      setState(() {\n        _isJoined = false;\n      });\n      \n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text('Du hast ${world.name} verlassen.'),\n            backgroundColor: Colors.orange,\n          ),\n        );\n      }\n    } catch (e) {\n      setState(() {\n        _joinError = e.toString().replaceAll('Exception: ', '');\n      });\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isJoining = false;\n        });\n      }\n    }\n  }\n  \n  void _playWorld() {\n    final world = _world;\n    if (world == null) return;\n    // Navigate directly to world dashboard for playing\n    context.goNamed('world-dashboard', pathParameters: {'id': world.id.toString()});\n  }\n\n  // Welt-Status bestimmen\n  String _getWorldStatusText() {\n    final world = _world;\n    if (world == null) return 'Unbekannt';\n    return world.statusText;\n  }\n\n  // Welt-Status-Farbe\n  Color _getWorldStatusColor() {\n    final world = _world;\n    if (world == null) return Colors.grey;\n    \n    switch (world.status) {\n      case WorldStatus.upcoming:\n        return Colors.orange;\n      case WorldStatus.open:\n        return Colors.green;\n      case WorldStatus.running:\n        return Colors.blue;\n      case WorldStatus.closed:\n        return Colors.red;\n      case WorldStatus.archived:\n        return Colors.grey;\n    }\n  }\n\n  // Kann der Benutzer beitreten?\n  // Retry-Funktion\n  Future<void> _retry() async {\n    await _loadWorldData();\n  }\n\n  // Navigation zu Registration mit vorausgef√ºllter E-Mail\n  void _navigateToRegistration(String email) {\n    AppLogger.app.i('üé´ Navigation zur Registration mit Invite-E-Mail', error: {'email': email});\n    \n    // FIXED: Invite-Token f√ºr Post-Auth-Redirect setzen\n    if (widget.inviteToken != null) {\n      _authService.setPendingInviteRedirect(widget.inviteToken!);\n    }\n    \n    context.goNamed('register', queryParameters: {'email': email, 'invite_token': widget.inviteToken});\n  }\n\n  // Navigation zu Login \n  void _navigateToLogin(String email) {\n    AppLogger.app.i('üé´ Navigation zum Login f√ºr Invite', error: {'email': email});\n    \n    // FIXED: Invite-Token f√ºr Post-Auth-Redirect setzen\n    if (widget.inviteToken != null) {\n      _authService.setPendingInviteRedirect(widget.inviteToken!);\n    }\n    \n    context.goNamed('login', queryParameters: {'invite_token': widget.inviteToken});\n  }\n\n  // User abmelden und zur Registration weiterleiten\n  Future<void> _logout() async {\n    try {\n      AppLogger.app.i('üé´ User logout f√ºr Invite-Umleitung', error: {'inviteEmail': _inviteEmail});\n      \n      // FIXED: Invite-Token f√ºr Post-Auth-Redirect setzen BEVOR logout\n      if (widget.inviteToken != null) {\n        _authService.setPendingInviteRedirect(widget.inviteToken!);\n      }\n      \n      await _authService.logout();\n      \n      if (mounted && _inviteEmail != null) {\n        // Nach Logout zur Registration mit korrekter E-Mail\n        context.goNamed('register', queryParameters: {\n          'email': _inviteEmail!,\n          'invite_token': widget.inviteToken ?? ''\n        });\n      }\n    } catch (e) {\n      AppLogger.logError('Logout f√ºr Invite fehlgeschlagen', e);\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          const SnackBar(\n            content: Text('Fehler beim Abmelden'),\n            backgroundColor: Colors.red,\n          ),\n        );\n      }\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    \n    return Scaffold(\n      body: BackgroundWidget(\n        child: Stack(\n          children: [\n            // Main content\n            SafeArea(\n              child: _isLoading\n                  ? const Center(\n                      child: CircularProgressIndicator(\n                        valueColor: AlwaysStoppedAnimation<Color>(AppTheme.primaryColor),\n                      ),\n                    )\n                  : _errorMessage != null\n                      ? _buildErrorState()\n                      : _infoMessage != null\n                          ? _buildInfoState()\n                          : _world == null\n                              ? _buildNotFoundState()\n                              : _buildWorldContent(),\n            ),\n            \n            // User info widget (only show when authenticated)\n            if (_isAuthenticated)\n              const UserInfoWidget(),\n            \n            // Navigation widget (only show when authenticated)\n            if (_isAuthenticated)\n              NavigationWidget(\n                currentRoute: 'world-join',\n                routeParams: {'id': widget.worldId},\n                isJoinedWorld: _isJoined,\n              ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildErrorState() {\n    return Center(\n      child: Padding(\n        padding: const EdgeInsets.all(24.0),\n        child: Center(\n          child: ConstrainedBox(\n            constraints: const BoxConstraints(maxWidth: 500),\n            child: Card(\n              elevation: 12,\n              color: const Color(0xFF1A1A1A), // Dunkle Karte\n              shape: RoundedRectangleBorder(\n                borderRadius: BorderRadius.circular(20),\n                side: BorderSide(\n                  color: AppTheme.primaryColor.withOpacity(0.3),\n                  width: 1,\n                ),\n              ),\n              child: Container(\n                decoration: BoxDecoration(\n                  borderRadius: BorderRadius.circular(20),\n                  gradient: const LinearGradient(\n                    begin: Alignment.topLeft,\n                    end: Alignment.bottomRight,\n                    colors: [\n                      Color(0xFF1A1A1A),\n                      Color(0xFF2A2A2A),\n                    ],\n                  ),\n                ),\n                child: Padding(\n                  padding: const EdgeInsets.all(32.0),\n                  child: Column(\n                    mainAxisSize: MainAxisSize.min,\n                    children: [\n                      Icon(\n                        Icons.error_outline,\n                        size: 80,\n                        color: Colors.red[400],\n                      ),\n                      const SizedBox(height: 24),\n                      Text(\n                        'Fehler beim Laden',\n                        style: Theme.of(context).textTheme.headlineSmall?.copyWith(\n                          color: Colors.white,\n                          fontWeight: FontWeight.bold,\n                        ),\n                      ),\n                      const SizedBox(height: 16),\n                      Text(\n                        _errorMessage ?? 'Unbekannter Fehler',\n                        style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                          color: Colors.grey[300],\n                        ),\n                        textAlign: TextAlign.center,\n                      ),\n                      const SizedBox(height: 32),\n                      \n                      // Verschiedene Action-Buttons je nach Szenario\n                      if (_showRegistrationButton && _inviteEmail != null) ...[\n                        // Registration Button f√ºr neuen User\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: ElevatedButton.icon(\n                            onPressed: () => _navigateToRegistration(_inviteEmail!),\n                            icon: const Icon(Icons.person_add),\n                            label: const Text('Jetzt registrieren'),\n                            style: ElevatedButton.styleFrom(\n                              backgroundColor: AppTheme.primaryColor,\n                              foregroundColor: Colors.white,\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                        const SizedBox(height: 12),\n                        // Login Button als Alternative\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: OutlinedButton.icon(\n                            onPressed: () => _navigateToLogin(_inviteEmail!),\n                            icon: const Icon(Icons.login),\n                            label: const Text('Bereits registriert? Anmelden'),\n                            style: OutlinedButton.styleFrom(\n                              foregroundColor: AppTheme.primaryColor,\n                              side: BorderSide(color: AppTheme.primaryColor),\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                      ] else if (_showLogoutButton && _inviteEmail != null) ...[\n                        // Logout Button f√ºr falschen User\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: ElevatedButton.icon(\n                            onPressed: _logout,\n                            icon: const Icon(Icons.logout),\n                            label: const Text('Abmelden & neu registrieren'),\n                            style: ElevatedButton.styleFrom(\n                              backgroundColor: Colors.orange,\n                              foregroundColor: Colors.white,\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                        const SizedBox(height: 12),\n                        // Abbrechen Button\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: OutlinedButton.icon(\n                            onPressed: () => context.goNamed('landing'),\n                            icon: const Icon(Icons.arrow_back),\n                            label: const Text('Zur√ºck zur Startseite'),\n                            style: OutlinedButton.styleFrom(\n                              foregroundColor: Colors.grey,\n                              side: BorderSide(color: Colors.grey),\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                      ] else ...[\n                        // Standard Retry Button\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: ElevatedButton.icon(\n                            onPressed: _retry,\n                            icon: const Icon(Icons.refresh),\n                            label: const Text('Erneut versuchen'),\n                            style: ElevatedButton.styleFrom(\n                              backgroundColor: AppTheme.primaryColor,\n                              foregroundColor: Colors.white,\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                      ],\n                      const SizedBox(height: 16),\n                      TextButton(\n                        onPressed: () => context.goNamed('world-list'),\n                        child: const Text(\n                          'Zur√ºck zu den Welten',\n                          style: TextStyle(\n                            color: AppTheme.primaryColor,\n                            fontWeight: FontWeight.bold,\n                          ),\n                        ),\n                      ),\n                    ],\n                  ),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n\n  Widget _buildInfoState() {\n    return Center(\n      child: Padding(\n        padding: const EdgeInsets.all(24.0),\n        child: Center(\n          child: ConstrainedBox(\n            constraints: const BoxConstraints(maxWidth: 500),\n            child: Card(\n              elevation: 12,\n              color: const Color(0xFF1A1A1A), // Dunkle Karte\n              shape: RoundedRectangleBorder(\n                borderRadius: BorderRadius.circular(20),\n                side: BorderSide(\n                  color: AppTheme.primaryColor.withOpacity(0.3),\n                  width: 1,\n                ),\n              ),\n              child: Container(\n                decoration: BoxDecoration(\n                  borderRadius: BorderRadius.circular(20),\n                  gradient: const LinearGradient(\n                    begin: Alignment.topLeft,\n                    end: Alignment.bottomRight,\n                    colors: [\n                      Color(0xFF1A1A1A),\n                      Color(0xFF2A2A2A),\n                    ],\n                  ),\n                ),\n                child: Padding(\n                  padding: const EdgeInsets.all(32.0),\n                  child: Column(\n                    mainAxisSize: MainAxisSize.min,\n                    children: [\n                      Icon(\n                        Icons.info_outline,\n                        size: 80,\n                        color: Colors.blue[400],\n                      ),\n                      const SizedBox(height: 24),\n                      Text(\n                        'Information',\n                        style: Theme.of(context).textTheme.headlineSmall?.copyWith(\n                          color: Colors.white,\n                          fontWeight: FontWeight.bold,\n                        ),\n                      ),\n                      const SizedBox(height: 16),\n                      Text(\n                        _infoMessage ?? 'Keine Information verf√ºgbar',\n                        style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                          color: Colors.grey[300],\n                        ),\n                        textAlign: TextAlign.center,\n                      ),\n                      const SizedBox(height: 32),\n                      \n                      // **NEUE INTELLIGENTE BUTTONS**\n                      _buildActionButtons(),\n                      \n                      // **INVITE-FLOWS: Kein ",
    "suggested_key": "worldWirklichVerlassenActions",
    "context": "builder: (context) => AlertDialog(\n        title: const Text('Welt verlassen?'),\n        content: Text('M√∂chtest du die Welt \"${world.name}\" wirklich verlassen?'),\n        actions: [\n          TextButton(",
    "category": "world",
    "confidence": 0.9
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 281,
    "column": 87,
    "original": " $actionTypeText.$validityText';\n    \n    // Je nach Status unterschiedliche Logik\n    switch (status) {\n      case 'not_logged_in':\n        if (requiresAction == 'register') {\n          // Mail ist unbekannt -> nur Register\n          actionText = 'Du musst dich mit der E-Mail-Adresse $inviteEmail registrieren.';\n          infoText = '$baseInfoText\\n\\n$actionText';\n          showRegisterButton = isInviteValid; // Nur bei g√ºltigen Invites\n        }\n        break;\n        \n      case 'user_exists_not_logged_in':\n        if (requiresAction == 'login') {\n          // Mail ist bekannt, User nicht angemeldet -> nur Login\n          actionText = 'Dein Account mit $inviteEmail ist bereits registriert. Bitte melde dich an.';\n          infoText = '$baseInfoText\\n\\n$actionText';\n          showLoginButton = isInviteValid; // Nur bei g√ºltigen Invites\n        }\n        break;\n        \n      case 'wrong_email':\n        if (requiresAction == 'logout_and_register') {\n          final currentUserEmail = userStatusData['currentUser']?['email'];\n          // User mit falscher Mail angemeldet -> Logout + Register\n          actionText = 'Diese Einladung ist f√ºr $inviteEmail bestimmt, aber du bist als $currentUserEmail angemeldet.';\n          infoText = '$baseInfoText\\n\\n$actionText\\n\\nBitte melde dich ab und registriere dich mit der richtigen E-Mail-Adresse.';\n          showLogoutButton = isInviteValid; // Nur bei g√ºltigen Invites\n        }\n        break;\n        \n      case 'correct_email':\n        if (requiresAction == 'join_world') {\n          // User richtig angemeldet -> nur Accept Button (KEIN Auto-Accept!)\n          actionText = 'Du bist mit der richtigen E-Mail-Adresse angemeldet und kannst die Einladung jetzt annehmen.';\n          infoText = '$baseInfoText\\n\\n$actionText';\n          showAcceptButton = isInviteValid; // Nur bei g√ºltigen Invites\n          \n          // Auto-Accept entfernt: User soll bewusst entscheiden!\n        }\n        break;\n        \n      default:\n        AppLogger.app.w('‚ùå Unbekannter User-Status: $status');\n        actionText = 'Unbekannter Status: $status';\n        infoText = '$baseInfoText\\n\\n$actionText';\n    }\n    \n    // Bei ung√ºltigen Invites zus√§tzliche Info\n    if (!isInviteValid) {\n      infoText += '\\n\\n‚ö†Ô∏è Diese Einladung kann nicht mehr verwendet werden.';\n    }\n    \n    setState(() {\n      _infoMessage = infoText;\n      _inviteEmail = inviteEmail;\n      \n      // Button-Flags setzen\n      _showLoginButton = showLoginButton;\n      _showRegistrationButton = showRegisterButton; \n      _showLogoutButton = showLogoutButton;\n      _showAcceptInviteButton = showAcceptButton;\n      \n      // WICHTIG: Alte Fehlermeldung zur√ºcksetzen!\n      _errorMessage = null;\n      \n      _isLoading = false;\n    });\n  }\n\n  // Neue Methode: World-Status f√ºr normale Navigation pr√ºfen\n  Future<void> _checkWorldStatus() async {\n    if (_world == null) return;\n    \n    try {\n      // Pr√ºfe ob User bereits Mitglied ist\n      _isJoined = await _worldService.isPlayerInWorld(_world!.id);\n      \n      // Pr√ºfe Vorregistrierung\n      final preRegStatus = await _worldService.getPreRegistrationStatus(_world!.id);\n      _isPreRegistered = preRegStatus.isPreRegistered;\n      \n      AppLogger.app.d('‚úÖ World-Status gepr√ºft', error: {\n        'worldName': _world!.name,\n        'isJoined': _isJoined,\n        'isPreRegistered': _isPreRegistered\n      });\n    } catch (e) {\n      AppLogger.logError('Fehler beim Pr√ºfen des World-Status', e);\n    }\n  }\n\n  // Neue Methode: Automatische Invite-Akzeptierung\n  Future<void> _autoAcceptInvite() async {\n    if (widget.inviteToken == null) return;\n    \n    try {\n      final result = await _worldService.acceptInvite(widget.inviteToken!);\n      \n      if (result != null) {\n        setState(() {\n          _isJoined = true;\n          _infoMessage = 'Willkommen in der Welt ",
    "suggested_key": "worldActiontypetextvaliditytextJeNach",
    "context": "}\n    \n    final baseInfoText = 'Du wurdest von $inviterText eingeladen, der Welt \"$worldName\" $actionTypeText.$validityText';\n    \n    // Je nach Status unterschiedliche Logik",
    "category": "world",
    "confidence": 0.85
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 384,
    "column": 66,
    "original": "! Das Invite wurde automatisch akzeptiert.';\n        });\n        \n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Erfolgreich der Welt ",
    "suggested_key": "worldDasInviteWurde",
    "context": "setState(() {\n          _isJoined = true;\n          _infoMessage = 'Willkommen in der Welt \"${_world?.name}\"! Das Invite wurde automatisch akzeptiert.';\n        });",
    "category": "world",
    "confidence": 0.85
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 398,
    "column": 55,
    "original": " ist KEIN Fehler!\n      if (e.toString().contains('Invite bereits akzeptiert')) {\n        setState(() {\n          _isJoined = true;\n          _infoMessage = 'Du bist bereits Mitglied dieser Welt ",
    "suggested_key": "worldIstKeinFehler",
    "context": "}\n    } catch (e) {\n      // SPEZIALBEHANDLUNG: \"Invite bereits akzeptiert\" ist KEIN Fehler!\n      if (e.toString().contains('Invite bereits akzeptiert')) {\n        setState(() {",
    "category": "world",
    "confidence": 0.85
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 408,
    "column": 80,
    "original": "!'),\n              backgroundColor: Colors.orange,\n              duration: const Duration(seconds: 3),\n            ),\n          );\n        }\n        return; // Erfolgreicher Exit\n      }\n      \n      // Andere Fehler normal behandeln\n      AppLogger.logError('Automatische Invite-Akzeptierung fehlgeschlagen', e);\n      // Fehler nicht als kritisch behandeln - User kann manuell beitreten\n      setState(() {\n        _infoMessage = 'Du kannst nun der Welt beitreten.';\n      });\n    }\n  }\n\n  Future<void> _joinWorld() async {\n    if (_world == null) return;\n\n    setState(() {\n      _isJoining = true;\n      _joinError = null;\n    });\n\n    try {\n      bool success = false;\n      \n      // **INVITE-TOKEN FLOW: Invite akzeptieren**\n      if (widget.inviteToken != null) {\n        AppLogger.app.i('üé´ Versuche Invite-Akzeptierung f√ºr World-Join');\n        final inviteResult = await _worldService.acceptInvite(widget.inviteToken!);\n        \n        if (inviteResult != null) {\n          success = true;\n          AppLogger.app.i('‚úÖ Invite erfolgreich akzeptiert', error: {\n            'worldId': _world!.id,\n            'worldName': _world!.name\n          });\n        }\n      } else {\n        // **NORMALE NAVIGATION: Standard World-Join**\n        AppLogger.app.i('üåç Versuche normalen World-Join');\n        success = await _worldService.joinWorld(_world!.id);\n      }\n      \n      if (success) {\n        setState(() {\n          _isJoined = true;\n        });\n        \n        if (mounted) {\n          final message = widget.inviteToken != null \n            ? 'Einladung akzeptiert! Willkommen in der Welt ",
    "suggested_key": "worldBackgroundcolorColorsorangeDuration",
    "context": "ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Du bist bereits Mitglied der Welt \"${_world?.name}\"!'),\n              backgroundColor: Colors.orange,\n              duration: const Duration(seconds: 3),",
    "category": "world",
    "confidence": 0.85
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 462,
    "column": 77,
    "original": "!'\n            : 'Erfolgreich der Welt ",
    "suggested_key": "worldErfolgreichDerWelt",
    "context": "if (mounted) {\n          final message = widget.inviteToken != null \n            ? 'Einladung akzeptiert! Willkommen in der Welt \"${_world!.name}\"!'\n            : 'Erfolgreich der Welt \"${_world!.name}\" beigetreten!';",
    "category": "world",
    "confidence": 0.85
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 463,
    "column": 53,
    "original": " beigetreten!';\n            \n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text(message),\n              backgroundColor: Colors.green,\n              duration: const Duration(seconds: 3),\n            ),\n          );\n        }\n      } else {\n        setState(() {\n          _joinError = 'Beitritt fehlgeschlagen. Versuche es erneut.';\n        });\n      }\n    } catch (e) {\n      AppLogger.logError('World Join fehlgeschlagen', e, context: {\n        'worldId': _world?.id,\n        'worldName': _world?.name,\n        'hasInviteToken': widget.inviteToken != null,\n        'inviteToken': widget.inviteToken?.substring(0, 8)\n      });\n      \n      setState(() {\n        // Bessere Fehlermeldungen f√ºr verschiedene Szenarien\n        if (e.toString().contains('bereits akzeptiert')) {\n          _joinError = 'Diese Einladung wurde bereits akzeptiert.';\n          _isJoined = true; // User ist bereits Mitglied\n        } else if (e.toString().contains('nicht f√ºr deine E-Mail-Adresse')) {\n          _joinError = 'Diese Einladung ist nicht f√ºr deine E-Mail-Adresse bestimmt.';\n        } else if (e.toString().contains('abgelaufen')) {\n          _joinError = 'Diese Einladung ist abgelaufen.';\n        } else {\n          _joinError = 'Ein Fehler ist aufgetreten: ${e.toString().replaceAll('Exception: ', '')}';\n        }\n      });\n    } finally {\n      setState(() {\n        _isJoining = false;\n      });\n    }\n  }\n  \n  Future<void> _preRegisterWorld() async {\n    final world = _world;\n    if (world == null) return;\n\n    setState(() {\n      _isPreRegistering = true;\n      _joinError = null;\n    });\n\n    try {\n      final success = await _worldService.preRegisterWorldAuthenticated(world.id);\n      \n      if (success) {\n        setState(() {\n          _isPreRegistered = true;\n        });\n        \n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Erfolgreich f√ºr ${world.name} vorregistriert!'),\n              backgroundColor: Colors.green,\n            ),\n          );\n        }\n      } else {\n        setState(() {\n          _joinError = 'Fehler bei der Vorregistrierung';\n        });\n      }\n    } catch (e) {\n      setState(() {\n        _joinError = e.toString().replaceAll('Exception: ', '');\n      });\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isPreRegistering = false;\n        });\n      }\n    }\n  }\n  \n  Future<void> _cancelPreRegistration() async {\n    final world = _world;\n    if (world == null) return;\n\n    setState(() {\n      _isPreRegistering = true;\n      _joinError = null;\n    });\n\n    try {\n      final success = await _worldService.cancelPreRegistrationAuthenticated(world.id);\n      if (success) {\n        setState(() {\n          _isPreRegistered = false;\n        });\n        \n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Vorregistrierung f√ºr ${world.name} zur√ºckgezogen.'),\n              backgroundColor: Colors.orange,\n            ),\n          );\n        }\n      } else {\n        setState(() {\n          _joinError = 'Fehler beim Zur√ºckziehen der Vorregistrierung';\n        });\n      }\n    } catch (e) {\n      setState(() {\n        _joinError = e.toString().replaceAll('Exception: ', '');\n      });\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isPreRegistering = false;\n        });\n      }\n    }\n  }\n  \n  Future<void> _leaveWorld() async {\n    final world = _world;\n    if (world == null) return;\n    \n    // Best√§tigungsdialog anzeigen\n    final confirmed = await showDialog<bool>(\n      context: context,\n      builder: (context) => AlertDialog(\n        title: const Text('Welt verlassen?'),\n        content: Text('M√∂chtest du die Welt ",
    "suggested_key": "worldBeigetretenScaffoldmessengerofcontextshowsnackbarSnackbar",
    "context": "final message = widget.inviteToken != null \n            ? 'Einladung akzeptiert! Willkommen in der Welt \"${_world!.name}\"!'\n            : 'Erfolgreich der Welt \"${_world!.name}\" beigetreten!';\n            \n          ScaffoldMessenger.of(context).showSnackBar(",
    "category": "world",
    "confidence": 0.85
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 600,
    "column": 59,
    "original": " wirklich verlassen?'),\n        actions: [\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(false),\n            child: const Text('Abbrechen'),\n          ),\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(true),\n            style: TextButton.styleFrom(\n              foregroundColor: Colors.red,\n            ),\n            child: const Text('Verlassen'),\n          ),\n        ],\n      ),\n    );\n    \n    if (confirmed != true) return;\n\n    setState(() {\n      _isJoining = true;\n      _joinError = null;\n    });\n\n    try {\n      await _worldService.leaveWorld(world.id);\n      setState(() {\n        _isJoined = false;\n      });\n      \n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text('Du hast ${world.name} verlassen.'),\n            backgroundColor: Colors.orange,\n          ),\n        );\n      }\n    } catch (e) {\n      setState(() {\n        _joinError = e.toString().replaceAll('Exception: ', '');\n      });\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isJoining = false;\n        });\n      }\n    }\n  }\n  \n  void _playWorld() {\n    final world = _world;\n    if (world == null) return;\n    // Navigate directly to world dashboard for playing\n    context.goNamed('world-dashboard', pathParameters: {'id': world.id.toString()});\n  }\n\n  // Welt-Status bestimmen\n  String _getWorldStatusText() {\n    final world = _world;\n    if (world == null) return 'Unbekannt';\n    return world.statusText;\n  }\n\n  // Welt-Status-Farbe\n  Color _getWorldStatusColor() {\n    final world = _world;\n    if (world == null) return Colors.grey;\n    \n    switch (world.status) {\n      case WorldStatus.upcoming:\n        return Colors.orange;\n      case WorldStatus.open:\n        return Colors.green;\n      case WorldStatus.running:\n        return Colors.blue;\n      case WorldStatus.closed:\n        return Colors.red;\n      case WorldStatus.archived:\n        return Colors.grey;\n    }\n  }\n\n  // Kann der Benutzer beitreten?\n  // Retry-Funktion\n  Future<void> _retry() async {\n    await _loadWorldData();\n  }\n\n  // Navigation zu Registration mit vorausgef√ºllter E-Mail\n  void _navigateToRegistration(String email) {\n    AppLogger.app.i('üé´ Navigation zur Registration mit Invite-E-Mail', error: {'email': email});\n    \n    // FIXED: Invite-Token f√ºr Post-Auth-Redirect setzen\n    if (widget.inviteToken != null) {\n      _authService.setPendingInviteRedirect(widget.inviteToken!);\n    }\n    \n    context.goNamed('register', queryParameters: {'email': email, 'invite_token': widget.inviteToken});\n  }\n\n  // Navigation zu Login \n  void _navigateToLogin(String email) {\n    AppLogger.app.i('üé´ Navigation zum Login f√ºr Invite', error: {'email': email});\n    \n    // FIXED: Invite-Token f√ºr Post-Auth-Redirect setzen\n    if (widget.inviteToken != null) {\n      _authService.setPendingInviteRedirect(widget.inviteToken!);\n    }\n    \n    context.goNamed('login', queryParameters: {'invite_token': widget.inviteToken});\n  }\n\n  // User abmelden und zur Registration weiterleiten\n  Future<void> _logout() async {\n    try {\n      AppLogger.app.i('üé´ User logout f√ºr Invite-Umleitung', error: {'inviteEmail': _inviteEmail});\n      \n      // FIXED: Invite-Token f√ºr Post-Auth-Redirect setzen BEVOR logout\n      if (widget.inviteToken != null) {\n        _authService.setPendingInviteRedirect(widget.inviteToken!);\n      }\n      \n      await _authService.logout();\n      \n      if (mounted && _inviteEmail != null) {\n        // Nach Logout zur Registration mit korrekter E-Mail\n        context.goNamed('register', queryParameters: {\n          'email': _inviteEmail!,\n          'invite_token': widget.inviteToken ?? ''\n        });\n      }\n    } catch (e) {\n      AppLogger.logError('Logout f√ºr Invite fehlgeschlagen', e);\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          const SnackBar(\n            content: Text('Fehler beim Abmelden'),\n            backgroundColor: Colors.red,\n          ),\n        );\n      }\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    \n    return Scaffold(\n      body: BackgroundWidget(\n        child: Stack(\n          children: [\n            // Main content\n            SafeArea(\n              child: _isLoading\n                  ? const Center(\n                      child: CircularProgressIndicator(\n                        valueColor: AlwaysStoppedAnimation<Color>(AppTheme.primaryColor),\n                      ),\n                    )\n                  : _errorMessage != null\n                      ? _buildErrorState()\n                      : _infoMessage != null\n                          ? _buildInfoState()\n                          : _world == null\n                              ? _buildNotFoundState()\n                              : _buildWorldContent(),\n            ),\n            \n            // User info widget (only show when authenticated)\n            if (_isAuthenticated)\n              const UserInfoWidget(),\n            \n            // Navigation widget (only show when authenticated)\n            if (_isAuthenticated)\n              NavigationWidget(\n                currentRoute: 'world-join',\n                routeParams: {'id': widget.worldId},\n                isJoinedWorld: _isJoined,\n              ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildErrorState() {\n    return Center(\n      child: Padding(\n        padding: const EdgeInsets.all(24.0),\n        child: Center(\n          child: ConstrainedBox(\n            constraints: const BoxConstraints(maxWidth: 500),\n            child: Card(\n              elevation: 12,\n              color: const Color(0xFF1A1A1A), // Dunkle Karte\n              shape: RoundedRectangleBorder(\n                borderRadius: BorderRadius.circular(20),\n                side: BorderSide(\n                  color: AppTheme.primaryColor.withOpacity(0.3),\n                  width: 1,\n                ),\n              ),\n              child: Container(\n                decoration: BoxDecoration(\n                  borderRadius: BorderRadius.circular(20),\n                  gradient: const LinearGradient(\n                    begin: Alignment.topLeft,\n                    end: Alignment.bottomRight,\n                    colors: [\n                      Color(0xFF1A1A1A),\n                      Color(0xFF2A2A2A),\n                    ],\n                  ),\n                ),\n                child: Padding(\n                  padding: const EdgeInsets.all(32.0),\n                  child: Column(\n                    mainAxisSize: MainAxisSize.min,\n                    children: [\n                      Icon(\n                        Icons.error_outline,\n                        size: 80,\n                        color: Colors.red[400],\n                      ),\n                      const SizedBox(height: 24),\n                      Text(\n                        'Fehler beim Laden',\n                        style: Theme.of(context).textTheme.headlineSmall?.copyWith(\n                          color: Colors.white,\n                          fontWeight: FontWeight.bold,\n                        ),\n                      ),\n                      const SizedBox(height: 16),\n                      Text(\n                        _errorMessage ?? 'Unbekannter Fehler',\n                        style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                          color: Colors.grey[300],\n                        ),\n                        textAlign: TextAlign.center,\n                      ),\n                      const SizedBox(height: 32),\n                      \n                      // Verschiedene Action-Buttons je nach Szenario\n                      if (_showRegistrationButton && _inviteEmail != null) ...[\n                        // Registration Button f√ºr neuen User\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: ElevatedButton.icon(\n                            onPressed: () => _navigateToRegistration(_inviteEmail!),\n                            icon: const Icon(Icons.person_add),\n                            label: const Text('Jetzt registrieren'),\n                            style: ElevatedButton.styleFrom(\n                              backgroundColor: AppTheme.primaryColor,\n                              foregroundColor: Colors.white,\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                        const SizedBox(height: 12),\n                        // Login Button als Alternative\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: OutlinedButton.icon(\n                            onPressed: () => _navigateToLogin(_inviteEmail!),\n                            icon: const Icon(Icons.login),\n                            label: const Text('Bereits registriert? Anmelden'),\n                            style: OutlinedButton.styleFrom(\n                              foregroundColor: AppTheme.primaryColor,\n                              side: BorderSide(color: AppTheme.primaryColor),\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                      ] else if (_showLogoutButton && _inviteEmail != null) ...[\n                        // Logout Button f√ºr falschen User\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: ElevatedButton.icon(\n                            onPressed: _logout,\n                            icon: const Icon(Icons.logout),\n                            label: const Text('Abmelden & neu registrieren'),\n                            style: ElevatedButton.styleFrom(\n                              backgroundColor: Colors.orange,\n                              foregroundColor: Colors.white,\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                        const SizedBox(height: 12),\n                        // Abbrechen Button\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: OutlinedButton.icon(\n                            onPressed: () => context.goNamed('landing'),\n                            icon: const Icon(Icons.arrow_back),\n                            label: const Text('Zur√ºck zur Startseite'),\n                            style: OutlinedButton.styleFrom(\n                              foregroundColor: Colors.grey,\n                              side: BorderSide(color: Colors.grey),\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                      ] else ...[\n                        // Standard Retry Button\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: ElevatedButton.icon(\n                            onPressed: _retry,\n                            icon: const Icon(Icons.refresh),\n                            label: const Text('Erneut versuchen'),\n                            style: ElevatedButton.styleFrom(\n                              backgroundColor: AppTheme.primaryColor,\n                              foregroundColor: Colors.white,\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                      ],\n                      const SizedBox(height: 16),\n                      TextButton(\n                        onPressed: () => context.goNamed('world-list'),\n                        child: const Text(\n                          'Zur√ºck zu den Welten',\n                          style: TextStyle(\n                            color: AppTheme.primaryColor,\n                            fontWeight: FontWeight.bold,\n                          ),\n                        ),\n                      ),\n                    ],\n                  ),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n\n  Widget _buildInfoState() {\n    return Center(\n      child: Padding(\n        padding: const EdgeInsets.all(24.0),\n        child: Center(\n          child: ConstrainedBox(\n            constraints: const BoxConstraints(maxWidth: 500),\n            child: Card(\n              elevation: 12,\n              color: const Color(0xFF1A1A1A), // Dunkle Karte\n              shape: RoundedRectangleBorder(\n                borderRadius: BorderRadius.circular(20),\n                side: BorderSide(\n                  color: AppTheme.primaryColor.withOpacity(0.3),\n                  width: 1,\n                ),\n              ),\n              child: Container(\n                decoration: BoxDecoration(\n                  borderRadius: BorderRadius.circular(20),\n                  gradient: const LinearGradient(\n                    begin: Alignment.topLeft,\n                    end: Alignment.bottomRight,\n                    colors: [\n                      Color(0xFF1A1A1A),\n                      Color(0xFF2A2A2A),\n                    ],\n                  ),\n                ),\n                child: Padding(\n                  padding: const EdgeInsets.all(32.0),\n                  child: Column(\n                    mainAxisSize: MainAxisSize.min,\n                    children: [\n                      Icon(\n                        Icons.info_outline,\n                        size: 80,\n                        color: Colors.blue[400],\n                      ),\n                      const SizedBox(height: 24),\n                      Text(\n                        'Information',\n                        style: Theme.of(context).textTheme.headlineSmall?.copyWith(\n                          color: Colors.white,\n                          fontWeight: FontWeight.bold,\n                        ),\n                      ),\n                      const SizedBox(height: 16),\n                      Text(\n                        _infoMessage ?? 'Keine Information verf√ºgbar',\n                        style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                          color: Colors.grey[300],\n                        ),\n                        textAlign: TextAlign.center,\n                      ),\n                      const SizedBox(height: 32),\n                      \n                      // **NEUE INTELLIGENTE BUTTONS**\n                      _buildActionButtons(),\n                      \n                      // **INVITE-FLOWS: Kein ",
    "suggested_key": "worldWirklichVerlassenActions",
    "context": "builder: (context) => AlertDialog(\n        title: const Text('Welt verlassen?'),\n        content: Text('M√∂chtest du die Welt \"${world.name}\" wirklich verlassen?'),\n        actions: [\n          TextButton(",
    "category": "world",
    "confidence": 0.85
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 281,
    "column": 87,
    "original": " $actionTypeText.$validityText';\n    \n    // Je nach Status unterschiedliche Logik\n    switch (status) {\n      case 'not_logged_in':\n        if (requiresAction == 'register') {\n          // Mail ist unbekannt -> nur Register\n          actionText = 'Du musst dich mit der E-Mail-Adresse $inviteEmail registrieren.';\n          infoText = '$baseInfoText\\n\\n$actionText';\n          showRegisterButton = isInviteValid; // Nur bei g√ºltigen Invites\n        }\n        break;\n        \n      case 'user_exists_not_logged_in':\n        if (requiresAction == 'login') {\n          // Mail ist bekannt, User nicht angemeldet -> nur Login\n          actionText = 'Dein Account mit $inviteEmail ist bereits registriert. Bitte melde dich an.';\n          infoText = '$baseInfoText\\n\\n$actionText';\n          showLoginButton = isInviteValid; // Nur bei g√ºltigen Invites\n        }\n        break;\n        \n      case 'wrong_email':\n        if (requiresAction == 'logout_and_register') {\n          final currentUserEmail = userStatusData['currentUser']?['email'];\n          // User mit falscher Mail angemeldet -> Logout + Register\n          actionText = 'Diese Einladung ist f√ºr $inviteEmail bestimmt, aber du bist als $currentUserEmail angemeldet.';\n          infoText = '$baseInfoText\\n\\n$actionText\\n\\nBitte melde dich ab und registriere dich mit der richtigen E-Mail-Adresse.';\n          showLogoutButton = isInviteValid; // Nur bei g√ºltigen Invites\n        }\n        break;\n        \n      case 'correct_email':\n        if (requiresAction == 'join_world') {\n          // User richtig angemeldet -> nur Accept Button (KEIN Auto-Accept!)\n          actionText = 'Du bist mit der richtigen E-Mail-Adresse angemeldet und kannst die Einladung jetzt annehmen.';\n          infoText = '$baseInfoText\\n\\n$actionText';\n          showAcceptButton = isInviteValid; // Nur bei g√ºltigen Invites\n          \n          // Auto-Accept entfernt: User soll bewusst entscheiden!\n        }\n        break;\n        \n      default:\n        AppLogger.app.w('‚ùå Unbekannter User-Status: $status');\n        actionText = 'Unbekannter Status: $status';\n        infoText = '$baseInfoText\\n\\n$actionText';\n    }\n    \n    // Bei ung√ºltigen Invites zus√§tzliche Info\n    if (!isInviteValid) {\n      infoText += '\\n\\n‚ö†Ô∏è Diese Einladung kann nicht mehr verwendet werden.';\n    }\n    \n    setState(() {\n      _infoMessage = infoText;\n      _inviteEmail = inviteEmail;\n      \n      // Button-Flags setzen\n      _showLoginButton = showLoginButton;\n      _showRegistrationButton = showRegisterButton; \n      _showLogoutButton = showLogoutButton;\n      _showAcceptInviteButton = showAcceptButton;\n      \n      // WICHTIG: Alte Fehlermeldung zur√ºcksetzen!\n      _errorMessage = null;\n      \n      _isLoading = false;\n    });\n  }\n\n  // Neue Methode: World-Status f√ºr normale Navigation pr√ºfen\n  Future<void> _checkWorldStatus() async {\n    if (_world == null) return;\n    \n    try {\n      // Pr√ºfe ob User bereits Mitglied ist\n      _isJoined = await _worldService.isPlayerInWorld(_world!.id);\n      \n      // Pr√ºfe Vorregistrierung\n      final preRegStatus = await _worldService.getPreRegistrationStatus(_world!.id);\n      _isPreRegistered = preRegStatus.isPreRegistered;\n      \n      AppLogger.app.d('‚úÖ World-Status gepr√ºft', error: {\n        'worldName': _world!.name,\n        'isJoined': _isJoined,\n        'isPreRegistered': _isPreRegistered\n      });\n    } catch (e) {\n      AppLogger.logError('Fehler beim Pr√ºfen des World-Status', e);\n    }\n  }\n\n  // Neue Methode: Automatische Invite-Akzeptierung\n  Future<void> _autoAcceptInvite() async {\n    if (widget.inviteToken == null) return;\n    \n    try {\n      final result = await _worldService.acceptInvite(widget.inviteToken!);\n      \n      if (result != null) {\n        setState(() {\n          _isJoined = true;\n          _infoMessage = 'Willkommen in der Welt ",
    "suggested_key": "worldActiontypetextvaliditytextJeNach",
    "context": "}\n    \n    final baseInfoText = 'Du wurdest von $inviterText eingeladen, der Welt \"$worldName\" $actionTypeText.$validityText';\n    \n    // Je nach Status unterschiedliche Logik",
    "category": "world",
    "confidence": 0.8
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 408,
    "column": 80,
    "original": "!'),\n              backgroundColor: Colors.orange,\n              duration: const Duration(seconds: 3),\n            ),\n          );\n        }\n        return; // Erfolgreicher Exit\n      }\n      \n      // Andere Fehler normal behandeln\n      AppLogger.logError('Automatische Invite-Akzeptierung fehlgeschlagen', e);\n      // Fehler nicht als kritisch behandeln - User kann manuell beitreten\n      setState(() {\n        _infoMessage = 'Du kannst nun der Welt beitreten.';\n      });\n    }\n  }\n\n  Future<void> _joinWorld() async {\n    if (_world == null) return;\n\n    setState(() {\n      _isJoining = true;\n      _joinError = null;\n    });\n\n    try {\n      bool success = false;\n      \n      // **INVITE-TOKEN FLOW: Invite akzeptieren**\n      if (widget.inviteToken != null) {\n        AppLogger.app.i('üé´ Versuche Invite-Akzeptierung f√ºr World-Join');\n        final inviteResult = await _worldService.acceptInvite(widget.inviteToken!);\n        \n        if (inviteResult != null) {\n          success = true;\n          AppLogger.app.i('‚úÖ Invite erfolgreich akzeptiert', error: {\n            'worldId': _world!.id,\n            'worldName': _world!.name\n          });\n        }\n      } else {\n        // **NORMALE NAVIGATION: Standard World-Join**\n        AppLogger.app.i('üåç Versuche normalen World-Join');\n        success = await _worldService.joinWorld(_world!.id);\n      }\n      \n      if (success) {\n        setState(() {\n          _isJoined = true;\n        });\n        \n        if (mounted) {\n          final message = widget.inviteToken != null \n            ? 'Einladung akzeptiert! Willkommen in der Welt ",
    "suggested_key": "worldBackgroundcolorColorsorangeDuration",
    "context": "ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Du bist bereits Mitglied der Welt \"${_world?.name}\"!'),\n              backgroundColor: Colors.orange,\n              duration: const Duration(seconds: 3),",
    "category": "world",
    "confidence": 0.8
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 463,
    "column": 53,
    "original": " beigetreten!';\n            \n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text(message),\n              backgroundColor: Colors.green,\n              duration: const Duration(seconds: 3),\n            ),\n          );\n        }\n      } else {\n        setState(() {\n          _joinError = 'Beitritt fehlgeschlagen. Versuche es erneut.';\n        });\n      }\n    } catch (e) {\n      AppLogger.logError('World Join fehlgeschlagen', e, context: {\n        'worldId': _world?.id,\n        'worldName': _world?.name,\n        'hasInviteToken': widget.inviteToken != null,\n        'inviteToken': widget.inviteToken?.substring(0, 8)\n      });\n      \n      setState(() {\n        // Bessere Fehlermeldungen f√ºr verschiedene Szenarien\n        if (e.toString().contains('bereits akzeptiert')) {\n          _joinError = 'Diese Einladung wurde bereits akzeptiert.';\n          _isJoined = true; // User ist bereits Mitglied\n        } else if (e.toString().contains('nicht f√ºr deine E-Mail-Adresse')) {\n          _joinError = 'Diese Einladung ist nicht f√ºr deine E-Mail-Adresse bestimmt.';\n        } else if (e.toString().contains('abgelaufen')) {\n          _joinError = 'Diese Einladung ist abgelaufen.';\n        } else {\n          _joinError = 'Ein Fehler ist aufgetreten: ${e.toString().replaceAll('Exception: ', '')}';\n        }\n      });\n    } finally {\n      setState(() {\n        _isJoining = false;\n      });\n    }\n  }\n  \n  Future<void> _preRegisterWorld() async {\n    final world = _world;\n    if (world == null) return;\n\n    setState(() {\n      _isPreRegistering = true;\n      _joinError = null;\n    });\n\n    try {\n      final success = await _worldService.preRegisterWorldAuthenticated(world.id);\n      \n      if (success) {\n        setState(() {\n          _isPreRegistered = true;\n        });\n        \n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Erfolgreich f√ºr ${world.name} vorregistriert!'),\n              backgroundColor: Colors.green,\n            ),\n          );\n        }\n      } else {\n        setState(() {\n          _joinError = 'Fehler bei der Vorregistrierung';\n        });\n      }\n    } catch (e) {\n      setState(() {\n        _joinError = e.toString().replaceAll('Exception: ', '');\n      });\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isPreRegistering = false;\n        });\n      }\n    }\n  }\n  \n  Future<void> _cancelPreRegistration() async {\n    final world = _world;\n    if (world == null) return;\n\n    setState(() {\n      _isPreRegistering = true;\n      _joinError = null;\n    });\n\n    try {\n      final success = await _worldService.cancelPreRegistrationAuthenticated(world.id);\n      if (success) {\n        setState(() {\n          _isPreRegistered = false;\n        });\n        \n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Vorregistrierung f√ºr ${world.name} zur√ºckgezogen.'),\n              backgroundColor: Colors.orange,\n            ),\n          );\n        }\n      } else {\n        setState(() {\n          _joinError = 'Fehler beim Zur√ºckziehen der Vorregistrierung';\n        });\n      }\n    } catch (e) {\n      setState(() {\n        _joinError = e.toString().replaceAll('Exception: ', '');\n      });\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isPreRegistering = false;\n        });\n      }\n    }\n  }\n  \n  Future<void> _leaveWorld() async {\n    final world = _world;\n    if (world == null) return;\n    \n    // Best√§tigungsdialog anzeigen\n    final confirmed = await showDialog<bool>(\n      context: context,\n      builder: (context) => AlertDialog(\n        title: const Text('Welt verlassen?'),\n        content: Text('M√∂chtest du die Welt ",
    "suggested_key": "worldBeigetretenScaffoldmessengerofcontextshowsnackbarSnackbar",
    "context": "final message = widget.inviteToken != null \n            ? 'Einladung akzeptiert! Willkommen in der Welt \"${_world!.name}\"!'\n            : 'Erfolgreich der Welt \"${_world!.name}\" beigetreten!';\n            \n          ScaffoldMessenger.of(context).showSnackBar(",
    "category": "world",
    "confidence": 0.8
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 600,
    "column": 59,
    "original": " wirklich verlassen?'),\n        actions: [\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(false),\n            child: const Text('Abbrechen'),\n          ),\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(true),\n            style: TextButton.styleFrom(\n              foregroundColor: Colors.red,\n            ),\n            child: const Text('Verlassen'),\n          ),\n        ],\n      ),\n    );\n    \n    if (confirmed != true) return;\n\n    setState(() {\n      _isJoining = true;\n      _joinError = null;\n    });\n\n    try {\n      await _worldService.leaveWorld(world.id);\n      setState(() {\n        _isJoined = false;\n      });\n      \n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text('Du hast ${world.name} verlassen.'),\n            backgroundColor: Colors.orange,\n          ),\n        );\n      }\n    } catch (e) {\n      setState(() {\n        _joinError = e.toString().replaceAll('Exception: ', '');\n      });\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isJoining = false;\n        });\n      }\n    }\n  }\n  \n  void _playWorld() {\n    final world = _world;\n    if (world == null) return;\n    // Navigate directly to world dashboard for playing\n    context.goNamed('world-dashboard', pathParameters: {'id': world.id.toString()});\n  }\n\n  // Welt-Status bestimmen\n  String _getWorldStatusText() {\n    final world = _world;\n    if (world == null) return 'Unbekannt';\n    return world.statusText;\n  }\n\n  // Welt-Status-Farbe\n  Color _getWorldStatusColor() {\n    final world = _world;\n    if (world == null) return Colors.grey;\n    \n    switch (world.status) {\n      case WorldStatus.upcoming:\n        return Colors.orange;\n      case WorldStatus.open:\n        return Colors.green;\n      case WorldStatus.running:\n        return Colors.blue;\n      case WorldStatus.closed:\n        return Colors.red;\n      case WorldStatus.archived:\n        return Colors.grey;\n    }\n  }\n\n  // Kann der Benutzer beitreten?\n  // Retry-Funktion\n  Future<void> _retry() async {\n    await _loadWorldData();\n  }\n\n  // Navigation zu Registration mit vorausgef√ºllter E-Mail\n  void _navigateToRegistration(String email) {\n    AppLogger.app.i('üé´ Navigation zur Registration mit Invite-E-Mail', error: {'email': email});\n    \n    // FIXED: Invite-Token f√ºr Post-Auth-Redirect setzen\n    if (widget.inviteToken != null) {\n      _authService.setPendingInviteRedirect(widget.inviteToken!);\n    }\n    \n    context.goNamed('register', queryParameters: {'email': email, 'invite_token': widget.inviteToken});\n  }\n\n  // Navigation zu Login \n  void _navigateToLogin(String email) {\n    AppLogger.app.i('üé´ Navigation zum Login f√ºr Invite', error: {'email': email});\n    \n    // FIXED: Invite-Token f√ºr Post-Auth-Redirect setzen\n    if (widget.inviteToken != null) {\n      _authService.setPendingInviteRedirect(widget.inviteToken!);\n    }\n    \n    context.goNamed('login', queryParameters: {'invite_token': widget.inviteToken});\n  }\n\n  // User abmelden und zur Registration weiterleiten\n  Future<void> _logout() async {\n    try {\n      AppLogger.app.i('üé´ User logout f√ºr Invite-Umleitung', error: {'inviteEmail': _inviteEmail});\n      \n      // FIXED: Invite-Token f√ºr Post-Auth-Redirect setzen BEVOR logout\n      if (widget.inviteToken != null) {\n        _authService.setPendingInviteRedirect(widget.inviteToken!);\n      }\n      \n      await _authService.logout();\n      \n      if (mounted && _inviteEmail != null) {\n        // Nach Logout zur Registration mit korrekter E-Mail\n        context.goNamed('register', queryParameters: {\n          'email': _inviteEmail!,\n          'invite_token': widget.inviteToken ?? ''\n        });\n      }\n    } catch (e) {\n      AppLogger.logError('Logout f√ºr Invite fehlgeschlagen', e);\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          const SnackBar(\n            content: Text('Fehler beim Abmelden'),\n            backgroundColor: Colors.red,\n          ),\n        );\n      }\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    \n    return Scaffold(\n      body: BackgroundWidget(\n        child: Stack(\n          children: [\n            // Main content\n            SafeArea(\n              child: _isLoading\n                  ? const Center(\n                      child: CircularProgressIndicator(\n                        valueColor: AlwaysStoppedAnimation<Color>(AppTheme.primaryColor),\n                      ),\n                    )\n                  : _errorMessage != null\n                      ? _buildErrorState()\n                      : _infoMessage != null\n                          ? _buildInfoState()\n                          : _world == null\n                              ? _buildNotFoundState()\n                              : _buildWorldContent(),\n            ),\n            \n            // User info widget (only show when authenticated)\n            if (_isAuthenticated)\n              const UserInfoWidget(),\n            \n            // Navigation widget (only show when authenticated)\n            if (_isAuthenticated)\n              NavigationWidget(\n                currentRoute: 'world-join',\n                routeParams: {'id': widget.worldId},\n                isJoinedWorld: _isJoined,\n              ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildErrorState() {\n    return Center(\n      child: Padding(\n        padding: const EdgeInsets.all(24.0),\n        child: Center(\n          child: ConstrainedBox(\n            constraints: const BoxConstraints(maxWidth: 500),\n            child: Card(\n              elevation: 12,\n              color: const Color(0xFF1A1A1A), // Dunkle Karte\n              shape: RoundedRectangleBorder(\n                borderRadius: BorderRadius.circular(20),\n                side: BorderSide(\n                  color: AppTheme.primaryColor.withOpacity(0.3),\n                  width: 1,\n                ),\n              ),\n              child: Container(\n                decoration: BoxDecoration(\n                  borderRadius: BorderRadius.circular(20),\n                  gradient: const LinearGradient(\n                    begin: Alignment.topLeft,\n                    end: Alignment.bottomRight,\n                    colors: [\n                      Color(0xFF1A1A1A),\n                      Color(0xFF2A2A2A),\n                    ],\n                  ),\n                ),\n                child: Padding(\n                  padding: const EdgeInsets.all(32.0),\n                  child: Column(\n                    mainAxisSize: MainAxisSize.min,\n                    children: [\n                      Icon(\n                        Icons.error_outline,\n                        size: 80,\n                        color: Colors.red[400],\n                      ),\n                      const SizedBox(height: 24),\n                      Text(\n                        'Fehler beim Laden',\n                        style: Theme.of(context).textTheme.headlineSmall?.copyWith(\n                          color: Colors.white,\n                          fontWeight: FontWeight.bold,\n                        ),\n                      ),\n                      const SizedBox(height: 16),\n                      Text(\n                        _errorMessage ?? 'Unbekannter Fehler',\n                        style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                          color: Colors.grey[300],\n                        ),\n                        textAlign: TextAlign.center,\n                      ),\n                      const SizedBox(height: 32),\n                      \n                      // Verschiedene Action-Buttons je nach Szenario\n                      if (_showRegistrationButton && _inviteEmail != null) ...[\n                        // Registration Button f√ºr neuen User\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: ElevatedButton.icon(\n                            onPressed: () => _navigateToRegistration(_inviteEmail!),\n                            icon: const Icon(Icons.person_add),\n                            label: const Text('Jetzt registrieren'),\n                            style: ElevatedButton.styleFrom(\n                              backgroundColor: AppTheme.primaryColor,\n                              foregroundColor: Colors.white,\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                        const SizedBox(height: 12),\n                        // Login Button als Alternative\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: OutlinedButton.icon(\n                            onPressed: () => _navigateToLogin(_inviteEmail!),\n                            icon: const Icon(Icons.login),\n                            label: const Text('Bereits registriert? Anmelden'),\n                            style: OutlinedButton.styleFrom(\n                              foregroundColor: AppTheme.primaryColor,\n                              side: BorderSide(color: AppTheme.primaryColor),\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                      ] else if (_showLogoutButton && _inviteEmail != null) ...[\n                        // Logout Button f√ºr falschen User\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: ElevatedButton.icon(\n                            onPressed: _logout,\n                            icon: const Icon(Icons.logout),\n                            label: const Text('Abmelden & neu registrieren'),\n                            style: ElevatedButton.styleFrom(\n                              backgroundColor: Colors.orange,\n                              foregroundColor: Colors.white,\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                        const SizedBox(height: 12),\n                        // Abbrechen Button\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: OutlinedButton.icon(\n                            onPressed: () => context.goNamed('landing'),\n                            icon: const Icon(Icons.arrow_back),\n                            label: const Text('Zur√ºck zur Startseite'),\n                            style: OutlinedButton.styleFrom(\n                              foregroundColor: Colors.grey,\n                              side: BorderSide(color: Colors.grey),\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                      ] else ...[\n                        // Standard Retry Button\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: ElevatedButton.icon(\n                            onPressed: _retry,\n                            icon: const Icon(Icons.refresh),\n                            label: const Text('Erneut versuchen'),\n                            style: ElevatedButton.styleFrom(\n                              backgroundColor: AppTheme.primaryColor,\n                              foregroundColor: Colors.white,\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                      ],\n                      const SizedBox(height: 16),\n                      TextButton(\n                        onPressed: () => context.goNamed('world-list'),\n                        child: const Text(\n                          'Zur√ºck zu den Welten',\n                          style: TextStyle(\n                            color: AppTheme.primaryColor,\n                            fontWeight: FontWeight.bold,\n                          ),\n                        ),\n                      ),\n                    ],\n                  ),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n\n  Widget _buildInfoState() {\n    return Center(\n      child: Padding(\n        padding: const EdgeInsets.all(24.0),\n        child: Center(\n          child: ConstrainedBox(\n            constraints: const BoxConstraints(maxWidth: 500),\n            child: Card(\n              elevation: 12,\n              color: const Color(0xFF1A1A1A), // Dunkle Karte\n              shape: RoundedRectangleBorder(\n                borderRadius: BorderRadius.circular(20),\n                side: BorderSide(\n                  color: AppTheme.primaryColor.withOpacity(0.3),\n                  width: 1,\n                ),\n              ),\n              child: Container(\n                decoration: BoxDecoration(\n                  borderRadius: BorderRadius.circular(20),\n                  gradient: const LinearGradient(\n                    begin: Alignment.topLeft,\n                    end: Alignment.bottomRight,\n                    colors: [\n                      Color(0xFF1A1A1A),\n                      Color(0xFF2A2A2A),\n                    ],\n                  ),\n                ),\n                child: Padding(\n                  padding: const EdgeInsets.all(32.0),\n                  child: Column(\n                    mainAxisSize: MainAxisSize.min,\n                    children: [\n                      Icon(\n                        Icons.info_outline,\n                        size: 80,\n                        color: Colors.blue[400],\n                      ),\n                      const SizedBox(height: 24),\n                      Text(\n                        'Information',\n                        style: Theme.of(context).textTheme.headlineSmall?.copyWith(\n                          color: Colors.white,\n                          fontWeight: FontWeight.bold,\n                        ),\n                      ),\n                      const SizedBox(height: 16),\n                      Text(\n                        _infoMessage ?? 'Keine Information verf√ºgbar',\n                        style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                          color: Colors.grey[300],\n                        ),\n                        textAlign: TextAlign.center,\n                      ),\n                      const SizedBox(height: 32),\n                      \n                      // **NEUE INTELLIGENTE BUTTONS**\n                      _buildActionButtons(),\n                      \n                      // **INVITE-FLOWS: Kein ",
    "suggested_key": "worldWirklichVerlassenActions",
    "context": "builder: (context) => AlertDialog(\n        title: const Text('Welt verlassen?'),\n        content: Text('M√∂chtest du die Welt \"${world.name}\" wirklich verlassen?'),\n        actions: [\n          TextButton(",
    "category": "world",
    "confidence": 0.8
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 281,
    "column": 87,
    "original": " $actionTypeText.$validityText';\n    \n    // Je nach Status unterschiedliche Logik\n    switch (status) {\n      case 'not_logged_in':\n        if (requiresAction == 'register') {\n          // Mail ist unbekannt -> nur Register\n          actionText = 'Du musst dich mit der E-Mail-Adresse $inviteEmail registrieren.';\n          infoText = '$baseInfoText\\n\\n$actionText';\n          showRegisterButton = isInviteValid; // Nur bei g√ºltigen Invites\n        }\n        break;\n        \n      case 'user_exists_not_logged_in':\n        if (requiresAction == 'login') {\n          // Mail ist bekannt, User nicht angemeldet -> nur Login\n          actionText = 'Dein Account mit $inviteEmail ist bereits registriert. Bitte melde dich an.';\n          infoText = '$baseInfoText\\n\\n$actionText';\n          showLoginButton = isInviteValid; // Nur bei g√ºltigen Invites\n        }\n        break;\n        \n      case 'wrong_email':\n        if (requiresAction == 'logout_and_register') {\n          final currentUserEmail = userStatusData['currentUser']?['email'];\n          // User mit falscher Mail angemeldet -> Logout + Register\n          actionText = 'Diese Einladung ist f√ºr $inviteEmail bestimmt, aber du bist als $currentUserEmail angemeldet.';\n          infoText = '$baseInfoText\\n\\n$actionText\\n\\nBitte melde dich ab und registriere dich mit der richtigen E-Mail-Adresse.';\n          showLogoutButton = isInviteValid; // Nur bei g√ºltigen Invites\n        }\n        break;\n        \n      case 'correct_email':\n        if (requiresAction == 'join_world') {\n          // User richtig angemeldet -> nur Accept Button (KEIN Auto-Accept!)\n          actionText = 'Du bist mit der richtigen E-Mail-Adresse angemeldet und kannst die Einladung jetzt annehmen.';\n          infoText = '$baseInfoText\\n\\n$actionText';\n          showAcceptButton = isInviteValid; // Nur bei g√ºltigen Invites\n          \n          // Auto-Accept entfernt: User soll bewusst entscheiden!\n        }\n        break;\n        \n      default:\n        AppLogger.app.w('‚ùå Unbekannter User-Status: $status');\n        actionText = 'Unbekannter Status: $status';\n        infoText = '$baseInfoText\\n\\n$actionText';\n    }\n    \n    // Bei ung√ºltigen Invites zus√§tzliche Info\n    if (!isInviteValid) {\n      infoText += '\\n\\n‚ö†Ô∏è Diese Einladung kann nicht mehr verwendet werden.';\n    }\n    \n    setState(() {\n      _infoMessage = infoText;\n      _inviteEmail = inviteEmail;\n      \n      // Button-Flags setzen\n      _showLoginButton = showLoginButton;\n      _showRegistrationButton = showRegisterButton; \n      _showLogoutButton = showLogoutButton;\n      _showAcceptInviteButton = showAcceptButton;\n      \n      // WICHTIG: Alte Fehlermeldung zur√ºcksetzen!\n      _errorMessage = null;\n      \n      _isLoading = false;\n    });\n  }\n\n  // Neue Methode: World-Status f√ºr normale Navigation pr√ºfen\n  Future<void> _checkWorldStatus() async {\n    if (_world == null) return;\n    \n    try {\n      // Pr√ºfe ob User bereits Mitglied ist\n      _isJoined = await _worldService.isPlayerInWorld(_world!.id);\n      \n      // Pr√ºfe Vorregistrierung\n      final preRegStatus = await _worldService.getPreRegistrationStatus(_world!.id);\n      _isPreRegistered = preRegStatus.isPreRegistered;\n      \n      AppLogger.app.d('‚úÖ World-Status gepr√ºft', error: {\n        'worldName': _world!.name,\n        'isJoined': _isJoined,\n        'isPreRegistered': _isPreRegistered\n      });\n    } catch (e) {\n      AppLogger.logError('Fehler beim Pr√ºfen des World-Status', e);\n    }\n  }\n\n  // Neue Methode: Automatische Invite-Akzeptierung\n  Future<void> _autoAcceptInvite() async {\n    if (widget.inviteToken == null) return;\n    \n    try {\n      final result = await _worldService.acceptInvite(widget.inviteToken!);\n      \n      if (result != null) {\n        setState(() {\n          _isJoined = true;\n          _infoMessage = 'Willkommen in der Welt ",
    "suggested_key": "worldActiontypetextvaliditytextJeNach",
    "context": "}\n    \n    final baseInfoText = 'Du wurdest von $inviterText eingeladen, der Welt \"$worldName\" $actionTypeText.$validityText';\n    \n    // Je nach Status unterschiedliche Logik",
    "category": "world",
    "confidence": 0.6
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 384,
    "column": 66,
    "original": "! Das Invite wurde automatisch akzeptiert.';\n        });\n        \n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Erfolgreich der Welt ",
    "suggested_key": "worldDasInviteWurde",
    "context": "setState(() {\n          _isJoined = true;\n          _infoMessage = 'Willkommen in der Welt \"${_world?.name}\"! Das Invite wurde automatisch akzeptiert.';\n        });",
    "category": "world",
    "confidence": 0.6
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 390,
    "column": 67,
    "original": " beigetreten!'),\n              backgroundColor: Colors.green,\n              duration: const Duration(seconds: 3),\n            ),\n          );\n        }\n      }\n    } catch (e) {\n      // SPEZIALBEHANDLUNG: ",
    "suggested_key": "worldBeigetretenBackgroundcolorColorsgreen",
    "context": "ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Erfolgreich der Welt \"${_world!.name}\" beigetreten!'),\n              backgroundColor: Colors.green,\n              duration: const Duration(seconds: 3),",
    "category": "world",
    "confidence": 0.6
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 398,
    "column": 55,
    "original": " ist KEIN Fehler!\n      if (e.toString().contains('Invite bereits akzeptiert')) {\n        setState(() {\n          _isJoined = true;\n          _infoMessage = 'Du bist bereits Mitglied dieser Welt ",
    "suggested_key": "worldIstKeinFehler",
    "context": "}\n    } catch (e) {\n      // SPEZIALBEHANDLUNG: \"Invite bereits akzeptiert\" ist KEIN Fehler!\n      if (e.toString().contains('Invite bereits akzeptiert')) {\n        setState(() {",
    "category": "world",
    "confidence": 0.6
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 402,
    "column": 80,
    "original": "!';\n        });\n        \n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Du bist bereits Mitglied der Welt ",
    "suggested_key": "worldIfMountedScaffoldmessengerofcontextshowsnackbar",
    "context": "setState(() {\n          _isJoined = true;\n          _infoMessage = 'Du bist bereits Mitglied dieser Welt \"${_world?.name}\"!';\n        });",
    "category": "world",
    "confidence": 0.6
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 408,
    "column": 80,
    "original": "!'),\n              backgroundColor: Colors.orange,\n              duration: const Duration(seconds: 3),\n            ),\n          );\n        }\n        return; // Erfolgreicher Exit\n      }\n      \n      // Andere Fehler normal behandeln\n      AppLogger.logError('Automatische Invite-Akzeptierung fehlgeschlagen', e);\n      // Fehler nicht als kritisch behandeln - User kann manuell beitreten\n      setState(() {\n        _infoMessage = 'Du kannst nun der Welt beitreten.';\n      });\n    }\n  }\n\n  Future<void> _joinWorld() async {\n    if (_world == null) return;\n\n    setState(() {\n      _isJoining = true;\n      _joinError = null;\n    });\n\n    try {\n      bool success = false;\n      \n      // **INVITE-TOKEN FLOW: Invite akzeptieren**\n      if (widget.inviteToken != null) {\n        AppLogger.app.i('üé´ Versuche Invite-Akzeptierung f√ºr World-Join');\n        final inviteResult = await _worldService.acceptInvite(widget.inviteToken!);\n        \n        if (inviteResult != null) {\n          success = true;\n          AppLogger.app.i('‚úÖ Invite erfolgreich akzeptiert', error: {\n            'worldId': _world!.id,\n            'worldName': _world!.name\n          });\n        }\n      } else {\n        // **NORMALE NAVIGATION: Standard World-Join**\n        AppLogger.app.i('üåç Versuche normalen World-Join');\n        success = await _worldService.joinWorld(_world!.id);\n      }\n      \n      if (success) {\n        setState(() {\n          _isJoined = true;\n        });\n        \n        if (mounted) {\n          final message = widget.inviteToken != null \n            ? 'Einladung akzeptiert! Willkommen in der Welt ",
    "suggested_key": "worldBackgroundcolorColorsorangeDuration",
    "context": "ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Du bist bereits Mitglied der Welt \"${_world?.name}\"!'),\n              backgroundColor: Colors.orange,\n              duration: const Duration(seconds: 3),",
    "category": "world",
    "confidence": 0.6
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 462,
    "column": 77,
    "original": "!'\n            : 'Erfolgreich der Welt ",
    "suggested_key": "worldErfolgreichDerWelt",
    "context": "if (mounted) {\n          final message = widget.inviteToken != null \n            ? 'Einladung akzeptiert! Willkommen in der Welt \"${_world!.name}\"!'\n            : 'Erfolgreich der Welt \"${_world!.name}\" beigetreten!';",
    "category": "world",
    "confidence": 0.6
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 463,
    "column": 53,
    "original": " beigetreten!';\n            \n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text(message),\n              backgroundColor: Colors.green,\n              duration: const Duration(seconds: 3),\n            ),\n          );\n        }\n      } else {\n        setState(() {\n          _joinError = 'Beitritt fehlgeschlagen. Versuche es erneut.';\n        });\n      }\n    } catch (e) {\n      AppLogger.logError('World Join fehlgeschlagen', e, context: {\n        'worldId': _world?.id,\n        'worldName': _world?.name,\n        'hasInviteToken': widget.inviteToken != null,\n        'inviteToken': widget.inviteToken?.substring(0, 8)\n      });\n      \n      setState(() {\n        // Bessere Fehlermeldungen f√ºr verschiedene Szenarien\n        if (e.toString().contains('bereits akzeptiert')) {\n          _joinError = 'Diese Einladung wurde bereits akzeptiert.';\n          _isJoined = true; // User ist bereits Mitglied\n        } else if (e.toString().contains('nicht f√ºr deine E-Mail-Adresse')) {\n          _joinError = 'Diese Einladung ist nicht f√ºr deine E-Mail-Adresse bestimmt.';\n        } else if (e.toString().contains('abgelaufen')) {\n          _joinError = 'Diese Einladung ist abgelaufen.';\n        } else {\n          _joinError = 'Ein Fehler ist aufgetreten: ${e.toString().replaceAll('Exception: ', '')}';\n        }\n      });\n    } finally {\n      setState(() {\n        _isJoining = false;\n      });\n    }\n  }\n  \n  Future<void> _preRegisterWorld() async {\n    final world = _world;\n    if (world == null) return;\n\n    setState(() {\n      _isPreRegistering = true;\n      _joinError = null;\n    });\n\n    try {\n      final success = await _worldService.preRegisterWorldAuthenticated(world.id);\n      \n      if (success) {\n        setState(() {\n          _isPreRegistered = true;\n        });\n        \n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Erfolgreich f√ºr ${world.name} vorregistriert!'),\n              backgroundColor: Colors.green,\n            ),\n          );\n        }\n      } else {\n        setState(() {\n          _joinError = 'Fehler bei der Vorregistrierung';\n        });\n      }\n    } catch (e) {\n      setState(() {\n        _joinError = e.toString().replaceAll('Exception: ', '');\n      });\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isPreRegistering = false;\n        });\n      }\n    }\n  }\n  \n  Future<void> _cancelPreRegistration() async {\n    final world = _world;\n    if (world == null) return;\n\n    setState(() {\n      _isPreRegistering = true;\n      _joinError = null;\n    });\n\n    try {\n      final success = await _worldService.cancelPreRegistrationAuthenticated(world.id);\n      if (success) {\n        setState(() {\n          _isPreRegistered = false;\n        });\n        \n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Vorregistrierung f√ºr ${world.name} zur√ºckgezogen.'),\n              backgroundColor: Colors.orange,\n            ),\n          );\n        }\n      } else {\n        setState(() {\n          _joinError = 'Fehler beim Zur√ºckziehen der Vorregistrierung';\n        });\n      }\n    } catch (e) {\n      setState(() {\n        _joinError = e.toString().replaceAll('Exception: ', '');\n      });\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isPreRegistering = false;\n        });\n      }\n    }\n  }\n  \n  Future<void> _leaveWorld() async {\n    final world = _world;\n    if (world == null) return;\n    \n    // Best√§tigungsdialog anzeigen\n    final confirmed = await showDialog<bool>(\n      context: context,\n      builder: (context) => AlertDialog(\n        title: const Text('Welt verlassen?'),\n        content: Text('M√∂chtest du die Welt ",
    "suggested_key": "worldBeigetretenScaffoldmessengerofcontextshowsnackbarSnackbar",
    "context": "final message = widget.inviteToken != null \n            ? 'Einladung akzeptiert! Willkommen in der Welt \"${_world!.name}\"!'\n            : 'Erfolgreich der Welt \"${_world!.name}\" beigetreten!';\n            \n          ScaffoldMessenger.of(context).showSnackBar(",
    "category": "world",
    "confidence": 0.6
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 600,
    "column": 59,
    "original": " wirklich verlassen?'),\n        actions: [\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(false),\n            child: const Text('Abbrechen'),\n          ),\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(true),\n            style: TextButton.styleFrom(\n              foregroundColor: Colors.red,\n            ),\n            child: const Text('Verlassen'),\n          ),\n        ],\n      ),\n    );\n    \n    if (confirmed != true) return;\n\n    setState(() {\n      _isJoining = true;\n      _joinError = null;\n    });\n\n    try {\n      await _worldService.leaveWorld(world.id);\n      setState(() {\n        _isJoined = false;\n      });\n      \n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text('Du hast ${world.name} verlassen.'),\n            backgroundColor: Colors.orange,\n          ),\n        );\n      }\n    } catch (e) {\n      setState(() {\n        _joinError = e.toString().replaceAll('Exception: ', '');\n      });\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isJoining = false;\n        });\n      }\n    }\n  }\n  \n  void _playWorld() {\n    final world = _world;\n    if (world == null) return;\n    // Navigate directly to world dashboard for playing\n    context.goNamed('world-dashboard', pathParameters: {'id': world.id.toString()});\n  }\n\n  // Welt-Status bestimmen\n  String _getWorldStatusText() {\n    final world = _world;\n    if (world == null) return 'Unbekannt';\n    return world.statusText;\n  }\n\n  // Welt-Status-Farbe\n  Color _getWorldStatusColor() {\n    final world = _world;\n    if (world == null) return Colors.grey;\n    \n    switch (world.status) {\n      case WorldStatus.upcoming:\n        return Colors.orange;\n      case WorldStatus.open:\n        return Colors.green;\n      case WorldStatus.running:\n        return Colors.blue;\n      case WorldStatus.closed:\n        return Colors.red;\n      case WorldStatus.archived:\n        return Colors.grey;\n    }\n  }\n\n  // Kann der Benutzer beitreten?\n  // Retry-Funktion\n  Future<void> _retry() async {\n    await _loadWorldData();\n  }\n\n  // Navigation zu Registration mit vorausgef√ºllter E-Mail\n  void _navigateToRegistration(String email) {\n    AppLogger.app.i('üé´ Navigation zur Registration mit Invite-E-Mail', error: {'email': email});\n    \n    // FIXED: Invite-Token f√ºr Post-Auth-Redirect setzen\n    if (widget.inviteToken != null) {\n      _authService.setPendingInviteRedirect(widget.inviteToken!);\n    }\n    \n    context.goNamed('register', queryParameters: {'email': email, 'invite_token': widget.inviteToken});\n  }\n\n  // Navigation zu Login \n  void _navigateToLogin(String email) {\n    AppLogger.app.i('üé´ Navigation zum Login f√ºr Invite', error: {'email': email});\n    \n    // FIXED: Invite-Token f√ºr Post-Auth-Redirect setzen\n    if (widget.inviteToken != null) {\n      _authService.setPendingInviteRedirect(widget.inviteToken!);\n    }\n    \n    context.goNamed('login', queryParameters: {'invite_token': widget.inviteToken});\n  }\n\n  // User abmelden und zur Registration weiterleiten\n  Future<void> _logout() async {\n    try {\n      AppLogger.app.i('üé´ User logout f√ºr Invite-Umleitung', error: {'inviteEmail': _inviteEmail});\n      \n      // FIXED: Invite-Token f√ºr Post-Auth-Redirect setzen BEVOR logout\n      if (widget.inviteToken != null) {\n        _authService.setPendingInviteRedirect(widget.inviteToken!);\n      }\n      \n      await _authService.logout();\n      \n      if (mounted && _inviteEmail != null) {\n        // Nach Logout zur Registration mit korrekter E-Mail\n        context.goNamed('register', queryParameters: {\n          'email': _inviteEmail!,\n          'invite_token': widget.inviteToken ?? ''\n        });\n      }\n    } catch (e) {\n      AppLogger.logError('Logout f√ºr Invite fehlgeschlagen', e);\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          const SnackBar(\n            content: Text('Fehler beim Abmelden'),\n            backgroundColor: Colors.red,\n          ),\n        );\n      }\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    \n    return Scaffold(\n      body: BackgroundWidget(\n        child: Stack(\n          children: [\n            // Main content\n            SafeArea(\n              child: _isLoading\n                  ? const Center(\n                      child: CircularProgressIndicator(\n                        valueColor: AlwaysStoppedAnimation<Color>(AppTheme.primaryColor),\n                      ),\n                    )\n                  : _errorMessage != null\n                      ? _buildErrorState()\n                      : _infoMessage != null\n                          ? _buildInfoState()\n                          : _world == null\n                              ? _buildNotFoundState()\n                              : _buildWorldContent(),\n            ),\n            \n            // User info widget (only show when authenticated)\n            if (_isAuthenticated)\n              const UserInfoWidget(),\n            \n            // Navigation widget (only show when authenticated)\n            if (_isAuthenticated)\n              NavigationWidget(\n                currentRoute: 'world-join',\n                routeParams: {'id': widget.worldId},\n                isJoinedWorld: _isJoined,\n              ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildErrorState() {\n    return Center(\n      child: Padding(\n        padding: const EdgeInsets.all(24.0),\n        child: Center(\n          child: ConstrainedBox(\n            constraints: const BoxConstraints(maxWidth: 500),\n            child: Card(\n              elevation: 12,\n              color: const Color(0xFF1A1A1A), // Dunkle Karte\n              shape: RoundedRectangleBorder(\n                borderRadius: BorderRadius.circular(20),\n                side: BorderSide(\n                  color: AppTheme.primaryColor.withOpacity(0.3),\n                  width: 1,\n                ),\n              ),\n              child: Container(\n                decoration: BoxDecoration(\n                  borderRadius: BorderRadius.circular(20),\n                  gradient: const LinearGradient(\n                    begin: Alignment.topLeft,\n                    end: Alignment.bottomRight,\n                    colors: [\n                      Color(0xFF1A1A1A),\n                      Color(0xFF2A2A2A),\n                    ],\n                  ),\n                ),\n                child: Padding(\n                  padding: const EdgeInsets.all(32.0),\n                  child: Column(\n                    mainAxisSize: MainAxisSize.min,\n                    children: [\n                      Icon(\n                        Icons.error_outline,\n                        size: 80,\n                        color: Colors.red[400],\n                      ),\n                      const SizedBox(height: 24),\n                      Text(\n                        'Fehler beim Laden',\n                        style: Theme.of(context).textTheme.headlineSmall?.copyWith(\n                          color: Colors.white,\n                          fontWeight: FontWeight.bold,\n                        ),\n                      ),\n                      const SizedBox(height: 16),\n                      Text(\n                        _errorMessage ?? 'Unbekannter Fehler',\n                        style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                          color: Colors.grey[300],\n                        ),\n                        textAlign: TextAlign.center,\n                      ),\n                      const SizedBox(height: 32),\n                      \n                      // Verschiedene Action-Buttons je nach Szenario\n                      if (_showRegistrationButton && _inviteEmail != null) ...[\n                        // Registration Button f√ºr neuen User\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: ElevatedButton.icon(\n                            onPressed: () => _navigateToRegistration(_inviteEmail!),\n                            icon: const Icon(Icons.person_add),\n                            label: const Text('Jetzt registrieren'),\n                            style: ElevatedButton.styleFrom(\n                              backgroundColor: AppTheme.primaryColor,\n                              foregroundColor: Colors.white,\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                        const SizedBox(height: 12),\n                        // Login Button als Alternative\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: OutlinedButton.icon(\n                            onPressed: () => _navigateToLogin(_inviteEmail!),\n                            icon: const Icon(Icons.login),\n                            label: const Text('Bereits registriert? Anmelden'),\n                            style: OutlinedButton.styleFrom(\n                              foregroundColor: AppTheme.primaryColor,\n                              side: BorderSide(color: AppTheme.primaryColor),\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                      ] else if (_showLogoutButton && _inviteEmail != null) ...[\n                        // Logout Button f√ºr falschen User\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: ElevatedButton.icon(\n                            onPressed: _logout,\n                            icon: const Icon(Icons.logout),\n                            label: const Text('Abmelden & neu registrieren'),\n                            style: ElevatedButton.styleFrom(\n                              backgroundColor: Colors.orange,\n                              foregroundColor: Colors.white,\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                        const SizedBox(height: 12),\n                        // Abbrechen Button\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: OutlinedButton.icon(\n                            onPressed: () => context.goNamed('landing'),\n                            icon: const Icon(Icons.arrow_back),\n                            label: const Text('Zur√ºck zur Startseite'),\n                            style: OutlinedButton.styleFrom(\n                              foregroundColor: Colors.grey,\n                              side: BorderSide(color: Colors.grey),\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                      ] else ...[\n                        // Standard Retry Button\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: ElevatedButton.icon(\n                            onPressed: _retry,\n                            icon: const Icon(Icons.refresh),\n                            label: const Text('Erneut versuchen'),\n                            style: ElevatedButton.styleFrom(\n                              backgroundColor: AppTheme.primaryColor,\n                              foregroundColor: Colors.white,\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                      ],\n                      const SizedBox(height: 16),\n                      TextButton(\n                        onPressed: () => context.goNamed('world-list'),\n                        child: const Text(\n                          'Zur√ºck zu den Welten',\n                          style: TextStyle(\n                            color: AppTheme.primaryColor,\n                            fontWeight: FontWeight.bold,\n                          ),\n                        ),\n                      ),\n                    ],\n                  ),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n\n  Widget _buildInfoState() {\n    return Center(\n      child: Padding(\n        padding: const EdgeInsets.all(24.0),\n        child: Center(\n          child: ConstrainedBox(\n            constraints: const BoxConstraints(maxWidth: 500),\n            child: Card(\n              elevation: 12,\n              color: const Color(0xFF1A1A1A), // Dunkle Karte\n              shape: RoundedRectangleBorder(\n                borderRadius: BorderRadius.circular(20),\n                side: BorderSide(\n                  color: AppTheme.primaryColor.withOpacity(0.3),\n                  width: 1,\n                ),\n              ),\n              child: Container(\n                decoration: BoxDecoration(\n                  borderRadius: BorderRadius.circular(20),\n                  gradient: const LinearGradient(\n                    begin: Alignment.topLeft,\n                    end: Alignment.bottomRight,\n                    colors: [\n                      Color(0xFF1A1A1A),\n                      Color(0xFF2A2A2A),\n                    ],\n                  ),\n                ),\n                child: Padding(\n                  padding: const EdgeInsets.all(32.0),\n                  child: Column(\n                    mainAxisSize: MainAxisSize.min,\n                    children: [\n                      Icon(\n                        Icons.info_outline,\n                        size: 80,\n                        color: Colors.blue[400],\n                      ),\n                      const SizedBox(height: 24),\n                      Text(\n                        'Information',\n                        style: Theme.of(context).textTheme.headlineSmall?.copyWith(\n                          color: Colors.white,\n                          fontWeight: FontWeight.bold,\n                        ),\n                      ),\n                      const SizedBox(height: 16),\n                      Text(\n                        _infoMessage ?? 'Keine Information verf√ºgbar',\n                        style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                          color: Colors.grey[300],\n                        ),\n                        textAlign: TextAlign.center,\n                      ),\n                      const SizedBox(height: 32),\n                      \n                      // **NEUE INTELLIGENTE BUTTONS**\n                      _buildActionButtons(),\n                      \n                      // **INVITE-FLOWS: Kein ",
    "suggested_key": "worldWirklichVerlassenActions",
    "context": "builder: (context) => AlertDialog(\n        title: const Text('Welt verlassen?'),\n        content: Text('M√∂chtest du die Welt \"${world.name}\" wirklich verlassen?'),\n        actions: [\n          TextButton(",
    "category": "world",
    "confidence": 0.6
  }
]