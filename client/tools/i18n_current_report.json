[
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 6,
    "column": 27,
    "original": ";\n\nclass AuthService {\n  static final AuthService _instance = AuthService._internal();\n  factory AuthService() => _instance;\n  AuthService._internal();\n\n  final ApiService _apiService = ApiService();\n  User? _currentUser;\n  bool _refreshing = false; // Rate-Limiting für parallele Refreshes\n\n  // Reaktiver Auth-Status für GoRouter\n  final ValueNotifier<bool> isAuthenticated = ValueNotifier(false);\n\n  // HINZUGEFÜGT: Post-Auth-Redirect System für Invite-Flow\n  String? _pendingInviteToken;\n  String? _pendingRedirectRoute;\n  Map<String, String>? _pendingRouteParams;\n\n  User? get currentUser => _currentUser;\n\n  // HINZUGEFÜGT: Invite-Redirect Management\n  void setPendingInviteRedirect(String inviteToken) {\n    _pendingInviteToken = inviteToken;\n    _pendingRedirectRoute = ",
    "suggested_key": "authClassAuthserviceStatic",
    "context": "import '../models/user.dart';\nimport '../../config/logger.dart';\nimport 'api_service.dart';\nimport 'token_storage.dart';\n\nclass AuthService {\n  static final AuthService _instance = AuthService._internal();",
    "category": "auth",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 72,
    "column": 26,
    "original": "❌ Kein Access-Token gefunden",
    "suggested_key": "authKeinAccesstokenGefunden",
    "context": "});\n      \n      if (accessToken == null || accessToken.isEmpty) {\n        AppLogger.auth.i('❌ Kein Access-Token gefunden');\n        isAuthenticated.value = false;\n        return false;\n      }",
    "category": "auth",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 201,
    "column": 17,
    "original": ": _currentUser?.roles?.map((r) => r.role.name).toList(),\n        });\n        \n        return _currentUser;\n      } else if (response.statusCode == 401) {\n        AppLogger.logAuthEvent(",
    "suggested_key": "auth_currentuserrolesmaprRrolenametolistReturn",
    "context": "AppLogger.logAuthEvent('login_success', username: username, metadata: {\n          'userId': _currentUser?.id,\n          'roles': _currentUser?.roles?.map((r) => r.role.name).toList(),\n        });\n        \n        return _currentUser;",
    "category": "auth",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 234,
    "column": 47,
    "original": "/auth/register",
    "suggested_key": "authAuthregister",
    "context": "});\n    \n    try {\n      final response = await _apiService.post('/auth/register', {\n        'username': username,\n        'email': email,\n        'password': password,",
    "category": "auth",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 237,
    "column": 18,
    "original": ": password,\n      });\n\n      if (response.statusCode == 201) {\n        final data = jsonDecode(response.body);\n        \n        // Token aus der Response extrahieren\n        final accessToken = data[",
    "suggested_key": "authPasswordIfResponsestatuscode",
    "context": "final response = await _apiService.post('/auth/register', {\n        'username': username,\n        'email': email,\n        'password': password,\n      });\n\n      if (response.statusCode == 201) {",
    "category": "auth",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 276,
    "column": 17,
    "original": ": _currentUser?.roles?.map((r) => r.role.name).toList(),\n        });\n        \n        return _currentUser;\n      } else if (response.statusCode == 409) {\n        AppLogger.logAuthEvent(",
    "suggested_key": "auth_currentuserrolesmaprRrolenametolistReturn",
    "context": "AppLogger.logAuthEvent('register_success', username: username, metadata: {\n          'userId': _currentUser?.id,\n          'email': email,\n          'roles': _currentUser?.roles?.map((r) => r.role.name).toList(),\n        });\n        \n        return _currentUser;",
    "category": "auth",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 72,
    "column": 26,
    "original": "❌ Kein Access-Token gefunden",
    "suggested_key": "authKeinAccesstokenGefunden",
    "context": "});\n      \n      if (accessToken == null || accessToken.isEmpty) {\n        AppLogger.auth.i('❌ Kein Access-Token gefunden');\n        isAuthenticated.value = false;\n        return false;\n      }",
    "category": "auth",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 87,
    "column": 26,
    "original": "⚠️ Token abgelaufen - versuche Refresh",
    "suggested_key": "authTokenAbgelaufenVersuche",
    "context": "AppLogger.logAuthEvent('user_authenticated', username: _currentUser?.username);\n        return true;\n      } else if (response.statusCode == 401) {\n        AppLogger.auth.w('⚠️ Token abgelaufen - versuche Refresh');\n        // Token abgelaufen, versuche Refresh\n        final refreshed = await refreshTokenIfNeeded();\n        isAuthenticated.value = refreshed;",
    "category": "auth",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 179,
    "column": 18,
    "original": ": password,\n      });\n\n      if (response.statusCode == 200) {\n        final data = jsonDecode(response.body);\n        final accessToken = data[",
    "suggested_key": "authPasswordIfResponsestatuscode",
    "context": "try {\n      final response = await _apiService.post('/auth/login', {\n        'username': username,\n        'password': password,\n      });\n\n      if (response.statusCode == 200) {",
    "category": "auth",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 237,
    "column": 18,
    "original": ": password,\n      });\n\n      if (response.statusCode == 201) {\n        final data = jsonDecode(response.body);\n        \n        // Token aus der Response extrahieren\n        final accessToken = data[",
    "suggested_key": "authPasswordIfResponsestatuscode",
    "context": "final response = await _apiService.post('/auth/register', {\n        'username': username,\n        'email': email,\n        'password': password,\n      });\n\n      if (response.statusCode == 201) {",
    "category": "auth",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 318,
    "column": 43,
    "original": ", username: username);\n    \n    try {\n      // Versuche Server-seitiges Logout\n      final accessToken = await TokenStorage.getAccessToken();\n      if (accessToken != null) {\n        _apiService.setToken(accessToken);\n        try {\n          await _apiService.post(",
    "suggested_key": "authUsernameUsernameTry",
    "context": "// Erweitertes Logout mit Server-Call und vollständigem Cleanup\n  Future<void> logout() async {\n    final username = _currentUser?.username ?? 'unknown';\n    AppLogger.logAuthEvent('logout_attempt', username: username);\n    \n    try {\n      // Versuche Server-seitiges Logout",
    "category": "auth",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 327,
    "column": 56,
    "original": ", username: username);\n        } catch (e) {\n          // Server-Logout fehlgeschlagen, trotzdem lokal ausloggen\n          AppLogger.logAuthEvent(",
    "suggested_key": "authUsernameUsernameCatch",
    "context": "_apiService.setToken(accessToken);\n        try {\n          await _apiService.post('/auth/logout', {});\n          AppLogger.logAuthEvent('server_logout_success', username: username);\n        } catch (e) {\n          // Server-Logout fehlgeschlagen, trotzdem lokal ausloggen\n          AppLogger.logAuthEvent('server_logout_failed', username: username, metadata: {",
    "category": "auth",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 380,
    "column": 61,
    "original": ", {});\n      \n      if (response.statusCode == 200) {\n        final data = jsonDecode(response.body);\n        final newAccessToken = data[",
    "suggested_key": "authIfResponsestatuscode200",
    "context": "}\n\n      _apiService.setToken(refreshToken);\n      final response = await _apiService.post('/auth/refresh', {});\n      \n      if (response.statusCode == 200) {\n        final data = jsonDecode(response.body);",
    "category": "auth",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 418,
    "column": 55,
    "original": ");\n      \n      if (response.statusCode == 200) {\n        final userData = jsonDecode(response.body);\n        _currentUser = User.fromJson(userData);\n        await TokenStorage.saveUserData(jsonEncode(userData));\n        return _currentUser;\n      } else if (response.statusCode == 401) {\n        // Token invalid, clear auth\n        await logout();\n        return null;\n      } else {\n        throw Exception(",
    "suggested_key": "authIfResponsestatuscode200",
    "context": "// Fetch current user data with roles from server\n  Future<User?> fetchCurrentUser() async {\n    try {\n      final response = await _apiService.get('/auth/me');\n      \n      if (response.statusCode == 200) {\n        final userData = jsonDecode(response.body);",
    "category": "auth",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 42,
    "column": 17,
    "original": ": expiresAt?.toIso8601String(),\n    };\n  }\n}\n\n// Strukturierte Fehlercodes für bessere Wartbarkeit\nenum InviteErrorCode {\n  inviteAlreadySent,\n  permissionDenied,\n  worldNotFound,\n  worldNotOpen,\n  invalidEmail,\n  networkError,\n  unknown,\n}\n\nclass InviteService {\n  static final InviteService _instance = InviteService._internal();\n  factory InviteService() => _instance;\n  InviteService._internal();\n\n  final ApiService _apiService = ApiService();\n\n  // Strukturierte Fehlerbehandlung mit Error-Codes\n  InviteErrorCode _parseErrorCode(Map<String, dynamic> errorData) {\n    final errorCode = errorData[",
    "suggested_key": "authExpiresattoiso8601stringStrukturierteFehlercodes",
    "context": "'email': email,\n      'status': status,\n      'createdAt': createdAt?.toIso8601String(),\n      'expiresAt': expiresAt?.toIso8601String(),\n    };\n  }\n}",
    "category": "auth",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 162,
    "column": 79,
    "original": ", data);\n      \n      if (response.statusCode == 200) {\n        return true;\n      } else if (response.statusCode == 400) {\n        // Konsistente Fehlerbehandlung wie createInvite\n        final errorData = jsonDecode(response.body);\n        final errorCode = _parseErrorCode(errorData);\n        final errorMessage = _getErrorMessage(errorCode, errorData[",
    "suggested_key": "authDataIfResponsestatuscode",
    "context": "'email': email,\n      };\n\n      final response = await _apiService.post('/worlds/$worldId/invites/public', data);\n      \n      if (response.statusCode == 200) {\n        return true;",
    "category": "auth",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 42,
    "column": 17,
    "original": ": expiresAt?.toIso8601String(),\n    };\n  }\n}\n\n// Strukturierte Fehlercodes für bessere Wartbarkeit\nenum InviteErrorCode {\n  inviteAlreadySent,\n  permissionDenied,\n  worldNotFound,\n  worldNotOpen,\n  invalidEmail,\n  networkError,\n  unknown,\n}\n\nclass InviteService {\n  static final InviteService _instance = InviteService._internal();\n  factory InviteService() => _instance;\n  InviteService._internal();\n\n  final ApiService _apiService = ApiService();\n\n  // Strukturierte Fehlerbehandlung mit Error-Codes\n  InviteErrorCode _parseErrorCode(Map<String, dynamic> errorData) {\n    final errorCode = errorData[",
    "suggested_key": "authExpiresattoiso8601stringStrukturierteFehlercodes",
    "context": "'email': email,\n      'status': status,\n      'createdAt': createdAt?.toIso8601String(),\n      'expiresAt': expiresAt?.toIso8601String(),\n    };\n  }\n}",
    "category": "auth",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 162,
    "column": 79,
    "original": ", data);\n      \n      if (response.statusCode == 200) {\n        return true;\n      } else if (response.statusCode == 400) {\n        // Konsistente Fehlerbehandlung wie createInvite\n        final errorData = jsonDecode(response.body);\n        final errorCode = _parseErrorCode(errorData);\n        final errorMessage = _getErrorMessage(errorCode, errorData[",
    "suggested_key": "authDataIfResponsestatuscode",
    "context": "'email': email,\n      };\n\n      final response = await _apiService.post('/worlds/$worldId/invites/public', data);\n      \n      if (response.statusCode == 200) {\n        return true;",
    "category": "auth",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 7,
    "column": 33,
    "original": ";\n\n// PreRegistrationStatus-Model für bessere Typisierung\nclass PreRegistrationStatus {\n  final bool isPreRegistered;\n  final DateTime? registeredAt;\n  final String? status;\n  final Map<String, dynamic>? config;\n\n  PreRegistrationStatus({\n    required this.isPreRegistered,\n    this.registeredAt,\n    this.status,\n    this.config,\n  });\n\n  factory PreRegistrationStatus.fromJson(Map<String, dynamic> json) {\n    return PreRegistrationStatus(\n      isPreRegistered: json[",
    "suggested_key": "authPreregistrationstatusmodelFürBessere",
    "context": "import '../models/world.dart';\nimport 'api_service.dart';\nimport 'auth_service.dart';\nimport '../../config/logger.dart';\n\n// PreRegistrationStatus-Model für bessere Typisierung\nclass PreRegistrationStatus {",
    "category": "auth",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 25,
    "column": 45,
    "original": "] == true,\n      registeredAt: json[",
    "suggested_key": "authTrueRegisteredatJson",
    "context": "factory PreRegistrationStatus.fromJson(Map<String, dynamic> json) {\n    return PreRegistrationStatus(\n      isPreRegistered: json['isPreRegistered'] == true,\n      registeredAt: json['registeredAt'] != null\n          ? DateTime.parse(json['registeredAt'] as String)\n          : null,",
    "category": "auth",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 39,
    "column": 14,
    "original": ": config,\n    };\n  }\n}\n\n// Strukturierte Fehlercodes für bessere Wartbarkeit\nenum WorldErrorCode {\n  worldNotFound,\n  permissionDenied,\n  worldArchived,\n  alreadyRegistered,\n  alreadyPreRegistered,\n  preRegistrationClosed,\n  notAuthenticated,\n  networkError,\n  unknown,\n}\n\nclass WorldService {\n  static final WorldService _instance = WorldService._internal();\n  factory WorldService() => _instance;\n  WorldService._internal();\n\n  final ApiService _apiService = ApiService();\n  final AuthService _authService = AuthService();\n\n  // Strukturierte Fehlerbehandlung mit Error-Codes\n  WorldErrorCode _parseErrorCode(Map<String, dynamic> errorData) {\n    final errorCode = errorData[",
    "suggested_key": "authConfigStrukturierteFehlercodes",
    "context": "'isPreRegistered': isPreRegistered,\n      'registeredAt': registeredAt?.toIso8601String(),\n      'status': status,\n      'config': config,\n    };\n  }\n}",
    "category": "auth",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 220,
    "column": 47,
    "original": "/worlds/$worldId/pre-register",
    "suggested_key": "authWorldsworldidpreregister",
    "context": "data['config'] = config;\n      }\n\n      final response = await _apiService.post('/worlds/$worldId/pre-register', data);\n      \n      if (response.statusCode == 200) {\n        final responseData = jsonDecode(response.body);",
    "category": "auth",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 260,
    "column": 47,
    "original": "/worlds/$worldId/pre-register",
    "suggested_key": "authWorldsworldidpreregister",
    "context": "data['config'] = config;\n      }\n\n      final response = await _apiService.post('/worlds/$worldId/pre-register', data);\n      \n      if (response.statusCode == 200) {\n        final responseData = jsonDecode(response.body);",
    "category": "auth",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 355,
    "column": 79,
    "original": ");\n      \n      if (response.statusCode == 200) {\n        final responseData = jsonDecode(response.body);\n        return PreRegistrationStatus.fromJson(responseData);\n      }\n      return PreRegistrationStatus(isPreRegistered: false);\n    } catch (e) {\n      // 404 means user is not pre-registered, which is normal\n      // Don",
    "suggested_key": "authIfResponsestatuscode200",
    "context": "// Neue typsichere Methode mit PreRegistrationStatus-Model\n  Future<PreRegistrationStatus> getPreRegistrationStatus(int worldId) async {\n    try {\n      final response = await _apiService.get('/worlds/$worldId/pre-register/me');\n      \n      if (response.statusCode == 200) {\n        final responseData = jsonDecode(response.body);",
    "category": "auth",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 39,
    "column": 14,
    "original": ": config,\n    };\n  }\n}\n\n// Strukturierte Fehlercodes für bessere Wartbarkeit\nenum WorldErrorCode {\n  worldNotFound,\n  permissionDenied,\n  worldArchived,\n  alreadyRegistered,\n  alreadyPreRegistered,\n  preRegistrationClosed,\n  notAuthenticated,\n  networkError,\n  unknown,\n}\n\nclass WorldService {\n  static final WorldService _instance = WorldService._internal();\n  factory WorldService() => _instance;\n  WorldService._internal();\n\n  final ApiService _apiService = ApiService();\n  final AuthService _authService = AuthService();\n\n  // Strukturierte Fehlerbehandlung mit Error-Codes\n  WorldErrorCode _parseErrorCode(Map<String, dynamic> errorData) {\n    final errorCode = errorData[",
    "suggested_key": "authConfigStrukturierteFehlercodes",
    "context": "'isPreRegistered': isPreRegistered,\n      'registeredAt': registeredAt?.toIso8601String(),\n      'status': status,\n      'config': config,\n    };\n  }\n}",
    "category": "auth",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\forgot_password_page.dart",
    "line": 230,
    "column": 44,
    "original": "Bitte gib eine gültige E-Mail-Adresse ein",
    "suggested_key": "authBitteGibEine",
    "context": "return 'Bitte gib deine E-Mail-Adresse ein';\n                                  }\n                                  if (!_emailRegex.hasMatch(value.trim())) {\n                                    return 'Bitte gib eine gültige E-Mail-Adresse ein';\n                                  }\n                                  return null;\n                                },",
    "category": "auth",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\forgot_password_page.dart",
    "line": 230,
    "column": 44,
    "original": "Bitte gib eine gültige E-Mail-Adresse ein",
    "suggested_key": "authBitteGibEine",
    "context": "return 'Bitte gib deine E-Mail-Adresse ein';\n                                  }\n                                  if (!_emailRegex.hasMatch(value.trim())) {\n                                    return 'Bitte gib eine gültige E-Mail-Adresse ein';\n                                  }\n                                  return null;\n                                },",
    "category": "auth",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\forgot_password_page.dart",
    "line": 230,
    "column": 86,
    "original": ";\n                                  }\n                                  return null;\n                                },\n                              ),\n                            \n                            if (!_isSuccess) const SizedBox(height: 16),\n                            \n                            // Error message\n                            if (_errorMessage != null && !_isSuccess)\n                              Container(\n                                width: double.infinity,\n                                padding: const EdgeInsets.all(12),\n                                margin: const EdgeInsets.only(bottom: 16),\n                                decoration: BoxDecoration(\n                                  color: Colors.red[900]!.withOpacity(0.3),\n                                  borderRadius: BorderRadius.circular(8),\n                                  border: Border.all(color: Colors.red[400]!.withOpacity(0.5)),\n                                ),\n                                child: Row(\n                                  children: [\n                                    Icon(Icons.error_outline, color: Colors.red[400], size: 20),\n                                    const SizedBox(width: 8),\n                                    Expanded(\n                                      child: Text(\n                                        _errorMessage!,\n                                        style: TextStyle(color: Colors.red[200], fontSize: 14),\n                                      ),\n                                    ),\n                                  ],\n                                ),\n                              ),\n                            \n                            // Submit button\n                            if (!_isSuccess)\n                              SizedBox(\n                                width: double.infinity,\n                                height: 56,\n                                child: ElevatedButton(\n                                  onPressed: _isLoading ? null : _requestPasswordReset,\n                                  style: ElevatedButton.styleFrom(\n                                    backgroundColor: AppTheme.primaryColor,\n                                    foregroundColor: Colors.white,\n                                    shape: RoundedRectangleBorder(\n                                      borderRadius: BorderRadius.circular(12),\n                                    ),\n                                    elevation: 8,\n                                    shadowColor: AppTheme.primaryColor.withOpacity(0.5),\n                                  ),\n                                  child: _isLoading\n                                      ? const SizedBox(\n                                          height: 20,\n                                          width: 20,\n                                          child: CircularProgressIndicator(\n                                            strokeWidth: 2,\n                                            valueColor: AlwaysStoppedAnimation<Color>(Colors.white),\n                                          ),\n                                        )\n                                      : const Text(\n                                          ",
    "suggested_key": "authReturnNullIf",
    "context": "return 'Bitte gib deine E-Mail-Adresse ein';\n                                  }\n                                  if (!_emailRegex.hasMatch(value.trim())) {\n                                    return 'Bitte gib eine gültige E-Mail-Adresse ein';\n                                  }\n                                  return null;\n                                },",
    "category": "auth",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 6,
    "column": 8,
    "original": "../../theme/background_widget.dart",
    "suggested_key": "authThemebackground_widgetdart",
    "context": "import '../../config/logger.dart';\nimport '../../core/services/auth_service.dart';\nimport '../../theme/app_theme.dart';\nimport '../../theme/background_widget.dart';\n\n// ServiceLocator Import für DI\nimport '../../main.dart';",
    "category": "auth",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 9,
    "column": 24,
    "original": ";\n\nclass LoginPage extends StatefulWidget {\n  const LoginPage({super.key});\n\n  @override\n  State<LoginPage> createState() => _LoginPageState();\n}\n\nclass _LoginPageState extends State<LoginPage> with SingleTickerProviderStateMixin {\n  final _formKey = GlobalKey<FormState>();\n  final _usernameController = TextEditingController();\n  final _passwordController = TextEditingController();\n  \n  late final AuthService _authService;\n  late AnimationController _animationController;\n  late Animation<double> _fadeAnimation;\n  \n  bool _isLoading = false;\n  bool _obscurePassword = true;\n  String? _loginError;\n  bool _rememberMe = false;\n  \n  // Invite-Parameter\n  String? _inviteToken;\n  \n  // Für bessere Validierung\n  bool _hasInteractedWithUsername = false;\n  bool _hasInteractedWithPassword = false;\n\n  @override\n  void initState() {\n    super.initState();\n    _initializeServices();\n    _loadQueryParameters();\n    \n    // Animation Setup\n    _animationController = AnimationController(\n      duration: const Duration(milliseconds: 800),\n      vsync: this,\n    );\n    _fadeAnimation = Tween<double>(\n      begin: 0.0,\n      end: 1.0,\n    ).animate(CurvedAnimation(\n      parent: _animationController,\n      curve: Curves.easeIn,\n    ));\n    \n    _animationController.forward();\n  }\n\n  @override\n  void dispose() {\n    _animationController.dispose();\n    _usernameController.dispose();\n    _passwordController.dispose();\n    super.dispose();\n  }\n\n  void _initializeServices() {\n    try {\n      if (ServiceLocator.has<AuthService>()) {\n        _authService = ServiceLocator.get<AuthService>();\n      } else {\n        _authService = AuthService();\n      }\n    } catch (e) {\n      AppLogger.app.w(",
    "suggested_key": "authClassLoginpageExtends",
    "context": "import '../../theme/background_widget.dart';\n\n// ServiceLocator Import für DI\nimport '../../main.dart';\n\nclass LoginPage extends StatefulWidget {\n  const LoginPage({super.key});",
    "category": "auth",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 353,
    "column": 48,
    "original": "Passwort muss mindestens 6 Zeichen lang sein",
    "suggested_key": "authPasswortMussMindestens",
    "context": "return 'Bitte gib dein Passwort ein';\n                                      }\n                                      if (_hasInteractedWithPassword && value.length < 6) {\n                                        return 'Passwort muss mindestens 6 Zeichen lang sein';\n                                      }\n                                      return null;\n                                    },",
    "category": "auth",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 536,
    "column": 61,
    "original": "GitHub Login wird bald verfügbar sein",
    "suggested_key": "authGithubLoginWird",
    "context": "onPressed: () {\n                                          ScaffoldMessenger.of(context).showSnackBar(\n                                            const SnackBar(\n                                              content: Text('GitHub Login wird bald verfügbar sein'),\n                                            ),\n                                          );\n                                        },",
    "category": "auth",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 9,
    "column": 24,
    "original": ";\n\nclass LoginPage extends StatefulWidget {\n  const LoginPage({super.key});\n\n  @override\n  State<LoginPage> createState() => _LoginPageState();\n}\n\nclass _LoginPageState extends State<LoginPage> with SingleTickerProviderStateMixin {\n  final _formKey = GlobalKey<FormState>();\n  final _usernameController = TextEditingController();\n  final _passwordController = TextEditingController();\n  \n  late final AuthService _authService;\n  late AnimationController _animationController;\n  late Animation<double> _fadeAnimation;\n  \n  bool _isLoading = false;\n  bool _obscurePassword = true;\n  String? _loginError;\n  bool _rememberMe = false;\n  \n  // Invite-Parameter\n  String? _inviteToken;\n  \n  // Für bessere Validierung\n  bool _hasInteractedWithUsername = false;\n  bool _hasInteractedWithPassword = false;\n\n  @override\n  void initState() {\n    super.initState();\n    _initializeServices();\n    _loadQueryParameters();\n    \n    // Animation Setup\n    _animationController = AnimationController(\n      duration: const Duration(milliseconds: 800),\n      vsync: this,\n    );\n    _fadeAnimation = Tween<double>(\n      begin: 0.0,\n      end: 1.0,\n    ).animate(CurvedAnimation(\n      parent: _animationController,\n      curve: Curves.easeIn,\n    ));\n    \n    _animationController.forward();\n  }\n\n  @override\n  void dispose() {\n    _animationController.dispose();\n    _usernameController.dispose();\n    _passwordController.dispose();\n    super.dispose();\n  }\n\n  void _initializeServices() {\n    try {\n      if (ServiceLocator.has<AuthService>()) {\n        _authService = ServiceLocator.get<AuthService>();\n      } else {\n        _authService = AuthService();\n      }\n    } catch (e) {\n      AppLogger.app.w(",
    "suggested_key": "authClassLoginpageExtends",
    "context": "import '../../theme/background_widget.dart';\n\n// ServiceLocator Import für DI\nimport '../../main.dart';\n\nclass LoginPage extends StatefulWidget {\n  const LoginPage({super.key});",
    "category": "auth",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 7,
    "column": 8,
    "original": "../../theme/background_widget.dart",
    "suggested_key": "authThemebackground_widgetdart",
    "context": "import '../../core/services/auth_service.dart';\nimport '../../core/services/world_service.dart';\nimport '../../theme/app_theme.dart';\nimport '../../theme/background_widget.dart';\n\n// ServiceLocator Import für DI\nimport '../../main.dart';",
    "category": "auth",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 10,
    "column": 24,
    "original": ";\n\nclass RegisterPage extends StatefulWidget {\n  const RegisterPage({super.key});\n\n  @override\n  State<RegisterPage> createState() => _RegisterPageState();\n}\n\nclass _RegisterPageState extends State<RegisterPage> {\n  final _formKey = GlobalKey<FormState>();\n  final _usernameController = TextEditingController();\n  final _emailController = TextEditingController();\n  final _passwordController = TextEditingController();\n  \n  // DI-ready: ServiceLocator verwenden statt Singleton\n  late final AuthService _authService;\n  \n  bool _isLoading = false;\n  bool _obscurePassword = true;\n  String? _registerError;\n  \n  // Invite-Parameter\n  String? _inviteToken;\n  String? _prefilledEmail;\n\n  // E-Mail-Validierung Regex\n  static final RegExp _emailRegex = RegExp(r",
    "suggested_key": "authClassRegisterpageExtends",
    "context": "import '../../theme/background_widget.dart';\n\n// ServiceLocator Import für DI\nimport '../../main.dart';\n\nclass RegisterPage extends StatefulWidget {\n  const RegisterPage({super.key});",
    "category": "auth",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 37,
    "column": 66,
    "original": ");\n\n  @override\n  void initState() {\n    super.initState();\n    // DI-ready: ServiceLocator verwenden mit robuster Fehlerbehandlung\n    _initializeServices();\n    _loadQueryParameters();\n  }\n\n  void _initializeServices() {\n    try {\n      if (ServiceLocator.has<AuthService>()) {\n        _authService = ServiceLocator.get<AuthService>();\n      } else {\n        _authService = AuthService();\n      }\n      \n    } catch (e) {\n      AppLogger.app.w(",
    "suggested_key": "authOverrideVoidInitstate",
    "context": "String? _prefilledEmail;\n\n  // E-Mail-Validierung Regex\n  static final RegExp _emailRegex = RegExp(r'^[^@]+@[^@]+\\.[^@]+$');\n\n  @override\n  void initState() {",
    "category": "auth",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 354,
    "column": 42,
    "original": "Bitte gib eine gültige E-Mail-Adresse ein",
    "suggested_key": "authBitteGibEine",
    "context": "return 'E-Mail ist erforderlich';\n                                }\n                                if (!_emailRegex.hasMatch(value)) {\n                                  return 'Bitte gib eine gültige E-Mail-Adresse ein';\n                                }\n                                return null;\n                              },",
    "category": "auth",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 10,
    "column": 24,
    "original": ";\n\nclass RegisterPage extends StatefulWidget {\n  const RegisterPage({super.key});\n\n  @override\n  State<RegisterPage> createState() => _RegisterPageState();\n}\n\nclass _RegisterPageState extends State<RegisterPage> {\n  final _formKey = GlobalKey<FormState>();\n  final _usernameController = TextEditingController();\n  final _emailController = TextEditingController();\n  final _passwordController = TextEditingController();\n  \n  // DI-ready: ServiceLocator verwenden statt Singleton\n  late final AuthService _authService;\n  \n  bool _isLoading = false;\n  bool _obscurePassword = true;\n  String? _registerError;\n  \n  // Invite-Parameter\n  String? _inviteToken;\n  String? _prefilledEmail;\n\n  // E-Mail-Validierung Regex\n  static final RegExp _emailRegex = RegExp(r",
    "suggested_key": "authClassRegisterpageExtends",
    "context": "import '../../theme/background_widget.dart';\n\n// ServiceLocator Import für DI\nimport '../../main.dart';\n\nclass RegisterPage extends StatefulWidget {\n  const RegisterPage({super.key});",
    "category": "auth",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 37,
    "column": 66,
    "original": ");\n\n  @override\n  void initState() {\n    super.initState();\n    // DI-ready: ServiceLocator verwenden mit robuster Fehlerbehandlung\n    _initializeServices();\n    _loadQueryParameters();\n  }\n\n  void _initializeServices() {\n    try {\n      if (ServiceLocator.has<AuthService>()) {\n        _authService = ServiceLocator.get<AuthService>();\n      } else {\n        _authService = AuthService();\n      }\n      \n    } catch (e) {\n      AppLogger.app.w(",
    "suggested_key": "authOverrideVoidInitstate",
    "context": "String? _prefilledEmail;\n\n  // E-Mail-Validierung Regex\n  static final RegExp _emailRegex = RegExp(r'^[^@]+@[^@]+\\.[^@]+$');\n\n  @override\n  void initState() {",
    "category": "auth",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 354,
    "column": 42,
    "original": "Bitte gib eine gültige E-Mail-Adresse ein",
    "suggested_key": "authBitteGibEine",
    "context": "return 'E-Mail ist erforderlich';\n                                }\n                                if (!_emailRegex.hasMatch(value)) {\n                                  return 'Bitte gib eine gültige E-Mail-Adresse ein';\n                                }\n                                return null;\n                              },",
    "category": "auth",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 122,
    "column": 17,
    "original": ": wasAuthenticated != _isAuthenticated\n      });\n      \n      // UI aktualisieren wenn sich Status geändert hat\n      if (wasAuthenticated != _isAuthenticated && mounted) {\n        setState(() {});\n      }\n    } catch (e) {\n      AppLogger.logError(",
    "suggested_key": "authWasauthenticated_isauthenticatedUi",
    "context": "'isAuthenticated': _isAuthenticated,\n        'userId': currentUser?.id,\n        'username': currentUser?.username,\n        'changed': wasAuthenticated != _isAuthenticated\n      });\n      \n      // UI aktualisieren wenn sich Status geändert hat",
    "category": "auth",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 295,
    "column": 37,
    "original": ") {\n          // Mail ist bekannt, User nicht angemeldet -> nur Login\n          actionText = ",
    "suggested_key": "authMailIstBekannt",
    "context": "break;\n        \n      case 'user_exists_not_logged_in':\n        if (requiresAction == 'login') {\n          // Mail ist bekannt, User nicht angemeldet -> nur Login\n          actionText = 'Dein Account mit $inviteEmail ist bereits registriert. Bitte melde dich an.';\n          infoText = '$baseInfoText\\n\\n$actionText';",
    "category": "auth",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 305,
    "column": 73,
    "original": "];\n          // User mit falscher Mail angemeldet -> Logout + Register\n          actionText = ",
    "suggested_key": "authUserMitFalscher",
    "context": "case 'wrong_email':\n        if (requiresAction == 'logout_and_register') {\n          final currentUserEmail = userStatusData['currentUser']?['email'];\n          // User mit falscher Mail angemeldet -> Logout + Register\n          actionText = 'Diese Einladung ist für $inviteEmail bestimmt, aber du bist als $currentUserEmail angemeldet.';\n          infoText = '$baseInfoText\\n\\n$actionText\\n\\nBitte melde dich ab und registriere dich mit der richtigen E-Mail-Adresse.';",
    "category": "auth",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 711,
    "column": 61,
    "original": ": widget.inviteToken});\n  }\n\n  // User abmelden und zur Registration weiterleiten\n  Future<void> _logout() async {\n    try {\n      AppLogger.app.i(",
    "suggested_key": "authWidgetinvitetokenUserAbmelden",
    "context": "_authService.setPendingInviteRedirect(widget.inviteToken!);\n    }\n    \n    context.goNamed('login', queryParameters: {'invite_token': widget.inviteToken});\n  }\n\n  // User abmelden und zur Registration weiterleiten",
    "category": "auth",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 285,
    "column": 41,
    "original": ")) {\n            if (mounted) {\n              setState(() {\n                _preRegisteredWorlds[world.id] = false;\n              });\n            }\n          } else {\n            // Only log other errors\n            AppLogger.logError(",
    "suggested_key": "authIfMountedSetstate",
    "context": "}\n        } catch (e) {\n          // 404 means user is not pre-registered, which is normal\n          if (e.toString().contains('404')) {\n            if (mounted) {\n              setState(() {\n                _preRegisteredWorlds[world.id] = false;",
    "category": "auth",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\forgot_password_page.dart",
    "line": 118,
    "column": 72,
    "original": "),\n                                icon: const Icon(Icons.arrow_back),\n                                color: Colors.grey[400],\n                              ),\n                            ),\n                            \n                            // Icon\n                            Container(\n                              width: 80,\n                              height: 80,\n                              decoration: BoxDecoration(\n                                color: AppTheme.primaryColor.withOpacity(0.2),\n                                borderRadius: BorderRadius.circular(20),\n                                border: Border.all(\n                                  color: AppTheme.primaryColor.withOpacity(0.5),\n                                  width: 2,\n                                ),\n                              ),\n                              child: const Icon(\n                                Icons.lock_reset,\n                                size: 40,\n                                color: AppTheme.primaryColor,\n                              ),\n                            ),\n                            const SizedBox(height: 20),\n                            \n                            Text(\n                              ",
    "suggested_key": "buttonIconConstIconiconsarrow_back",
    "context": "Align(\n                              alignment: Alignment.centerLeft,\n                              child: IconButton(\n                                onPressed: () => context.goNamed('login'),\n                                icon: const Icon(Icons.arrow_back),\n                                color: Colors.grey[400],\n                              ),",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: child property",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\forgot_password_page.dart",
    "line": 304,
    "column": 46,
    "original": "Zurück zum Login",
    "suggested_key": "buttonZurückZumLogin",
    "context": "TextButton(\n                              onPressed: () => context.goNamed('login'),\n                              child: Text(\n                                _isSuccess ? 'Zurück zum Login' : 'Abbrechen',\n                                style: const TextStyle(\n                                  color: AppTheme.primaryColor,\n                                  fontSize: 16,",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: TextButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\forgot_password_page.dart",
    "line": 304,
    "column": 46,
    "original": "Zurück zum Login",
    "suggested_key": "buttonZurückZumLogin",
    "context": "TextButton(\n                              onPressed: () => context.goNamed('login'),\n                              child: Text(\n                                _isSuccess ? 'Zurück zum Login' : 'Abbrechen',\n                                style: const TextStyle(\n                                  color: AppTheme.primaryColor,\n                                  fontSize: 16,",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: TextButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 311,
    "column": 59,
    "original": ",\n                                      labelStyle: TextStyle(color: Colors.grey[400]),\n                                      prefixIcon: const Icon(Icons.lock, color: AppTheme.primaryColor),\n                                      suffixIcon: IconButton(\n                                        icon: Icon(\n                                          _obscurePassword ? Icons.visibility : Icons.visibility_off,\n                                          color: Colors.grey[400],\n                                        ),\n                                        onPressed: () {\n                                          setState(() {\n                                            _obscurePassword = !_obscurePassword;\n                                          });\n                                        },\n                                      ),\n                                      filled: true,\n                                      fillColor: const Color(0xFF2D2D2D),\n                                      border: OutlineInputBorder(\n                                        borderRadius: BorderRadius.circular(12),\n                                        borderSide: BorderSide(color: Colors.grey[600]!),\n                                      ),\n                                      enabledBorder: OutlineInputBorder(\n                                        borderRadius: BorderRadius.circular(12),\n                                        borderSide: BorderSide(color: Colors.grey[600]!),\n                                      ),\n                                      focusedBorder: OutlineInputBorder(\n                                        borderRadius: BorderRadius.circular(12),\n                                        borderSide: const BorderSide(color: AppTheme.primaryColor, width: 2),\n                                      ),\n                                      errorBorder: OutlineInputBorder(\n                                        borderRadius: BorderRadius.circular(12),\n                                        borderSide: BorderSide(color: Colors.red[400]!),\n                                      ),\n                                      focusedErrorBorder: OutlineInputBorder(\n                                        borderRadius: BorderRadius.circular(12),\n                                        borderSide: BorderSide(color: Colors.red[400]!, width: 2),\n                                      ),\n                                    ),\n                                    validator: (value) {\n                                      if (value == null || value.isEmpty) {\n                                        return ",
    "suggested_key": "buttonLabelstyleTextstylecolorColorsgrey400",
    "context": "}\n                                    },\n                                    decoration: InputDecoration(\n                                      labelText: 'Passwort',\n                                      labelStyle: TextStyle(color: Colors.grey[400]),\n                                      prefixIcon: const Icon(Icons.lock, color: AppTheme.primaryColor),\n                                      suffixIcon: IconButton(",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 406,
    "column": 63,
    "original": ",\n                                          style: TextStyle(\n                                            color: AppTheme.primaryColor,\n                                            fontSize: 14,\n                                          ),\n                                        ),\n                                      ),\n                                    ],\n                                  ),\n                                  const SizedBox(height: 12),\n                                  \n                                  // Error message with animation\n                                  AnimatedContainer(\n                                    duration: const Duration(milliseconds: 300),\n                                    height: _loginError != null ? null : 0,\n                                    child: _loginError != null\n                                      ? Container(\n                                          width: double.infinity,\n                                          padding: const EdgeInsets.all(12),\n                                          margin: const EdgeInsets.only(bottom: 16),\n                                          decoration: BoxDecoration(\n                                            color: Colors.red[900]!.withOpacity(0.3),\n                                            borderRadius: BorderRadius.circular(8),\n                                            border: Border.all(color: Colors.red[400]!.withOpacity(0.5)),\n                                          ),\n                                          child: Row(\n                                            children: [\n                                              Icon(Icons.error_outline, color: Colors.red[400], size: 20),\n                                              const SizedBox(width: 8),\n                                              Expanded(\n                                                child: Text(\n                                                  _loginError!,\n                                                  style: TextStyle(color: Colors.red[200], fontSize: 14),\n                                                ),\n                                              ),\n                                            ],\n                                          ),\n                                        )\n                                      : const SizedBox.shrink(),\n                                  ),\n                                  \n                                  // Login button with hover effect\n                                  SizedBox(\n                                    width: double.infinity,\n                                    height: 56,\n                                    child: AnimatedContainer(\n                                      duration: const Duration(milliseconds: 200),\n                                      child: ElevatedButton(\n                                        onPressed: _isLoading ? null : _login,\n                                        style: ElevatedButton.styleFrom(\n                                          backgroundColor: AppTheme.primaryColor,\n                                          foregroundColor: Colors.white,\n                                          shape: RoundedRectangleBorder(\n                                            borderRadius: BorderRadius.circular(12),\n                                          ),\n                                          elevation: 8,\n                                          shadowColor: AppTheme.primaryColor.withOpacity(0.5),\n                                        ),\n                                        child: _isLoading\n                                            ? const SizedBox(\n                                                height: 20,\n                                                width: 20,\n                                                child: CircularProgressIndicator(\n                                                  strokeWidth: 2,\n                                                  valueColor: AlwaysStoppedAnimation<Color>(Colors.white),\n                                                ),\n                                              )\n                                            : const Text(\n                                                ",
    "suggested_key": "buttonStyleTextstyleColor",
    "context": "TextButton(\n                                        onPressed: () => context.goNamed('forgot-password'),\n                                        child: const Text(\n                                          'Passwort vergessen?',\n                                          style: TextStyle(\n                                            color: AppTheme.primaryColor,\n                                            fontSize: 14,",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: TextButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 406,
    "column": 63,
    "original": ",\n                                          style: TextStyle(\n                                            color: AppTheme.primaryColor,\n                                            fontSize: 14,\n                                          ),\n                                        ),\n                                      ),\n                                    ],\n                                  ),\n                                  const SizedBox(height: 12),\n                                  \n                                  // Error message with animation\n                                  AnimatedContainer(\n                                    duration: const Duration(milliseconds: 300),\n                                    height: _loginError != null ? null : 0,\n                                    child: _loginError != null\n                                      ? Container(\n                                          width: double.infinity,\n                                          padding: const EdgeInsets.all(12),\n                                          margin: const EdgeInsets.only(bottom: 16),\n                                          decoration: BoxDecoration(\n                                            color: Colors.red[900]!.withOpacity(0.3),\n                                            borderRadius: BorderRadius.circular(8),\n                                            border: Border.all(color: Colors.red[400]!.withOpacity(0.5)),\n                                          ),\n                                          child: Row(\n                                            children: [\n                                              Icon(Icons.error_outline, color: Colors.red[400], size: 20),\n                                              const SizedBox(width: 8),\n                                              Expanded(\n                                                child: Text(\n                                                  _loginError!,\n                                                  style: TextStyle(color: Colors.red[200], fontSize: 14),\n                                                ),\n                                              ),\n                                            ],\n                                          ),\n                                        )\n                                      : const SizedBox.shrink(),\n                                  ),\n                                  \n                                  // Login button with hover effect\n                                  SizedBox(\n                                    width: double.infinity,\n                                    height: 56,\n                                    child: AnimatedContainer(\n                                      duration: const Duration(milliseconds: 200),\n                                      child: ElevatedButton(\n                                        onPressed: _isLoading ? null : _login,\n                                        style: ElevatedButton.styleFrom(\n                                          backgroundColor: AppTheme.primaryColor,\n                                          foregroundColor: Colors.white,\n                                          shape: RoundedRectangleBorder(\n                                            borderRadius: BorderRadius.circular(12),\n                                          ),\n                                          elevation: 8,\n                                          shadowColor: AppTheme.primaryColor.withOpacity(0.5),\n                                        ),\n                                        child: _isLoading\n                                            ? const SizedBox(\n                                                height: 20,\n                                                width: 20,\n                                                child: CircularProgressIndicator(\n                                                  strokeWidth: 2,\n                                                  valueColor: AlwaysStoppedAnimation<Color>(Colors.white),\n                                                ),\n                                              )\n                                            : const Text(\n                                                ",
    "suggested_key": "buttonStyleTextstyleColor",
    "context": "TextButton(\n                                        onPressed: () => context.goNamed('forgot-password'),\n                                        child: const Text(\n                                          'Passwort vergessen?',\n                                          style: TextStyle(\n                                            color: AppTheme.primaryColor,\n                                            fontSize: 14,",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: TextButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 369,
    "column": 53,
    "original": ",\n                                labelStyle: TextStyle(color: Colors.grey[400]),\n                                prefixIcon: const Icon(Icons.lock, color: AppTheme.primaryColor),\n                                suffixIcon: IconButton(\n                                  icon: Icon(\n                                    _obscurePassword ? Icons.visibility : Icons.visibility_off,\n                                    color: Colors.grey[400],\n                                  ),\n                                  onPressed: () {\n                                    setState(() {\n                                      _obscurePassword = !_obscurePassword;\n                                    });\n                                  },\n                                ),\n                                filled: true,\n                                fillColor: const Color(0xFF2D2D2D),\n                                border: OutlineInputBorder(\n                                  borderRadius: BorderRadius.circular(12),\n                                  borderSide: BorderSide(color: Colors.grey[600]!),\n                                ),\n                                enabledBorder: OutlineInputBorder(\n                                  borderRadius: BorderRadius.circular(12),\n                                  borderSide: BorderSide(color: Colors.grey[600]!),\n                                ),\n                                focusedBorder: OutlineInputBorder(\n                                  borderRadius: BorderRadius.circular(12),\n                                  borderSide: const BorderSide(color: AppTheme.primaryColor, width: 2),\n                                ),\n                                errorBorder: OutlineInputBorder(\n                                  borderRadius: BorderRadius.circular(12),\n                                  borderSide: BorderSide(color: Colors.red[400]!),\n                                ),\n                                focusedErrorBorder: OutlineInputBorder(\n                                  borderRadius: BorderRadius.circular(12),\n                                  borderSide: BorderSide(color: Colors.red[400]!, width: 2),\n                                ),\n                              ),\n                              validator: (value) {\n                                if (value == null || value.isEmpty) {\n                                  return ",
    "suggested_key": "buttonLabelstyleTextstylecolorColorsgrey400",
    "context": "obscureText: _obscurePassword,\n                              style: const TextStyle(color: Colors.white),\n                              decoration: InputDecoration(\n                                labelText: 'Passwort',\n                                labelStyle: TextStyle(color: Colors.grey[400]),\n                                prefixIcon: const Icon(Icons.lock, color: AppTheme.primaryColor),\n                                suffixIcon: IconButton(",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 477,
    "column": 35,
    "original": "Bereits ein Konto? ",
    "suggested_key": "buttonBereitsEinKonto",
    "context": "mainAxisAlignment: MainAxisAlignment.center,\n                              children: [\n                                Text(\n                                  'Bereits ein Konto? ',\n                                  style: TextStyle(color: Colors.grey[400]),\n                                ),\n                                TextButton(",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 247,
    "column": 63,
    "original": ",\n                                    labelStyle: TextStyle(color: Colors.grey[400]),\n                                    prefixIcon: const Icon(Icons.lock, color: AppTheme.primaryColor),\n                                    suffixIcon: IconButton(\n                                      icon: Icon(\n                                        _obscurePassword ? Icons.visibility : Icons.visibility_off,\n                                        color: Colors.grey[400],\n                                      ),\n                                      onPressed: () {\n                                        setState(() {\n                                          _obscurePassword = !_obscurePassword;\n                                        });\n                                      },\n                                    ),\n                                    filled: true,\n                                    fillColor: const Color(0xFF2D2D2D),\n                                    border: OutlineInputBorder(\n                                      borderRadius: BorderRadius.circular(12),\n                                      borderSide: BorderSide(color: Colors.grey[600]!),\n                                    ),\n                                    enabledBorder: OutlineInputBorder(\n                                      borderRadius: BorderRadius.circular(12),\n                                      borderSide: BorderSide(color: Colors.grey[600]!),\n                                    ),\n                                    focusedBorder: OutlineInputBorder(\n                                      borderRadius: BorderRadius.circular(12),\n                                      borderSide: const BorderSide(color: AppTheme.primaryColor, width: 2),\n                                    ),\n                                    errorBorder: OutlineInputBorder(\n                                      borderRadius: BorderRadius.circular(12),\n                                      borderSide: BorderSide(color: Colors.red[400]!),\n                                    ),\n                                    focusedErrorBorder: OutlineInputBorder(\n                                      borderRadius: BorderRadius.circular(12),\n                                      borderSide: BorderSide(color: Colors.red[400]!, width: 2),\n                                    ),\n                                    helperText: ",
    "suggested_key": "buttonLabelstyleTextstylecolorColorsgrey400",
    "context": "}\n                                  },\n                                  decoration: InputDecoration(\n                                    labelText: 'Neues Passwort',\n                                    labelStyle: TextStyle(color: Colors.grey[400]),\n                                    prefixIcon: const Icon(Icons.lock, color: AppTheme.primaryColor),\n                                    suffixIcon: IconButton(",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 316,
    "column": 68,
    "original": ",\n                                    labelStyle: TextStyle(color: Colors.grey[400]),\n                                    prefixIcon: const Icon(Icons.lock_outline, color: AppTheme.primaryColor),\n                                    suffixIcon: IconButton(\n                                      icon: Icon(\n                                        _obscureConfirmPassword ? Icons.visibility : Icons.visibility_off,\n                                        color: Colors.grey[400],\n                                      ),\n                                      onPressed: () {\n                                        setState(() {\n                                          _obscureConfirmPassword = !_obscureConfirmPassword;\n                                        });\n                                      },\n                                    ),\n                                    filled: true,\n                                    fillColor: const Color(0xFF2D2D2D),\n                                    border: OutlineInputBorder(\n                                      borderRadius: BorderRadius.circular(12),\n                                      borderSide: BorderSide(color: Colors.grey[600]!),\n                                    ),\n                                    enabledBorder: OutlineInputBorder(\n                                      borderRadius: BorderRadius.circular(12),\n                                      borderSide: BorderSide(color: Colors.grey[600]!),\n                                    ),\n                                    focusedBorder: OutlineInputBorder(\n                                      borderRadius: BorderRadius.circular(12),\n                                      borderSide: const BorderSide(color: AppTheme.primaryColor, width: 2),\n                                    ),\n                                    errorBorder: OutlineInputBorder(\n                                      borderRadius: BorderRadius.circular(12),\n                                      borderSide: BorderSide(color: Colors.red[400]!),\n                                    ),\n                                    focusedErrorBorder: OutlineInputBorder(\n                                      borderRadius: BorderRadius.circular(12),\n                                      borderSide: BorderSide(color: Colors.red[400]!, width: 2),\n                                    ),\n                                  ),\n                                  validator: (value) {\n                                    if (value == null || value.isEmpty) {\n                                      return ",
    "suggested_key": "buttonLabelstyleTextstylecolorColorsgrey400",
    "context": "}\n                                  },\n                                  decoration: InputDecoration(\n                                    labelText: 'Passwort bestätigen',\n                                    labelStyle: TextStyle(color: Colors.grey[400]),\n                                    prefixIcon: const Icon(Icons.lock_outline, color: AppTheme.primaryColor),\n                                    suffixIcon: IconButton(",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 466,
    "column": 37,
    "original": "Zurück zur Anmeldung",
    "suggested_key": "buttonZurückZurAnmeldung",
    "context": "TextButton(\n                                  onPressed: () => context.goNamed('login'),\n                                  child: const Text(\n                                    'Zurück zur Anmeldung',\n                                    style: TextStyle(\n                                      color: AppTheme.primaryColor,\n                                      fontSize: 16,",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: TextButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 466,
    "column": 37,
    "original": "Zurück zur Anmeldung",
    "suggested_key": "buttonZurückZurAnmeldung",
    "context": "TextButton(\n                                  onPressed: () => context.goNamed('login'),\n                                  child: const Text(\n                                    'Zurück zur Anmeldung',\n                                    style: TextStyle(\n                                      color: AppTheme.primaryColor,\n                                      fontSize: 16,",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: TextButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_card.dart",
    "line": 397,
    "column": 35,
    "original": ",\n              color: Colors.red[600],\n            ));\n          }\n        } else {\n          if (onPreRegister != null) {\n            buttons.add(_buildButton(\n              onPressed: onPreRegister,\n              icon: Icons.how_to_reg,\n              label: ",
    "suggested_key": "buttonColorColorsred600Else",
    "context": "buttons.add(_buildButton(\n              onPressed: onCancelPreRegistration,\n              icon: Icons.cancel,\n              label: 'Zurückziehen',\n              color: Colors.red[600],\n            ));\n          }",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_card.dart",
    "line": 406,
    "column": 38,
    "original": ",\n              color: Colors.orange[600],\n            ));\n          }\n        }\n        break;\n        \n      case WorldStatus.open:\n      case WorldStatus.running:\n        // Beitreten oder Verlassen\n        if (isJoined) {\n          // Spielen Button immer zuerst anzeigen wenn verfügbar\n          if (onPlay != null) {\n            buttons.add(_buildButton(\n              onPressed: onPlay,\n              icon: Icons.play_circle_filled,\n              label: ",
    "suggested_key": "buttonColorColorsorange600Break",
    "context": "buttons.add(_buildButton(\n              onPressed: onPreRegister,\n              icon: Icons.how_to_reg,\n              label: 'Vorregistrieren',\n              color: Colors.orange[600],\n            ));\n          }",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_card.dart",
    "line": 440,
    "column": 32,
    "original": ",\n              color: AppTheme.primaryColor,\n            ));\n          }\n        }\n        break;\n        \n      case WorldStatus.closed:\n      case WorldStatus.archived:\n        // Keine Aktions-Buttons bei geschlossenen/archivierten Welten\n        return _buildStatusBadge();\n    }\n    \n    // Invite Button für upcoming, open und running\n    if ([WorldStatus.upcoming, WorldStatus.open, WorldStatus.running].contains(world.status) && \n        onInvite != null) {\n      buttons.add(_buildButton(\n        onPressed: onInvite,\n        icon: Icons.person_add,\n        label: null,\n        color: Colors.purple[600],\n        iconOnly: true,\n        tooltip: ",
    "suggested_key": "buttonColorAppthemeprimarycolorBreak",
    "context": "buttons.add(_buildButton(\n              onPressed: onJoin,\n              icon: Icons.play_arrow,\n              label: 'Beitreten',\n              color: AppTheme.primaryColor,\n            ));\n          }",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_card.dart",
    "line": 406,
    "column": 38,
    "original": ",\n              color: Colors.orange[600],\n            ));\n          }\n        }\n        break;\n        \n      case WorldStatus.open:\n      case WorldStatus.running:\n        // Beitreten oder Verlassen\n        if (isJoined) {\n          // Spielen Button immer zuerst anzeigen wenn verfügbar\n          if (onPlay != null) {\n            buttons.add(_buildButton(\n              onPressed: onPlay,\n              icon: Icons.play_circle_filled,\n              label: ",
    "suggested_key": "buttonColorColorsorange600Break",
    "context": "buttons.add(_buildButton(\n              onPressed: onPreRegister,\n              icon: Icons.how_to_reg,\n              label: 'Vorregistrieren',\n              color: Colors.orange[600],\n            ));\n          }",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_filters.dart",
    "line": 289,
    "column": 49,
    "original": "),\n            style: TextButton.styleFrom(\n              foregroundColor: Colors.grey[400],\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n\n  String _getStatusLabel(WorldStatus status) {\n    switch (status) {\n      case WorldStatus.upcoming:\n        return ",
    "suggested_key": "buttonStyleTextbuttonstylefromForegroundcolor",
    "context": "TextButton.icon(\n            onPressed: onResetFilters,\n            icon: const Icon(Icons.clear_all, size: 16),\n            label: const Text('Alle zurücksetzen'),\n            style: TextButton.styleFrom(\n              foregroundColor: Colors.grey[400],\n            ),",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: TextButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_filters.dart",
    "line": 289,
    "column": 31,
    "original": "Alle zurücksetzen",
    "suggested_key": "buttonAlleZurücksetzen",
    "context": "TextButton.icon(\n            onPressed: onResetFilters,\n            icon: const Icon(Icons.clear_all, size: 16),\n            label: const Text('Alle zurücksetzen'),\n            style: TextButton.styleFrom(\n              foregroundColor: Colors.grey[400],\n            ),",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: TextButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_list_header.dart",
    "line": 76,
    "column": 43,
    "original": "),\n          style: ElevatedButton.styleFrom(\n            backgroundColor: AppTheme.primaryColor,\n            foregroundColor: Colors.white,\n            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 10),\n            shape: RoundedRectangleBorder(\n              borderRadius: BorderRadius.circular(8),\n            ),\n          ),\n        ),\n      );\n    }\n\n    if (hasCreatePermission && onCreateWorld != null) {\n      buttons.add(\n        ElevatedButton.icon(\n          onPressed: onCreateWorld,\n          icon: const Icon(Icons.add, size: 18),\n          label: const Text(",
    "suggested_key": "buttonStyleElevatedbuttonstylefromBackgroundcolor",
    "context": "ElevatedButton.icon(\n          onPressed: onRefresh,\n          icon: const Icon(Icons.refresh, size: 18),\n          label: const Text('Aktualisieren'),\n          style: ElevatedButton.styleFrom(\n            backgroundColor: AppTheme.primaryColor,\n            foregroundColor: Colors.white,",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_list_header.dart",
    "line": 94,
    "column": 29,
    "original": "Neue Welt",
    "suggested_key": "buttonNeueWelt",
    "context": "ElevatedButton.icon(\n          onPressed: onCreateWorld,\n          icon: const Icon(Icons.add, size: 18),\n          label: const Text('Neue Welt'),\n          style: ElevatedButton.styleFrom(\n            backgroundColor: Colors.green[600],\n            foregroundColor: Colors.white,",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_list_states.dart",
    "line": 79,
    "column": 50,
    "original": "),\n              style: ElevatedButton.styleFrom(\n                backgroundColor: AppTheme.primaryColor,\n                foregroundColor: Colors.white,\n                padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 12),\n                shape: RoundedRectangleBorder(\n                  borderRadius: BorderRadius.circular(8),\n                ),\n              ),\n            ),\n          ],\n        ],\n      ),\n    );\n  }\n}\n\nclass WorldListErrorState extends StatelessWidget {\n  final String error;\n  final VoidCallback? onRetry;\n\n  const WorldListErrorState({\n    super.key,\n    required this.error,\n    this.onRetry,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n      child: Padding(\n        padding: const EdgeInsets.all(24.0),\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            Container(\n              padding: const EdgeInsets.all(16),\n              decoration: BoxDecoration(\n                color: Colors.red[900]!.withOpacity(0.2),\n                borderRadius: BorderRadius.circular(12),\n                border: Border.all(\n                  color: Colors.red[700]!.withOpacity(0.5),\n                ),\n              ),\n              child: Icon(\n                Icons.error_outline,\n                size: 48,\n                color: Colors.red[400],\n              ),\n            ),\n            const SizedBox(height: 16),\n            Text(\n              ",
    "suggested_key": "buttonStyleElevatedbuttonstylefromBackgroundcolor",
    "context": "ElevatedButton.icon(\n              onPressed: onRefresh,\n              icon: const Icon(Icons.refresh, size: 18),\n              label: const Text('Erneut versuchen'),\n              style: ElevatedButton.styleFrom(\n                backgroundColor: AppTheme.primaryColor,\n                foregroundColor: Colors.white,",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 600,
    "column": 59,
    "original": " wirklich verlassen?'),\n        actions: [\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(false),\n            child: const Text('Abbrechen'),\n          ),\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(true),\n            style: TextButton.styleFrom(\n              foregroundColor: Colors.red,\n            ),\n            child: const Text('Verlassen'),\n          ),\n        ],\n      ),\n    );\n    \n    if (confirmed != true) return;\n\n    setState(() {\n      _isJoining = true;\n      _joinError = null;\n    });\n\n    try {\n      await _worldService.leaveWorld(world.id);\n      setState(() {\n        _isJoined = false;\n      });\n      \n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text('Du hast ${world.name} verlassen.'),\n            backgroundColor: Colors.orange,\n          ),\n        );\n      }\n    } catch (e) {\n      setState(() {\n        _joinError = e.toString().replaceAll('Exception: ', '');\n      });\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isJoining = false;\n        });\n      }\n    }\n  }\n  \n  void _playWorld() {\n    final world = _world;\n    if (world == null) return;\n    // Navigate directly to world dashboard for playing\n    context.goNamed('world-dashboard', pathParameters: {'id': world.id.toString()});\n  }\n\n  // Welt-Status bestimmen\n  String _getWorldStatusText() {\n    final world = _world;\n    if (world == null) return 'Unbekannt';\n    return world.statusText;\n  }\n\n  // Welt-Status-Farbe\n  Color _getWorldStatusColor() {\n    final world = _world;\n    if (world == null) return Colors.grey;\n    \n    switch (world.status) {\n      case WorldStatus.upcoming:\n        return Colors.orange;\n      case WorldStatus.open:\n        return Colors.green;\n      case WorldStatus.running:\n        return Colors.blue;\n      case WorldStatus.closed:\n        return Colors.red;\n      case WorldStatus.archived:\n        return Colors.grey;\n    }\n  }\n\n  // Kann der Benutzer beitreten?\n  // Retry-Funktion\n  Future<void> _retry() async {\n    await _loadWorldData();\n  }\n\n  // Navigation zu Registration mit vorausgefüllter E-Mail\n  void _navigateToRegistration(String email) {\n    AppLogger.app.i('🎫 Navigation zur Registration mit Invite-E-Mail', error: {'email': email});\n    \n    // FIXED: Invite-Token für Post-Auth-Redirect setzen\n    if (widget.inviteToken != null) {\n      _authService.setPendingInviteRedirect(widget.inviteToken!);\n    }\n    \n    context.goNamed('register', queryParameters: {'email': email, 'invite_token': widget.inviteToken});\n  }\n\n  // Navigation zu Login \n  void _navigateToLogin(String email) {\n    AppLogger.app.i('🎫 Navigation zum Login für Invite', error: {'email': email});\n    \n    // FIXED: Invite-Token für Post-Auth-Redirect setzen\n    if (widget.inviteToken != null) {\n      _authService.setPendingInviteRedirect(widget.inviteToken!);\n    }\n    \n    context.goNamed('login', queryParameters: {'invite_token': widget.inviteToken});\n  }\n\n  // User abmelden und zur Registration weiterleiten\n  Future<void> _logout() async {\n    try {\n      AppLogger.app.i('🎫 User logout für Invite-Umleitung', error: {'inviteEmail': _inviteEmail});\n      \n      // FIXED: Invite-Token für Post-Auth-Redirect setzen BEVOR logout\n      if (widget.inviteToken != null) {\n        _authService.setPendingInviteRedirect(widget.inviteToken!);\n      }\n      \n      await _authService.logout();\n      \n      if (mounted && _inviteEmail != null) {\n        // Nach Logout zur Registration mit korrekter E-Mail\n        context.goNamed('register', queryParameters: {\n          'email': _inviteEmail!,\n          'invite_token': widget.inviteToken ?? ''\n        });\n      }\n    } catch (e) {\n      AppLogger.logError('Logout für Invite fehlgeschlagen', e);\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          const SnackBar(\n            content: Text('Fehler beim Abmelden'),\n            backgroundColor: Colors.red,\n          ),\n        );\n      }\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    \n    return Scaffold(\n      body: BackgroundWidget(\n        child: Stack(\n          children: [\n            // Main content\n            SafeArea(\n              child: _isLoading\n                  ? const Center(\n                      child: CircularProgressIndicator(\n                        valueColor: AlwaysStoppedAnimation<Color>(AppTheme.primaryColor),\n                      ),\n                    )\n                  : _errorMessage != null\n                      ? _buildErrorState()\n                      : _infoMessage != null\n                          ? _buildInfoState()\n                          : _world == null\n                              ? _buildNotFoundState()\n                              : _buildWorldContent(),\n            ),\n            \n            // User info widget (only show when authenticated)\n            if (_isAuthenticated)\n              const UserInfoWidget(),\n            \n            // Navigation widget (only show when authenticated)\n            if (_isAuthenticated)\n              NavigationWidget(\n                currentRoute: 'world-join',\n                routeParams: {'id': widget.worldId},\n                isJoinedWorld: _isJoined,\n              ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildErrorState() {\n    return Center(\n      child: Padding(\n        padding: const EdgeInsets.all(24.0),\n        child: Center(\n          child: ConstrainedBox(\n            constraints: const BoxConstraints(maxWidth: 500),\n            child: Card(\n              elevation: 12,\n              color: const Color(0xFF1A1A1A), // Dunkle Karte\n              shape: RoundedRectangleBorder(\n                borderRadius: BorderRadius.circular(20),\n                side: BorderSide(\n                  color: AppTheme.primaryColor.withOpacity(0.3),\n                  width: 1,\n                ),\n              ),\n              child: Container(\n                decoration: BoxDecoration(\n                  borderRadius: BorderRadius.circular(20),\n                  gradient: const LinearGradient(\n                    begin: Alignment.topLeft,\n                    end: Alignment.bottomRight,\n                    colors: [\n                      Color(0xFF1A1A1A),\n                      Color(0xFF2A2A2A),\n                    ],\n                  ),\n                ),\n                child: Padding(\n                  padding: const EdgeInsets.all(32.0),\n                  child: Column(\n                    mainAxisSize: MainAxisSize.min,\n                    children: [\n                      Icon(\n                        Icons.error_outline,\n                        size: 80,\n                        color: Colors.red[400],\n                      ),\n                      const SizedBox(height: 24),\n                      Text(\n                        'Fehler beim Laden',\n                        style: Theme.of(context).textTheme.headlineSmall?.copyWith(\n                          color: Colors.white,\n                          fontWeight: FontWeight.bold,\n                        ),\n                      ),\n                      const SizedBox(height: 16),\n                      Text(\n                        _errorMessage ?? 'Unbekannter Fehler',\n                        style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                          color: Colors.grey[300],\n                        ),\n                        textAlign: TextAlign.center,\n                      ),\n                      const SizedBox(height: 32),\n                      \n                      // Verschiedene Action-Buttons je nach Szenario\n                      if (_showRegistrationButton && _inviteEmail != null) ...[\n                        // Registration Button für neuen User\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: ElevatedButton.icon(\n                            onPressed: () => _navigateToRegistration(_inviteEmail!),\n                            icon: const Icon(Icons.person_add),\n                            label: const Text('Jetzt registrieren'),\n                            style: ElevatedButton.styleFrom(\n                              backgroundColor: AppTheme.primaryColor,\n                              foregroundColor: Colors.white,\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                        const SizedBox(height: 12),\n                        // Login Button als Alternative\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: OutlinedButton.icon(\n                            onPressed: () => _navigateToLogin(_inviteEmail!),\n                            icon: const Icon(Icons.login),\n                            label: const Text('Bereits registriert? Anmelden'),\n                            style: OutlinedButton.styleFrom(\n                              foregroundColor: AppTheme.primaryColor,\n                              side: BorderSide(color: AppTheme.primaryColor),\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                      ] else if (_showLogoutButton && _inviteEmail != null) ...[\n                        // Logout Button für falschen User\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: ElevatedButton.icon(\n                            onPressed: _logout,\n                            icon: const Icon(Icons.logout),\n                            label: const Text('Abmelden & neu registrieren'),\n                            style: ElevatedButton.styleFrom(\n                              backgroundColor: Colors.orange,\n                              foregroundColor: Colors.white,\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                        const SizedBox(height: 12),\n                        // Abbrechen Button\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: OutlinedButton.icon(\n                            onPressed: () => context.goNamed('landing'),\n                            icon: const Icon(Icons.arrow_back),\n                            label: const Text('Zurück zur Startseite'),\n                            style: OutlinedButton.styleFrom(\n                              foregroundColor: Colors.grey,\n                              side: BorderSide(color: Colors.grey),\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                      ] else ...[\n                        // Standard Retry Button\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: ElevatedButton.icon(\n                            onPressed: _retry,\n                            icon: const Icon(Icons.refresh),\n                            label: const Text('Erneut versuchen'),\n                            style: ElevatedButton.styleFrom(\n                              backgroundColor: AppTheme.primaryColor,\n                              foregroundColor: Colors.white,\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                      ],\n                      const SizedBox(height: 16),\n                      TextButton(\n                        onPressed: () => context.goNamed('world-list'),\n                        child: const Text(\n                          'Zurück zu den Welten',\n                          style: TextStyle(\n                            color: AppTheme.primaryColor,\n                            fontWeight: FontWeight.bold,\n                          ),\n                        ),\n                      ),\n                    ],\n                  ),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n\n  Widget _buildInfoState() {\n    return Center(\n      child: Padding(\n        padding: const EdgeInsets.all(24.0),\n        child: Center(\n          child: ConstrainedBox(\n            constraints: const BoxConstraints(maxWidth: 500),\n            child: Card(\n              elevation: 12,\n              color: const Color(0xFF1A1A1A), // Dunkle Karte\n              shape: RoundedRectangleBorder(\n                borderRadius: BorderRadius.circular(20),\n                side: BorderSide(\n                  color: AppTheme.primaryColor.withOpacity(0.3),\n                  width: 1,\n                ),\n              ),\n              child: Container(\n                decoration: BoxDecoration(\n                  borderRadius: BorderRadius.circular(20),\n                  gradient: const LinearGradient(\n                    begin: Alignment.topLeft,\n                    end: Alignment.bottomRight,\n                    colors: [\n                      Color(0xFF1A1A1A),\n                      Color(0xFF2A2A2A),\n                    ],\n                  ),\n                ),\n                child: Padding(\n                  padding: const EdgeInsets.all(32.0),\n                  child: Column(\n                    mainAxisSize: MainAxisSize.min,\n                    children: [\n                      Icon(\n                        Icons.info_outline,\n                        size: 80,\n                        color: Colors.blue[400],\n                      ),\n                      const SizedBox(height: 24),\n                      Text(\n                        'Information',\n                        style: Theme.of(context).textTheme.headlineSmall?.copyWith(\n                          color: Colors.white,\n                          fontWeight: FontWeight.bold,\n                        ),\n                      ),\n                      const SizedBox(height: 16),\n                      Text(\n                        _infoMessage ?? 'Keine Information verfügbar',\n                        style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                          color: Colors.grey[300],\n                        ),\n                        textAlign: TextAlign.center,\n                      ),\n                      const SizedBox(height: 32),\n                      \n                      // **NEUE INTELLIGENTE BUTTONS**\n                      _buildActionButtons(),\n                      \n                      // **INVITE-FLOWS: Kein ",
    "suggested_key": "buttonWirklichVerlassenActions",
    "context": "context: context,\n      builder: (context) => AlertDialog(\n        title: const Text('Welt verlassen?'),\n        content: Text('Möchtest du die Welt \"${world.name}\" wirklich verlassen?'),\n        actions: [\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(false),",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: AlertDialog",
    "quote_type": "\""
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 253,
    "column": 24,
    "original": ";\n    bool showLoginButton = false;\n    bool showRegisterButton = false;\n    bool showAcceptButton = false;\n    bool showLogoutButton = false;\n    \n    // Basis-Info-Text mit Einlader, Welt und Gültigkeitsstatus\n    final inviterText = invitedByName;\n    \n    final actionTypeText = isUpcoming \n      ? ",
    "suggested_key": "buttonBoolShowloginbuttonFalse",
    "context": "// **NEUE INTELLIGENTE BUTTON-LOGIK**\n    String actionText = '';\n    String infoText = '';\n    bool showLoginButton = false;\n    bool showRegisterButton = false;\n    bool showAcceptButton = false;",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 288,
    "column": 24,
    "original": "Du musst dich mit der E-Mail-Adresse $inviteEmail registrieren.",
    "suggested_key": "buttonDuMusstDich",
    "context": "case 'not_logged_in':\n        if (requiresAction == 'register') {\n          // Mail ist unbekannt -> nur Register\n          actionText = 'Du musst dich mit der E-Mail-Adresse $inviteEmail registrieren.';\n          infoText = '$baseInfoText\\n\\n$actionText';\n          showRegisterButton = isInviteValid; // Nur bei gültigen Invites\n        }",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 289,
    "column": 22,
    "original": "$baseInfoText\\n\\n$actionText",
    "suggested_key": "buttonBaseinfotextnnactiontext",
    "context": "if (requiresAction == 'register') {\n          // Mail ist unbekannt -> nur Register\n          actionText = 'Du musst dich mit der E-Mail-Adresse $inviteEmail registrieren.';\n          infoText = '$baseInfoText\\n\\n$actionText';\n          showRegisterButton = isInviteValid; // Nur bei gültigen Invites\n        }\n        break;",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 298,
    "column": 22,
    "original": "$baseInfoText\\n\\n$actionText",
    "suggested_key": "buttonBaseinfotextnnactiontext",
    "context": "if (requiresAction == 'login') {\n          // Mail ist bekannt, User nicht angemeldet -> nur Login\n          actionText = 'Dein Account mit $inviteEmail ist bereits registriert. Bitte melde dich an.';\n          infoText = '$baseInfoText\\n\\n$actionText';\n          showLoginButton = isInviteValid; // Nur bei gültigen Invites\n        }\n        break;",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 308,
    "column": 22,
    "original": "$baseInfoText\\n\\n$actionText\\n\\nBitte melde dich ab und registriere dich mit der richtigen E-Mail-Adresse.",
    "suggested_key": "buttonBaseinfotextnnactiontextnnbitteMeldeDich",
    "context": "final currentUserEmail = userStatusData['currentUser']?['email'];\n          // User mit falscher Mail angemeldet -> Logout + Register\n          actionText = 'Diese Einladung ist für $inviteEmail bestimmt, aber du bist als $currentUserEmail angemeldet.';\n          infoText = '$baseInfoText\\n\\n$actionText\\n\\nBitte melde dich ab und registriere dich mit der richtigen E-Mail-Adresse.';\n          showLogoutButton = isInviteValid; // Nur bei gültigen Invites\n        }\n        break;",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 314,
    "column": 42,
    "original": ") {\n          // User richtig angemeldet -> nur Accept Button (KEIN Auto-Accept!)\n          actionText = ",
    "suggested_key": "buttonUserRichtigAngemeldet",
    "context": "break;\n        \n      case 'correct_email':\n        if (requiresAction == 'join_world') {\n          // User richtig angemeldet -> nur Accept Button (KEIN Auto-Accept!)\n          actionText = 'Du bist mit der richtigen E-Mail-Adresse angemeldet und kannst die Einladung jetzt annehmen.';\n          infoText = '$baseInfoText\\n\\n$actionText';",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 317,
    "column": 22,
    "original": "$baseInfoText\\n\\n$actionText",
    "suggested_key": "buttonBaseinfotextnnactiontext",
    "context": "if (requiresAction == 'join_world') {\n          // User richtig angemeldet -> nur Accept Button (KEIN Auto-Accept!)\n          actionText = 'Du bist mit der richtigen E-Mail-Adresse angemeldet und kannst die Einladung jetzt annehmen.';\n          infoText = '$baseInfoText\\n\\n$actionText';\n          showAcceptButton = isInviteValid; // Nur bei gültigen Invites\n          \n          // Auto-Accept entfernt: User soll bewusst entscheiden!",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 600,
    "column": 23,
    "original": "Möchtest du die Welt \"${world.name}\" wirklich verlassen?",
    "suggested_key": "buttonMöchtestDuDie",
    "context": "context: context,\n      builder: (context) => AlertDialog(\n        title: const Text('Welt verlassen?'),\n        content: Text('Möchtest du die Welt \"${world.name}\" wirklich verlassen?'),\n        actions: [\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(false),",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: AlertDialog",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 604,
    "column": 41,
    "original": "),\n          ),\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(true),\n            style: TextButton.styleFrom(\n              foregroundColor: Colors.red,\n            ),\n            child: const Text(",
    "suggested_key": "buttonTextbuttonOnpressedNavigatorofcontextpoptrue",
    "context": "actions: [\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(false),\n            child: const Text('Abbrechen'),\n          ),\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(true),",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: AlertDialog",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 853,
    "column": 66,
    "original": "),\n                            style: ElevatedButton.styleFrom(\n                              backgroundColor: AppTheme.primaryColor,\n                              foregroundColor: Colors.white,\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                        const SizedBox(height: 12),\n                        // Login Button als Alternative\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: OutlinedButton.icon(\n                            onPressed: () => _navigateToLogin(_inviteEmail!),\n                            icon: const Icon(Icons.login),\n                            label: const Text(",
    "suggested_key": "buttonStyleElevatedbuttonstylefromBackgroundcolor",
    "context": "child: ElevatedButton.icon(\n                            onPressed: () => _navigateToRegistration(_inviteEmail!),\n                            icon: const Icon(Icons.person_add),\n                            label: const Text('Jetzt registrieren'),\n                            style: ElevatedButton.styleFrom(\n                              backgroundColor: AppTheme.primaryColor,\n                              foregroundColor: Colors.white,",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 871,
    "column": 77,
    "original": "),\n                            style: OutlinedButton.styleFrom(\n                              foregroundColor: AppTheme.primaryColor,\n                              side: BorderSide(color: AppTheme.primaryColor),\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                      ] else if (_showLogoutButton && _inviteEmail != null) ...[\n                        // Logout Button für falschen User\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: ElevatedButton.icon(\n                            onPressed: _logout,\n                            icon: const Icon(Icons.logout),\n                            label: const Text(",
    "suggested_key": "buttonStyleOutlinedbuttonstylefromForegroundcolor",
    "context": "child: OutlinedButton.icon(\n                            onPressed: () => _navigateToLogin(_inviteEmail!),\n                            icon: const Icon(Icons.login),\n                            label: const Text('Bereits registriert? Anmelden'),\n                            style: OutlinedButton.styleFrom(\n                              foregroundColor: AppTheme.primaryColor,\n                              side: BorderSide(color: AppTheme.primaryColor),",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: OutlinedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 889,
    "column": 75,
    "original": "),\n                            style: ElevatedButton.styleFrom(\n                              backgroundColor: Colors.orange,\n                              foregroundColor: Colors.white,\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                        const SizedBox(height: 12),\n                        // Abbrechen Button\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: OutlinedButton.icon(\n                            onPressed: () => context.goNamed(",
    "suggested_key": "buttonStyleElevatedbuttonstylefromBackgroundcolor",
    "context": "child: ElevatedButton.icon(\n                            onPressed: _logout,\n                            icon: const Icon(Icons.logout),\n                            label: const Text('Abmelden & neu registrieren'),\n                            style: ElevatedButton.styleFrom(\n                              backgroundColor: Colors.orange,\n                              foregroundColor: Colors.white,",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 907,
    "column": 47,
    "original": "Zurück zur Startseite",
    "suggested_key": "buttonZurückZurStartseite",
    "context": "child: OutlinedButton.icon(\n                            onPressed: () => context.goNamed('landing'),\n                            icon: const Icon(Icons.arrow_back),\n                            label: const Text('Zurück zur Startseite'),\n                            style: OutlinedButton.styleFrom(\n                              foregroundColor: Colors.grey,\n                              side: BorderSide(color: Colors.grey),",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: OutlinedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 925,
    "column": 64,
    "original": "),\n                            style: ElevatedButton.styleFrom(\n                              backgroundColor: AppTheme.primaryColor,\n                              foregroundColor: Colors.white,\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                      ],\n                      const SizedBox(height: 16),\n                      TextButton(\n                        onPressed: () => context.goNamed(",
    "suggested_key": "buttonStyleElevatedbuttonstylefromBackgroundcolor",
    "context": "child: ElevatedButton.icon(\n                            onPressed: _retry,\n                            icon: const Icon(Icons.refresh),\n                            label: const Text('Erneut versuchen'),\n                            style: ElevatedButton.styleFrom(\n                              backgroundColor: AppTheme.primaryColor,\n                              foregroundColor: Colors.white,",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 940,
    "column": 27,
    "original": "Zurück zu den Welten",
    "suggested_key": "buttonZurückZuDen",
    "context": "TextButton(\n                        onPressed: () => context.goNamed('world-list'),\n                        child: const Text(\n                          'Zurück zu den Welten',\n                          style: TextStyle(\n                            color: AppTheme.primaryColor,\n                            fontWeight: FontWeight.bold,",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: TextButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1022,
    "column": 60,
    "original": "world-list",
    "suggested_key": "buttonWorldlist",
    "context": "if (widget.inviteToken == null) ...[\n                        const SizedBox(height: 16),\n                        TextButton(\n                          onPressed: () => context.goNamed('world-list'),\n                          child: const Text(\n                            'Zurück zu den Welten',\n                            style: TextStyle(",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: TextButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1024,
    "column": 29,
    "original": "Zurück zu den Welten",
    "suggested_key": "buttonZurückZuDen",
    "context": "TextButton(\n                          onPressed: () => context.goNamed('world-list'),\n                          child: const Text(\n                            'Zurück zu den Welten',\n                            style: TextStyle(\n                              color: AppTheme.primaryColor,\n                              fontWeight: FontWeight.bold,",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: TextButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1103,
    "column": 60,
    "original": "world-list",
    "suggested_key": "buttonWorldlist",
    "context": "width: double.infinity,\n                        height: 48,\n                        child: ElevatedButton(\n                          onPressed: () => context.goNamed('world-list'),\n                          style: ElevatedButton.styleFrom(\n                            backgroundColor: AppTheme.primaryColor,\n                            foregroundColor: Colors.white,",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1600,
    "column": 93,
    "original": ";\n              \n              // Pending Redirect setzen für Post-Auth-Redirect\n              _authService.setPendingInviteRedirect(widget.inviteToken!);\n              \n              context.go(loginRoute);\n            },\n            style: ElevatedButton.styleFrom(\n              backgroundColor: AppTheme.primaryColor,\n              foregroundColor: Colors.white,\n              padding: const EdgeInsets.symmetric(vertical: 16),\n              shape: RoundedRectangleBorder(\n                borderRadius: BorderRadius.circular(12),\n              ),\n            ),\n            child: const Text(\n              ",
    "suggested_key": "buttonPendingRedirectSetzen",
    "context": "child: ElevatedButton(\n            onPressed: () {\n              // Redirect auf Login-Seite mit E-Mail vorausgefüllt\n              final loginRoute = '/go/auth/login?email=${Uri.encodeComponent(_inviteEmail!)}';\n              \n              // Pending Redirect setzen für Post-Auth-Redirect\n              _authService.setPendingInviteRedirect(widget.inviteToken!);",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1633,
    "column": 99,
    "original": ";\n              \n              // Pending Redirect setzen für Post-Auth-Redirect\n              _authService.setPendingInviteRedirect(widget.inviteToken!);\n              \n              context.go(registerRoute);\n            },\n            style: ElevatedButton.styleFrom(\n              backgroundColor: AppTheme.secondaryColor,\n              foregroundColor: Colors.white,\n              padding: const EdgeInsets.symmetric(vertical: 16),\n              shape: RoundedRectangleBorder(\n                borderRadius: BorderRadius.circular(12),\n              ),\n            ),\n            child: const Text(\n              ",
    "suggested_key": "buttonPendingRedirectSetzen",
    "context": "child: ElevatedButton(\n            onPressed: () {\n              // Redirect auf Register-Seite mit E-Mail vorausgefüllt\n              final registerRoute = '/go/auth/register?email=${Uri.encodeComponent(_inviteEmail!)}';\n              \n              // Pending Redirect setzen für Post-Auth-Redirect\n              _authService.setPendingInviteRedirect(widget.inviteToken!);",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1702,
    "column": 40,
    "original": ");\n              }\n            },\n            style: ElevatedButton.styleFrom(\n              backgroundColor: Colors.red[600],\n              foregroundColor: Colors.white,\n              padding: const EdgeInsets.symmetric(vertical: 16),\n              shape: RoundedRectangleBorder(\n                borderRadius: BorderRadius.circular(12),\n              ),\n            ),\n            child: const Text(\n              ",
    "suggested_key": "buttonStyleElevatedbuttonstylefromBackgroundcolor",
    "context": "await _authService.logout();\n              // Nach Logout zur Landing-Page\n              if (mounted) {\n                context.go('/go/landing');\n              }\n            },\n            style: ElevatedButton.styleFrom(",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1740,
    "column": 79,
    "original": "Vorregistrierung zurückziehen",
    "suggested_key": "buttonVorregistrierungZurückziehen",
    "context": "child: ElevatedButton.icon(\n                    onPressed: (_isPreRegistering || _isJoining) ? null : _cancelPreRegistration,\n                    icon: const Icon(Icons.cancel),\n                    label: Text(_isPreRegistering ? 'Wird zurückgezogen...' : 'Vorregistrierung zurückziehen'),\n                    style: ElevatedButton.styleFrom(\n                      backgroundColor: Colors.red[600],\n                      foregroundColor: Colors.white,",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1760,
    "column": 53,
    "original": "Wird registriert...",
    "suggested_key": "buttonWirdRegistriert",
    "context": "child: ElevatedButton.icon(\n                    onPressed: (_isPreRegistering || _isJoining) ? null : _preRegisterWorld,\n                    icon: const Icon(Icons.how_to_reg),\n                    label: Text(_isPreRegistering ? 'Wird registriert...' : 'Vorregistrieren'),\n                    style: ElevatedButton.styleFrom(\n                      backgroundColor: Colors.orange[600],\n                      foregroundColor: Colors.white,",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1787,
    "column": 47,
    "original": "),\n                    style: ElevatedButton.styleFrom(\n                      backgroundColor: Colors.green[600],\n                      foregroundColor: Colors.white,\n                      padding: const EdgeInsets.symmetric(vertical: 16),\n                      shape: RoundedRectangleBorder(\n                        borderRadius: BorderRadius.circular(12),\n                      ),\n                    ),\n                  ),\n                ),\n              );\n              \n              // Verlassen Button\n              buttons.add(\n                Container(\n                  width: double.infinity,\n                  margin: const EdgeInsets.only(bottom: 12.0),\n                  child: ElevatedButton.icon(\n                    onPressed: _isJoining ? null : _leaveWorld,\n                    icon: const Icon(Icons.exit_to_app),\n                    label: Text(_isJoining ? ",
    "suggested_key": "buttonStyleElevatedbuttonstylefromBackgroundcolor",
    "context": "child: ElevatedButton.icon(\n                    onPressed: _playWorld,\n                    icon: const Icon(Icons.play_circle_filled),\n                    label: const Text('Spielen'),\n                    style: ElevatedButton.styleFrom(\n                      backgroundColor: Colors.green[600],\n                      foregroundColor: Colors.white,",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1808,
    "column": 83,
    "original": "),\n                    style: ElevatedButton.styleFrom(\n                      backgroundColor: Colors.red[600],\n                      foregroundColor: Colors.white,\n                      padding: const EdgeInsets.symmetric(vertical: 16),\n                      shape: RoundedRectangleBorder(\n                        borderRadius: BorderRadius.circular(12),\n                      ),\n                    ),\n                  ),\n                ),\n              );\n            } else {\n              // Beitreten Button\n              buttons.add(\n                Container(\n                  width: double.infinity,\n                  margin: const EdgeInsets.only(bottom: 12.0),\n                  child: ElevatedButton.icon(\n                    onPressed: _isJoining ? null : _joinWorld,\n                    icon: const Icon(Icons.play_arrow),\n                    label: Text(_isJoining ? ",
    "suggested_key": "buttonStyleElevatedbuttonstylefromBackgroundcolor",
    "context": "child: ElevatedButton.icon(\n                    onPressed: _isJoining ? null : _leaveWorld,\n                    icon: const Icon(Icons.exit_to_app),\n                    label: Text(_isJoining ? 'Wird verlassen...' : 'Welt verlassen'),\n                    style: ElevatedButton.styleFrom(\n                      backgroundColor: Colors.red[600],\n                      foregroundColor: Colors.white,",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1829,
    "column": 86,
    "original": "),\n                    style: ElevatedButton.styleFrom(\n                      backgroundColor: AppTheme.primaryColor,\n                      foregroundColor: Colors.white,\n                      padding: const EdgeInsets.symmetric(vertical: 16),\n                      shape: RoundedRectangleBorder(\n                        borderRadius: BorderRadius.circular(12),\n                      ),\n                    ),\n                  ),\n                ),\n              );\n            }\n            break;\n            \n          case WorldStatus.closed:\n          case WorldStatus.archived:\n            // Keine Aktionen möglich - Status-Info\n            buttons.add(\n              Container(\n                width: double.infinity,\n                margin: const EdgeInsets.only(bottom: 12.0),\n                padding: const EdgeInsets.all(16),\n                decoration: BoxDecoration(\n                  color: Colors.grey.withOpacity(0.1),\n                  borderRadius: BorderRadius.circular(12),\n                  border: Border.all(color: Colors.grey.withOpacity(0.3)),\n                ),\n                child: Column(\n                  children: [\n                    Icon(\n                      Icons.lock_outline,\n                      color: Colors.grey[600],\n                      size: 32,\n                    ),\n                    const SizedBox(height: 8),\n                    Text(\n                      world.status == WorldStatus.closed\n                          ? ",
    "suggested_key": "buttonStyleElevatedbuttonstylefromBackgroundcolor",
    "context": "child: ElevatedButton.icon(\n                    onPressed: _isJoining ? null : _joinWorld,\n                    icon: const Icon(Icons.play_arrow),\n                    label: Text(_isJoining ? 'Wird beigetreten...' : 'Jetzt beitreten'),\n                    style: ElevatedButton.styleFrom(\n                      backgroundColor: AppTheme.primaryColor,\n                      foregroundColor: Colors.white,",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 600,
    "column": 59,
    "original": " wirklich verlassen?'),\n        actions: [\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(false),\n            child: const Text('Abbrechen'),\n          ),\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(true),\n            style: TextButton.styleFrom(\n              foregroundColor: Colors.red,\n            ),\n            child: const Text('Verlassen'),\n          ),\n        ],\n      ),\n    );\n    \n    if (confirmed != true) return;\n\n    setState(() {\n      _isJoining = true;\n      _joinError = null;\n    });\n\n    try {\n      await _worldService.leaveWorld(world.id);\n      setState(() {\n        _isJoined = false;\n      });\n      \n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text('Du hast ${world.name} verlassen.'),\n            backgroundColor: Colors.orange,\n          ),\n        );\n      }\n    } catch (e) {\n      setState(() {\n        _joinError = e.toString().replaceAll('Exception: ', '');\n      });\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isJoining = false;\n        });\n      }\n    }\n  }\n  \n  void _playWorld() {\n    final world = _world;\n    if (world == null) return;\n    // Navigate directly to world dashboard for playing\n    context.goNamed('world-dashboard', pathParameters: {'id': world.id.toString()});\n  }\n\n  // Welt-Status bestimmen\n  String _getWorldStatusText() {\n    final world = _world;\n    if (world == null) return 'Unbekannt';\n    return world.statusText;\n  }\n\n  // Welt-Status-Farbe\n  Color _getWorldStatusColor() {\n    final world = _world;\n    if (world == null) return Colors.grey;\n    \n    switch (world.status) {\n      case WorldStatus.upcoming:\n        return Colors.orange;\n      case WorldStatus.open:\n        return Colors.green;\n      case WorldStatus.running:\n        return Colors.blue;\n      case WorldStatus.closed:\n        return Colors.red;\n      case WorldStatus.archived:\n        return Colors.grey;\n    }\n  }\n\n  // Kann der Benutzer beitreten?\n  // Retry-Funktion\n  Future<void> _retry() async {\n    await _loadWorldData();\n  }\n\n  // Navigation zu Registration mit vorausgefüllter E-Mail\n  void _navigateToRegistration(String email) {\n    AppLogger.app.i('🎫 Navigation zur Registration mit Invite-E-Mail', error: {'email': email});\n    \n    // FIXED: Invite-Token für Post-Auth-Redirect setzen\n    if (widget.inviteToken != null) {\n      _authService.setPendingInviteRedirect(widget.inviteToken!);\n    }\n    \n    context.goNamed('register', queryParameters: {'email': email, 'invite_token': widget.inviteToken});\n  }\n\n  // Navigation zu Login \n  void _navigateToLogin(String email) {\n    AppLogger.app.i('🎫 Navigation zum Login für Invite', error: {'email': email});\n    \n    // FIXED: Invite-Token für Post-Auth-Redirect setzen\n    if (widget.inviteToken != null) {\n      _authService.setPendingInviteRedirect(widget.inviteToken!);\n    }\n    \n    context.goNamed('login', queryParameters: {'invite_token': widget.inviteToken});\n  }\n\n  // User abmelden und zur Registration weiterleiten\n  Future<void> _logout() async {\n    try {\n      AppLogger.app.i('🎫 User logout für Invite-Umleitung', error: {'inviteEmail': _inviteEmail});\n      \n      // FIXED: Invite-Token für Post-Auth-Redirect setzen BEVOR logout\n      if (widget.inviteToken != null) {\n        _authService.setPendingInviteRedirect(widget.inviteToken!);\n      }\n      \n      await _authService.logout();\n      \n      if (mounted && _inviteEmail != null) {\n        // Nach Logout zur Registration mit korrekter E-Mail\n        context.goNamed('register', queryParameters: {\n          'email': _inviteEmail!,\n          'invite_token': widget.inviteToken ?? ''\n        });\n      }\n    } catch (e) {\n      AppLogger.logError('Logout für Invite fehlgeschlagen', e);\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          const SnackBar(\n            content: Text('Fehler beim Abmelden'),\n            backgroundColor: Colors.red,\n          ),\n        );\n      }\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    \n    return Scaffold(\n      body: BackgroundWidget(\n        child: Stack(\n          children: [\n            // Main content\n            SafeArea(\n              child: _isLoading\n                  ? const Center(\n                      child: CircularProgressIndicator(\n                        valueColor: AlwaysStoppedAnimation<Color>(AppTheme.primaryColor),\n                      ),\n                    )\n                  : _errorMessage != null\n                      ? _buildErrorState()\n                      : _infoMessage != null\n                          ? _buildInfoState()\n                          : _world == null\n                              ? _buildNotFoundState()\n                              : _buildWorldContent(),\n            ),\n            \n            // User info widget (only show when authenticated)\n            if (_isAuthenticated)\n              const UserInfoWidget(),\n            \n            // Navigation widget (only show when authenticated)\n            if (_isAuthenticated)\n              NavigationWidget(\n                currentRoute: 'world-join',\n                routeParams: {'id': widget.worldId},\n                isJoinedWorld: _isJoined,\n              ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildErrorState() {\n    return Center(\n      child: Padding(\n        padding: const EdgeInsets.all(24.0),\n        child: Center(\n          child: ConstrainedBox(\n            constraints: const BoxConstraints(maxWidth: 500),\n            child: Card(\n              elevation: 12,\n              color: const Color(0xFF1A1A1A), // Dunkle Karte\n              shape: RoundedRectangleBorder(\n                borderRadius: BorderRadius.circular(20),\n                side: BorderSide(\n                  color: AppTheme.primaryColor.withOpacity(0.3),\n                  width: 1,\n                ),\n              ),\n              child: Container(\n                decoration: BoxDecoration(\n                  borderRadius: BorderRadius.circular(20),\n                  gradient: const LinearGradient(\n                    begin: Alignment.topLeft,\n                    end: Alignment.bottomRight,\n                    colors: [\n                      Color(0xFF1A1A1A),\n                      Color(0xFF2A2A2A),\n                    ],\n                  ),\n                ),\n                child: Padding(\n                  padding: const EdgeInsets.all(32.0),\n                  child: Column(\n                    mainAxisSize: MainAxisSize.min,\n                    children: [\n                      Icon(\n                        Icons.error_outline,\n                        size: 80,\n                        color: Colors.red[400],\n                      ),\n                      const SizedBox(height: 24),\n                      Text(\n                        'Fehler beim Laden',\n                        style: Theme.of(context).textTheme.headlineSmall?.copyWith(\n                          color: Colors.white,\n                          fontWeight: FontWeight.bold,\n                        ),\n                      ),\n                      const SizedBox(height: 16),\n                      Text(\n                        _errorMessage ?? 'Unbekannter Fehler',\n                        style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                          color: Colors.grey[300],\n                        ),\n                        textAlign: TextAlign.center,\n                      ),\n                      const SizedBox(height: 32),\n                      \n                      // Verschiedene Action-Buttons je nach Szenario\n                      if (_showRegistrationButton && _inviteEmail != null) ...[\n                        // Registration Button für neuen User\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: ElevatedButton.icon(\n                            onPressed: () => _navigateToRegistration(_inviteEmail!),\n                            icon: const Icon(Icons.person_add),\n                            label: const Text('Jetzt registrieren'),\n                            style: ElevatedButton.styleFrom(\n                              backgroundColor: AppTheme.primaryColor,\n                              foregroundColor: Colors.white,\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                        const SizedBox(height: 12),\n                        // Login Button als Alternative\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: OutlinedButton.icon(\n                            onPressed: () => _navigateToLogin(_inviteEmail!),\n                            icon: const Icon(Icons.login),\n                            label: const Text('Bereits registriert? Anmelden'),\n                            style: OutlinedButton.styleFrom(\n                              foregroundColor: AppTheme.primaryColor,\n                              side: BorderSide(color: AppTheme.primaryColor),\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                      ] else if (_showLogoutButton && _inviteEmail != null) ...[\n                        // Logout Button für falschen User\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: ElevatedButton.icon(\n                            onPressed: _logout,\n                            icon: const Icon(Icons.logout),\n                            label: const Text('Abmelden & neu registrieren'),\n                            style: ElevatedButton.styleFrom(\n                              backgroundColor: Colors.orange,\n                              foregroundColor: Colors.white,\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                        const SizedBox(height: 12),\n                        // Abbrechen Button\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: OutlinedButton.icon(\n                            onPressed: () => context.goNamed('landing'),\n                            icon: const Icon(Icons.arrow_back),\n                            label: const Text('Zurück zur Startseite'),\n                            style: OutlinedButton.styleFrom(\n                              foregroundColor: Colors.grey,\n                              side: BorderSide(color: Colors.grey),\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                      ] else ...[\n                        // Standard Retry Button\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: ElevatedButton.icon(\n                            onPressed: _retry,\n                            icon: const Icon(Icons.refresh),\n                            label: const Text('Erneut versuchen'),\n                            style: ElevatedButton.styleFrom(\n                              backgroundColor: AppTheme.primaryColor,\n                              foregroundColor: Colors.white,\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                      ],\n                      const SizedBox(height: 16),\n                      TextButton(\n                        onPressed: () => context.goNamed('world-list'),\n                        child: const Text(\n                          'Zurück zu den Welten',\n                          style: TextStyle(\n                            color: AppTheme.primaryColor,\n                            fontWeight: FontWeight.bold,\n                          ),\n                        ),\n                      ),\n                    ],\n                  ),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n\n  Widget _buildInfoState() {\n    return Center(\n      child: Padding(\n        padding: const EdgeInsets.all(24.0),\n        child: Center(\n          child: ConstrainedBox(\n            constraints: const BoxConstraints(maxWidth: 500),\n            child: Card(\n              elevation: 12,\n              color: const Color(0xFF1A1A1A), // Dunkle Karte\n              shape: RoundedRectangleBorder(\n                borderRadius: BorderRadius.circular(20),\n                side: BorderSide(\n                  color: AppTheme.primaryColor.withOpacity(0.3),\n                  width: 1,\n                ),\n              ),\n              child: Container(\n                decoration: BoxDecoration(\n                  borderRadius: BorderRadius.circular(20),\n                  gradient: const LinearGradient(\n                    begin: Alignment.topLeft,\n                    end: Alignment.bottomRight,\n                    colors: [\n                      Color(0xFF1A1A1A),\n                      Color(0xFF2A2A2A),\n                    ],\n                  ),\n                ),\n                child: Padding(\n                  padding: const EdgeInsets.all(32.0),\n                  child: Column(\n                    mainAxisSize: MainAxisSize.min,\n                    children: [\n                      Icon(\n                        Icons.info_outline,\n                        size: 80,\n                        color: Colors.blue[400],\n                      ),\n                      const SizedBox(height: 24),\n                      Text(\n                        'Information',\n                        style: Theme.of(context).textTheme.headlineSmall?.copyWith(\n                          color: Colors.white,\n                          fontWeight: FontWeight.bold,\n                        ),\n                      ),\n                      const SizedBox(height: 16),\n                      Text(\n                        _infoMessage ?? 'Keine Information verfügbar',\n                        style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                          color: Colors.grey[300],\n                        ),\n                        textAlign: TextAlign.center,\n                      ),\n                      const SizedBox(height: 32),\n                      \n                      // **NEUE INTELLIGENTE BUTTONS**\n                      _buildActionButtons(),\n                      \n                      // **INVITE-FLOWS: Kein ",
    "suggested_key": "buttonWirklichVerlassenActions",
    "context": "context: context,\n      builder: (context) => AlertDialog(\n        title: const Text('Welt verlassen?'),\n        content: Text('Möchtest du die Welt \"${world.name}\" wirklich verlassen?'),\n        actions: [\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(false),",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: AlertDialog",
    "quote_type": "\""
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 600,
    "column": 23,
    "original": "Möchtest du die Welt \"${world.name}\" wirklich verlassen?",
    "suggested_key": "buttonMöchtestDuDie",
    "context": "context: context,\n      builder: (context) => AlertDialog(\n        title: const Text('Welt verlassen?'),\n        content: Text('Möchtest du die Welt \"${world.name}\" wirklich verlassen?'),\n        actions: [\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(false),",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: AlertDialog",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 600,
    "column": 59,
    "original": " wirklich verlassen?'),\n        actions: [\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(false),\n            child: const Text('Abbrechen'),\n          ),\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(true),\n            style: TextButton.styleFrom(\n              foregroundColor: Colors.red,\n            ),\n            child: const Text('Verlassen'),\n          ),\n        ],\n      ),\n    );\n    \n    if (confirmed != true) return;\n\n    setState(() {\n      _isJoining = true;\n      _joinError = null;\n    });\n\n    try {\n      await _worldService.leaveWorld(world.id);\n      setState(() {\n        _isJoined = false;\n      });\n      \n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text('Du hast ${world.name} verlassen.'),\n            backgroundColor: Colors.orange,\n          ),\n        );\n      }\n    } catch (e) {\n      setState(() {\n        _joinError = e.toString().replaceAll('Exception: ', '');\n      });\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isJoining = false;\n        });\n      }\n    }\n  }\n  \n  void _playWorld() {\n    final world = _world;\n    if (world == null) return;\n    // Navigate directly to world dashboard for playing\n    context.goNamed('world-dashboard', pathParameters: {'id': world.id.toString()});\n  }\n\n  // Welt-Status bestimmen\n  String _getWorldStatusText() {\n    final world = _world;\n    if (world == null) return 'Unbekannt';\n    return world.statusText;\n  }\n\n  // Welt-Status-Farbe\n  Color _getWorldStatusColor() {\n    final world = _world;\n    if (world == null) return Colors.grey;\n    \n    switch (world.status) {\n      case WorldStatus.upcoming:\n        return Colors.orange;\n      case WorldStatus.open:\n        return Colors.green;\n      case WorldStatus.running:\n        return Colors.blue;\n      case WorldStatus.closed:\n        return Colors.red;\n      case WorldStatus.archived:\n        return Colors.grey;\n    }\n  }\n\n  // Kann der Benutzer beitreten?\n  // Retry-Funktion\n  Future<void> _retry() async {\n    await _loadWorldData();\n  }\n\n  // Navigation zu Registration mit vorausgefüllter E-Mail\n  void _navigateToRegistration(String email) {\n    AppLogger.app.i('🎫 Navigation zur Registration mit Invite-E-Mail', error: {'email': email});\n    \n    // FIXED: Invite-Token für Post-Auth-Redirect setzen\n    if (widget.inviteToken != null) {\n      _authService.setPendingInviteRedirect(widget.inviteToken!);\n    }\n    \n    context.goNamed('register', queryParameters: {'email': email, 'invite_token': widget.inviteToken});\n  }\n\n  // Navigation zu Login \n  void _navigateToLogin(String email) {\n    AppLogger.app.i('🎫 Navigation zum Login für Invite', error: {'email': email});\n    \n    // FIXED: Invite-Token für Post-Auth-Redirect setzen\n    if (widget.inviteToken != null) {\n      _authService.setPendingInviteRedirect(widget.inviteToken!);\n    }\n    \n    context.goNamed('login', queryParameters: {'invite_token': widget.inviteToken});\n  }\n\n  // User abmelden und zur Registration weiterleiten\n  Future<void> _logout() async {\n    try {\n      AppLogger.app.i('🎫 User logout für Invite-Umleitung', error: {'inviteEmail': _inviteEmail});\n      \n      // FIXED: Invite-Token für Post-Auth-Redirect setzen BEVOR logout\n      if (widget.inviteToken != null) {\n        _authService.setPendingInviteRedirect(widget.inviteToken!);\n      }\n      \n      await _authService.logout();\n      \n      if (mounted && _inviteEmail != null) {\n        // Nach Logout zur Registration mit korrekter E-Mail\n        context.goNamed('register', queryParameters: {\n          'email': _inviteEmail!,\n          'invite_token': widget.inviteToken ?? ''\n        });\n      }\n    } catch (e) {\n      AppLogger.logError('Logout für Invite fehlgeschlagen', e);\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          const SnackBar(\n            content: Text('Fehler beim Abmelden'),\n            backgroundColor: Colors.red,\n          ),\n        );\n      }\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    \n    return Scaffold(\n      body: BackgroundWidget(\n        child: Stack(\n          children: [\n            // Main content\n            SafeArea(\n              child: _isLoading\n                  ? const Center(\n                      child: CircularProgressIndicator(\n                        valueColor: AlwaysStoppedAnimation<Color>(AppTheme.primaryColor),\n                      ),\n                    )\n                  : _errorMessage != null\n                      ? _buildErrorState()\n                      : _infoMessage != null\n                          ? _buildInfoState()\n                          : _world == null\n                              ? _buildNotFoundState()\n                              : _buildWorldContent(),\n            ),\n            \n            // User info widget (only show when authenticated)\n            if (_isAuthenticated)\n              const UserInfoWidget(),\n            \n            // Navigation widget (only show when authenticated)\n            if (_isAuthenticated)\n              NavigationWidget(\n                currentRoute: 'world-join',\n                routeParams: {'id': widget.worldId},\n                isJoinedWorld: _isJoined,\n              ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildErrorState() {\n    return Center(\n      child: Padding(\n        padding: const EdgeInsets.all(24.0),\n        child: Center(\n          child: ConstrainedBox(\n            constraints: const BoxConstraints(maxWidth: 500),\n            child: Card(\n              elevation: 12,\n              color: const Color(0xFF1A1A1A), // Dunkle Karte\n              shape: RoundedRectangleBorder(\n                borderRadius: BorderRadius.circular(20),\n                side: BorderSide(\n                  color: AppTheme.primaryColor.withOpacity(0.3),\n                  width: 1,\n                ),\n              ),\n              child: Container(\n                decoration: BoxDecoration(\n                  borderRadius: BorderRadius.circular(20),\n                  gradient: const LinearGradient(\n                    begin: Alignment.topLeft,\n                    end: Alignment.bottomRight,\n                    colors: [\n                      Color(0xFF1A1A1A),\n                      Color(0xFF2A2A2A),\n                    ],\n                  ),\n                ),\n                child: Padding(\n                  padding: const EdgeInsets.all(32.0),\n                  child: Column(\n                    mainAxisSize: MainAxisSize.min,\n                    children: [\n                      Icon(\n                        Icons.error_outline,\n                        size: 80,\n                        color: Colors.red[400],\n                      ),\n                      const SizedBox(height: 24),\n                      Text(\n                        'Fehler beim Laden',\n                        style: Theme.of(context).textTheme.headlineSmall?.copyWith(\n                          color: Colors.white,\n                          fontWeight: FontWeight.bold,\n                        ),\n                      ),\n                      const SizedBox(height: 16),\n                      Text(\n                        _errorMessage ?? 'Unbekannter Fehler',\n                        style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                          color: Colors.grey[300],\n                        ),\n                        textAlign: TextAlign.center,\n                      ),\n                      const SizedBox(height: 32),\n                      \n                      // Verschiedene Action-Buttons je nach Szenario\n                      if (_showRegistrationButton && _inviteEmail != null) ...[\n                        // Registration Button für neuen User\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: ElevatedButton.icon(\n                            onPressed: () => _navigateToRegistration(_inviteEmail!),\n                            icon: const Icon(Icons.person_add),\n                            label: const Text('Jetzt registrieren'),\n                            style: ElevatedButton.styleFrom(\n                              backgroundColor: AppTheme.primaryColor,\n                              foregroundColor: Colors.white,\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                        const SizedBox(height: 12),\n                        // Login Button als Alternative\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: OutlinedButton.icon(\n                            onPressed: () => _navigateToLogin(_inviteEmail!),\n                            icon: const Icon(Icons.login),\n                            label: const Text('Bereits registriert? Anmelden'),\n                            style: OutlinedButton.styleFrom(\n                              foregroundColor: AppTheme.primaryColor,\n                              side: BorderSide(color: AppTheme.primaryColor),\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                      ] else if (_showLogoutButton && _inviteEmail != null) ...[\n                        // Logout Button für falschen User\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: ElevatedButton.icon(\n                            onPressed: _logout,\n                            icon: const Icon(Icons.logout),\n                            label: const Text('Abmelden & neu registrieren'),\n                            style: ElevatedButton.styleFrom(\n                              backgroundColor: Colors.orange,\n                              foregroundColor: Colors.white,\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                        const SizedBox(height: 12),\n                        // Abbrechen Button\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: OutlinedButton.icon(\n                            onPressed: () => context.goNamed('landing'),\n                            icon: const Icon(Icons.arrow_back),\n                            label: const Text('Zurück zur Startseite'),\n                            style: OutlinedButton.styleFrom(\n                              foregroundColor: Colors.grey,\n                              side: BorderSide(color: Colors.grey),\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                      ] else ...[\n                        // Standard Retry Button\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: ElevatedButton.icon(\n                            onPressed: _retry,\n                            icon: const Icon(Icons.refresh),\n                            label: const Text('Erneut versuchen'),\n                            style: ElevatedButton.styleFrom(\n                              backgroundColor: AppTheme.primaryColor,\n                              foregroundColor: Colors.white,\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                      ],\n                      const SizedBox(height: 16),\n                      TextButton(\n                        onPressed: () => context.goNamed('world-list'),\n                        child: const Text(\n                          'Zurück zu den Welten',\n                          style: TextStyle(\n                            color: AppTheme.primaryColor,\n                            fontWeight: FontWeight.bold,\n                          ),\n                        ),\n                      ),\n                    ],\n                  ),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n\n  Widget _buildInfoState() {\n    return Center(\n      child: Padding(\n        padding: const EdgeInsets.all(24.0),\n        child: Center(\n          child: ConstrainedBox(\n            constraints: const BoxConstraints(maxWidth: 500),\n            child: Card(\n              elevation: 12,\n              color: const Color(0xFF1A1A1A), // Dunkle Karte\n              shape: RoundedRectangleBorder(\n                borderRadius: BorderRadius.circular(20),\n                side: BorderSide(\n                  color: AppTheme.primaryColor.withOpacity(0.3),\n                  width: 1,\n                ),\n              ),\n              child: Container(\n                decoration: BoxDecoration(\n                  borderRadius: BorderRadius.circular(20),\n                  gradient: const LinearGradient(\n                    begin: Alignment.topLeft,\n                    end: Alignment.bottomRight,\n                    colors: [\n                      Color(0xFF1A1A1A),\n                      Color(0xFF2A2A2A),\n                    ],\n                  ),\n                ),\n                child: Padding(\n                  padding: const EdgeInsets.all(32.0),\n                  child: Column(\n                    mainAxisSize: MainAxisSize.min,\n                    children: [\n                      Icon(\n                        Icons.info_outline,\n                        size: 80,\n                        color: Colors.blue[400],\n                      ),\n                      const SizedBox(height: 24),\n                      Text(\n                        'Information',\n                        style: Theme.of(context).textTheme.headlineSmall?.copyWith(\n                          color: Colors.white,\n                          fontWeight: FontWeight.bold,\n                        ),\n                      ),\n                      const SizedBox(height: 16),\n                      Text(\n                        _infoMessage ?? 'Keine Information verfügbar',\n                        style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                          color: Colors.grey[300],\n                        ),\n                        textAlign: TextAlign.center,\n                      ),\n                      const SizedBox(height: 32),\n                      \n                      // **NEUE INTELLIGENTE BUTTONS**\n                      _buildActionButtons(),\n                      \n                      // **INVITE-FLOWS: Kein ",
    "suggested_key": "buttonWirklichVerlassenActions",
    "context": "context: context,\n      builder: (context) => AlertDialog(\n        title: const Text('Welt verlassen?'),\n        content: Text('Möchtest du die Welt \"${world.name}\" wirklich verlassen?'),\n        actions: [\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(false),",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: AlertDialog",
    "quote_type": "\""
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 297,
    "column": 24,
    "original": "Dein Account mit $inviteEmail ist bereits registriert. Bitte melde dich an.",
    "suggested_key": "buttonDeinAccountMit",
    "context": "case 'user_exists_not_logged_in':\n        if (requiresAction == 'login') {\n          // Mail ist bekannt, User nicht angemeldet -> nur Login\n          actionText = 'Dein Account mit $inviteEmail ist bereits registriert. Bitte melde dich an.';\n          infoText = '$baseInfoText\\n\\n$actionText';\n          showLoginButton = isInviteValid; // Nur bei gültigen Invites\n        }",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 308,
    "column": 22,
    "original": "$baseInfoText\\n\\n$actionText\\n\\nBitte melde dich ab und registriere dich mit der richtigen E-Mail-Adresse.",
    "suggested_key": "buttonBaseinfotextnnactiontextnnbitteMeldeDich",
    "context": "final currentUserEmail = userStatusData['currentUser']?['email'];\n          // User mit falscher Mail angemeldet -> Logout + Register\n          actionText = 'Diese Einladung ist für $inviteEmail bestimmt, aber du bist als $currentUserEmail angemeldet.';\n          infoText = '$baseInfoText\\n\\n$actionText\\n\\nBitte melde dich ab und registriere dich mit der richtigen E-Mail-Adresse.';\n          showLogoutButton = isInviteValid; // Nur bei gültigen Invites\n        }\n        break;",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 889,
    "column": 75,
    "original": "),\n                            style: ElevatedButton.styleFrom(\n                              backgroundColor: Colors.orange,\n                              foregroundColor: Colors.white,\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                        const SizedBox(height: 12),\n                        // Abbrechen Button\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: OutlinedButton.icon(\n                            onPressed: () => context.goNamed(",
    "suggested_key": "buttonStyleElevatedbuttonstylefromBackgroundcolor",
    "context": "child: ElevatedButton.icon(\n                            onPressed: _logout,\n                            icon: const Icon(Icons.logout),\n                            label: const Text('Abmelden & neu registrieren'),\n                            style: ElevatedButton.styleFrom(\n                              backgroundColor: Colors.orange,\n                              foregroundColor: Colors.white,",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 907,
    "column": 47,
    "original": "Zurück zur Startseite",
    "suggested_key": "buttonZurückZurStartseite",
    "context": "child: OutlinedButton.icon(\n                            onPressed: () => context.goNamed('landing'),\n                            icon: const Icon(Icons.arrow_back),\n                            label: const Text('Zurück zur Startseite'),\n                            style: OutlinedButton.styleFrom(\n                              foregroundColor: Colors.grey,\n                              side: BorderSide(color: Colors.grey),",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: OutlinedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 940,
    "column": 27,
    "original": "Zurück zu den Welten",
    "suggested_key": "buttonZurückZuDen",
    "context": "TextButton(\n                        onPressed: () => context.goNamed('world-list'),\n                        child: const Text(\n                          'Zurück zu den Welten',\n                          style: TextStyle(\n                            color: AppTheme.primaryColor,\n                            fontWeight: FontWeight.bold,",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: TextButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1024,
    "column": 29,
    "original": "Zurück zu den Welten",
    "suggested_key": "buttonZurückZuDen",
    "context": "TextButton(\n                          onPressed: () => context.goNamed('world-list'),\n                          child: const Text(\n                            'Zurück zu den Welten',\n                            style: TextStyle(\n                              color: AppTheme.primaryColor,\n                              fontWeight: FontWeight.bold,",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: TextButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1600,
    "column": 93,
    "original": ";\n              \n              // Pending Redirect setzen für Post-Auth-Redirect\n              _authService.setPendingInviteRedirect(widget.inviteToken!);\n              \n              context.go(loginRoute);\n            },\n            style: ElevatedButton.styleFrom(\n              backgroundColor: AppTheme.primaryColor,\n              foregroundColor: Colors.white,\n              padding: const EdgeInsets.symmetric(vertical: 16),\n              shape: RoundedRectangleBorder(\n                borderRadius: BorderRadius.circular(12),\n              ),\n            ),\n            child: const Text(\n              ",
    "suggested_key": "buttonPendingRedirectSetzen",
    "context": "child: ElevatedButton(\n            onPressed: () {\n              // Redirect auf Login-Seite mit E-Mail vorausgefüllt\n              final loginRoute = '/go/auth/login?email=${Uri.encodeComponent(_inviteEmail!)}';\n              \n              // Pending Redirect setzen für Post-Auth-Redirect\n              _authService.setPendingInviteRedirect(widget.inviteToken!);",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1633,
    "column": 99,
    "original": ";\n              \n              // Pending Redirect setzen für Post-Auth-Redirect\n              _authService.setPendingInviteRedirect(widget.inviteToken!);\n              \n              context.go(registerRoute);\n            },\n            style: ElevatedButton.styleFrom(\n              backgroundColor: AppTheme.secondaryColor,\n              foregroundColor: Colors.white,\n              padding: const EdgeInsets.symmetric(vertical: 16),\n              shape: RoundedRectangleBorder(\n                borderRadius: BorderRadius.circular(12),\n              ),\n            ),\n            child: const Text(\n              ",
    "suggested_key": "buttonPendingRedirectSetzen",
    "context": "child: ElevatedButton(\n            onPressed: () {\n              // Redirect auf Register-Seite mit E-Mail vorausgefüllt\n              final registerRoute = '/go/auth/register?email=${Uri.encodeComponent(_inviteEmail!)}';\n              \n              // Pending Redirect setzen für Post-Auth-Redirect\n              _authService.setPendingInviteRedirect(widget.inviteToken!);",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1740,
    "column": 79,
    "original": "Vorregistrierung zurückziehen",
    "suggested_key": "buttonVorregistrierungZurückziehen",
    "context": "child: ElevatedButton.icon(\n                    onPressed: (_isPreRegistering || _isJoining) ? null : _cancelPreRegistration,\n                    icon: const Icon(Icons.cancel),\n                    label: Text(_isPreRegistering ? 'Wird zurückgezogen...' : 'Vorregistrierung zurückziehen'),\n                    style: ElevatedButton.styleFrom(\n                      backgroundColor: Colors.red[600],\n                      foregroundColor: Colors.white,",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 600,
    "column": 59,
    "original": " wirklich verlassen?'),\n        actions: [\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(false),\n            child: const Text('Abbrechen'),\n          ),\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(true),\n            style: TextButton.styleFrom(\n              foregroundColor: Colors.red,\n            ),\n            child: const Text('Verlassen'),\n          ),\n        ],\n      ),\n    );\n    \n    if (confirmed != true) return;\n\n    setState(() {\n      _isJoining = true;\n      _joinError = null;\n    });\n\n    try {\n      await _worldService.leaveWorld(world.id);\n      setState(() {\n        _isJoined = false;\n      });\n      \n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text('Du hast ${world.name} verlassen.'),\n            backgroundColor: Colors.orange,\n          ),\n        );\n      }\n    } catch (e) {\n      setState(() {\n        _joinError = e.toString().replaceAll('Exception: ', '');\n      });\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isJoining = false;\n        });\n      }\n    }\n  }\n  \n  void _playWorld() {\n    final world = _world;\n    if (world == null) return;\n    // Navigate directly to world dashboard for playing\n    context.goNamed('world-dashboard', pathParameters: {'id': world.id.toString()});\n  }\n\n  // Welt-Status bestimmen\n  String _getWorldStatusText() {\n    final world = _world;\n    if (world == null) return 'Unbekannt';\n    return world.statusText;\n  }\n\n  // Welt-Status-Farbe\n  Color _getWorldStatusColor() {\n    final world = _world;\n    if (world == null) return Colors.grey;\n    \n    switch (world.status) {\n      case WorldStatus.upcoming:\n        return Colors.orange;\n      case WorldStatus.open:\n        return Colors.green;\n      case WorldStatus.running:\n        return Colors.blue;\n      case WorldStatus.closed:\n        return Colors.red;\n      case WorldStatus.archived:\n        return Colors.grey;\n    }\n  }\n\n  // Kann der Benutzer beitreten?\n  // Retry-Funktion\n  Future<void> _retry() async {\n    await _loadWorldData();\n  }\n\n  // Navigation zu Registration mit vorausgefüllter E-Mail\n  void _navigateToRegistration(String email) {\n    AppLogger.app.i('🎫 Navigation zur Registration mit Invite-E-Mail', error: {'email': email});\n    \n    // FIXED: Invite-Token für Post-Auth-Redirect setzen\n    if (widget.inviteToken != null) {\n      _authService.setPendingInviteRedirect(widget.inviteToken!);\n    }\n    \n    context.goNamed('register', queryParameters: {'email': email, 'invite_token': widget.inviteToken});\n  }\n\n  // Navigation zu Login \n  void _navigateToLogin(String email) {\n    AppLogger.app.i('🎫 Navigation zum Login für Invite', error: {'email': email});\n    \n    // FIXED: Invite-Token für Post-Auth-Redirect setzen\n    if (widget.inviteToken != null) {\n      _authService.setPendingInviteRedirect(widget.inviteToken!);\n    }\n    \n    context.goNamed('login', queryParameters: {'invite_token': widget.inviteToken});\n  }\n\n  // User abmelden und zur Registration weiterleiten\n  Future<void> _logout() async {\n    try {\n      AppLogger.app.i('🎫 User logout für Invite-Umleitung', error: {'inviteEmail': _inviteEmail});\n      \n      // FIXED: Invite-Token für Post-Auth-Redirect setzen BEVOR logout\n      if (widget.inviteToken != null) {\n        _authService.setPendingInviteRedirect(widget.inviteToken!);\n      }\n      \n      await _authService.logout();\n      \n      if (mounted && _inviteEmail != null) {\n        // Nach Logout zur Registration mit korrekter E-Mail\n        context.goNamed('register', queryParameters: {\n          'email': _inviteEmail!,\n          'invite_token': widget.inviteToken ?? ''\n        });\n      }\n    } catch (e) {\n      AppLogger.logError('Logout für Invite fehlgeschlagen', e);\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          const SnackBar(\n            content: Text('Fehler beim Abmelden'),\n            backgroundColor: Colors.red,\n          ),\n        );\n      }\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    \n    return Scaffold(\n      body: BackgroundWidget(\n        child: Stack(\n          children: [\n            // Main content\n            SafeArea(\n              child: _isLoading\n                  ? const Center(\n                      child: CircularProgressIndicator(\n                        valueColor: AlwaysStoppedAnimation<Color>(AppTheme.primaryColor),\n                      ),\n                    )\n                  : _errorMessage != null\n                      ? _buildErrorState()\n                      : _infoMessage != null\n                          ? _buildInfoState()\n                          : _world == null\n                              ? _buildNotFoundState()\n                              : _buildWorldContent(),\n            ),\n            \n            // User info widget (only show when authenticated)\n            if (_isAuthenticated)\n              const UserInfoWidget(),\n            \n            // Navigation widget (only show when authenticated)\n            if (_isAuthenticated)\n              NavigationWidget(\n                currentRoute: 'world-join',\n                routeParams: {'id': widget.worldId},\n                isJoinedWorld: _isJoined,\n              ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildErrorState() {\n    return Center(\n      child: Padding(\n        padding: const EdgeInsets.all(24.0),\n        child: Center(\n          child: ConstrainedBox(\n            constraints: const BoxConstraints(maxWidth: 500),\n            child: Card(\n              elevation: 12,\n              color: const Color(0xFF1A1A1A), // Dunkle Karte\n              shape: RoundedRectangleBorder(\n                borderRadius: BorderRadius.circular(20),\n                side: BorderSide(\n                  color: AppTheme.primaryColor.withOpacity(0.3),\n                  width: 1,\n                ),\n              ),\n              child: Container(\n                decoration: BoxDecoration(\n                  borderRadius: BorderRadius.circular(20),\n                  gradient: const LinearGradient(\n                    begin: Alignment.topLeft,\n                    end: Alignment.bottomRight,\n                    colors: [\n                      Color(0xFF1A1A1A),\n                      Color(0xFF2A2A2A),\n                    ],\n                  ),\n                ),\n                child: Padding(\n                  padding: const EdgeInsets.all(32.0),\n                  child: Column(\n                    mainAxisSize: MainAxisSize.min,\n                    children: [\n                      Icon(\n                        Icons.error_outline,\n                        size: 80,\n                        color: Colors.red[400],\n                      ),\n                      const SizedBox(height: 24),\n                      Text(\n                        'Fehler beim Laden',\n                        style: Theme.of(context).textTheme.headlineSmall?.copyWith(\n                          color: Colors.white,\n                          fontWeight: FontWeight.bold,\n                        ),\n                      ),\n                      const SizedBox(height: 16),\n                      Text(\n                        _errorMessage ?? 'Unbekannter Fehler',\n                        style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                          color: Colors.grey[300],\n                        ),\n                        textAlign: TextAlign.center,\n                      ),\n                      const SizedBox(height: 32),\n                      \n                      // Verschiedene Action-Buttons je nach Szenario\n                      if (_showRegistrationButton && _inviteEmail != null) ...[\n                        // Registration Button für neuen User\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: ElevatedButton.icon(\n                            onPressed: () => _navigateToRegistration(_inviteEmail!),\n                            icon: const Icon(Icons.person_add),\n                            label: const Text('Jetzt registrieren'),\n                            style: ElevatedButton.styleFrom(\n                              backgroundColor: AppTheme.primaryColor,\n                              foregroundColor: Colors.white,\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                        const SizedBox(height: 12),\n                        // Login Button als Alternative\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: OutlinedButton.icon(\n                            onPressed: () => _navigateToLogin(_inviteEmail!),\n                            icon: const Icon(Icons.login),\n                            label: const Text('Bereits registriert? Anmelden'),\n                            style: OutlinedButton.styleFrom(\n                              foregroundColor: AppTheme.primaryColor,\n                              side: BorderSide(color: AppTheme.primaryColor),\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                      ] else if (_showLogoutButton && _inviteEmail != null) ...[\n                        // Logout Button für falschen User\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: ElevatedButton.icon(\n                            onPressed: _logout,\n                            icon: const Icon(Icons.logout),\n                            label: const Text('Abmelden & neu registrieren'),\n                            style: ElevatedButton.styleFrom(\n                              backgroundColor: Colors.orange,\n                              foregroundColor: Colors.white,\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                        const SizedBox(height: 12),\n                        // Abbrechen Button\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: OutlinedButton.icon(\n                            onPressed: () => context.goNamed('landing'),\n                            icon: const Icon(Icons.arrow_back),\n                            label: const Text('Zurück zur Startseite'),\n                            style: OutlinedButton.styleFrom(\n                              foregroundColor: Colors.grey,\n                              side: BorderSide(color: Colors.grey),\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                      ] else ...[\n                        // Standard Retry Button\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: ElevatedButton.icon(\n                            onPressed: _retry,\n                            icon: const Icon(Icons.refresh),\n                            label: const Text('Erneut versuchen'),\n                            style: ElevatedButton.styleFrom(\n                              backgroundColor: AppTheme.primaryColor,\n                              foregroundColor: Colors.white,\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                      ],\n                      const SizedBox(height: 16),\n                      TextButton(\n                        onPressed: () => context.goNamed('world-list'),\n                        child: const Text(\n                          'Zurück zu den Welten',\n                          style: TextStyle(\n                            color: AppTheme.primaryColor,\n                            fontWeight: FontWeight.bold,\n                          ),\n                        ),\n                      ),\n                    ],\n                  ),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n\n  Widget _buildInfoState() {\n    return Center(\n      child: Padding(\n        padding: const EdgeInsets.all(24.0),\n        child: Center(\n          child: ConstrainedBox(\n            constraints: const BoxConstraints(maxWidth: 500),\n            child: Card(\n              elevation: 12,\n              color: const Color(0xFF1A1A1A), // Dunkle Karte\n              shape: RoundedRectangleBorder(\n                borderRadius: BorderRadius.circular(20),\n                side: BorderSide(\n                  color: AppTheme.primaryColor.withOpacity(0.3),\n                  width: 1,\n                ),\n              ),\n              child: Container(\n                decoration: BoxDecoration(\n                  borderRadius: BorderRadius.circular(20),\n                  gradient: const LinearGradient(\n                    begin: Alignment.topLeft,\n                    end: Alignment.bottomRight,\n                    colors: [\n                      Color(0xFF1A1A1A),\n                      Color(0xFF2A2A2A),\n                    ],\n                  ),\n                ),\n                child: Padding(\n                  padding: const EdgeInsets.all(32.0),\n                  child: Column(\n                    mainAxisSize: MainAxisSize.min,\n                    children: [\n                      Icon(\n                        Icons.info_outline,\n                        size: 80,\n                        color: Colors.blue[400],\n                      ),\n                      const SizedBox(height: 24),\n                      Text(\n                        'Information',\n                        style: Theme.of(context).textTheme.headlineSmall?.copyWith(\n                          color: Colors.white,\n                          fontWeight: FontWeight.bold,\n                        ),\n                      ),\n                      const SizedBox(height: 16),\n                      Text(\n                        _infoMessage ?? 'Keine Information verfügbar',\n                        style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                          color: Colors.grey[300],\n                        ),\n                        textAlign: TextAlign.center,\n                      ),\n                      const SizedBox(height: 32),\n                      \n                      // **NEUE INTELLIGENTE BUTTONS**\n                      _buildActionButtons(),\n                      \n                      // **INVITE-FLOWS: Kein ",
    "suggested_key": "buttonWirklichVerlassenActions",
    "context": "context: context,\n      builder: (context) => AlertDialog(\n        title: const Text('Welt verlassen?'),\n        content: Text('Möchtest du die Welt \"${world.name}\" wirklich verlassen?'),\n        actions: [\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(false),",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: AlertDialog",
    "quote_type": "\""
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 253,
    "column": 24,
    "original": ";\n    bool showLoginButton = false;\n    bool showRegisterButton = false;\n    bool showAcceptButton = false;\n    bool showLogoutButton = false;\n    \n    // Basis-Info-Text mit Einlader, Welt und Gültigkeitsstatus\n    final inviterText = invitedByName;\n    \n    final actionTypeText = isUpcoming \n      ? ",
    "suggested_key": "buttonBoolShowloginbuttonFalse",
    "context": "// **NEUE INTELLIGENTE BUTTON-LOGIK**\n    String actionText = '';\n    String infoText = '';\n    bool showLoginButton = false;\n    bool showRegisterButton = false;\n    bool showAcceptButton = false;",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 307,
    "column": 24,
    "original": "Diese Einladung ist für $inviteEmail bestimmt, aber du bist als $currentUserEmail angemeldet.",
    "suggested_key": "buttonDieseEinladungIst",
    "context": "if (requiresAction == 'logout_and_register') {\n          final currentUserEmail = userStatusData['currentUser']?['email'];\n          // User mit falscher Mail angemeldet -> Logout + Register\n          actionText = 'Diese Einladung ist für $inviteEmail bestimmt, aber du bist als $currentUserEmail angemeldet.';\n          infoText = '$baseInfoText\\n\\n$actionText\\n\\nBitte melde dich ab und registriere dich mit der richtigen E-Mail-Adresse.';\n          showLogoutButton = isInviteValid; // Nur bei gültigen Invites\n        }",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 316,
    "column": 24,
    "original": "Du bist mit der richtigen E-Mail-Adresse angemeldet und kannst die Einladung jetzt annehmen.",
    "suggested_key": "buttonDuBistMit",
    "context": "case 'correct_email':\n        if (requiresAction == 'join_world') {\n          // User richtig angemeldet -> nur Accept Button (KEIN Auto-Accept!)\n          actionText = 'Du bist mit der richtigen E-Mail-Adresse angemeldet und kannst die Einladung jetzt annehmen.';\n          infoText = '$baseInfoText\\n\\n$actionText';\n          showAcceptButton = isInviteValid; // Nur bei gültigen Invites",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 599,
    "column": 27,
    "original": "Welt verlassen?",
    "suggested_key": "buttonWeltVerlassen",
    "context": "final confirmed = await showDialog<bool>(\n      context: context,\n      builder: (context) => AlertDialog(\n        title: const Text('Welt verlassen?'),\n        content: Text('Möchtest du die Welt \"${world.name}\" wirklich verlassen?'),\n        actions: [\n          TextButton(",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: AlertDialog",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 600,
    "column": 23,
    "original": "Möchtest du die Welt \"${world.name}\" wirklich verlassen?",
    "suggested_key": "buttonMöchtestDuDie",
    "context": "context: context,\n      builder: (context) => AlertDialog(\n        title: const Text('Welt verlassen?'),\n        content: Text('Möchtest du die Welt \"${world.name}\" wirklich verlassen?'),\n        actions: [\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(false),",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: AlertDialog",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 940,
    "column": 27,
    "original": "Zurück zu den Welten",
    "suggested_key": "buttonZurückZuDen",
    "context": "TextButton(\n                        onPressed: () => context.goNamed('world-list'),\n                        child: const Text(\n                          'Zurück zu den Welten',\n                          style: TextStyle(\n                            color: AppTheme.primaryColor,\n                            fontWeight: FontWeight.bold,",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: TextButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1024,
    "column": 29,
    "original": "Zurück zu den Welten",
    "suggested_key": "buttonZurückZuDen",
    "context": "TextButton(\n                          onPressed: () => context.goNamed('world-list'),\n                          child: const Text(\n                            'Zurück zu den Welten',\n                            style: TextStyle(\n                              color: AppTheme.primaryColor,\n                              fontWeight: FontWeight.bold,",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: TextButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1760,
    "column": 93,
    "original": "),\n                    style: ElevatedButton.styleFrom(\n                      backgroundColor: Colors.orange[600],\n                      foregroundColor: Colors.white,\n                      padding: const EdgeInsets.symmetric(vertical: 16),\n                      shape: RoundedRectangleBorder(\n                        borderRadius: BorderRadius.circular(12),\n                      ),\n                    ),\n                  ),\n                ),\n              );\n            }\n            break;\n            \n          case WorldStatus.open:\n          case WorldStatus.running:\n            // Beitreten, Spielen oder Verlassen\n            if (_isJoined) {\n              // Spielen Button\n              buttons.add(\n                Container(\n                  width: double.infinity,\n                  margin: const EdgeInsets.only(bottom: 12.0),\n                  child: ElevatedButton.icon(\n                    onPressed: _playWorld,\n                    icon: const Icon(Icons.play_circle_filled),\n                    label: const Text(",
    "suggested_key": "buttonStyleElevatedbuttonstylefromBackgroundcolor",
    "context": "child: ElevatedButton.icon(\n                    onPressed: (_isPreRegistering || _isJoining) ? null : _preRegisterWorld,\n                    icon: const Icon(Icons.how_to_reg),\n                    label: Text(_isPreRegistering ? 'Wird registriert...' : 'Vorregistrieren'),\n                    style: ElevatedButton.styleFrom(\n                      backgroundColor: Colors.orange[600],\n                      foregroundColor: Colors.white,",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1808,
    "column": 68,
    "original": "Welt verlassen",
    "suggested_key": "buttonWeltVerlassen",
    "context": "child: ElevatedButton.icon(\n                    onPressed: _isJoining ? null : _leaveWorld,\n                    icon: const Icon(Icons.exit_to_app),\n                    label: Text(_isJoining ? 'Wird verlassen...' : 'Welt verlassen'),\n                    style: ElevatedButton.styleFrom(\n                      backgroundColor: Colors.red[600],\n                      foregroundColor: Colors.white,",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1829,
    "column": 70,
    "original": "Jetzt beitreten",
    "suggested_key": "buttonJetztBeitreten",
    "context": "child: ElevatedButton.icon(\n                    onPressed: _isJoining ? null : _joinWorld,\n                    icon: const Icon(Icons.play_arrow),\n                    label: Text(_isJoining ? 'Wird beigetreten...' : 'Jetzt beitreten'),\n                    style: ElevatedButton.styleFrom(\n                      backgroundColor: AppTheme.primaryColor,\n                      foregroundColor: Colors.white,",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 384,
    "column": 23,
    "original": "Möchtest du die Welt \"${world.name}\" wirklich verlassen?",
    "suggested_key": "buttonMöchtestDuDie",
    "context": "context: context,\n      builder: (context) => AlertDialog(\n        title: const Text('Welt verlassen?'),\n        content: Text('Möchtest du die Welt \"${world.name}\" wirklich verlassen?'),\n        actions: [\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(false),",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: AlertDialog",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 388,
    "column": 41,
    "original": "),\n          ),\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(true),\n            style: TextButton.styleFrom(\n              foregroundColor: Colors.red,\n            ),\n            child: const Text(",
    "suggested_key": "buttonTextbuttonOnpressedNavigatorofcontextpoptrue",
    "context": "actions: [\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(false),\n            child: const Text('Abbrechen'),\n          ),\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(true),",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: AlertDialog",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 782,
    "column": 71,
    "original": "),\n                                      style: ElevatedButton.styleFrom(\n                                        backgroundColor: AppTheme.primaryColor,\n                                        foregroundColor: Colors.white,\n                                        padding: const EdgeInsets.symmetric(\n                                          horizontal: 24,\n                                          vertical: 12,\n                                        ),\n                                        shape: RoundedRectangleBorder(\n                                          borderRadius: BorderRadius.circular(12),\n                                        ),\n                                      ),\n                                    ),\n                                  ),\n                                ],\n                              ),\n                            ],\n                          ),\n                        ),\n                      ),\n                    ),\n                  ),\n                ),\n              ),\n            ),\n            \n            // User info widget in top-left corner\n            const UserInfoWidget(),\n            \n            // Navigation widget in top-right corner\n            const NavigationWidget(currentRoute: ",
    "suggested_key": "buttonStyleElevatedbuttonstylefromBackgroundcolor",
    "context": "child: ElevatedButton.icon(\n                                      onPressed: _loadWorlds,\n                                      icon: const Icon(Icons.refresh),\n                                      label: const Text('Aktualisieren'),\n                                      style: ElevatedButton.styleFrom(\n                                        backgroundColor: AppTheme.primaryColor,\n                                        foregroundColor: Colors.white,",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 384,
    "column": 23,
    "original": "Möchtest du die Welt \"${world.name}\" wirklich verlassen?",
    "suggested_key": "buttonMöchtestDuDie",
    "context": "context: context,\n      builder: (context) => AlertDialog(\n        title: const Text('Welt verlassen?'),\n        content: Text('Möchtest du die Welt \"${world.name}\" wirklich verlassen?'),\n        actions: [\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(false),",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: AlertDialog",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 383,
    "column": 27,
    "original": "Welt verlassen?",
    "suggested_key": "buttonWeltVerlassen",
    "context": "final confirmed = await showDialog<bool>(\n      context: context,\n      builder: (context) => AlertDialog(\n        title: const Text('Welt verlassen?'),\n        content: Text('Möchtest du die Welt \"${world.name}\" wirklich verlassen?'),\n        actions: [\n          TextButton(",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: AlertDialog",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 384,
    "column": 23,
    "original": "Möchtest du die Welt \"${world.name}\" wirklich verlassen?",
    "suggested_key": "buttonMöchtestDuDie",
    "context": "context: context,\n      builder: (context) => AlertDialog(\n        title: const Text('Welt verlassen?'),\n        content: Text('Möchtest du die Welt \"${world.name}\" wirklich verlassen?'),\n        actions: [\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(false),",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: AlertDialog",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\invite_dialog.dart",
    "line": 126,
    "column": 41,
    "original": "),\n          ),\n        ),\n        Padding(\n          padding: const EdgeInsets.symmetric(horizontal: 8.0),\n          child: ElevatedButton(\n            onPressed: _isLoading ? null : _submit,\n            style: ElevatedButton.styleFrom(\n              backgroundColor: AppTheme.primaryColor,\n              foregroundColor: Colors.white,\n              shape: RoundedRectangleBorder(\n                borderRadius: BorderRadius.circular(12),\n              ),\n            ),\n            child: _isLoading \n              ? const SizedBox(\n                  width: 16,\n                  height: 16,\n                  child: CircularProgressIndicator(\n                    strokeWidth: 2,\n                    valueColor: AlwaysStoppedAnimation<Color>(Colors.white),\n                  ),\n                )\n              : const Text(",
    "suggested_key": "buttonPaddingPaddingConst",
    "context": "style: TextButton.styleFrom(\n              foregroundColor: Colors.grey[400],\n            ),\n            child: const Text('Abbrechen'),\n          ),\n        ),\n        Padding(",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: TextButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\pre_register_dialog.dart",
    "line": 142,
    "column": 39,
    "original": "),\n        ),\n        ElevatedButton(\n          onPressed: _isLoading ? null : _submit,\n          style: ElevatedButton.styleFrom(\n            backgroundColor: AppTheme.primaryColor,\n            foregroundColor: Colors.white,\n            shape: RoundedRectangleBorder(\n              borderRadius: BorderRadius.circular(12),\n            ),\n          ),\n          child: _isLoading\n              ? const SizedBox(\n                  width: 20,\n                  height: 20,\n                  child: CircularProgressIndicator(\n                    strokeWidth: 2,\n                    valueColor: AlwaysStoppedAnimation<Color>(Colors.white),\n                  ),\n                )\n              : const Text(",
    "suggested_key": "buttonElevatedbuttonOnpressed_isloading",
    "context": "style: TextButton.styleFrom(\n            foregroundColor: Colors.grey[400],\n          ),\n          child: const Text('Abbrechen'),\n        ),\n        ElevatedButton(\n          onPressed: _isLoading ? null : _submit,",
    "category": "button",
    "confidence": 1.0,
    "widget_context": "Widget: TextButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 10,
    "column": 8,
    "original": "../../theme/background_widget.dart",
    "suggested_key": "dialogThemebackground_widgetdart",
    "context": "import '../../core/services/invite_service.dart';\nimport '../../core/models/world.dart';\nimport '../../theme/app_theme.dart';\nimport '../../theme/background_widget.dart';\nimport '../../routing/app_router.dart';\n// Unused import removed\nimport '../../shared/widgets/invite_dialog.dart';",
    "category": "dialog",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\invite_dialog.dart",
    "line": 2,
    "column": 35,
    "original": ";\n\nclass InviteDialog extends StatefulWidget {\n  final String worldName;\n\n  const InviteDialog({\n    super.key,\n    required this.worldName,\n  });\n\n  @override\n  State<InviteDialog> createState() => _InviteDialogState();\n}\n\nclass _InviteDialogState extends State<InviteDialog> {\n  final _formKey = GlobalKey<FormState>();\n  final _emailController = TextEditingController();\n  bool _isLoading = false;\n\n  @override\n  void dispose() {\n    _emailController.dispose();\n    super.dispose();\n  }\n\n  void _submit() async {\n    final formState = _formKey.currentState;\n    if (formState == null || !formState.validate()) return;\n    \n    setState(() {\n      _isLoading = true;\n    });\n\n    // Simuliere API-Aufruf für E-Mail-Versand\n    await Future.delayed(const Duration(seconds: 1));\n    \n    if (mounted) {\n      setState(() {\n        _isLoading = false;\n      });\n      Navigator.of(context).pop(_emailController.text.trim());\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return AlertDialog(\n      backgroundColor: const Color(0xFF1A1A1A), // Dunkler Hintergrund\n      shape: RoundedRectangleBorder(\n        borderRadius: BorderRadius.circular(20),\n        side: BorderSide(\n          color: AppTheme.primaryColor.withOpacity(0.3),\n          width: 1,\n        ),\n      ),\n      title: Text(\n        ",
    "suggested_key": "dialogClassInvitedialogExtends",
    "context": "import 'package:flutter/material.dart';\nimport '../../theme/app_theme.dart';\n\nclass InviteDialog extends StatefulWidget {\n  final String worldName;",
    "category": "dialog",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\pre_register_dialog.dart",
    "line": 2,
    "column": 35,
    "original": ";\n\nclass PreRegisterDialog extends StatefulWidget {\n  final String worldName;\n  final Function(String email) onPreRegister;\n\n  const PreRegisterDialog({\n    super.key,\n    required this.worldName,\n    required this.onPreRegister,\n  });\n\n  @override\n  State<PreRegisterDialog> createState() => _PreRegisterDialogState();\n}\n\nclass _PreRegisterDialogState extends State<PreRegisterDialog> {\n  final _formKey = GlobalKey<FormState>();\n  final _emailController = TextEditingController();\n  bool _isLoading = false;\n\n  @override\n  void dispose() {\n    _emailController.dispose();\n    super.dispose();\n  }\n\n  Future<void> _submit() async {\n    final formState = _formKey.currentState;\n    if (formState == null || !formState.validate()) return;\n\n    setState(() {\n      _isLoading = true;\n    });\n\n    try {\n      await widget.onPreRegister(_emailController.text.trim());\n      if (mounted) {\n        Navigator.of(context).pop(true);\n        ScaffoldMessenger.of(context).showSnackBar(\n          const SnackBar(\n            content: Text(",
    "suggested_key": "dialogClassPreregisterdialogExtends",
    "context": "import 'package:flutter/material.dart';\nimport '../../theme/app_theme.dart';\n\nclass PreRegisterDialog extends StatefulWidget {\n  final String worldName;",
    "category": "dialog",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 98,
    "column": 54,
    "original": ", error: e);\n      await logout();\n      return false;\n    }\n  }\n\n  // Vollständige Token-Validierung beim App-Start (ohne API-Calls)\n  Future<bool> validateTokensOnStart() async {\n    try {\n      final accessToken = await TokenStorage.getAccessToken();\n      final refreshToken = await TokenStorage.getRefreshToken();\n      \n      if (accessToken == null || refreshToken == null) {\n        return false;\n      }\n\n      // JWT-Token Format validieren\n      if (!_isValidJWT(accessToken) || !_isValidJWT(refreshToken)) {\n        return false;\n      }\n\n      // Token-Ablauf prüfen (nur lokale Validierung, keine API-Calls)\n      final accessExp = _getTokenExpiration(accessToken);\n      final refreshExp = _getTokenExpiration(refreshToken);\n      \n      if (accessExp == null || refreshExp == null) {\n        return false;\n      }\n\n      final now = DateTime.now();\n      \n      // Refresh-Token ist abgelaufen\n      if (refreshExp.isBefore(now)) {\n        return false;\n      }\n      \n      // Access-Token ist abgelaufen, aber Refresh-Token ist noch gültig\n      if (accessExp.isBefore(now)) {\n        // Token ist abgelaufen, aber wir versuchen nicht zu erneuern\n        // Das wird beim ersten API-Call automatisch gemacht\n        return true; // Erlaube App-Start, Token-Refresh erfolgt bei Bedarf\n      }\n\n      // Beide Token sind gültig\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  // JWT-Token Format validieren\n  bool _isValidJWT(String token) {\n    try {\n      final parts = token.split(",
    "suggested_key": "errorErrorEAwait",
    "context": "isAuthenticated.value = false;\n      return false;\n    } catch (e) {\n      AppLogger.auth.e('❌ isLoggedIn() fehlgeschlagen', error: e);\n      await logout();\n      return false;\n    }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 210,
    "column": 25,
    "original": "Benutzername oder Passwort falsch",
    "suggested_key": "errorBenutzernameOderPasswort",
    "context": "'reason': 'invalid_credentials',\n          'statusCode': response.statusCode,\n        });\n        throw Exception('Benutzername oder Passwort falsch');\n      } else {\n        final errorData = jsonDecode(response.body);\n        AppLogger.logAuthEvent('login_failed', username: username, metadata: {",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 222,
    "column": 15,
    "original": ": e.toString(),\n      });\n      rethrow;\n    }\n  }\n\n  Future<User?> register(String username, String email, String password) async {\n    AppLogger.logAuthEvent(",
    "suggested_key": "errorEtostringRethrowFutureuser",
    "context": "}\n    } catch (e) {\n      AppLogger.logAuthEvent('login_error', username: username, metadata: {\n        'error': e.toString(),\n      });\n      rethrow;\n    }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 256,
    "column": 28,
    "original": "📝 Registrierung Debug Info",
    "suggested_key": "errorRegistrierungDebugInfo",
    "context": "// Log Registration Debug Info\n        if (userData['_debug'] != null) {\n          AppLogger.auth.d('📝 Registrierung Debug Info', error: {\n            'userId': userData['id'],\n            'username': userData['username'],\n            'rolesCount': userData['_debug']['rolesCount'],",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 286,
    "column": 25,
    "original": "Benutzername oder E-Mail bereits vorhanden",
    "suggested_key": "errorBenutzernameOderEmail",
    "context": "'statusCode': response.statusCode,\n          'email': email,\n        });\n        throw Exception('Benutzername oder E-Mail bereits vorhanden');\n      } else {\n        final errorData = jsonDecode(response.body);\n        AppLogger.logAuthEvent('register_failed', username: username, metadata: {",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 304,
    "column": 71,
    "original": "Registrierung fehlgeschlagen",
    "suggested_key": "errorRegistrierungFehlgeschlagen",
    "context": "}\n        }\n        \n        throw Exception(errorData['error'] ?? errorData['message'] ?? 'Registrierung fehlgeschlagen');\n      }\n    } catch (e) {\n      AppLogger.logAuthEvent('register_error', username: username, metadata: {",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 309,
    "column": 15,
    "original": ": email,\n      });\n      rethrow;\n    }\n  }\n\n  // Erweitertes Logout mit Server-Call und vollständigem Cleanup\n  Future<void> logout() async {\n    final username = _currentUser?.username ?? ",
    "suggested_key": "errorEmailRethrowErweitertes",
    "context": "} catch (e) {\n      AppLogger.logAuthEvent('register_error', username: username, metadata: {\n        'error': e.toString(),\n        'email': email,\n      });\n      rethrow;\n    }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 344,
    "column": 40,
    "original": ", error: e);\n    }\n  }\n\n  // Rate-Limited Token-Refresh mit parallelem Schutz\n  Future<bool> refreshTokenIfNeeded() async {\n    if (_refreshing) {\n      // Warten bis aktueller Refresh abgeschlossen ist\n      while (_refreshing) {\n        await Future.delayed(const Duration(milliseconds: 100));\n      }\n      return true; // Annahme: Refresh war erfolgreich\n    }\n\n    _refreshing = true;\n    try {\n      final refreshToken = await TokenStorage.getRefreshToken();\n      if (refreshToken == null) {\n        await logout();\n        return false;\n      }\n\n      // Refresh-Token Format validieren\n      if (!_isValidJWT(refreshToken)) {\n        await logout();\n        return false;\n      }\n\n      // Refresh-Token Ablauf prüfen\n      final refreshExp = _getTokenExpiration(refreshToken);\n      if (refreshExp == null || refreshExp.isBefore(DateTime.now())) {\n        await logout();\n        return false;\n      }\n\n      _apiService.setToken(refreshToken);\n      final response = await _apiService.post(",
    "suggested_key": "errorErrorERatelimited",
    "context": "AppLogger.logAuthEvent('logout_success', username: username);\n    } catch (e) {\n      AppLogger.auth.e('❌ Logout-Fehler', error: e);\n    }\n  }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 433,
    "column": 64,
    "original": ", error: e);\n      return null;\n    }\n  }\n\n  // Konsistente Token-Speicherung und API-Service-Update\n  Future<void> _saveTokensAndUpdateService(String accessToken, String refreshToken) async {\n    await TokenStorage.saveTokens(accessToken, refreshToken);\n    _apiService.setToken(accessToken);\n  }\n\n  Future<User?> loadStoredUser() async {\n    try {\n      final userDataString = await TokenStorage.getUserData();\n      final accessToken = await TokenStorage.getAccessToken();\n      \n      if (userDataString != null && accessToken != null) {\n        final userData = jsonDecode(userDataString);\n        _currentUser = User.fromJson(userData);\n        _apiService.setToken(accessToken);\n        // isAuthenticated.value wird vom Aufrufer gesetzt, nicht hier\n        return _currentUser;\n      }\n    } catch (e) {\n      AppLogger.auth.e(",
    "suggested_key": "errorErrorEReturn",
    "context": "throw Exception('Failed to fetch user data');\n      }\n    } catch (e) {\n      AppLogger.auth.e('❌ Fehler beim Laden des aktuellen Users', error: e);\n      return null;\n    }\n  }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 457,
    "column": 68,
    "original": ", error: e);\n    }\n    return null;\n  }\n\n  Future<String?> getCurrentAccessToken() async {\n    return await TokenStorage.getAccessToken();\n  }\n\n  // Passwort-Reset anfordern\n  Future<bool> requestPasswordReset(String email) async {\n    try {\n      final response = await _apiService.post(",
    "suggested_key": "errorErrorEReturn",
    "context": "return _currentUser;\n      }\n    } catch (e) {\n      AppLogger.auth.e('❌ Fehler beim Laden des gespeicherten Users', error: e);\n    }\n    return null;\n  }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 474,
    "column": 26,
    "original": "✅ Password-Reset angefordert",
    "suggested_key": "errorPasswordresetAngefordert",
    "context": "});\n\n      if (response.statusCode == 200) {\n        AppLogger.auth.i('✅ Password-Reset angefordert');\n        return true;\n      } else {\n        final errorData = jsonDecode(response.body);",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 481,
    "column": 64,
    "original": ", error: e);\n      rethrow;\n    }\n  }\n\n  // Passwort zurücksetzen mit Token\n  Future<bool> resetPassword(String token, String newPassword) async {\n    try {\n      AppLogger.auth.i(",
    "suggested_key": "errorErrorERethrow",
    "context": "throw Exception(errorData['message'] ?? 'Passwort-Reset Anfrage fehlgeschlagen');\n      }\n    } catch (e) {\n      AppLogger.auth.e('❌ Password-Reset Anfrage fehlgeschlagen', error: e);\n      rethrow;\n    }\n  }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 497,
    "column": 26,
    "original": "✅ Password erfolgreich zurückgesetzt",
    "suggested_key": "errorPasswordErfolgreichZurückgesetzt",
    "context": "});\n\n      if (response.statusCode == 200) {\n        AppLogger.auth.i('✅ Password erfolgreich zurückgesetzt');\n        return true;\n      } else {\n        final errorData = jsonDecode(response.body);",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 505,
    "column": 71,
    "original": "Passwort-Zurücksetzung fehlgeschlagen",
    "suggested_key": "errorPasswortzurücksetzungFehlgeschlagen",
    "context": "'statusCode': response.statusCode,\n          'response': errorData\n        });\n        throw Exception(errorData['error'] ?? errorData['message'] ?? 'Passwort-Zurücksetzung fehlgeschlagen');\n      }\n    } catch (e) {\n      AppLogger.auth.e('❌ Password-Reset fehlgeschlagen', error: e);",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 508,
    "column": 56,
    "original": ", error: e);\n      rethrow;\n    }\n  }\n\n  // Token-Status überprüfen (für Debugging und Monitoring)\n  Future<Map<String, dynamic>> getTokenStatus() async {\n    try {\n      final accessToken = await TokenStorage.getAccessToken();\n      final refreshToken = await TokenStorage.getRefreshToken();\n      \n      if (accessToken == null || refreshToken == null) {\n        return {\n          ",
    "suggested_key": "errorErrorERethrow",
    "context": "throw Exception(errorData['error'] ?? errorData['message'] ?? 'Passwort-Zurücksetzung fehlgeschlagen');\n      }\n    } catch (e) {\n      AppLogger.auth.e('❌ Password-Reset fehlgeschlagen', error: e);\n      rethrow;\n    }\n  }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 30,
    "column": 29,
    "original": "world-join-by-token",
    "suggested_key": "errorWorldjoinbytoken",
    "context": "// HINZUGEFÜGT: Invite-Redirect Management\n  void setPendingInviteRedirect(String inviteToken) {\n    _pendingInviteToken = inviteToken;\n    _pendingRedirectRoute = 'world-join-by-token';\n    _pendingRouteParams = {'token': inviteToken};\n    AppLogger.auth.i('🎫 Invite-Redirect gesetzt', error: {'token': inviteToken.substring(0, 8) + '...'});\n  }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 57,
    "column": 17,
    "original": ": _pendingInviteToken != null\n    });\n    _pendingInviteToken = null;\n    _pendingRedirectRoute = null;\n    _pendingRouteParams = null;\n  }\n\n  Future<bool> isLoggedIn() async {\n    try {\n      final accessToken = await TokenStorage.getAccessToken();\n      AppLogger.auth.d(",
    "suggested_key": "error_pendinginvitetokenNull_pendinginvitetoken",
    "context": "void clearPendingRedirect() {\n    AppLogger.auth.i('🧹 Pending-Redirect gelöscht', error: {\n      'hadRoute': _pendingRedirectRoute != null,\n      'hadInvite': _pendingInviteToken != null\n    });\n    _pendingInviteToken = null;\n    _pendingRedirectRoute = null;",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 98,
    "column": 54,
    "original": ", error: e);\n      await logout();\n      return false;\n    }\n  }\n\n  // Vollständige Token-Validierung beim App-Start (ohne API-Calls)\n  Future<bool> validateTokensOnStart() async {\n    try {\n      final accessToken = await TokenStorage.getAccessToken();\n      final refreshToken = await TokenStorage.getRefreshToken();\n      \n      if (accessToken == null || refreshToken == null) {\n        return false;\n      }\n\n      // JWT-Token Format validieren\n      if (!_isValidJWT(accessToken) || !_isValidJWT(refreshToken)) {\n        return false;\n      }\n\n      // Token-Ablauf prüfen (nur lokale Validierung, keine API-Calls)\n      final accessExp = _getTokenExpiration(accessToken);\n      final refreshExp = _getTokenExpiration(refreshToken);\n      \n      if (accessExp == null || refreshExp == null) {\n        return false;\n      }\n\n      final now = DateTime.now();\n      \n      // Refresh-Token ist abgelaufen\n      if (refreshExp.isBefore(now)) {\n        return false;\n      }\n      \n      // Access-Token ist abgelaufen, aber Refresh-Token ist noch gültig\n      if (accessExp.isBefore(now)) {\n        // Token ist abgelaufen, aber wir versuchen nicht zu erneuern\n        // Das wird beim ersten API-Call automatisch gemacht\n        return true; // Erlaube App-Start, Token-Refresh erfolgt bei Bedarf\n      }\n\n      // Beide Token sind gültig\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  // JWT-Token Format validieren\n  bool _isValidJWT(String token) {\n    try {\n      final parts = token.split(",
    "suggested_key": "errorErrorEAwait",
    "context": "isAuthenticated.value = false;\n      return false;\n    } catch (e) {\n      AppLogger.auth.e('❌ isLoggedIn() fehlgeschlagen', error: e);\n      await logout();\n      return false;\n    }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 294,
    "column": 17,
    "original": ": email,\n        });\n        \n        // Detailliertere Fehlerbehandlung\n        if (errorData[",
    "suggested_key": "errorEmailDetailliertereFehlerbehandlung",
    "context": "'statusCode': response.statusCode,\n          'error': errorData['error'] ?? errorData['message'],\n          'details': errorData['details'],\n          'email': email,\n        });\n        \n        // Detailliertere Fehlerbehandlung",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 309,
    "column": 15,
    "original": ": email,\n      });\n      rethrow;\n    }\n  }\n\n  // Erweitertes Logout mit Server-Call und vollständigem Cleanup\n  Future<void> logout() async {\n    final username = _currentUser?.username ?? ",
    "suggested_key": "errorEmailRethrowErweitertes",
    "context": "} catch (e) {\n      AppLogger.logAuthEvent('register_error', username: username, metadata: {\n        'error': e.toString(),\n        'email': email,\n      });\n      rethrow;\n    }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 331,
    "column": 19,
    "original": ": e.toString(),\n          });\n        }\n      }\n      \n      // Lokales Cleanup\n      await TokenStorage.clearTokens();\n      _currentUser = null;\n      _apiService.clearToken();\n      isAuthenticated.value = false; // Reaktiven Status setzen\n      \n      AppLogger.logAuthEvent(",
    "suggested_key": "errorEtostringLokalesCleanup",
    "context": "} catch (e) {\n          // Server-Logout fehlgeschlagen, trotzdem lokal ausloggen\n          AppLogger.logAuthEvent('server_logout_failed', username: username, metadata: {\n            'error': e.toString(),\n          });\n        }\n      }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 344,
    "column": 24,
    "original": "❌ Logout-Fehler",
    "suggested_key": "errorLogoutfehler",
    "context": "AppLogger.logAuthEvent('logout_success', username: username);\n    } catch (e) {\n      AppLogger.auth.e('❌ Logout-Fehler', error: e);\n    }\n  }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 433,
    "column": 24,
    "original": "❌ Fehler beim Laden des aktuellen Users",
    "suggested_key": "errorFehlerBeimLaden",
    "context": "throw Exception('Failed to fetch user data');\n      }\n    } catch (e) {\n      AppLogger.auth.e('❌ Fehler beim Laden des aktuellen Users', error: e);\n      return null;\n    }\n  }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 457,
    "column": 24,
    "original": "❌ Fehler beim Laden des gespeicherten Users",
    "suggested_key": "errorFehlerBeimLaden",
    "context": "return _currentUser;\n      }\n    } catch (e) {\n      AppLogger.auth.e('❌ Fehler beim Laden des gespeicherten Users', error: e);\n    }\n    return null;\n  }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 481,
    "column": 64,
    "original": ", error: e);\n      rethrow;\n    }\n  }\n\n  // Passwort zurücksetzen mit Token\n  Future<bool> resetPassword(String token, String newPassword) async {\n    try {\n      AppLogger.auth.i(",
    "suggested_key": "errorErrorERethrow",
    "context": "throw Exception(errorData['message'] ?? 'Passwort-Reset Anfrage fehlgeschlagen');\n      }\n    } catch (e) {\n      AppLogger.auth.e('❌ Password-Reset Anfrage fehlgeschlagen', error: e);\n      rethrow;\n    }\n  }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 497,
    "column": 26,
    "original": "✅ Password erfolgreich zurückgesetzt",
    "suggested_key": "errorPasswordErfolgreichZurückgesetzt",
    "context": "});\n\n      if (response.statusCode == 200) {\n        AppLogger.auth.i('✅ Password erfolgreich zurückgesetzt');\n        return true;\n      } else {\n        final errorData = jsonDecode(response.body);",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 501,
    "column": 26,
    "original": "❌ Password-Reset API-Fehler",
    "suggested_key": "errorPasswordresetApifehler",
    "context": "return true;\n      } else {\n        final errorData = jsonDecode(response.body);\n        AppLogger.auth.w('❌ Password-Reset API-Fehler', error: {\n          'statusCode': response.statusCode,\n          'response': errorData\n        });",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 505,
    "column": 71,
    "original": "Passwort-Zurücksetzung fehlgeschlagen",
    "suggested_key": "errorPasswortzurücksetzungFehlgeschlagen",
    "context": "'statusCode': response.statusCode,\n          'response': errorData\n        });\n        throw Exception(errorData['error'] ?? errorData['message'] ?? 'Passwort-Zurücksetzung fehlgeschlagen');\n      }\n    } catch (e) {\n      AppLogger.auth.e('❌ Password-Reset fehlgeschlagen', error: e);",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 508,
    "column": 56,
    "original": ", error: e);\n      rethrow;\n    }\n  }\n\n  // Token-Status überprüfen (für Debugging und Monitoring)\n  Future<Map<String, dynamic>> getTokenStatus() async {\n    try {\n      final accessToken = await TokenStorage.getAccessToken();\n      final refreshToken = await TokenStorage.getRefreshToken();\n      \n      if (accessToken == null || refreshToken == null) {\n        return {\n          ",
    "suggested_key": "errorErrorERethrow",
    "context": "throw Exception(errorData['error'] ?? errorData['message'] ?? 'Passwort-Zurücksetzung fehlgeschlagen');\n      }\n    } catch (e) {\n      AppLogger.auth.e('❌ Password-Reset fehlgeschlagen', error: e);\n      rethrow;\n    }\n  }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 457,
    "column": 68,
    "original": ", error: e);\n    }\n    return null;\n  }\n\n  Future<String?> getCurrentAccessToken() async {\n    return await TokenStorage.getAccessToken();\n  }\n\n  // Passwort-Reset anfordern\n  Future<bool> requestPasswordReset(String email) async {\n    try {\n      final response = await _apiService.post(",
    "suggested_key": "errorErrorEReturn",
    "context": "return _currentUser;\n      }\n    } catch (e) {\n      AppLogger.auth.e('❌ Fehler beim Laden des gespeicherten Users', error: e);\n    }\n    return null;\n  }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 80,
    "column": 28,
    "original": ":\n          return InviteErrorCode.invalidEmail;\n        default:\n          return InviteErrorCode.unknown;\n      }\n    }\n    \n    // Fallback: Text-basierte Erkennung (für Backwards-Kompatibilität)\n    if (message.contains(",
    "suggested_key": "errorReturnInviteerrorcodeinvalidemailDefault",
    "context": "return InviteErrorCode.worldNotFound;\n        case 'WORLD_NOT_OPEN':\n          return InviteErrorCode.worldNotOpen;\n        case 'INVALID_EMAIL':\n          return InviteErrorCode.invalidEmail;\n        default:\n          return InviteErrorCode.unknown;",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 92,
    "column": 33,
    "original": "nicht gefunden",
    "suggested_key": "errorNichtGefunden",
    "context": "return InviteErrorCode.inviteAlreadySent;\n    } else if (message.contains('Berechtigung')) {\n      return InviteErrorCode.permissionDenied;\n    } else if (message.contains('nicht gefunden')) {\n      return InviteErrorCode.worldNotFound;\n    } else if (message.contains('nicht geöffnet')) {\n      return InviteErrorCode.worldNotOpen;",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 96,
    "column": 40,
    "original": ")) {\n      return InviteErrorCode.invalidEmail;\n    }\n    \n    return InviteErrorCode.unknown;\n  }\n\n  // Benutzerfreundliche Fehlermeldungen basierend auf Error-Codes\n  String _getErrorMessage(InviteErrorCode errorCode, String? originalMessage) {\n    switch (errorCode) {\n      case InviteErrorCode.inviteAlreadySent:\n        return ",
    "suggested_key": "errorReturnInviteerrorcodeinvalidemailReturn",
    "context": "return InviteErrorCode.worldNotFound;\n    } else if (message.contains('nicht geöffnet')) {\n      return InviteErrorCode.worldNotOpen;\n    } else if (message.contains('E-Mail')) {\n      return InviteErrorCode.invalidEmail;\n    }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 109,
    "column": 16,
    "original": "Du hast keine Berechtigung, Einladungen zu versenden",
    "suggested_key": "errorDuHastKeine",
    "context": "case InviteErrorCode.inviteAlreadySent:\n        return 'Diese E-Mail-Adresse hat bereits eine Einladung erhalten';\n      case InviteErrorCode.permissionDenied:\n        return 'Du hast keine Berechtigung, Einladungen zu versenden';\n      case InviteErrorCode.worldNotFound:\n        return 'Welt nicht gefunden';\n      case InviteErrorCode.worldNotOpen:",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 111,
    "column": 16,
    "original": "Welt nicht gefunden",
    "suggested_key": "errorWeltNichtGefunden",
    "context": "case InviteErrorCode.permissionDenied:\n        return 'Du hast keine Berechtigung, Einladungen zu versenden';\n      case InviteErrorCode.worldNotFound:\n        return 'Welt nicht gefunden';\n      case InviteErrorCode.worldNotOpen:\n        return 'Diese Welt ist nicht für Einladungen geöffnet';\n      case InviteErrorCode.invalidEmail:",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 113,
    "column": 16,
    "original": "Diese Welt ist nicht für Einladungen geöffnet",
    "suggested_key": "errorDieseWeltIst",
    "context": "case InviteErrorCode.worldNotFound:\n        return 'Welt nicht gefunden';\n      case InviteErrorCode.worldNotOpen:\n        return 'Diese Welt ist nicht für Einladungen geöffnet';\n      case InviteErrorCode.invalidEmail:\n        return 'Ungültige E-Mail-Adresse';\n      case InviteErrorCode.networkError:",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 119,
    "column": 35,
    "original": "Einladung fehlgeschlagen",
    "suggested_key": "errorEinladungFehlgeschlagen",
    "context": "case InviteErrorCode.networkError:\n        return 'Netzwerkfehler - bitte versuche es erneut';\n      case InviteErrorCode.unknown:\n        return originalMessage ?? 'Einladung fehlgeschlagen';\n    }\n  }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 142,
    "column": 52,
    "original": ");\n    } on SocketException {\n      throw Exception(_getErrorMessage(InviteErrorCode.networkError, null));\n    } on http.ClientException {\n      throw Exception(_getErrorMessage(InviteErrorCode.networkError, null));\n    } catch (e) {\n      // Fallback für unbekannte Fehler\n      if (e is Exception) {\n        rethrow;\n      }\n      throw Exception(",
    "suggested_key": "errorOnSocketexceptionThrow",
    "context": "throw Exception(errorMessage);\n      }\n    } on FormatException catch (e) {\n      throw Exception('Ungültige Server-Antwort: $e');\n    } on SocketException {\n      throw Exception(_getErrorMessage(InviteErrorCode.networkError, null));\n    } on http.ClientException {",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 173,
    "column": 25,
    "original": "Öffentliche Einladung fehlgeschlagen: ${response.statusCode}",
    "suggested_key": "errorÖffentlicheEinladungFehlgeschlagen",
    "context": "final errorMessage = _getErrorMessage(errorCode, errorData['message']);\n        throw Exception(errorMessage);\n      } else {\n        throw Exception('Öffentliche Einladung fehlgeschlagen: ${response.statusCode}');\n      }\n    } on FormatException catch (e) {\n      throw Exception('Ungültige Server-Antwort: $e');",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 185,
    "column": 23,
    "original": "Öffentliche Einladung fehlgeschlagen: $e",
    "suggested_key": "errorÖffentlicheEinladungFehlgeschlagen",
    "context": "if (e is Exception) {\n        rethrow;\n      }\n      throw Exception('Öffentliche Einladung fehlgeschlagen: $e');\n    }\n  }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 209,
    "column": 23,
    "original": "Einladungen konnten nicht geladen werden: $e",
    "suggested_key": "errorEinladungenKonntenNicht",
    "context": "if (e is Exception) {\n        rethrow;\n      }\n      throw Exception('Einladungen konnten nicht geladen werden: $e');\n    }\n  }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 241,
    "column": 23,
    "original": "Einladung konnte nicht gelöscht werden: $e",
    "suggested_key": "errorEinladungKonnteNicht",
    "context": "if (e is Exception) {\n        rethrow;\n      }\n      throw Exception('Einladung konnte nicht gelöscht werden: $e');\n    }\n  }\n}",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 96,
    "column": 40,
    "original": ")) {\n      return InviteErrorCode.invalidEmail;\n    }\n    \n    return InviteErrorCode.unknown;\n  }\n\n  // Benutzerfreundliche Fehlermeldungen basierend auf Error-Codes\n  String _getErrorMessage(InviteErrorCode errorCode, String? originalMessage) {\n    switch (errorCode) {\n      case InviteErrorCode.inviteAlreadySent:\n        return ",
    "suggested_key": "errorReturnInviteerrorcodeinvalidemailReturn",
    "context": "return InviteErrorCode.worldNotFound;\n    } else if (message.contains('nicht geöffnet')) {\n      return InviteErrorCode.worldNotOpen;\n    } else if (message.contains('E-Mail')) {\n      return InviteErrorCode.invalidEmail;\n    }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 117,
    "column": 16,
    "original": "Netzwerkfehler - bitte versuche es erneut",
    "suggested_key": "errorNetzwerkfehlerBitteVersuche",
    "context": "case InviteErrorCode.invalidEmail:\n        return 'Ungültige E-Mail-Adresse';\n      case InviteErrorCode.networkError:\n        return 'Netzwerkfehler - bitte versuche es erneut';\n      case InviteErrorCode.unknown:\n        return originalMessage ?? 'Einladung fehlgeschlagen';\n    }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 133,
    "column": 37,
    "original": "] == true;\n      } else {\n        // Strukturierte Fehlerbehandlung\n        final errorData = jsonDecode(response.body);\n        final errorCode = _parseErrorCode(errorData);\n        final errorMessage = _getErrorMessage(errorCode, errorData[",
    "suggested_key": "errorTrueElseStrukturierte",
    "context": "if (response.statusCode == 200) {\n        final responseData = jsonDecode(response.body);\n        return responseData['success'] == true;\n      } else {\n        // Strukturierte Fehlerbehandlung\n        final errorData = jsonDecode(response.body);",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 142,
    "column": 52,
    "original": ");\n    } on SocketException {\n      throw Exception(_getErrorMessage(InviteErrorCode.networkError, null));\n    } on http.ClientException {\n      throw Exception(_getErrorMessage(InviteErrorCode.networkError, null));\n    } catch (e) {\n      // Fallback für unbekannte Fehler\n      if (e is Exception) {\n        rethrow;\n      }\n      throw Exception(",
    "suggested_key": "errorOnSocketexceptionThrow",
    "context": "throw Exception(errorMessage);\n      }\n    } on FormatException catch (e) {\n      throw Exception('Ungültige Server-Antwort: $e');\n    } on SocketException {\n      throw Exception(_getErrorMessage(InviteErrorCode.networkError, null));\n    } on http.ClientException {",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 197,
    "column": 25,
    "original": "Einladungen konnten nicht geladen werden: ${response.statusCode}",
    "suggested_key": "errorEinladungenKonntenNicht",
    "context": "final List<dynamic> invitesJson = jsonDecode(response.body);\n        return invitesJson.map((json) => Invite.fromJson(json as Map<String, dynamic>)).toList();\n      } else {\n        throw Exception('Einladungen konnten nicht geladen werden: ${response.statusCode}');\n      }\n    } on FormatException catch (e) {\n      throw Exception('Ungültige Server-Antwort: $e');",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 209,
    "column": 23,
    "original": "Einladungen konnten nicht geladen werden: $e",
    "suggested_key": "errorEinladungenKonntenNicht",
    "context": "if (e is Exception) {\n        rethrow;\n      }\n      throw Exception('Einladungen konnten nicht geladen werden: $e');\n    }\n  }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 88,
    "column": 26,
    "original": "bereits eine Einladung",
    "suggested_key": "errorBereitsEineEinladung",
    "context": "}\n    \n    // Fallback: Text-basierte Erkennung (für Backwards-Kompatibilität)\n    if (message.contains('bereits eine Einladung')) {\n      return InviteErrorCode.inviteAlreadySent;\n    } else if (message.contains('Berechtigung')) {\n      return InviteErrorCode.permissionDenied;",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 107,
    "column": 16,
    "original": "Diese E-Mail-Adresse hat bereits eine Einladung erhalten",
    "suggested_key": "errorDieseEmailadresseHat",
    "context": "String _getErrorMessage(InviteErrorCode errorCode, String? originalMessage) {\n    switch (errorCode) {\n      case InviteErrorCode.inviteAlreadySent:\n        return 'Diese E-Mail-Adresse hat bereits eine Einladung erhalten';\n      case InviteErrorCode.permissionDenied:\n        return 'Du hast keine Berechtigung, Einladungen zu versenden';\n      case InviteErrorCode.worldNotFound:",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 109,
    "column": 16,
    "original": "Du hast keine Berechtigung, Einladungen zu versenden",
    "suggested_key": "errorDuHastKeine",
    "context": "case InviteErrorCode.inviteAlreadySent:\n        return 'Diese E-Mail-Adresse hat bereits eine Einladung erhalten';\n      case InviteErrorCode.permissionDenied:\n        return 'Du hast keine Berechtigung, Einladungen zu versenden';\n      case InviteErrorCode.worldNotFound:\n        return 'Welt nicht gefunden';\n      case InviteErrorCode.worldNotOpen:",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 111,
    "column": 16,
    "original": "Welt nicht gefunden",
    "suggested_key": "errorWeltNichtGefunden",
    "context": "case InviteErrorCode.permissionDenied:\n        return 'Du hast keine Berechtigung, Einladungen zu versenden';\n      case InviteErrorCode.worldNotFound:\n        return 'Welt nicht gefunden';\n      case InviteErrorCode.worldNotOpen:\n        return 'Diese Welt ist nicht für Einladungen geöffnet';\n      case InviteErrorCode.invalidEmail:",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 113,
    "column": 16,
    "original": "Diese Welt ist nicht für Einladungen geöffnet",
    "suggested_key": "errorDieseWeltIst",
    "context": "case InviteErrorCode.worldNotFound:\n        return 'Welt nicht gefunden';\n      case InviteErrorCode.worldNotOpen:\n        return 'Diese Welt ist nicht für Einladungen geöffnet';\n      case InviteErrorCode.invalidEmail:\n        return 'Ungültige E-Mail-Adresse';\n      case InviteErrorCode.networkError:",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 119,
    "column": 35,
    "original": "Einladung fehlgeschlagen",
    "suggested_key": "errorEinladungFehlgeschlagen",
    "context": "case InviteErrorCode.networkError:\n        return 'Netzwerkfehler - bitte versuche es erneut';\n      case InviteErrorCode.unknown:\n        return originalMessage ?? 'Einladung fehlgeschlagen';\n    }\n  }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 152,
    "column": 23,
    "original": "Einladung fehlgeschlagen: $e",
    "suggested_key": "errorEinladungFehlgeschlagenE",
    "context": "if (e is Exception) {\n        rethrow;\n      }\n      throw Exception('Einladung fehlgeschlagen: $e');\n    }\n  }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 173,
    "column": 25,
    "original": "Öffentliche Einladung fehlgeschlagen: ${response.statusCode}",
    "suggested_key": "errorÖffentlicheEinladungFehlgeschlagen",
    "context": "final errorMessage = _getErrorMessage(errorCode, errorData['message']);\n        throw Exception(errorMessage);\n      } else {\n        throw Exception('Öffentliche Einladung fehlgeschlagen: ${response.statusCode}');\n      }\n    } on FormatException catch (e) {\n      throw Exception('Ungültige Server-Antwort: $e');",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 185,
    "column": 23,
    "original": "Öffentliche Einladung fehlgeschlagen: $e",
    "suggested_key": "errorÖffentlicheEinladungFehlgeschlagen",
    "context": "if (e is Exception) {\n        rethrow;\n      }\n      throw Exception('Öffentliche Einladung fehlgeschlagen: $e');\n    }\n  }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 197,
    "column": 25,
    "original": "Einladungen konnten nicht geladen werden: ${response.statusCode}",
    "suggested_key": "errorEinladungenKonntenNicht",
    "context": "final List<dynamic> invitesJson = jsonDecode(response.body);\n        return invitesJson.map((json) => Invite.fromJson(json as Map<String, dynamic>)).toList();\n      } else {\n        throw Exception('Einladungen konnten nicht geladen werden: ${response.statusCode}');\n      }\n    } on FormatException catch (e) {\n      throw Exception('Ungültige Server-Antwort: $e');",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 209,
    "column": 23,
    "original": "Einladungen konnten nicht geladen werden: $e",
    "suggested_key": "errorEinladungenKonntenNicht",
    "context": "if (e is Exception) {\n        rethrow;\n      }\n      throw Exception('Einladungen konnten nicht geladen werden: $e');\n    }\n  }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 241,
    "column": 23,
    "original": "Einladung konnte nicht gelöscht werden: $e",
    "suggested_key": "errorEinladungKonnteNicht",
    "context": "if (e is Exception) {\n        rethrow;\n      }\n      throw Exception('Einladung konnte nicht gelöscht werden: $e');\n    }\n  }\n}",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 74,
    "column": 32,
    "original": ":\n          return WorldErrorCode.permissionDenied;\n        case ",
    "suggested_key": "errorReturnWorlderrorcodepermissiondeniedCase",
    "context": "switch (errorCode) {\n        case 'WORLD_NOT_FOUND':\n          return WorldErrorCode.worldNotFound;\n        case 'PERMISSION_DENIED':\n          return WorldErrorCode.permissionDenied;\n        case 'WORLD_ARCHIVED':\n          return WorldErrorCode.worldArchived;",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 76,
    "column": 29,
    "original": ":\n          return WorldErrorCode.worldArchived;\n        case ",
    "suggested_key": "errorReturnWorlderrorcodeworldarchivedCase",
    "context": "return WorldErrorCode.worldNotFound;\n        case 'PERMISSION_DENIED':\n          return WorldErrorCode.permissionDenied;\n        case 'WORLD_ARCHIVED':\n          return WorldErrorCode.worldArchived;\n        case 'ALREADY_REGISTERED':\n          return WorldErrorCode.alreadyRegistered;",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 78,
    "column": 33,
    "original": ":\n          return WorldErrorCode.alreadyRegistered;\n        case ",
    "suggested_key": "errorReturnWorlderrorcodealreadyregisteredCase",
    "context": "return WorldErrorCode.permissionDenied;\n        case 'WORLD_ARCHIVED':\n          return WorldErrorCode.worldArchived;\n        case 'ALREADY_REGISTERED':\n          return WorldErrorCode.alreadyRegistered;\n        case 'ALREADY_PRE_REGISTERED':\n          return WorldErrorCode.alreadyPreRegistered;",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 80,
    "column": 37,
    "original": ":\n          return WorldErrorCode.alreadyPreRegistered;\n        case ",
    "suggested_key": "errorReturnWorlderrorcodealreadypreregisteredCase",
    "context": "return WorldErrorCode.worldArchived;\n        case 'ALREADY_REGISTERED':\n          return WorldErrorCode.alreadyRegistered;\n        case 'ALREADY_PRE_REGISTERED':\n          return WorldErrorCode.alreadyPreRegistered;\n        case 'PRE_REGISTRATION_CLOSED':\n          return WorldErrorCode.preRegistrationClosed;",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 82,
    "column": 38,
    "original": ":\n          return WorldErrorCode.preRegistrationClosed;\n        case ",
    "suggested_key": "errorReturnWorlderrorcodepreregistrationclosedCase",
    "context": "return WorldErrorCode.alreadyRegistered;\n        case 'ALREADY_PRE_REGISTERED':\n          return WorldErrorCode.alreadyPreRegistered;\n        case 'PRE_REGISTRATION_CLOSED':\n          return WorldErrorCode.preRegistrationClosed;\n        case 'NOT_AUTHENTICATED':\n          return WorldErrorCode.notAuthenticated;",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 84,
    "column": 32,
    "original": ":\n          return WorldErrorCode.notAuthenticated;\n        default:\n          return WorldErrorCode.unknown;\n      }\n    }\n    \n    // Fallback: Text-basierte Erkennung (für Backwards-Kompatibilität)\n    if (message.contains(",
    "suggested_key": "errorReturnWorlderrorcodenotauthenticatedDefault",
    "context": "return WorldErrorCode.alreadyPreRegistered;\n        case 'PRE_REGISTRATION_CLOSED':\n          return WorldErrorCode.preRegistrationClosed;\n        case 'NOT_AUTHENTICATED':\n          return WorldErrorCode.notAuthenticated;\n        default:\n          return WorldErrorCode.unknown;",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 92,
    "column": 41,
    "original": ")) {\n      return WorldErrorCode.worldNotFound;\n    } else if (message.contains(",
    "suggested_key": "errorReturnWorlderrorcodeworldnotfoundElse",
    "context": "}\n    \n    // Fallback: Text-basierte Erkennung (für Backwards-Kompatibilität)\n    if (message.contains('nicht gefunden')) {\n      return WorldErrorCode.worldNotFound;\n    } else if (message.contains('Berechtigung')) {\n      return WorldErrorCode.permissionDenied;",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 94,
    "column": 46,
    "original": ")) {\n      return WorldErrorCode.permissionDenied;\n    } else if (message.contains(",
    "suggested_key": "errorReturnWorlderrorcodepermissiondeniedElse",
    "context": "// Fallback: Text-basierte Erkennung (für Backwards-Kompatibilität)\n    if (message.contains('nicht gefunden')) {\n      return WorldErrorCode.worldNotFound;\n    } else if (message.contains('Berechtigung')) {\n      return WorldErrorCode.permissionDenied;\n    } else if (message.contains('archiviert')) {\n      return WorldErrorCode.worldArchived;",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 96,
    "column": 44,
    "original": ")) {\n      return WorldErrorCode.worldArchived;\n    } else if (message.contains(",
    "suggested_key": "errorReturnWorlderrorcodeworldarchivedElse",
    "context": "return WorldErrorCode.worldNotFound;\n    } else if (message.contains('Berechtigung')) {\n      return WorldErrorCode.permissionDenied;\n    } else if (message.contains('archiviert')) {\n      return WorldErrorCode.worldArchived;\n    } else if (message.contains('bereits registriert')) {\n      return WorldErrorCode.alreadyRegistered;",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 98,
    "column": 53,
    "original": ")) {\n      return WorldErrorCode.alreadyRegistered;\n    } else if (message.contains(",
    "suggested_key": "errorReturnWorlderrorcodealreadyregisteredElse",
    "context": "return WorldErrorCode.permissionDenied;\n    } else if (message.contains('archiviert')) {\n      return WorldErrorCode.worldArchived;\n    } else if (message.contains('bereits registriert')) {\n      return WorldErrorCode.alreadyRegistered;\n    } else if (message.contains('bereits vorregistriert')) {\n      return WorldErrorCode.alreadyPreRegistered;",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 100,
    "column": 56,
    "original": ")) {\n      return WorldErrorCode.alreadyPreRegistered;\n    } else if (message.contains(",
    "suggested_key": "errorReturnWorlderrorcodealreadypreregisteredElse",
    "context": "return WorldErrorCode.worldArchived;\n    } else if (message.contains('bereits registriert')) {\n      return WorldErrorCode.alreadyRegistered;\n    } else if (message.contains('bereits vorregistriert')) {\n      return WorldErrorCode.alreadyPreRegistered;\n    } else if (message.contains('geschlossen')) {\n      return WorldErrorCode.preRegistrationClosed;",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 102,
    "column": 45,
    "original": ")) {\n      return WorldErrorCode.preRegistrationClosed;\n    } else if (message.contains(",
    "suggested_key": "errorReturnWorlderrorcodepreregistrationclosedElse",
    "context": "return WorldErrorCode.alreadyRegistered;\n    } else if (message.contains('bereits vorregistriert')) {\n      return WorldErrorCode.alreadyPreRegistered;\n    } else if (message.contains('geschlossen')) {\n      return WorldErrorCode.preRegistrationClosed;\n    } else if (message.contains('angemeldet')) {\n      return WorldErrorCode.notAuthenticated;",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 104,
    "column": 44,
    "original": ")) {\n      return WorldErrorCode.notAuthenticated;\n    }\n    \n    return WorldErrorCode.unknown;\n  }\n\n  // Benutzerfreundliche Fehlermeldungen basierend auf Error-Codes\n  String _getErrorMessage(WorldErrorCode errorCode, String? originalMessage) {\n    switch (errorCode) {\n      case WorldErrorCode.worldNotFound:\n        return ",
    "suggested_key": "errorReturnWorlderrorcodenotauthenticatedReturn",
    "context": "return WorldErrorCode.alreadyPreRegistered;\n    } else if (message.contains('geschlossen')) {\n      return WorldErrorCode.preRegistrationClosed;\n    } else if (message.contains('angemeldet')) {\n      return WorldErrorCode.notAuthenticated;\n    }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 115,
    "column": 36,
    "original": ";\n      case WorldErrorCode.permissionDenied:\n        return ",
    "suggested_key": "errorCaseWorlderrorcodepermissiondeniedReturn",
    "context": "String _getErrorMessage(WorldErrorCode errorCode, String? originalMessage) {\n    switch (errorCode) {\n      case WorldErrorCode.worldNotFound:\n        return 'Welt nicht gefunden';\n      case WorldErrorCode.permissionDenied:\n        return 'Du hast keine Berechtigung für diese Aktion';\n      case WorldErrorCode.worldArchived:",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 117,
    "column": 60,
    "original": ";\n      case WorldErrorCode.worldArchived:\n        return ",
    "suggested_key": "errorCaseWorlderrorcodeworldarchivedReturn",
    "context": "case WorldErrorCode.worldNotFound:\n        return 'Welt nicht gefunden';\n      case WorldErrorCode.permissionDenied:\n        return 'Du hast keine Berechtigung für diese Aktion';\n      case WorldErrorCode.worldArchived:\n        return 'Diese Welt ist nicht mehr verfügbar';\n      case WorldErrorCode.alreadyRegistered:",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 119,
    "column": 52,
    "original": ";\n      case WorldErrorCode.alreadyRegistered:\n        return ",
    "suggested_key": "errorCaseWorlderrorcodealreadyregisteredReturn",
    "context": "case WorldErrorCode.permissionDenied:\n        return 'Du hast keine Berechtigung für diese Aktion';\n      case WorldErrorCode.worldArchived:\n        return 'Diese Welt ist nicht mehr verfügbar';\n      case WorldErrorCode.alreadyRegistered:\n        return 'Du bist bereits Mitglied dieser Welt';\n      case WorldErrorCode.alreadyPreRegistered:",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 121,
    "column": 53,
    "original": ";\n      case WorldErrorCode.alreadyPreRegistered:\n        return ",
    "suggested_key": "errorCaseWorlderrorcodealreadypreregisteredReturn",
    "context": "case WorldErrorCode.worldArchived:\n        return 'Diese Welt ist nicht mehr verfügbar';\n      case WorldErrorCode.alreadyRegistered:\n        return 'Du bist bereits Mitglied dieser Welt';\n      case WorldErrorCode.alreadyPreRegistered:\n        return 'Du bist bereits für diese Welt vorregistriert';\n      case WorldErrorCode.preRegistrationClosed:",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 123,
    "column": 62,
    "original": ";\n      case WorldErrorCode.preRegistrationClosed:\n        return ",
    "suggested_key": "errorCaseWorlderrorcodepreregistrationclosedReturn",
    "context": "case WorldErrorCode.alreadyRegistered:\n        return 'Du bist bereits Mitglied dieser Welt';\n      case WorldErrorCode.alreadyPreRegistered:\n        return 'Du bist bereits für diese Welt vorregistriert';\n      case WorldErrorCode.preRegistrationClosed:\n        return 'Vorregistrierung für diese Welt ist nicht möglich';\n      case WorldErrorCode.notAuthenticated:",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 125,
    "column": 66,
    "original": ";\n      case WorldErrorCode.notAuthenticated:\n        return ",
    "suggested_key": "errorCaseWorlderrorcodenotauthenticatedReturn",
    "context": "case WorldErrorCode.alreadyPreRegistered:\n        return 'Du bist bereits für diese Welt vorregistriert';\n      case WorldErrorCode.preRegistrationClosed:\n        return 'Vorregistrierung für diese Welt ist nicht möglich';\n      case WorldErrorCode.notAuthenticated:\n        return 'Du musst angemeldet sein';\n      case WorldErrorCode.networkError:",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 127,
    "column": 41,
    "original": ";\n      case WorldErrorCode.networkError:\n        return ",
    "suggested_key": "errorCaseWorlderrorcodenetworkerrorReturn",
    "context": "case WorldErrorCode.preRegistrationClosed:\n        return 'Vorregistrierung für diese Welt ist nicht möglich';\n      case WorldErrorCode.notAuthenticated:\n        return 'Du musst angemeldet sein';\n      case WorldErrorCode.networkError:\n        return 'Netzwerkfehler - bitte versuche es erneut';\n      case WorldErrorCode.unknown:",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 129,
    "column": 58,
    "original": ";\n      case WorldErrorCode.unknown:\n        return originalMessage ?? ",
    "suggested_key": "errorCaseWorlderrorcodeunknownReturn",
    "context": "case WorldErrorCode.notAuthenticated:\n        return 'Du musst angemeldet sein';\n      case WorldErrorCode.networkError:\n        return 'Netzwerkfehler - bitte versuche es erneut';\n      case WorldErrorCode.unknown:\n        return originalMessage ?? 'Aktion fehlgeschlagen';\n    }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 131,
    "column": 57,
    "original": ";\n    }\n  }\n\n  Future<List<World>> getWorlds() async {\n    try {\n      final response = await _apiService.get(",
    "suggested_key": "errorFuturelistworldGetworldsAsync",
    "context": "case WorldErrorCode.networkError:\n        return 'Netzwerkfehler - bitte versuche es erneut';\n      case WorldErrorCode.unknown:\n        return originalMessage ?? 'Aktion fehlgeschlagen';\n    }\n  }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 146,
    "column": 52,
    "original": ");\n    } on SocketException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } on http.ClientException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } catch (e) {\n      if (e is Exception) {\n        rethrow;\n      }\n      throw Exception(",
    "suggested_key": "errorOnSocketexceptionThrow",
    "context": "throw Exception('Welten konnten nicht geladen werden: ${response.statusCode}');\n      }\n    } on FormatException catch (e) {\n      throw Exception('Ungültige Server-Antwort: $e');\n    } on SocketException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } on http.ClientException {",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 167,
    "column": 25,
    "original": "Welt konnte nicht geladen werden: ${response.statusCode}",
    "suggested_key": "errorWeltKonnteNicht",
    "context": "final worldJson = jsonDecode(response.body);\n        return World.fromJson(worldJson);\n      } else {\n        throw Exception('Welt konnte nicht geladen werden: ${response.statusCode}');\n      }\n    } on FormatException catch (e) {\n      throw Exception('Ungültige Server-Antwort: $e');",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 170,
    "column": 52,
    "original": ");\n    } on SocketException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } on http.ClientException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } catch (e) {\n      if (e is Exception) {\n        rethrow;\n      }\n      throw Exception(",
    "suggested_key": "errorOnSocketexceptionThrow",
    "context": "throw Exception('Welt konnte nicht geladen werden: ${response.statusCode}');\n      }\n    } on FormatException catch (e) {\n      throw Exception('Ungültige Server-Antwort: $e');\n    } on SocketException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } on http.ClientException {",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 198,
    "column": 52,
    "original": ");\n    } on SocketException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } on http.ClientException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } catch (e) {\n      if (e is Exception) {\n        rethrow;\n      }\n      throw Exception(",
    "suggested_key": "errorOnSocketexceptionThrow",
    "context": "throw Exception(errorMessage);\n      }\n    } on FormatException catch (e) {\n      throw Exception('Ungültige Server-Antwort: $e');\n    } on SocketException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } on http.ClientException {",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 207,
    "column": 51,
    "original": ");\n    }\n  }\n\n  Future<bool> preRegisterWorld(int worldId, String email, {Map<String, dynamic>? config}) async {\n    try {\n      final data = <String, dynamic>{\n        ",
    "suggested_key": "errorFutureboolPreregisterworldintWorldid",
    "context": "if (e is Exception) {\n        rethrow;\n      }\n      throw Exception('Beitritt fehlgeschlagen: $e');\n    }\n  }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 233,
    "column": 52,
    "original": ");\n    } on SocketException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } on http.ClientException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } catch (e) {\n      if (e is Exception) {\n        rethrow;\n      }\n      throw Exception(",
    "suggested_key": "errorOnSocketexceptionThrow",
    "context": "throw Exception(errorMessage);\n      }\n    } on FormatException catch (e) {\n      throw Exception('Ungültige Server-Antwort: $e');\n    } on SocketException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } on http.ClientException {",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 242,
    "column": 59,
    "original": ");\n    }\n  }\n\n  Future<bool> preRegisterWorldAuthenticated(int worldId, {Map<String, dynamic>? config}) async {\n    try {\n      final currentUser = _authService.currentUser;\n      if (currentUser == null) {\n        throw Exception(_getErrorMessage(WorldErrorCode.notAuthenticated, null));\n      }\n\n      final data = <String, dynamic>{\n        ",
    "suggested_key": "errorFutureboolPreregisterworldauthenticatedintWorldid",
    "context": "if (e is Exception) {\n        rethrow;\n      }\n      throw Exception('Vorregistrierung fehlgeschlagen: $e');\n    }\n  }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 273,
    "column": 52,
    "original": ");\n    } on SocketException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } on http.ClientException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } catch (e) {\n      if (e is Exception) {\n        rethrow;\n      }\n      throw Exception(",
    "suggested_key": "errorOnSocketexceptionThrow",
    "context": "throw Exception(errorMessage);\n      }\n    } on FormatException catch (e) {\n      throw Exception('Ungültige Server-Antwort: $e');\n    } on SocketException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } on http.ClientException {",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 282,
    "column": 59,
    "original": ");\n    }\n  }\n\n  Future<bool> cancelPreRegistration(int worldId, String email) async {\n    try {\n      final response = await _apiService.delete(",
    "suggested_key": "errorFutureboolCancelpreregistrationintWorldid",
    "context": "if (e is Exception) {\n        rethrow;\n      }\n      throw Exception('Vorregistrierung fehlgeschlagen: $e');\n    }\n  }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 292,
    "column": 52,
    "original": ");\n    } on SocketException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } on http.ClientException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } catch (e) {\n      if (e is Exception) {\n        rethrow;\n      }\n      throw Exception(",
    "suggested_key": "errorOnSocketexceptionThrow",
    "context": "return response.statusCode == 200;\n    } on FormatException catch (e) {\n      throw Exception('Ungültige Server-Antwort: $e');\n    } on SocketException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } on http.ClientException {",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 301,
    "column": 74,
    "original": ");\n    }\n  }\n\n  Future<bool> cancelPreRegistrationAuthenticated(int worldId) async {\n    try {\n      final currentUser = _authService.currentUser;\n      if (currentUser == null) {\n        throw Exception(_getErrorMessage(WorldErrorCode.notAuthenticated, null));\n      }\n\n      return await cancelPreRegistration(worldId, currentUser.email);\n    } catch (e) {\n      if (e is Exception) {\n        rethrow;\n      }\n      throw Exception(",
    "suggested_key": "errorFutureboolCancelpreregistrationauthenticatedintWorldid",
    "context": "if (e is Exception) {\n        rethrow;\n      }\n      throw Exception('Vorregistrierung konnte nicht storniert werden: $e');\n    }\n  }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 327,
    "column": 52,
    "original": ");\n    } on SocketException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } on http.ClientException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } catch (e) {\n      if (e is Exception) {\n        rethrow;\n      }\n      throw Exception(",
    "suggested_key": "errorOnSocketexceptionThrow",
    "context": "return response.statusCode == 200;\n    } on FormatException catch (e) {\n      throw Exception('Ungültige Server-Antwort: $e');\n    } on SocketException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } on http.ClientException {",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 347,
    "column": 13,
    "original": "t log this as an error\n      return false;\n    }\n  }\n\n  // Neue typsichere Methode mit PreRegistrationStatus-Model\n  Future<PreRegistrationStatus> getPreRegistrationStatus(int worldId) async {\n    try {\n      final response = await _apiService.get(",
    "suggested_key": "errorTLogThis",
    "context": "return response.statusCode == 200;\n    } catch (e) {\n      // 404 means user is not in this world, which is normal\n      // Don't log this as an error\n      return false;\n    }\n  }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 390,
    "column": 26,
    "original": "Fehler bei Token-Validierung",
    "suggested_key": "errorFehlerBeiTokenvalidierung",
    "context": "return null;\n    } catch (e) {\n      AppLogger.logError('Fehler bei Token-Validierung', e, context: {'token': token.substring(0, 8) + '...'});\n      // Fallback für bessere UX\n      return null;\n    }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 390,
    "column": 108,
    "original": "});\n      // Fallback für bessere UX\n      return null;\n    }\n  }\n\n  // Invite akzeptieren und User der Welt hinzufügen\n  Future<Map<String, dynamic>?> acceptInvite(String token) async {\n    try {\n      AppLogger.app.i(",
    "suggested_key": "errorFallbackFürBessere",
    "context": "return null;\n    } catch (e) {\n      AppLogger.logError('Fehler bei Token-Validierung', e, context: {'token': token.substring(0, 8) + '...'});\n      // Fallback für bessere UX\n      return null;\n    }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 399,
    "column": 96,
    "original": "});\n      \n      // API-Call mit Authentifizierung (da User eingeloggt sein muss)\n      final response = await _apiService.post(",
    "suggested_key": "errorApicallMitAuthentifizierung",
    "context": "// Invite akzeptieren und User der Welt hinzufügen\n  Future<Map<String, dynamic>?> acceptInvite(String token) async {\n    try {\n      AppLogger.app.i('🎫 Invite wird akzeptiert', error: {'token': token.substring(0, 8) + '...'});\n      \n      // API-Call mit Authentifizierung (da User eingeloggt sein muss)\n      final response = await _apiService.post('/invites/accept/$token', {});",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 421,
    "column": 25,
    "original": "Diese Einladung ist nicht für deine E-Mail-Adresse bestimmt",
    "suggested_key": "errorDieseEinladungIst",
    "context": "throw Exception('Invite bereits akzeptiert');\n      } else if (response.statusCode == 403) {\n        AppLogger.app.w('⚠️ E-Mail-Mismatch bei Invite', error: {'token': token.substring(0, 8) + '...'});\n        throw Exception('Diese Einladung ist nicht für deine E-Mail-Adresse bestimmt');\n      } else if (response.statusCode == 410) {\n        AppLogger.app.w('⚠️ Invite-Token abgelaufen', error: {'token': token.substring(0, 8) + '...'});\n        throw Exception('Invite-Token ist abgelaufen');",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 424,
    "column": 25,
    "original": "Invite-Token ist abgelaufen",
    "suggested_key": "errorInvitetokenIstAbgelaufen",
    "context": "throw Exception('Diese Einladung ist nicht für deine E-Mail-Adresse bestimmt');\n      } else if (response.statusCode == 410) {\n        AppLogger.app.w('⚠️ Invite-Token abgelaufen', error: {'token': token.substring(0, 8) + '...'});\n        throw Exception('Invite-Token ist abgelaufen');\n      }\n      \n      return null;",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 104,
    "column": 44,
    "original": ")) {\n      return WorldErrorCode.notAuthenticated;\n    }\n    \n    return WorldErrorCode.unknown;\n  }\n\n  // Benutzerfreundliche Fehlermeldungen basierend auf Error-Codes\n  String _getErrorMessage(WorldErrorCode errorCode, String? originalMessage) {\n    switch (errorCode) {\n      case WorldErrorCode.worldNotFound:\n        return ",
    "suggested_key": "errorReturnWorlderrorcodenotauthenticatedReturn",
    "context": "return WorldErrorCode.alreadyPreRegistered;\n    } else if (message.contains('geschlossen')) {\n      return WorldErrorCode.preRegistrationClosed;\n    } else if (message.contains('angemeldet')) {\n      return WorldErrorCode.notAuthenticated;\n    }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 129,
    "column": 16,
    "original": "Netzwerkfehler - bitte versuche es erneut",
    "suggested_key": "errorNetzwerkfehlerBitteVersuche",
    "context": "case WorldErrorCode.notAuthenticated:\n        return 'Du musst angemeldet sein';\n      case WorldErrorCode.networkError:\n        return 'Netzwerkfehler - bitte versuche es erneut';\n      case WorldErrorCode.unknown:\n        return originalMessage ?? 'Aktion fehlgeschlagen';\n    }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 143,
    "column": 25,
    "original": "Welten konnten nicht geladen werden: ${response.statusCode}",
    "suggested_key": "errorWeltenKonntenNicht",
    "context": "final List<dynamic> worldsJson = jsonDecode(response.body);\n        return worldsJson.map((json) => World.fromJson(json)).toList();\n      } else {\n        throw Exception('Welten konnten nicht geladen werden: ${response.statusCode}');\n      }\n    } on FormatException catch (e) {\n      throw Exception('Ungültige Server-Antwort: $e');",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 155,
    "column": 23,
    "original": "Welten konnten nicht geladen werden: $e",
    "suggested_key": "errorWeltenKonntenNicht",
    "context": "if (e is Exception) {\n        rethrow;\n      }\n      throw Exception('Welten konnten nicht geladen werden: $e');\n    }\n  }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 167,
    "column": 25,
    "original": "Welt konnte nicht geladen werden: ${response.statusCode}",
    "suggested_key": "errorWeltKonnteNicht",
    "context": "final worldJson = jsonDecode(response.body);\n        return World.fromJson(worldJson);\n      } else {\n        throw Exception('Welt konnte nicht geladen werden: ${response.statusCode}');\n      }\n    } on FormatException catch (e) {\n      throw Exception('Ungültige Server-Antwort: $e');",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 179,
    "column": 23,
    "original": "Welt konnte nicht geladen werden: $e",
    "suggested_key": "errorWeltKonnteNicht",
    "context": "if (e is Exception) {\n        rethrow;\n      }\n      throw Exception('Welt konnte nicht geladen werden: $e');\n    }\n  }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 189,
    "column": 37,
    "original": "] == true;\n      } else {\n        // Strukturierte Fehlerbehandlung\n        final errorData = jsonDecode(response.body);\n        final errorCode = _parseErrorCode(errorData);\n        final errorMessage = _getErrorMessage(errorCode, errorData[",
    "suggested_key": "errorTrueElseStrukturierte",
    "context": "if (response.statusCode == 200) {\n        final responseData = jsonDecode(response.body);\n        return responseData['success'] == true;\n      } else {\n        // Strukturierte Fehlerbehandlung\n        final errorData = jsonDecode(response.body);",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 224,
    "column": 37,
    "original": "] == true;\n      } else {\n        // Strukturierte Fehlerbehandlung\n        final errorData = jsonDecode(response.body);\n        final errorCode = _parseErrorCode(errorData);\n        final errorMessage = _getErrorMessage(errorCode, errorData[",
    "suggested_key": "errorTrueElseStrukturierte",
    "context": "if (response.statusCode == 200) {\n        final responseData = jsonDecode(response.body);\n        return responseData['success'] == true;\n      } else {\n        // Strukturierte Fehlerbehandlung\n        final errorData = jsonDecode(response.body);",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 264,
    "column": 37,
    "original": "] == true;\n      } else {\n        // Strukturierte Fehlerbehandlung\n        final errorData = jsonDecode(response.body);\n        final errorCode = _parseErrorCode(errorData);\n        final errorMessage = _getErrorMessage(errorCode, errorData[",
    "suggested_key": "errorTrueElseStrukturierte",
    "context": "if (response.statusCode == 200) {\n        final responseData = jsonDecode(response.body);\n        return responseData['success'] == true;\n      } else {\n        // Strukturierte Fehlerbehandlung\n        final errorData = jsonDecode(response.body);",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 364,
    "column": 13,
    "original": "t log this as an error\n      return PreRegistrationStatus(isPreRegistered: false);\n    }\n  }\n\n  // Backwards-Kompatibilität: Alte Methode mit bool-Rückgabe\n  Future<bool> isPreRegisteredForWorld(int worldId) async {\n    final status = await getPreRegistrationStatus(worldId);\n    return status.isPreRegistered;\n  }\n\n  // Invite-Token Validierung\n  Future<Map<String, dynamic>?> validateInviteToken(String token) async {\n    try {\n      // API-Call ohne Authentifizierung (öffentlicher Endpoint)\n      final response = await _apiService.get(",
    "suggested_key": "errorTLogThis",
    "context": "return PreRegistrationStatus(isPreRegistered: false);\n    } catch (e) {\n      // 404 means user is not pre-registered, which is normal\n      // Don't log this as an error\n      return PreRegistrationStatus(isPreRegistered: false);\n    }\n  }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 390,
    "column": 26,
    "original": "Fehler bei Token-Validierung",
    "suggested_key": "errorFehlerBeiTokenvalidierung",
    "context": "return null;\n    } catch (e) {\n      AppLogger.logError('Fehler bei Token-Validierung', e, context: {'token': token.substring(0, 8) + '...'});\n      // Fallback für bessere UX\n      return null;\n    }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 390,
    "column": 108,
    "original": "});\n      // Fallback für bessere UX\n      return null;\n    }\n  }\n\n  // Invite akzeptieren und User der Welt hinzufügen\n  Future<Map<String, dynamic>?> acceptInvite(String token) async {\n    try {\n      AppLogger.app.i(",
    "suggested_key": "errorFallbackFürBessere",
    "context": "return null;\n    } catch (e) {\n      AppLogger.logError('Fehler bei Token-Validierung', e, context: {'token': token.substring(0, 8) + '...'});\n      // Fallback für bessere UX\n      return null;\n    }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 402,
    "column": 47,
    "original": "/invites/accept/$token",
    "suggested_key": "errorInvitesaccepttoken",
    "context": "AppLogger.app.i('🎫 Invite wird akzeptiert', error: {'token': token.substring(0, 8) + '...'});\n      \n      // API-Call mit Authentifizierung (da User eingeloggt sein muss)\n      final response = await _apiService.post('/invites/accept/$token', {});\n      \n      if (response.statusCode == 200) {\n        final responseData = jsonDecode(response.body);",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 407,
    "column": 27,
    "original": "✅ Invite erfolgreich akzeptiert",
    "suggested_key": "errorInviteErfolgreichAkzeptiert",
    "context": "if (response.statusCode == 200) {\n        final responseData = jsonDecode(response.body);\n        if (responseData['success'] == true && responseData['data'] != null) {\n          AppLogger.app.i('✅ Invite erfolgreich akzeptiert', error: {\n            'worldId': responseData['data']['world']?['id'],\n            'worldName': responseData['data']['world']?['name']\n          });",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 423,
    "column": 25,
    "original": "⚠️ Invite-Token abgelaufen",
    "suggested_key": "errorInvitetokenAbgelaufen",
    "context": "AppLogger.app.w('⚠️ E-Mail-Mismatch bei Invite', error: {'token': token.substring(0, 8) + '...'});\n        throw Exception('Diese Einladung ist nicht für deine E-Mail-Adresse bestimmt');\n      } else if (response.statusCode == 410) {\n        AppLogger.app.w('⚠️ Invite-Token abgelaufen', error: {'token': token.substring(0, 8) + '...'});\n        throw Exception('Invite-Token ist abgelaufen');\n      }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 424,
    "column": 25,
    "original": "Invite-Token ist abgelaufen",
    "suggested_key": "errorInvitetokenIstAbgelaufen",
    "context": "throw Exception('Diese Einladung ist nicht für deine E-Mail-Adresse bestimmt');\n      } else if (response.statusCode == 410) {\n        AppLogger.app.w('⚠️ Invite-Token abgelaufen', error: {'token': token.substring(0, 8) + '...'});\n        throw Exception('Invite-Token ist abgelaufen');\n      }\n      \n      return null;",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 429,
    "column": 26,
    "original": "Fehler bei Invite-Akzeptierung",
    "suggested_key": "errorFehlerBeiInviteakzeptierung",
    "context": "return null;\n    } catch (e) {\n      AppLogger.logError('Fehler bei Invite-Akzeptierung', e, context: {'token': token.substring(0, 8) + '...'});\n      rethrow;\n    }\n  }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 115,
    "column": 16,
    "original": "Welt nicht gefunden",
    "suggested_key": "errorWeltNichtGefunden",
    "context": "String _getErrorMessage(WorldErrorCode errorCode, String? originalMessage) {\n    switch (errorCode) {\n      case WorldErrorCode.worldNotFound:\n        return 'Welt nicht gefunden';\n      case WorldErrorCode.permissionDenied:\n        return 'Du hast keine Berechtigung für diese Aktion';\n      case WorldErrorCode.worldArchived:",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 119,
    "column": 16,
    "original": "Diese Welt ist nicht mehr verfügbar",
    "suggested_key": "errorDieseWeltIst",
    "context": "case WorldErrorCode.permissionDenied:\n        return 'Du hast keine Berechtigung für diese Aktion';\n      case WorldErrorCode.worldArchived:\n        return 'Diese Welt ist nicht mehr verfügbar';\n      case WorldErrorCode.alreadyRegistered:\n        return 'Du bist bereits Mitglied dieser Welt';\n      case WorldErrorCode.alreadyPreRegistered:",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 121,
    "column": 16,
    "original": "Du bist bereits Mitglied dieser Welt",
    "suggested_key": "errorDuBistBereits",
    "context": "case WorldErrorCode.worldArchived:\n        return 'Diese Welt ist nicht mehr verfügbar';\n      case WorldErrorCode.alreadyRegistered:\n        return 'Du bist bereits Mitglied dieser Welt';\n      case WorldErrorCode.alreadyPreRegistered:\n        return 'Du bist bereits für diese Welt vorregistriert';\n      case WorldErrorCode.preRegistrationClosed:",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 123,
    "column": 16,
    "original": "Du bist bereits für diese Welt vorregistriert",
    "suggested_key": "errorDuBistBereits",
    "context": "case WorldErrorCode.alreadyRegistered:\n        return 'Du bist bereits Mitglied dieser Welt';\n      case WorldErrorCode.alreadyPreRegistered:\n        return 'Du bist bereits für diese Welt vorregistriert';\n      case WorldErrorCode.preRegistrationClosed:\n        return 'Vorregistrierung für diese Welt ist nicht möglich';\n      case WorldErrorCode.notAuthenticated:",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 125,
    "column": 16,
    "original": "Vorregistrierung für diese Welt ist nicht möglich",
    "suggested_key": "errorVorregistrierungFürDiese",
    "context": "case WorldErrorCode.alreadyPreRegistered:\n        return 'Du bist bereits für diese Welt vorregistriert';\n      case WorldErrorCode.preRegistrationClosed:\n        return 'Vorregistrierung für diese Welt ist nicht möglich';\n      case WorldErrorCode.notAuthenticated:\n        return 'Du musst angemeldet sein';\n      case WorldErrorCode.networkError:",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 143,
    "column": 25,
    "original": "Welten konnten nicht geladen werden: ${response.statusCode}",
    "suggested_key": "errorWeltenKonntenNicht",
    "context": "final List<dynamic> worldsJson = jsonDecode(response.body);\n        return worldsJson.map((json) => World.fromJson(json)).toList();\n      } else {\n        throw Exception('Welten konnten nicht geladen werden: ${response.statusCode}');\n      }\n    } on FormatException catch (e) {\n      throw Exception('Ungültige Server-Antwort: $e');",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 155,
    "column": 23,
    "original": "Welten konnten nicht geladen werden: $e",
    "suggested_key": "errorWeltenKonntenNicht",
    "context": "if (e is Exception) {\n        rethrow;\n      }\n      throw Exception('Welten konnten nicht geladen werden: $e');\n    }\n  }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 167,
    "column": 25,
    "original": "Welt konnte nicht geladen werden: ${response.statusCode}",
    "suggested_key": "errorWeltKonnteNicht",
    "context": "final worldJson = jsonDecode(response.body);\n        return World.fromJson(worldJson);\n      } else {\n        throw Exception('Welt konnte nicht geladen werden: ${response.statusCode}');\n      }\n    } on FormatException catch (e) {\n      throw Exception('Ungültige Server-Antwort: $e');",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 179,
    "column": 23,
    "original": "Welt konnte nicht geladen werden: $e",
    "suggested_key": "errorWeltKonnteNicht",
    "context": "if (e is Exception) {\n        rethrow;\n      }\n      throw Exception('Welt konnte nicht geladen werden: $e');\n    }\n  }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 336,
    "column": 23,
    "original": "Welt konnte nicht verlassen werden: $e",
    "suggested_key": "errorWeltKonnteNicht",
    "context": "if (e is Exception) {\n        rethrow;\n      }\n      throw Exception('Welt konnte nicht verlassen werden: $e');\n    }\n  }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 390,
    "column": 108,
    "original": "});\n      // Fallback für bessere UX\n      return null;\n    }\n  }\n\n  // Invite akzeptieren und User der Welt hinzufügen\n  Future<Map<String, dynamic>?> acceptInvite(String token) async {\n    try {\n      AppLogger.app.i(",
    "suggested_key": "errorFallbackFürBessere",
    "context": "return null;\n    } catch (e) {\n      AppLogger.logError('Fehler bei Token-Validierung', e, context: {'token': token.substring(0, 8) + '...'});\n      // Fallback für bessere UX\n      return null;\n    }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 421,
    "column": 25,
    "original": "Diese Einladung ist nicht für deine E-Mail-Adresse bestimmt",
    "suggested_key": "errorDieseEinladungIst",
    "context": "throw Exception('Invite bereits akzeptiert');\n      } else if (response.statusCode == 403) {\n        AppLogger.app.w('⚠️ E-Mail-Mismatch bei Invite', error: {'token': token.substring(0, 8) + '...'});\n        throw Exception('Diese Einladung ist nicht für deine E-Mail-Adresse bestimmt');\n      } else if (response.statusCode == 410) {\n        AppLogger.app.w('⚠️ Invite-Token abgelaufen', error: {'token': token.substring(0, 8) + '...'});\n        throw Exception('Invite-Token ist abgelaufen');",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\forgot_password_page.dart",
    "line": 24,
    "column": 66,
    "original": ");\n\n  @override\n  void dispose() {\n    _emailController.dispose();\n    super.dispose();\n  }\n\n  Future<void> _requestPasswordReset() async {\n    if (!_formKey.currentState!.validate()) {\n      return;\n    }\n\n    setState(() {\n      _isLoading = true;\n      _errorMessage = null;\n      _isSuccess = false;\n    });\n\n    try {\n      final success = await _authService.requestPasswordReset(\n        _emailController.text.trim(),\n      );\n\n      if (success && mounted) {\n        setState(() {\n          _isSuccess = true;\n        });\n        \n        // Nach 3 Sekunden zurück zum Login\n        Future.delayed(const Duration(seconds: 3), () {\n          if (mounted) {\n            context.goNamed(",
    "suggested_key": "errorOverrideVoidDispose",
    "context": "String? _errorMessage;\n  \n  // E-Mail-Validierung Regex\n  static final RegExp _emailRegex = RegExp(r'^[^@]+@[^@]+\\.[^@]+$');\n\n  @override\n  void dispose() {",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\forgot_password_page.dart",
    "line": 63,
    "column": 67,
    "original": ");\n        });\n      }\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isLoading = false;\n        });\n      }\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: BackgroundWidget(\n        child: Center(\n          child: SingleChildScrollView(\n            padding: const EdgeInsets.all(24.0),\n            child: Center(\n              child: ConstrainedBox(\n                constraints: const BoxConstraints(maxWidth: 400),\n                child: Card(\n                  elevation: 12,\n                  color: const Color(0xFF1A1A1A),\n                  shape: RoundedRectangleBorder(\n                    borderRadius: BorderRadius.circular(20),\n                    side: BorderSide(\n                      color: AppTheme.primaryColor.withOpacity(0.3),\n                      width: 1,\n                    ),\n                  ),\n                  child: Container(\n                    decoration: BoxDecoration(\n                      borderRadius: BorderRadius.circular(20),\n                      gradient: const LinearGradient(\n                        begin: Alignment.topLeft,\n                        end: Alignment.bottomRight,\n                        colors: [\n                          Color(0xFF1A1A1A),\n                          Color(0xFF2A2A2A),\n                        ],\n                      ),\n                    ),\n                    child: Padding(\n                      padding: const EdgeInsets.all(32.0),\n                      child: Form(\n                        key: _formKey,\n                        child: Column(\n                          mainAxisSize: MainAxisSize.min,\n                          children: [\n                            // Back Button\n                            Align(\n                              alignment: Alignment.centerLeft,\n                              child: IconButton(\n                                onPressed: () => context.goNamed(",
    "suggested_key": "errorFinallyIfMounted",
    "context": "} catch (e) {\n      if (mounted) {\n        setState(() {\n          _errorMessage = e.toString().replaceAll('Exception: ', '');\n        });\n      }\n    } finally {",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\forgot_password_page.dart",
    "line": 24,
    "column": 66,
    "original": ");\n\n  @override\n  void dispose() {\n    _emailController.dispose();\n    super.dispose();\n  }\n\n  Future<void> _requestPasswordReset() async {\n    if (!_formKey.currentState!.validate()) {\n      return;\n    }\n\n    setState(() {\n      _isLoading = true;\n      _errorMessage = null;\n      _isSuccess = false;\n    });\n\n    try {\n      final success = await _authService.requestPasswordReset(\n        _emailController.text.trim(),\n      );\n\n      if (success && mounted) {\n        setState(() {\n          _isSuccess = true;\n        });\n        \n        // Nach 3 Sekunden zurück zum Login\n        Future.delayed(const Duration(seconds: 3), () {\n          if (mounted) {\n            context.goNamed(",
    "suggested_key": "errorOverrideVoidDispose",
    "context": "String? _errorMessage;\n  \n  // E-Mail-Validierung Regex\n  static final RegExp _emailRegex = RegExp(r'^[^@]+@[^@]+\\.[^@]+$');\n\n  @override\n  void dispose() {",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\forgot_password_page.dart",
    "line": 24,
    "column": 66,
    "original": ");\n\n  @override\n  void dispose() {\n    _emailController.dispose();\n    super.dispose();\n  }\n\n  Future<void> _requestPasswordReset() async {\n    if (!_formKey.currentState!.validate()) {\n      return;\n    }\n\n    setState(() {\n      _isLoading = true;\n      _errorMessage = null;\n      _isSuccess = false;\n    });\n\n    try {\n      final success = await _authService.requestPasswordReset(\n        _emailController.text.trim(),\n      );\n\n      if (success && mounted) {\n        setState(() {\n          _isSuccess = true;\n        });\n        \n        // Nach 3 Sekunden zurück zum Login\n        Future.delayed(const Duration(seconds: 3), () {\n          if (mounted) {\n            context.goNamed(",
    "suggested_key": "errorOverrideVoidDispose",
    "context": "String? _errorMessage;\n  \n  // E-Mail-Validierung Regex\n  static final RegExp _emailRegex = RegExp(r'^[^@]+@[^@]+\\.[^@]+$');\n\n  @override\n  void dispose() {",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 77,
    "column": 79,
    "original": ", error: e);\n      _authService = AuthService();\n    }\n  }\n\n  void _loadQueryParameters() {\n    // Query-Parameter aus der URL lesen\n    final routeData = GoRouterState.of(context);\n    _inviteToken = routeData.uri.queryParameters[",
    "suggested_key": "errorErrorE_authservice",
    "context": "_authService = AuthService();\n      }\n    } catch (e) {\n      AppLogger.app.w('⚠️ ServiceLocator Fehler - nutze direkte Instanziierung', error: e);\n      _authService = AuthService();\n    }\n  }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 108,
    "column": 84,
    "original": ": user.username});\n        \n        if (mounted) {\n          // HINZUGEFÜGT: Post-Auth-Redirect prüfen\n          final pendingRedirect = _authService.getPendingRedirect();\n          \n          if (pendingRedirect != null) {\n            AppLogger.app.i(",
    "suggested_key": "errorUserusernameIfMounted",
    "context": ");\n\n      if (user != null) {\n        AppLogger.app.i('✅ Login erfolgreich', error: {'userId': user.id, 'username': user.username});\n        \n        if (mounted) {\n          // HINZUGEFÜGT: Post-Auth-Redirect prüfen",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 115,
    "column": 58,
    "original": ", error: pendingRedirect);\n            _authService.clearPendingRedirect();\n            \n            // Redirect zur ursprünglichen Invite-Seite\n            final routeName = pendingRedirect[",
    "suggested_key": "errorErrorPendingredirect_authserviceclearpendingredirect",
    "context": "final pendingRedirect = _authService.getPendingRedirect();\n          \n          if (pendingRedirect != null) {\n            AppLogger.app.i('🎫 Post-Auth-Redirect erkannt', error: pendingRedirect);\n            _authService.clearPendingRedirect();\n            \n            // Redirect zur ursprünglichen Invite-Seite",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 130,
    "column": 75,
    "original": ": _inviteToken!});\n          } else {\n            // Standard-Redirect zu Welten-Liste\n            context.goNamed(",
    "suggested_key": "error_invitetokenElseStandardredirect",
    "context": "} else if (_inviteToken != null) {\n            // Fallback: Wenn Invite-Token in Query-Parametern, direkt zur Invite-Seite\n            AppLogger.app.i('🎫 Invite-Token in Query - direkte Navigation', error: {'token': _inviteToken!.substring(0, 8) + '...'});\n            context.goNamed('world-join-by-token', pathParameters: {'token': _inviteToken!});\n          } else {\n            // Standard-Redirect zu Welten-Liste\n            context.goNamed('world-list');",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 140,
    "column": 63,
    "original": ");\n      });\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isLoading = false;\n        });\n      }\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Stack(\n        children: [\n          BackgroundWidget(\n            child: Center(\n              child: SingleChildScrollView(\n                padding: const EdgeInsets.all(24.0),\n                child: FadeTransition(\n                  opacity: _fadeAnimation,\n                  child: Center(\n                    child: ConstrainedBox(\n                      constraints: const BoxConstraints(maxWidth: 400),\n                      child: Card(\n                        elevation: 12,\n                        color: const Color(0xFF1A1A1A),\n                        shape: RoundedRectangleBorder(\n                          borderRadius: BorderRadius.circular(20),\n                          side: BorderSide(\n                            color: AppTheme.primaryColor.withOpacity(0.3),\n                            width: 1,\n                          ),\n                        ),\n                        child: Container(\n                          decoration: BoxDecoration(\n                            borderRadius: BorderRadius.circular(20),\n                            gradient: const LinearGradient(\n                              begin: Alignment.topLeft,\n                              end: Alignment.bottomRight,\n                              colors: [\n                                Color(0xFF1A1A1A),\n                                Color(0xFF2A2A2A),\n                              ],\n                            ),\n                          ),\n                          child: Padding(\n                            padding: const EdgeInsets.all(32.0),\n                            child: Form(\n                              key: _formKey,\n                              child: Column(\n                                mainAxisSize: MainAxisSize.min,\n                                children: [\n                                  // Logo/Title with Animation\n                                  TweenAnimationBuilder<double>(\n                                    tween: Tween(begin: 0.8, end: 1.0),\n                                    duration: const Duration(milliseconds: 600),\n                                    curve: Curves.elasticOut,\n                                    builder: (context, value, child) {\n                                      return Transform.scale(\n                                        scale: value,\n                                        child: child,\n                                      );\n                                    },\n                                    child: Container(\n                                      width: 80,\n                                      height: 80,\n                                      decoration: BoxDecoration(\n                                        color: AppTheme.primaryColor.withOpacity(0.2),\n                                        borderRadius: BorderRadius.circular(20),\n                                        border: Border.all(\n                                          color: AppTheme.primaryColor.withOpacity(0.5),\n                                          width: 2,\n                                        ),\n                                      ),\n                                      child: const Icon(\n                                        Icons.public,\n                                        size: 40,\n                                        color: AppTheme.primaryColor,\n                                      ),\n                                    ),\n                                  ),\n                                  const SizedBox(height: 20),\n                                  Text(\n                                    ",
    "suggested_key": "errorFinallyIfMounted",
    "context": "} catch (e) {\n      AppLogger.logError('Login fehlgeschlagen', e);\n      setState(() {\n        _loginError = e.toString().replaceAll('Exception: ', '');\n      });\n    } finally {\n      if (mounted) {",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 77,
    "column": 79,
    "original": ", error: e);\n      _authService = AuthService();\n    }\n  }\n\n  void _loadQueryParameters() {\n    // Query-Parameter aus der URL lesen\n    final routeData = GoRouterState.of(context);\n    _inviteToken = routeData.uri.queryParameters[",
    "suggested_key": "errorErrorE_authservice",
    "context": "_authService = AuthService();\n      }\n    } catch (e) {\n      AppLogger.app.w('⚠️ ServiceLocator Fehler - nutze direkte Instanziierung', error: e);\n      _authService = AuthService();\n    }\n  }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 87,
    "column": 21,
    "original": "🎫 Login Query-Parameter geladen",
    "suggested_key": "errorLoginQueryparameterGeladen",
    "context": "final routeData = GoRouterState.of(context);\n    _inviteToken = routeData.uri.queryParameters['invite_token'];\n    \n    AppLogger.app.i('🎫 Login Query-Parameter geladen', error: {\n      'hasInviteToken': _inviteToken != null,\n      'inviteToken': _inviteToken?.substring(0, 8)\n    });",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 108,
    "column": 25,
    "original": "✅ Login erfolgreich",
    "suggested_key": "errorLoginErfolgreich",
    "context": ");\n\n      if (user != null) {\n        AppLogger.app.i('✅ Login erfolgreich', error: {'userId': user.id, 'username': user.username});\n        \n        if (mounted) {\n          // HINZUGEFÜGT: Post-Auth-Redirect prüfen",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 130,
    "column": 29,
    "original": "world-join-by-token",
    "suggested_key": "errorWorldjoinbytoken",
    "context": "} else if (_inviteToken != null) {\n            // Fallback: Wenn Invite-Token in Query-Parametern, direkt zur Invite-Seite\n            AppLogger.app.i('🎫 Invite-Token in Query - direkte Navigation', error: {'token': _inviteToken!.substring(0, 8) + '...'});\n            context.goNamed('world-join-by-token', pathParameters: {'token': _inviteToken!});\n          } else {\n            // Standard-Redirect zu Welten-Liste\n            context.goNamed('world-list');",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 130,
    "column": 75,
    "original": ": _inviteToken!});\n          } else {\n            // Standard-Redirect zu Welten-Liste\n            context.goNamed(",
    "suggested_key": "error_invitetokenElseStandardredirect",
    "context": "} else if (_inviteToken != null) {\n            // Fallback: Wenn Invite-Token in Query-Parametern, direkt zur Invite-Seite\n            AppLogger.app.i('🎫 Invite-Token in Query - direkte Navigation', error: {'token': _inviteToken!.substring(0, 8) + '...'});\n            context.goNamed('world-join-by-token', pathParameters: {'token': _inviteToken!});\n          } else {\n            // Standard-Redirect zu Welten-Liste\n            context.goNamed('world-list');",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 56,
    "column": 79,
    "original": ", error: e);\n      _authService = AuthService();\n    }\n  }\n\n  void _loadQueryParameters() {\n    // Query-Parameter aus der URL lesen\n    final routeData = GoRouterState.of(context);\n    _inviteToken = routeData.uri.queryParameters[",
    "suggested_key": "errorErrorE_authservice",
    "context": "}\n      \n    } catch (e) {\n      AppLogger.app.w('⚠️ ServiceLocator Fehler - nutze direkte Instanziierung', error: e);\n      _authService = AuthService();\n    }\n  }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 67,
    "column": 21,
    "original": "📧 Registration Query-Parameter geladen",
    "suggested_key": "errorRegistrationQueryparameterGeladen",
    "context": "_inviteToken = routeData.uri.queryParameters['invite_token'];\n    _prefilledEmail = routeData.uri.queryParameters['email'];\n    \n    AppLogger.app.i('📧 Registration Query-Parameter geladen', error: {\n      'hasInviteToken': _inviteToken != null,\n      'hasPrefilledEmail': _prefilledEmail != null,\n      'inviteToken': _inviteToken?.substring(0, 8),",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 77,
    "column": 60,
    "original": ": _prefilledEmail});\n    }\n  }\n\n  @override\n  void dispose() {\n    _usernameController.dispose();\n    _emailController.dispose();\n    _passwordController.dispose();\n    super.dispose();\n  }\n\n  Future<void> _register() async {\n    final formState = _formKey.currentState;\n    if (formState == null || !formState.validate()) {\n      return;\n    }\n\n    setState(() {\n      _isLoading = true;\n      _registerError = null;\n    });\n\n    try {\n      final user = await _authService.register(\n        _usernameController.text.trim(),\n        _emailController.text.trim().toLowerCase(),\n        _passwordController.text,\n      );\n\n      if (user != null) {\n        AppLogger.app.i(",
    "suggested_key": "error_prefilledemailOverrideVoid",
    "context": "// E-Mail vorbefüllen wenn vorhanden\n    if (_prefilledEmail != null && _prefilledEmail!.isNotEmpty) {\n      _emailController.text = _prefilledEmail!;\n      AppLogger.app.i('📧 E-Mail vorbefüllt', error: {'email': _prefilledEmail});\n    }\n  }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 111,
    "column": 17,
    "original": ": user.email,\n        });\n        \n        if (mounted) {\n          // HINZUGEFÜGT: Post-Auth-Redirect prüfen\n          final pendingRedirect = _authService.getPendingRedirect();\n          \n          if (pendingRedirect != null) {\n            AppLogger.app.i(",
    "suggested_key": "errorUseremailIfMounted",
    "context": "AppLogger.app.i('✅ Registrierung erfolgreich', error: {\n          'userId': user.id,\n          'username': user.username,\n          'email': user.email,\n        });\n        \n        if (mounted) {",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 119,
    "column": 76,
    "original": ", error: pendingRedirect);\n            _authService.clearPendingRedirect();\n            \n            // Redirect zur ursprünglichen Invite-Seite\n            final routeName = pendingRedirect[",
    "suggested_key": "errorErrorPendingredirect_authserviceclearpendingredirect",
    "context": "final pendingRedirect = _authService.getPendingRedirect();\n          \n          if (pendingRedirect != null) {\n            AppLogger.app.i('🎫 Post-Auth-Redirect nach Registration erkannt', error: pendingRedirect);\n            _authService.clearPendingRedirect();\n            \n            // Redirect zur ursprünglichen Invite-Seite",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 146,
    "column": 29,
    "original": "🎫 Invite-Token in Query nach Registration - direkte Navigation",
    "suggested_key": "errorInvitetokenInQuery",
    "context": "}\n          } else if (_inviteToken != null) {\n            // Fallback: Wenn Invite-Token in Query-Parametern, direkt zur Invite-Seite\n            AppLogger.app.i('🎫 Invite-Token in Query nach Registration - direkte Navigation', error: {'token': _inviteToken!.substring(0, 8) + '...'});\n            \n            ScaffoldMessenger.of(context).showSnackBar(\n              const SnackBar(",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 177,
    "column": 26,
    "original": "Registrierung fehlgeschlagen",
    "suggested_key": "errorRegistrierungFehlgeschlagen",
    "context": "}\n      }\n    } catch (e) {\n      AppLogger.logError('Registrierung fehlgeschlagen', e, context: {\n        'username': _usernameController.text.trim(),\n        'email': _emailController.text.trim().toLowerCase(),\n      });",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 179,
    "column": 15,
    "original": ": _emailController.text.trim().toLowerCase(),\n      });\n      \n      setState(() {\n        _registerError = e.toString().replaceAll(",
    "suggested_key": "error_emailcontrollertexttrimtolowercaseSetstate_registererror",
    "context": "} catch (e) {\n      AppLogger.logError('Registrierung fehlgeschlagen', e, context: {\n        'username': _usernameController.text.trim(),\n        'email': _emailController.text.trim().toLowerCase(),\n      });\n      \n      setState(() {",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 183,
    "column": 66,
    "original": ");\n      });\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isLoading = false;\n        });\n      }\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: BackgroundWidget(\n        child: Center(\n          child: SingleChildScrollView(\n            padding: const EdgeInsets.all(24.0),\n            child: Center(\n              child: ConstrainedBox(\n                constraints: const BoxConstraints(maxWidth: 400),\n                child: Card(\n                  elevation: 12,\n                  color: const Color(0xFF1A1A1A), // Dunkle Karte\n                  shape: RoundedRectangleBorder(\n                    borderRadius: BorderRadius.circular(20),\n                    side: BorderSide(\n                      color: AppTheme.primaryColor.withOpacity(0.3),\n                      width: 1,\n                    ),\n                  ),\n                  child: Container(\n                    decoration: BoxDecoration(\n                      borderRadius: BorderRadius.circular(20),\n                      gradient: const LinearGradient(\n                        begin: Alignment.topLeft,\n                        end: Alignment.bottomRight,\n                        colors: [\n                          Color(0xFF1A1A1A),\n                          Color(0xFF2A2A2A),\n                        ],\n                      ),\n                    ),\n                    child: Padding(\n                      padding: const EdgeInsets.all(32.0),\n                      child: Form(\n                        key: _formKey,\n                        child: Column(\n                          mainAxisSize: MainAxisSize.min,\n                          children: [\n                            // Logo/Title\n                            Container(\n                              width: 80,\n                              height: 80,\n                              decoration: BoxDecoration(\n                                color: AppTheme.primaryColor.withOpacity(0.2),\n                                borderRadius: BorderRadius.circular(20),\n                                border: Border.all(\n                                  color: AppTheme.primaryColor.withOpacity(0.5),\n                                  width: 2,\n                                ),\n                              ),\n                              child: const Icon(\n                                Icons.person_add,\n                                size: 40,\n                                color: AppTheme.primaryColor,\n                              ),\n                            ),\n                            const SizedBox(height: 20),\n                            Text(\n                              ",
    "suggested_key": "errorFinallyIfMounted",
    "context": "});\n      \n      setState(() {\n        _registerError = e.toString().replaceAll('Exception: ', '');\n      });\n    } finally {\n      if (mounted) {",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 56,
    "column": 79,
    "original": ", error: e);\n      _authService = AuthService();\n    }\n  }\n\n  void _loadQueryParameters() {\n    // Query-Parameter aus der URL lesen\n    final routeData = GoRouterState.of(context);\n    _inviteToken = routeData.uri.queryParameters[",
    "suggested_key": "errorErrorE_authservice",
    "context": "}\n      \n    } catch (e) {\n      AppLogger.app.w('⚠️ ServiceLocator Fehler - nutze direkte Instanziierung', error: e);\n      _authService = AuthService();\n    }\n  }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 67,
    "column": 21,
    "original": "📧 Registration Query-Parameter geladen",
    "suggested_key": "errorRegistrationQueryparameterGeladen",
    "context": "_inviteToken = routeData.uri.queryParameters['invite_token'];\n    _prefilledEmail = routeData.uri.queryParameters['email'];\n    \n    AppLogger.app.i('📧 Registration Query-Parameter geladen', error: {\n      'hasInviteToken': _inviteToken != null,\n      'hasPrefilledEmail': _prefilledEmail != null,\n      'inviteToken': _inviteToken?.substring(0, 8),",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 108,
    "column": 25,
    "original": "✅ Registrierung erfolgreich",
    "suggested_key": "errorRegistrierungErfolgreich",
    "context": ");\n\n      if (user != null) {\n        AppLogger.app.i('✅ Registrierung erfolgreich', error: {\n          'userId': user.id,\n          'username': user.username,\n          'email': user.email,",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 146,
    "column": 29,
    "original": "🎫 Invite-Token in Query nach Registration - direkte Navigation",
    "suggested_key": "errorInvitetokenInQuery",
    "context": "}\n          } else if (_inviteToken != null) {\n            // Fallback: Wenn Invite-Token in Query-Parametern, direkt zur Invite-Seite\n            AppLogger.app.i('🎫 Invite-Token in Query nach Registration - direkte Navigation', error: {'token': _inviteToken!.substring(0, 8) + '...'});\n            \n            ScaffoldMessenger.of(context).showSnackBar(\n              const SnackBar(",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 99,
    "column": 29,
    "original": "Der Reset-Link ist ungültig oder abgelaufen. Bitte fordere einen neuen Link an.",
    "suggested_key": "errorDerResetlinkIst",
    "context": "setState(() {\n          final error = e.toString().replaceAll('Exception: ', '');\n          if (error.contains('expired') || error.contains('invalid')) {\n            _errorMessage = 'Der Reset-Link ist ungültig oder abgelaufen. Bitte fordere einen neuen Link an.';\n          } else {\n            _errorMessage = error;\n          }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 99,
    "column": 29,
    "original": "Der Reset-Link ist ungültig oder abgelaufen. Bitte fordere einen neuen Link an.",
    "suggested_key": "errorDerResetlinkIst",
    "context": "setState(() {\n          final error = e.toString().replaceAll('Exception: ', '');\n          if (error.contains('expired') || error.contains('invalid')) {\n            _errorMessage = 'Der Reset-Link ist ungültig oder abgelaufen. Bitte fordere einen neuen Link an.';\n          } else {\n            _errorMessage = error;\n          }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 59,
    "column": 26,
    "original": "World-Liste laden fehlgeschlagen",
    "suggested_key": "errorWorldlisteLadenFehlgeschlagen",
    "context": "_applyFiltersAndSorting();\n    } catch (e) {\n      _error = 'Fehler beim Laden der Welten: $e';\n      AppLogger.logError('World-Liste laden fehlgeschlagen', e);\n    } finally {\n      _setLoading(false);\n    }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 87,
    "column": 87,
    "original": ": world.id});\n        _joinedWorlds[world.id] = false;\n        _preRegisteredWorlds[world.id] = false;\n      }\n    }\n  }\n\n  void setStatusFilter(WorldStatus? status) {\n    _statusFilter = status;\n    _applyFiltersAndSorting();\n  }\n\n  void setCategoryFilter(WorldCategory? category) {\n    _categoryFilter = category;\n    _applyFiltersAndSorting();\n  }\n\n  void setSortBy(String sortBy) {\n    _sortBy = sortBy;\n    _applyFiltersAndSorting();\n  }\n\n  void toggleSortOrder() {\n    _sortAscending = !_sortAscending;\n    _applyFiltersAndSorting();\n  }\n\n  void resetFilters() {\n    _statusFilter = null;\n    _categoryFilter = null;\n    _sortBy = ",
    "suggested_key": "errorWorldid_joinedworldsworldidFalse",
    "context": "_preRegisteredWorlds[world.id] = isPreRegistered;\n        notifyListeners();\n      } catch (e) {\n        AppLogger.logError('Player-Status Check fehlgeschlagen', e, context: {'worldId': world.id});\n        _joinedWorlds[world.id] = false;\n        _preRegisteredWorlds[world.id] = false;\n      }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 190,
    "column": 42,
    "original": ";\n      notifyListeners();\n      rethrow;\n    }\n  }\n\n  Future<void> preRegisterWorld(World world) async {\n    try {\n      // TODO: Implement pre-registration API call\n      await Future.delayed(const Duration(milliseconds: 500)); // Simulated API call\n      \n      _preRegisteredWorlds[world.id] = true;\n      notifyListeners();\n    } catch (e) {\n      _error = ",
    "suggested_key": "errorNotifylistenersRethrowFuturevoid",
    "context": "notifyListeners();\n    } catch (e) {\n      _error = 'Fehler beim Beitreten: $e';\n      notifyListeners();\n      rethrow;\n    }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 204,
    "column": 52,
    "original": ";\n      notifyListeners();\n      rethrow;\n    }\n  }\n  \n  Future<void> cancelPreRegistration(World world) async {\n    try {\n      final success = await _worldService.cancelPreRegistrationAuthenticated(world.id);\n      if (success) {\n        _preRegisteredWorlds[world.id] = false;\n        notifyListeners();\n      } else {\n        throw Exception(",
    "suggested_key": "errorNotifylistenersRethrowFuturevoid",
    "context": "_preRegisteredWorlds[world.id] = true;\n      notifyListeners();\n    } catch (e) {\n      _error = 'Fehler bei der Vorregistrierung: $e';\n      notifyListeners();\n      rethrow;\n    }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 220,
    "column": 16,
    "original": "Fehler beim Zurückziehen der Vorregistrierung: $e",
    "suggested_key": "errorFehlerBeimZurückziehen",
    "context": "throw Exception('Vorregistrierung konnte nicht zurückgezogen werden');\n      }\n    } catch (e) {\n      _error = 'Fehler beim Zurückziehen der Vorregistrierung: $e';\n      notifyListeners();\n      rethrow;\n    }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 239,
    "column": 16,
    "original": "Fehler beim Verlassen der Welt: $e",
    "suggested_key": "errorFehlerBeimVerlassen",
    "context": "notifyListeners();\n    } catch (e) {\n      _error = 'Fehler beim Verlassen der Welt: $e';\n      notifyListeners();\n      rethrow;\n    }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 249,
    "column": 18,
    "original": "Einladung konnte nicht erstellt werden",
    "suggested_key": "errorEinladungKonnteNicht",
    "context": "try {\n      final success = await _inviteService.createInvite(world.id, email);\n      if (!success) {\n        _error = 'Einladung konnte nicht erstellt werden';\n      }\n      notifyListeners();\n      return success;",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 254,
    "column": 16,
    "original": "Fehler beim Erstellen der Einladung: $e",
    "suggested_key": "errorFehlerBeimErstellen",
    "context": "notifyListeners();\n      return success;\n    } catch (e) {\n      _error = 'Fehler beim Erstellen der Einladung: $e';\n      notifyListeners();\n      rethrow;\n    }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 58,
    "column": 16,
    "original": "Fehler beim Laden der Welten: $e",
    "suggested_key": "errorFehlerBeimLaden",
    "context": "await _checkPlayerStatuses();\n      _applyFiltersAndSorting();\n    } catch (e) {\n      _error = 'Fehler beim Laden der Welten: $e';\n      AppLogger.logError('World-Liste laden fehlgeschlagen', e);\n    } finally {\n      _setLoading(false);",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 59,
    "column": 26,
    "original": "World-Liste laden fehlgeschlagen",
    "suggested_key": "errorWorldlisteLadenFehlgeschlagen",
    "context": "_applyFiltersAndSorting();\n    } catch (e) {\n      _error = 'Fehler beim Laden der Welten: $e';\n      AppLogger.logError('World-Liste laden fehlgeschlagen', e);\n    } finally {\n      _setLoading(false);\n    }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 190,
    "column": 16,
    "original": "Fehler beim Beitreten: $e",
    "suggested_key": "errorFehlerBeimBeitreten",
    "context": "notifyListeners();\n    } catch (e) {\n      _error = 'Fehler beim Beitreten: $e';\n      notifyListeners();\n      rethrow;\n    }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 204,
    "column": 16,
    "original": "Fehler bei der Vorregistrierung: $e",
    "suggested_key": "errorFehlerBeiDer",
    "context": "_preRegisteredWorlds[world.id] = true;\n      notifyListeners();\n    } catch (e) {\n      _error = 'Fehler bei der Vorregistrierung: $e';\n      notifyListeners();\n      rethrow;\n    }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 217,
    "column": 25,
    "original": "Vorregistrierung konnte nicht zurückgezogen werden",
    "suggested_key": "errorVorregistrierungKonnteNicht",
    "context": "_preRegisteredWorlds[world.id] = false;\n        notifyListeners();\n      } else {\n        throw Exception('Vorregistrierung konnte nicht zurückgezogen werden');\n      }\n    } catch (e) {\n      _error = 'Fehler beim Zurückziehen der Vorregistrierung: $e';",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 220,
    "column": 16,
    "original": "Fehler beim Zurückziehen der Vorregistrierung: $e",
    "suggested_key": "errorFehlerBeimZurückziehen",
    "context": "throw Exception('Vorregistrierung konnte nicht zurückgezogen werden');\n      }\n    } catch (e) {\n      _error = 'Fehler beim Zurückziehen der Vorregistrierung: $e';\n      notifyListeners();\n      rethrow;\n    }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 239,
    "column": 16,
    "original": "Fehler beim Verlassen der Welt: $e",
    "suggested_key": "errorFehlerBeimVerlassen",
    "context": "notifyListeners();\n    } catch (e) {\n      _error = 'Fehler beim Verlassen der Welt: $e';\n      notifyListeners();\n      rethrow;\n    }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 254,
    "column": 16,
    "original": "Fehler beim Erstellen der Einladung: $e",
    "suggested_key": "errorFehlerBeimErstellen",
    "context": "notifyListeners();\n      return success;\n    } catch (e) {\n      _error = 'Fehler beim Erstellen der Einladung: $e';\n      notifyListeners();\n      rethrow;\n    }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 58,
    "column": 16,
    "original": "Fehler beim Laden der Welten: $e",
    "suggested_key": "errorFehlerBeimLaden",
    "context": "await _checkPlayerStatuses();\n      _applyFiltersAndSorting();\n    } catch (e) {\n      _error = 'Fehler beim Laden der Welten: $e';\n      AppLogger.logError('World-Liste laden fehlgeschlagen', e);\n    } finally {\n      _setLoading(false);",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 190,
    "column": 16,
    "original": "Fehler beim Beitreten: $e",
    "suggested_key": "errorFehlerBeimBeitreten",
    "context": "notifyListeners();\n    } catch (e) {\n      _error = 'Fehler beim Beitreten: $e';\n      notifyListeners();\n      rethrow;\n    }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 239,
    "column": 16,
    "original": "Fehler beim Verlassen der Welt: $e",
    "suggested_key": "errorFehlerBeimVerlassen",
    "context": "notifyListeners();\n    } catch (e) {\n      _error = 'Fehler beim Verlassen der Welt: $e';\n      notifyListeners();\n      rethrow;\n    }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 249,
    "column": 18,
    "original": "Einladung konnte nicht erstellt werden",
    "suggested_key": "errorEinladungKonnteNicht",
    "context": "try {\n      final success = await _inviteService.createInvite(world.id, email);\n      if (!success) {\n        _error = 'Einladung konnte nicht erstellt werden';\n      }\n      notifyListeners();\n      return success;",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 254,
    "column": 16,
    "original": "Fehler beim Erstellen der Einladung: $e",
    "suggested_key": "errorFehlerBeimErstellen",
    "context": "notifyListeners();\n      return success;\n    } catch (e) {\n      _error = 'Fehler beim Erstellen der Einladung: $e';\n      notifyListeners();\n      rethrow;\n    }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_list_states.dart",
    "line": 131,
    "column": 15,
    "original": "Fehler beim Laden",
    "suggested_key": "errorFehlerBeimLaden",
    "context": "),\n            const SizedBox(height: 16),\n            Text(\n              'Fehler beim Laden',\n              style: TextStyle(\n                fontSize: 20,\n                fontWeight: FontWeight.bold,",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 398,
    "column": 55,
    "original": " ist KEIN Fehler!\n      if (e.toString().contains('Invite bereits akzeptiert')) {\n        setState(() {\n          _isJoined = true;\n          _infoMessage = 'Du bist bereits Mitglied dieser Welt ",
    "suggested_key": "errorIstKeinFehler",
    "context": "}\n      }\n    } catch (e) {\n      // SPEZIALBEHANDLUNG: \"Invite bereits akzeptiert\" ist KEIN Fehler!\n      if (e.toString().contains('Invite bereits akzeptiert')) {\n        setState(() {\n          _isJoined = true;",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "\""
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 130,
    "column": 71,
    "original": ", e);\n      _isAuthenticated = false;\n    }\n  }\n\n  Future<void> _loadWorldData() async {\n    // FIXED: Robustere Loading-State Verwaltung\n    if (_isLoading) {\n      return;\n    }\n\n    setState(() {\n      _isLoading = true;\n      _errorMessage = null;\n    });\n\n    try {\n      // **KLARE FLOW-TRENNUNG**\n      switch (widget.flowType) {\n        case WorldJoinFlowType.normal:\n          await _handleNormalFlow();\n          break;\n        case WorldJoinFlowType.invite:\n          await _handleInviteFlow();\n          break;\n      }\n      \n    } catch (e) {\n      AppLogger.app.w(",
    "suggested_key": "errorE_isauthenticatedFalse",
    "context": "setState(() {});\n      }\n    } catch (e) {\n      AppLogger.logError('Fehler beim Prüfen des Authentication-Status', e);\n      _isAuthenticated = false;\n    }\n  }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 160,
    "column": 25,
    "original": "Fehler beim Laden der Welt-Daten: ${e.toString()}",
    "suggested_key": "errorFehlerBeimLaden",
    "context": "} catch (e) {\n      AppLogger.app.w('💥 FEHLER in _loadWorldData: $e');\n      setState(() {\n        _errorMessage = 'Fehler beim Laden der Welt-Daten: ${e.toString()}';\n        _isLoading = false;\n      });\n    }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 170,
    "column": 25,
    "original": "Keine Welt-ID gefunden",
    "suggested_key": "errorKeineWeltidGefunden",
    "context": "Future<void> _handleNormalFlow() async {\n    if (widget.worldId == null) {\n      setState(() {\n        _errorMessage = 'Keine Welt-ID gefunden';\n        _isLoading = false;\n      });\n      return;",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 192,
    "column": 25,
    "original": "Kein Einladungstoken gefunden",
    "suggested_key": "errorKeinEinladungstokenGefunden",
    "context": "Future<void> _handleInviteFlow() async {\n    if (widget.inviteToken == null) {\n      setState(() {\n        _errorMessage = 'Kein Einladungstoken gefunden';\n        _isLoading = false;\n      });\n      return;",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 203,
    "column": 25,
    "original": "Ungültiger oder abgelaufener Einladungslink",
    "suggested_key": "errorUngültigerOderAbgelaufener",
    "context": "if (tokenData == null || tokenData['world'] == null) {\n      setState(() {\n        _errorMessage = 'Ungültiger oder abgelaufener Einladungslink';\n        _isLoading = false;\n      });\n      return;",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 236,
    "column": 23,
    "original": "⚠️ Fehler beim Parsen der Invite-Zeitstempel: $e",
    "suggested_key": "errorFehlerBeimParsen",
    "context": "isAccepted = true;\n      }\n    } catch (e) {\n      AppLogger.app.w('⚠️ Fehler beim Parsen der Invite-Zeitstempel: $e');\n    }\n    \n    isInviteValid = !isExpired && !isAccepted;",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 421,
    "column": 24,
    "original": "Du kannst nun der Welt beitreten.",
    "suggested_key": "errorDuKannstNun",
    "context": "AppLogger.logError('Automatische Invite-Akzeptierung fehlgeschlagen', e);\n      // Fehler nicht als kritisch behandeln - User kann manuell beitreten\n      setState(() {\n        _infoMessage = 'Du kannst nun der Welt beitreten.';\n      });\n    }\n  }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 489,
    "column": 24,
    "original": "Diese Einladung wurde bereits akzeptiert.",
    "suggested_key": "errorDieseEinladungWurde",
    "context": "setState(() {\n        // Bessere Fehlermeldungen für verschiedene Szenarien\n        if (e.toString().contains('bereits akzeptiert')) {\n          _joinError = 'Diese Einladung wurde bereits akzeptiert.';\n          _isJoined = true; // User ist bereits Mitglied\n        } else if (e.toString().contains('nicht für deine E-Mail-Adresse')) {\n          _joinError = 'Diese Einladung ist nicht für deine E-Mail-Adresse bestimmt.';",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 491,
    "column": 42,
    "original": "nicht für deine E-Mail-Adresse",
    "suggested_key": "errorNichtFürDeine",
    "context": "if (e.toString().contains('bereits akzeptiert')) {\n          _joinError = 'Diese Einladung wurde bereits akzeptiert.';\n          _isJoined = true; // User ist bereits Mitglied\n        } else if (e.toString().contains('nicht für deine E-Mail-Adresse')) {\n          _joinError = 'Diese Einladung ist nicht für deine E-Mail-Adresse bestimmt.';\n        } else if (e.toString().contains('abgelaufen')) {\n          _joinError = 'Diese Einladung ist abgelaufen.';",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 492,
    "column": 24,
    "original": "Diese Einladung ist nicht für deine E-Mail-Adresse bestimmt.",
    "suggested_key": "errorDieseEinladungIst",
    "context": "_joinError = 'Diese Einladung wurde bereits akzeptiert.';\n          _isJoined = true; // User ist bereits Mitglied\n        } else if (e.toString().contains('nicht für deine E-Mail-Adresse')) {\n          _joinError = 'Diese Einladung ist nicht für deine E-Mail-Adresse bestimmt.';\n        } else if (e.toString().contains('abgelaufen')) {\n          _joinError = 'Diese Einladung ist abgelaufen.';\n        } else {",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 494,
    "column": 24,
    "original": "Diese Einladung ist abgelaufen.",
    "suggested_key": "errorDieseEinladungIst",
    "context": "} else if (e.toString().contains('nicht für deine E-Mail-Adresse')) {\n          _joinError = 'Diese Einladung ist nicht für deine E-Mail-Adresse bestimmt.';\n        } else if (e.toString().contains('abgelaufen')) {\n          _joinError = 'Diese Einladung ist abgelaufen.';\n        } else {\n          _joinError = 'Ein Fehler ist aufgetreten: ${e.toString().replaceAll('Exception: ', '')}';\n        }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 496,
    "column": 24,
    "original": "Ein Fehler ist aufgetreten: ${e.toString().replaceAll(",
    "suggested_key": "errorEinFehlerIst",
    "context": "} else if (e.toString().contains('abgelaufen')) {\n          _joinError = 'Diese Einladung ist abgelaufen.';\n        } else {\n          _joinError = 'Ein Fehler ist aufgetreten: ${e.toString().replaceAll('Exception: ', '')}';\n        }\n      });\n    } finally {",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 496,
    "column": 98,
    "original": ";\n        }\n      });\n    } finally {\n      setState(() {\n        _isJoining = false;\n      });\n    }\n  }\n  \n  Future<void> _preRegisterWorld() async {\n    final world = _world;\n    if (world == null) return;\n\n    setState(() {\n      _isPreRegistering = true;\n      _joinError = null;\n    });\n\n    try {\n      final success = await _worldService.preRegisterWorldAuthenticated(world.id);\n      \n      if (success) {\n        setState(() {\n          _isPreRegistered = true;\n        });\n        \n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text(",
    "suggested_key": "errorFinallySetstate_isjoining",
    "context": "} else if (e.toString().contains('abgelaufen')) {\n          _joinError = 'Diese Einladung ist abgelaufen.';\n        } else {\n          _joinError = 'Ein Fehler ist aufgetreten: ${e.toString().replaceAll('Exception: ', '')}';\n        }\n      });\n    } finally {",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 538,
    "column": 62,
    "original": ");\n      });\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isPreRegistering = false;\n        });\n      }\n    }\n  }\n  \n  Future<void> _cancelPreRegistration() async {\n    final world = _world;\n    if (world == null) return;\n\n    setState(() {\n      _isPreRegistering = true;\n      _joinError = null;\n    });\n\n    try {\n      final success = await _worldService.cancelPreRegistrationAuthenticated(world.id);\n      if (success) {\n        setState(() {\n          _isPreRegistered = false;\n        });\n        \n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text(",
    "suggested_key": "errorFinallyIfMounted",
    "context": "}\n    } catch (e) {\n      setState(() {\n        _joinError = e.toString().replaceAll('Exception: ', '');\n      });\n    } finally {\n      if (mounted) {",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 580,
    "column": 62,
    "original": ");\n      });\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isPreRegistering = false;\n        });\n      }\n    }\n  }\n  \n  Future<void> _leaveWorld() async {\n    final world = _world;\n    if (world == null) return;\n    \n    // Bestätigungsdialog anzeigen\n    final confirmed = await showDialog<bool>(\n      context: context,\n      builder: (context) => AlertDialog(\n        title: const Text(",
    "suggested_key": "errorFinallyIfMounted",
    "context": "}\n    } catch (e) {\n      setState(() {\n        _joinError = e.toString().replaceAll('Exception: ', '');\n      });\n    } finally {\n      if (mounted) {",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 640,
    "column": 62,
    "original": ");\n      });\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isJoining = false;\n        });\n      }\n    }\n  }\n  \n  void _playWorld() {\n    final world = _world;\n    if (world == null) return;\n    // Navigate directly to world dashboard for playing\n    context.goNamed(",
    "suggested_key": "errorFinallyIfMounted",
    "context": "}\n    } catch (e) {\n      setState(() {\n        _joinError = e.toString().replaceAll('Exception: ', '');\n      });\n    } finally {\n      if (mounted) {",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 692,
    "column": 86,
    "original": ": email});\n    \n    // FIXED: Invite-Token für Post-Auth-Redirect setzen\n    if (widget.inviteToken != null) {\n      _authService.setPendingInviteRedirect(widget.inviteToken!);\n    }\n    \n    context.goNamed(",
    "suggested_key": "errorEmailFixedInvitetoken",
    "context": "// Navigation zu Registration mit vorausgefüllter E-Mail\n  void _navigateToRegistration(String email) {\n    AppLogger.app.i('🎫 Navigation zur Registration mit Invite-E-Mail', error: {'email': email});\n    \n    // FIXED: Invite-Token für Post-Auth-Redirect setzen\n    if (widget.inviteToken != null) {",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 704,
    "column": 72,
    "original": ": email});\n    \n    // FIXED: Invite-Token für Post-Auth-Redirect setzen\n    if (widget.inviteToken != null) {\n      _authService.setPendingInviteRedirect(widget.inviteToken!);\n    }\n    \n    context.goNamed(",
    "suggested_key": "errorEmailFixedInvitetoken",
    "context": "// Navigation zu Login \n  void _navigateToLogin(String email) {\n    AppLogger.app.i('🎫 Navigation zum Login für Invite', error: {'email': email});\n    \n    // FIXED: Invite-Token für Post-Auth-Redirect setzen\n    if (widget.inviteToken != null) {",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 717,
    "column": 81,
    "original": ": _inviteEmail});\n      \n      // FIXED: Invite-Token für Post-Auth-Redirect setzen BEVOR logout\n      if (widget.inviteToken != null) {\n        _authService.setPendingInviteRedirect(widget.inviteToken!);\n      }\n      \n      await _authService.logout();\n      \n      if (mounted && _inviteEmail != null) {\n        // Nach Logout zur Registration mit korrekter E-Mail\n        context.goNamed(",
    "suggested_key": "error_inviteemailFixedInvitetoken",
    "context": "// User abmelden und zur Registration weiterleiten\n  Future<void> _logout() async {\n    try {\n      AppLogger.app.i('🎫 User logout für Invite-Umleitung', error: {'inviteEmail': _inviteEmail});\n      \n      // FIXED: Invite-Token für Post-Auth-Redirect setzen BEVOR logout\n      if (widget.inviteToken != null) {",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 734,
    "column": 26,
    "original": "Logout für Invite fehlgeschlagen",
    "suggested_key": "errorLogoutFürInvite",
    "context": "});\n      }\n    } catch (e) {\n      AppLogger.logError('Logout für Invite fehlgeschlagen', e);\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          const SnackBar(",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 738,
    "column": 48,
    "original": "),\n            backgroundColor: Colors.red,\n          ),\n        );\n      }\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    \n    return Scaffold(\n      body: BackgroundWidget(\n        child: Stack(\n          children: [\n            // Main content\n            SafeArea(\n              child: _isLoading\n                  ? const Center(\n                      child: CircularProgressIndicator(\n                        valueColor: AlwaysStoppedAnimation<Color>(AppTheme.primaryColor),\n                      ),\n                    )\n                  : _errorMessage != null\n                      ? _buildErrorState()\n                      : _infoMessage != null\n                          ? _buildInfoState()\n                          : _world == null\n                              ? _buildNotFoundState()\n                              : _buildWorldContent(),\n            ),\n            \n            // User info widget (only show when authenticated)\n            if (_isAuthenticated)\n              const UserInfoWidget(),\n            \n            // Navigation widget (only show when authenticated)\n            if (_isAuthenticated)\n              NavigationWidget(\n                currentRoute: ",
    "suggested_key": "errorBackgroundcolorColorsredOverride",
    "context": "if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          const SnackBar(\n            content: Text('Fehler beim Abmelden'),\n            backgroundColor: Colors.red,\n          ),\n        );",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 836,
    "column": 61,
    "original": ",\n                        style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                          color: Colors.grey[300],\n                        ),\n                        textAlign: TextAlign.center,\n                      ),\n                      const SizedBox(height: 32),\n                      \n                      // Verschiedene Action-Buttons je nach Szenario\n                      if (_showRegistrationButton && _inviteEmail != null) ...[\n                        // Registration Button für neuen User\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: ElevatedButton.icon(\n                            onPressed: () => _navigateToRegistration(_inviteEmail!),\n                            icon: const Icon(Icons.person_add),\n                            label: const Text(",
    "suggested_key": "errorStyleThemeofcontexttextthemebodylargecopywithColor",
    "context": "),\n                      const SizedBox(height: 16),\n                      Text(\n                        _errorMessage ?? 'Unbekannter Fehler',\n                        style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                          color: Colors.grey[300],\n                        ),",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1310,
    "column": 66,
    "original": ",\n                                style: TextStyle(color: Colors.red[400], fontSize: 14),\n                              ),\n                            ),\n                          ],\n                        ),\n                      ),\n                    ],\n                  ],\n                ),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n  \n  Widget _buildDescriptionTab() {\n    return SingleChildScrollView(\n      padding: const EdgeInsets.all(24),\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          const Row(\n            children: [\n              Icon(Icons.info_outline, color: AppTheme.primaryColor, size: 24),\n              SizedBox(width: 8),\n              Text(\n                ",
    "suggested_key": "errorStyleTextstylecolorColorsred400",
    "context": "const SizedBox(width: 8),\n                            Expanded(\n                              child: Text(\n                                _joinError ?? 'Unbekannter Fehler',\n                                style: TextStyle(color: Colors.red[400], fontSize: 14),\n                              ),\n                            ),",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 398,
    "column": 55,
    "original": " ist KEIN Fehler!\n      if (e.toString().contains('Invite bereits akzeptiert')) {\n        setState(() {\n          _isJoined = true;\n          _infoMessage = 'Du bist bereits Mitglied dieser Welt ",
    "suggested_key": "errorIstKeinFehler",
    "context": "}\n      }\n    } catch (e) {\n      // SPEZIALBEHANDLUNG: \"Invite bereits akzeptiert\" ist KEIN Fehler!\n      if (e.toString().contains('Invite bereits akzeptiert')) {\n        setState(() {\n          _isJoined = true;",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "\""
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 130,
    "column": 26,
    "original": "Fehler beim Prüfen des Authentication-Status",
    "suggested_key": "errorFehlerBeimPrüfen",
    "context": "setState(() {});\n      }\n    } catch (e) {\n      AppLogger.logError('Fehler beim Prüfen des Authentication-Status', e);\n      _isAuthenticated = false;\n    }\n  }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 158,
    "column": 23,
    "original": "💥 FEHLER in _loadWorldData: $e",
    "suggested_key": "errorFehlerIn_loadworlddata",
    "context": "}\n      \n    } catch (e) {\n      AppLogger.app.w('💥 FEHLER in _loadWorldData: $e');\n      setState(() {\n        _errorMessage = 'Fehler beim Laden der Welt-Daten: ${e.toString()}';\n        _isLoading = false;",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 160,
    "column": 25,
    "original": "Fehler beim Laden der Welt-Daten: ${e.toString()}",
    "suggested_key": "errorFehlerBeimLaden",
    "context": "} catch (e) {\n      AppLogger.app.w('💥 FEHLER in _loadWorldData: $e');\n      setState(() {\n        _errorMessage = 'Fehler beim Laden der Welt-Daten: ${e.toString()}';\n        _isLoading = false;\n      });\n    }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 170,
    "column": 48,
    "original": ";\n        _isLoading = false;\n      });\n      return;\n    }\n    \n    // World laden\n    _world = await _worldService.getWorld(int.parse(widget.worldId!));\n    \n    // Status prüfen\n    await _checkWorldStatus();\n    \n    // Fertig!\n    setState(() {\n      _isLoading = false;\n    });\n  }\n\n  // **INVITE-FLOW: Komplex mit Auth-Prüfung**\n  Future<void> _handleInviteFlow() async {\n    if (widget.inviteToken == null) {\n      setState(() {\n        _errorMessage = ",
    "suggested_key": "error_isloadingFalseReturn",
    "context": "Future<void> _handleNormalFlow() async {\n    if (widget.worldId == null) {\n      setState(() {\n        _errorMessage = 'Keine Welt-ID gefunden';\n        _isLoading = false;\n      });\n      return;",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 192,
    "column": 55,
    "original": ";\n        _isLoading = false;\n      });\n      return;\n    }\n    \n    // Token validieren\n    final tokenData = await _worldService.validateInviteToken(widget.inviteToken!);\n    \n    if (tokenData == null || tokenData[",
    "suggested_key": "error_isloadingFalseReturn",
    "context": "Future<void> _handleInviteFlow() async {\n    if (widget.inviteToken == null) {\n      setState(() {\n        _errorMessage = 'Kein Einladungstoken gefunden';\n        _isLoading = false;\n      });\n      return;",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 203,
    "column": 69,
    "original": ";\n        _isLoading = false;\n      });\n      return;\n    }\n    \n    // World aus Token-Daten laden\n    _world = World.fromJson(tokenData[",
    "suggested_key": "error_isloadingFalseReturn",
    "context": "if (tokenData == null || tokenData['world'] == null) {\n      setState(() {\n        _errorMessage = 'Ungültiger oder abgelaufener Einladungslink';\n        _isLoading = false;\n      });\n      return;",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 236,
    "column": 23,
    "original": "⚠️ Fehler beim Parsen der Invite-Zeitstempel: $e",
    "suggested_key": "errorFehlerBeimParsen",
    "context": "isAccepted = true;\n      }\n    } catch (e) {\n      AppLogger.app.w('⚠️ Fehler beim Parsen der Invite-Zeitstempel: $e');\n    }\n    \n    isInviteValid = !isExpired && !isAccepted;",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 370,
    "column": 26,
    "original": "Fehler beim Prüfen des World-Status",
    "suggested_key": "errorFehlerBeimPrüfen",
    "context": "'isPreRegistered': _isPreRegistered\n      });\n    } catch (e) {\n      AppLogger.logError('Fehler beim Prüfen des World-Status', e);\n    }\n  }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 418,
    "column": 74,
    "original": ", e);\n      // Fehler nicht als kritisch behandeln - User kann manuell beitreten\n      setState(() {\n        _infoMessage = ",
    "suggested_key": "errorEFehlerNicht",
    "context": "}\n      \n      // Andere Fehler normal behandeln\n      AppLogger.logError('Automatische Invite-Akzeptierung fehlgeschlagen', e);\n      // Fehler nicht als kritisch behandeln - User kann manuell beitreten\n      setState(() {\n        _infoMessage = 'Du kannst nun der Welt beitreten.';",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 421,
    "column": 58,
    "original": ";\n      });\n    }\n  }\n\n  Future<void> _joinWorld() async {\n    if (_world == null) return;\n\n    setState(() {\n      _isJoining = true;\n      _joinError = null;\n    });\n\n    try {\n      bool success = false;\n      \n      // **INVITE-TOKEN FLOW: Invite akzeptieren**\n      if (widget.inviteToken != null) {\n        AppLogger.app.i(",
    "suggested_key": "errorFuturevoid_joinworldAsync",
    "context": "AppLogger.logError('Automatische Invite-Akzeptierung fehlgeschlagen', e);\n      // Fehler nicht als kritisch behandeln - User kann manuell beitreten\n      setState(() {\n        _infoMessage = 'Du kannst nun der Welt beitreten.';\n      });\n    }\n  }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 496,
    "column": 24,
    "original": "Ein Fehler ist aufgetreten: ${e.toString().replaceAll(",
    "suggested_key": "errorEinFehlerIst",
    "context": "} else if (e.toString().contains('abgelaufen')) {\n          _joinError = 'Diese Einladung ist abgelaufen.';\n        } else {\n          _joinError = 'Ein Fehler ist aufgetreten: ${e.toString().replaceAll('Exception: ', '')}';\n        }\n      });\n    } finally {",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 533,
    "column": 24,
    "original": "Fehler bei der Vorregistrierung",
    "suggested_key": "errorFehlerBeiDer",
    "context": "}\n      } else {\n        setState(() {\n          _joinError = 'Fehler bei der Vorregistrierung';\n        });\n      }\n    } catch (e) {",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 575,
    "column": 24,
    "original": "Fehler beim Zurückziehen der Vorregistrierung",
    "suggested_key": "errorFehlerBeimZurückziehen",
    "context": "}\n      } else {\n        setState(() {\n          _joinError = 'Fehler beim Zurückziehen der Vorregistrierung';\n        });\n      }\n    } catch (e) {",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 692,
    "column": 86,
    "original": ": email});\n    \n    // FIXED: Invite-Token für Post-Auth-Redirect setzen\n    if (widget.inviteToken != null) {\n      _authService.setPendingInviteRedirect(widget.inviteToken!);\n    }\n    \n    context.goNamed(",
    "suggested_key": "errorEmailFixedInvitetoken",
    "context": "// Navigation zu Registration mit vorausgefüllter E-Mail\n  void _navigateToRegistration(String email) {\n    AppLogger.app.i('🎫 Navigation zur Registration mit Invite-E-Mail', error: {'email': email});\n    \n    // FIXED: Invite-Token für Post-Auth-Redirect setzen\n    if (widget.inviteToken != null) {",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 704,
    "column": 72,
    "original": ": email});\n    \n    // FIXED: Invite-Token für Post-Auth-Redirect setzen\n    if (widget.inviteToken != null) {\n      _authService.setPendingInviteRedirect(widget.inviteToken!);\n    }\n    \n    context.goNamed(",
    "suggested_key": "errorEmailFixedInvitetoken",
    "context": "// Navigation zu Login \n  void _navigateToLogin(String email) {\n    AppLogger.app.i('🎫 Navigation zum Login für Invite', error: {'email': email});\n    \n    // FIXED: Invite-Token für Post-Auth-Redirect setzen\n    if (widget.inviteToken != null) {",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 717,
    "column": 81,
    "original": ": _inviteEmail});\n      \n      // FIXED: Invite-Token für Post-Auth-Redirect setzen BEVOR logout\n      if (widget.inviteToken != null) {\n        _authService.setPendingInviteRedirect(widget.inviteToken!);\n      }\n      \n      await _authService.logout();\n      \n      if (mounted && _inviteEmail != null) {\n        // Nach Logout zur Registration mit korrekter E-Mail\n        context.goNamed(",
    "suggested_key": "error_inviteemailFixedInvitetoken",
    "context": "// User abmelden und zur Registration weiterleiten\n  Future<void> _logout() async {\n    try {\n      AppLogger.app.i('🎫 User logout für Invite-Umleitung', error: {'inviteEmail': _inviteEmail});\n      \n      // FIXED: Invite-Token für Post-Auth-Redirect setzen BEVOR logout\n      if (widget.inviteToken != null) {",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 738,
    "column": 27,
    "original": "Fehler beim Abmelden",
    "suggested_key": "errorFehlerBeimAbmelden",
    "context": "if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          const SnackBar(\n            content: Text('Fehler beim Abmelden'),\n            backgroundColor: Colors.red,\n          ),\n        );",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 828,
    "column": 25,
    "original": "Fehler beim Laden",
    "suggested_key": "errorFehlerBeimLaden",
    "context": "),\n                      const SizedBox(height: 24),\n                      Text(\n                        'Fehler beim Laden',\n                        style: Theme.of(context).textTheme.headlineSmall?.copyWith(\n                          color: Colors.white,\n                          fontWeight: FontWeight.bold,",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 836,
    "column": 42,
    "original": "Unbekannter Fehler",
    "suggested_key": "errorUnbekannterFehler",
    "context": "),\n                      const SizedBox(height: 16),\n                      Text(\n                        _errorMessage ?? 'Unbekannter Fehler',\n                        style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                          color: Colors.grey[300],\n                        ),",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 398,
    "column": 55,
    "original": " ist KEIN Fehler!\n      if (e.toString().contains('Invite bereits akzeptiert')) {\n        setState(() {\n          _isJoined = true;\n          _infoMessage = 'Du bist bereits Mitglied dieser Welt ",
    "suggested_key": "errorIstKeinFehler",
    "context": "}\n      }\n    } catch (e) {\n      // SPEZIALBEHANDLUNG: \"Invite bereits akzeptiert\" ist KEIN Fehler!\n      if (e.toString().contains('Invite bereits akzeptiert')) {\n        setState(() {\n          _isJoined = true;",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "\""
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 160,
    "column": 25,
    "original": "Fehler beim Laden der Welt-Daten: ${e.toString()}",
    "suggested_key": "errorFehlerBeimLaden",
    "context": "} catch (e) {\n      AppLogger.app.w('💥 FEHLER in _loadWorldData: $e');\n      setState(() {\n        _errorMessage = 'Fehler beim Laden der Welt-Daten: ${e.toString()}';\n        _isLoading = false;\n      });\n    }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 170,
    "column": 25,
    "original": "Keine Welt-ID gefunden",
    "suggested_key": "errorKeineWeltidGefunden",
    "context": "Future<void> _handleNormalFlow() async {\n    if (widget.worldId == null) {\n      setState(() {\n        _errorMessage = 'Keine Welt-ID gefunden';\n        _isLoading = false;\n      });\n      return;",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 192,
    "column": 25,
    "original": "Kein Einladungstoken gefunden",
    "suggested_key": "errorKeinEinladungstokenGefunden",
    "context": "Future<void> _handleInviteFlow() async {\n    if (widget.inviteToken == null) {\n      setState(() {\n        _errorMessage = 'Kein Einladungstoken gefunden';\n        _isLoading = false;\n      });\n      return;",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 203,
    "column": 25,
    "original": "Ungültiger oder abgelaufener Einladungslink",
    "suggested_key": "errorUngültigerOderAbgelaufener",
    "context": "if (tokenData == null || tokenData['world'] == null) {\n      setState(() {\n        _errorMessage = 'Ungültiger oder abgelaufener Einladungslink';\n        _isLoading = false;\n      });\n      return;",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 418,
    "column": 74,
    "original": ", e);\n      // Fehler nicht als kritisch behandeln - User kann manuell beitreten\n      setState(() {\n        _infoMessage = ",
    "suggested_key": "errorEFehlerNicht",
    "context": "}\n      \n      // Andere Fehler normal behandeln\n      AppLogger.logError('Automatische Invite-Akzeptierung fehlgeschlagen', e);\n      // Fehler nicht als kritisch behandeln - User kann manuell beitreten\n      setState(() {\n        _infoMessage = 'Du kannst nun der Welt beitreten.';",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 489,
    "column": 24,
    "original": "Diese Einladung wurde bereits akzeptiert.",
    "suggested_key": "errorDieseEinladungWurde",
    "context": "setState(() {\n        // Bessere Fehlermeldungen für verschiedene Szenarien\n        if (e.toString().contains('bereits akzeptiert')) {\n          _joinError = 'Diese Einladung wurde bereits akzeptiert.';\n          _isJoined = true; // User ist bereits Mitglied\n        } else if (e.toString().contains('nicht für deine E-Mail-Adresse')) {\n          _joinError = 'Diese Einladung ist nicht für deine E-Mail-Adresse bestimmt.';",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 492,
    "column": 24,
    "original": "Diese Einladung ist nicht für deine E-Mail-Adresse bestimmt.",
    "suggested_key": "errorDieseEinladungIst",
    "context": "_joinError = 'Diese Einladung wurde bereits akzeptiert.';\n          _isJoined = true; // User ist bereits Mitglied\n        } else if (e.toString().contains('nicht für deine E-Mail-Adresse')) {\n          _joinError = 'Diese Einladung ist nicht für deine E-Mail-Adresse bestimmt.';\n        } else if (e.toString().contains('abgelaufen')) {\n          _joinError = 'Diese Einladung ist abgelaufen.';\n        } else {",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 494,
    "column": 24,
    "original": "Diese Einladung ist abgelaufen.",
    "suggested_key": "errorDieseEinladungIst",
    "context": "} else if (e.toString().contains('nicht für deine E-Mail-Adresse')) {\n          _joinError = 'Diese Einladung ist nicht für deine E-Mail-Adresse bestimmt.';\n        } else if (e.toString().contains('abgelaufen')) {\n          _joinError = 'Diese Einladung ist abgelaufen.';\n        } else {\n          _joinError = 'Ein Fehler ist aufgetreten: ${e.toString().replaceAll('Exception: ', '')}';\n        }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 82,
    "column": 79,
    "original": ", error: e);\n      _authService = AuthService();\n      _worldService = WorldService();\n      _inviteService = InviteService();\n    }\n  }\n\n  Future<void> _loadWorlds() async {\n    setState(() {\n      _isLoading = true;\n      _error = null;\n    });\n\n    try {\n      final worlds = await _worldService.getWorlds();\n      if (mounted) {\n        setState(() {\n          _worlds = worlds;\n          _isLoading = false;\n        });\n        \n        // Simuliere Spieleranzahl für Demo-Zwecke\n        _generateMockPlayerCounts();\n        \n        // Check player status for each world (silently handle 404s)\n        _checkPlayerStatuses();\n        _checkPreRegistrationStatuses();\n        \n        // Initial filter anwenden\n        _applyFiltersAndSorting();\n      }\n    } catch (e) {\n      if (mounted) {\n        // Only show error for non-401/404 errors\n        if (!e.toString().contains(",
    "suggested_key": "errorErrorE_authservice",
    "context": "_inviteService = InviteService();\n      }\n    } catch (e) {\n      AppLogger.app.w('⚠️ ServiceLocator Fehler - nutze direkte Instanziierung', error: e);\n      _authService = AuthService();\n      _worldService = WorldService();\n      _inviteService = InviteService();",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 124,
    "column": 29,
    "original": "Fehler beim Laden der Welten: ${e.toString()}",
    "suggested_key": "errorFehlerBeimLaden",
    "context": "ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Fehler beim Laden der Welten: ${e.toString()}'),\n              backgroundColor: AppTheme.errorColor,\n            ),\n          );",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 266,
    "column": 89,
    "original": ": world.id});\n        }\n      }\n    }\n  }\n\n  Future<void> _checkPreRegistrationStatuses() async {\n    for (final world in _worlds) {\n      // Only check for worlds that support pre-registration\n      if (world.canPreRegister) {\n        try {\n          final isPreRegistered = await _worldService.isPreRegisteredForWorld(world.id);\n          if (mounted) {\n            setState(() {\n              _preRegisteredWorlds[world.id] = isPreRegistered;\n            });\n          }\n        } catch (e) {\n          // 404 means user is not pre-registered, which is normal\n          if (e.toString().contains(",
    "suggested_key": "errorWorldidFuturevoid_checkpreregistrationstatuses",
    "context": "}\n        } else {\n          // Only log other errors\n          AppLogger.logError('Player-Status Check fehlgeschlagen', e, context: {'worldId': world.id});\n        }\n      }\n    }",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 328,
    "column": 72,
    "original": ");\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text(errorMessage),\n              backgroundColor: AppTheme.errorColor,\n            ),\n          );\n        }\n      }\n    }\n  }\n\n  Future<void> _preRegisterWorld(World world) async {\n    try {\n      final success = await _worldService.preRegisterWorldAuthenticated(world.id);\n      if (success && mounted) {\n        setState(() {\n          _preRegisteredWorlds[world.id] = true;\n        });\n        \n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text(",
    "suggested_key": "errorScaffoldmessengerofcontextshowsnackbarSnackbarContent",
    "context": "context.goNamed('login');\n          }\n        } else {\n          final errorMessage = e.toString().replaceAll('Exception: ', '');\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text(errorMessage),",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 366,
    "column": 72,
    "original": ");\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text(errorMessage),\n              backgroundColor: AppTheme.errorColor,\n            ),\n          );\n        }\n      }\n    }\n  }\n\n  Future<void> _leaveWorld(World world) async {\n    // Zeige Bestätigungsdialog\n    final confirmed = await showDialog<bool>(\n      context: context,\n      builder: (context) => AlertDialog(\n        title: const Text(",
    "suggested_key": "errorScaffoldmessengerofcontextshowsnackbarSnackbarContent",
    "context": "context.goNamed('login');\n          }\n        } else {\n          final errorMessage = e.toString().replaceAll('Exception: ', '');\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text(errorMessage),",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 433,
    "column": 72,
    "original": ");\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text(errorMessage),\n              backgroundColor: AppTheme.errorColor,\n            ),\n          );\n        }\n      }\n    }\n  }\n\n  Future<void> _cancelPreRegistration(World world) async {\n    try {\n      final success = await _worldService.cancelPreRegistrationAuthenticated(world.id);\n      \n      if (success && mounted) {\n        setState(() {\n          _preRegisteredWorlds[world.id] = false;\n        });\n        \n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text(",
    "suggested_key": "errorScaffoldmessengerofcontextshowsnackbarSnackbarContent",
    "context": "context.goNamed('login');\n          }\n        } else {\n          final errorMessage = e.toString().replaceAll('Exception: ', '');\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text(errorMessage),",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 472,
    "column": 72,
    "original": ");\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text(errorMessage),\n              backgroundColor: AppTheme.errorColor,\n            ),\n          );\n        }\n      }\n    }\n  }\n\n  Future<void> _createInvite(World world) async {\n    final result = await showDialog<String>(\n      context: context,\n      builder: (context) => InviteDialog(worldName: world.name),\n    );\n\n    if (result != null && result.isNotEmpty) {\n      try {\n        final success = await _inviteService.createInvite(world.id, result);\n        if (success && mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            const SnackBar(\n              content: Text(",
    "suggested_key": "errorScaffoldmessengerofcontextshowsnackbarSnackbarContent",
    "context": "context.goNamed('login');\n          }\n        } else {\n          final errorMessage = e.toString().replaceAll('Exception: ', '');\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text(errorMessage),",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 512,
    "column": 74,
    "original": ");\n            ScaffoldMessenger.of(context).showSnackBar(\n              SnackBar(\n                content: Text(errorMessage),\n                backgroundColor: AppTheme.errorColor,\n              ),\n            );\n          }\n        }\n      }\n    }\n  }\n\n  // Deep-Link zur World-Join-Page\n  void _navigateToWorldJoin(World world) {\n    context.goNamed(",
    "suggested_key": "errorScaffoldmessengerofcontextshowsnackbarSnackbarContent",
    "context": "context.goNamed('login');\n            }\n          } else {\n            final errorMessage = e.toString().replaceAll('Exception: ', '');\n            ScaffoldMessenger.of(context).showSnackBar(\n              SnackBar(\n                content: Text(errorMessage),",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 695,
    "column": 70,
    "original": ",\n                                        style: TextStyle(\n                                          color: (Colors.red[200] ?? Colors.red).withOpacity(0.8),\n                                        ),\n                                        textAlign: TextAlign.center,\n                                      ),\n                                    ],\n                                  ),\n                                )\n                              else if (_filteredWorlds.isEmpty)\n                                Container(\n                                  padding: const EdgeInsets.all(16),\n                                  decoration: BoxDecoration(\n                                    color: const Color(0xFF2D2D2D),\n                                    borderRadius: BorderRadius.circular(12),\n                                    border: Border.all(\n                                      color: AppTheme.primaryColor.withOpacity(0.3),\n                                    ),\n                                  ),\n                                  child: Column(\n                                    children: [\n                                      Icon(\n                                        Icons.filter_list,\n                                        size: 48,\n                                        color: AppTheme.primaryColor.withOpacity(0.7),\n                                      ),\n                                      const SizedBox(height: 16),\n                                      Text(\n                                        ",
    "suggested_key": "errorStyleTextstyleColor",
    "context": "),\n                                      const SizedBox(height: 8),\n                                      Text(\n                                        _error ?? 'Unbekannter Fehler',\n                                        style: TextStyle(\n                                          color: (Colors.red[200] ?? Colors.red).withOpacity(0.8),\n                                        ),",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 116,
    "column": 102,
    "original": "Token fehlt",
    "suggested_key": "errorTokenFehlt",
    "context": "} catch (e) {\n      if (mounted) {\n        // Only show error for non-401/404 errors\n        if (!e.toString().contains('401') && !e.toString().contains('404') && !e.toString().contains('Token fehlt')) {\n          setState(() {\n            _error = e.toString();\n            _isLoading = false;",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 124,
    "column": 29,
    "original": "Fehler beim Laden der Welten: ${e.toString()}",
    "suggested_key": "errorFehlerBeimLaden",
    "context": "ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Fehler beim Laden der Welten: ${e.toString()}'),\n              backgroundColor: AppTheme.errorColor,\n            ),\n          );",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 687,
    "column": 41,
    "original": "Fehler beim Laden der Welten",
    "suggested_key": "errorFehlerBeimLaden",
    "context": "),\n                                      const SizedBox(height: 16),\n                                      Text(\n                                        'Fehler beim Laden der Welten',\n                                        style: TextStyle(\n                                          color: Colors.red[200],\n                                          fontWeight: FontWeight.bold,",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 695,
    "column": 51,
    "original": "Unbekannter Fehler",
    "suggested_key": "errorUnbekannterFehler",
    "context": "),\n                                      const SizedBox(height: 8),\n                                      Text(\n                                        _error ?? 'Unbekannter Fehler',\n                                        style: TextStyle(\n                                          color: (Colors.red[200] ?? Colors.red).withOpacity(0.8),\n                                        ),",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 82,
    "column": 79,
    "original": ", error: e);\n      _authService = AuthService();\n      _worldService = WorldService();\n      _inviteService = InviteService();\n    }\n  }\n\n  Future<void> _loadWorlds() async {\n    setState(() {\n      _isLoading = true;\n      _error = null;\n    });\n\n    try {\n      final worlds = await _worldService.getWorlds();\n      if (mounted) {\n        setState(() {\n          _worlds = worlds;\n          _isLoading = false;\n        });\n        \n        // Simuliere Spieleranzahl für Demo-Zwecke\n        _generateMockPlayerCounts();\n        \n        // Check player status for each world (silently handle 404s)\n        _checkPlayerStatuses();\n        _checkPreRegistrationStatuses();\n        \n        // Initial filter anwenden\n        _applyFiltersAndSorting();\n      }\n    } catch (e) {\n      if (mounted) {\n        // Only show error for non-401/404 errors\n        if (!e.toString().contains(",
    "suggested_key": "errorErrorE_authservice",
    "context": "_inviteService = InviteService();\n      }\n    } catch (e) {\n      AppLogger.app.w('⚠️ ServiceLocator Fehler - nutze direkte Instanziierung', error: e);\n      _authService = AuthService();\n      _worldService = WorldService();\n      _inviteService = InviteService();",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 124,
    "column": 29,
    "original": "Fehler beim Laden der Welten: ${e.toString()}",
    "suggested_key": "errorFehlerBeimLaden",
    "context": "ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Fehler beim Laden der Welten: ${e.toString()}'),\n              backgroundColor: AppTheme.errorColor,\n            ),\n          );",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 687,
    "column": 41,
    "original": "Fehler beim Laden der Welten",
    "suggested_key": "errorFehlerBeimLaden",
    "context": "),\n                                      const SizedBox(height: 16),\n                                      Text(\n                                        'Fehler beim Laden der Welten',\n                                        style: TextStyle(\n                                          color: Colors.red[200],\n                                          fontWeight: FontWeight.bold,",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\pre_register_dialog.dart",
    "line": 52,
    "column": 51,
    "original": "),\n            backgroundColor: AppTheme.errorColor,\n          ),\n        );\n      }\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isLoading = false;\n        });\n      }\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return AlertDialog(\n      backgroundColor: const Color(0xFF1A1A1A), // Dunkler Hintergrund\n      shape: RoundedRectangleBorder(\n        borderRadius: BorderRadius.circular(20),\n        side: BorderSide(\n          color: AppTheme.primaryColor.withOpacity(0.3),\n          width: 1,\n        ),\n      ),\n      title: Text(\n        ",
    "suggested_key": "errorBackgroundcolorAppthemeerrorcolorFinally",
    "context": "if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text('Fehler: ${e.toString()}'),\n            backgroundColor: AppTheme.errorColor,\n          ),\n        );",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: SnackBar",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\pre_register_dialog.dart",
    "line": 52,
    "column": 27,
    "original": "Fehler: ${e.toString()}",
    "suggested_key": "errorFehlerEtostring",
    "context": "if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text('Fehler: ${e.toString()}'),\n            backgroundColor: AppTheme.errorColor,\n          ),\n        );",
    "category": "error",
    "confidence": 1.0,
    "widget_context": "Widget: SnackBar",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 186,
    "column": 36,
    "original": "];\n\n        // Tokens speichern und API-Service aktualisieren\n        await _saveTokensAndUpdateService(accessToken, refreshToken);\n        await TokenStorage.saveUserData(jsonEncode(userData));\n\n        // User-Objekt erstellen\n        _currentUser = User.fromJson(userData);\n        isAuthenticated.value = true; // Reaktiven Status setzen\n        \n        // Fetch complete user data with roles\n        await fetchCurrentUser();\n        \n        AppLogger.logAuthEvent(",
    "suggested_key": "inviteTokensSpeichernUnd",
    "context": "final data = jsonDecode(response.body);\n        final accessToken = data['accessToken'];\n        final refreshToken = data['refreshToken'];\n        final userData = data['user'];\n\n        // Tokens speichern und API-Service aktualisieren\n        await _saveTokensAndUpdateService(accessToken, refreshToken);",
    "category": "invite",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 245,
    "column": 48,
    "original": "];\n        \n        if (accessToken != null && refreshToken != null) {\n          // Tokens speichern und API-Service aktualisieren\n          await _saveTokensAndUpdateService(accessToken, refreshToken);\n        }\n        \n        final userData = data[",
    "suggested_key": "inviteIfAccesstokenNull",
    "context": "// Token aus der Response extrahieren\n        final accessToken = data['accessToken'];\n        final refreshToken = data['refreshToken'];\n        \n        if (accessToken != null && refreshToken != null) {\n          // Tokens speichern und API-Service aktualisieren",
    "category": "invite",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 252,
    "column": 36,
    "original": "];\n        \n        // Log Registration Debug Info\n        if (userData[",
    "suggested_key": "inviteLogRegistrationDebug",
    "context": "await _saveTokensAndUpdateService(accessToken, refreshToken);\n        }\n        \n        final userData = data['user'];\n        \n        // Log Registration Debug Info\n        if (userData['_debug'] != null) {",
    "category": "invite",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 387,
    "column": 51,
    "original": "];\n        final currentRefreshToken = await TokenStorage.getRefreshToken();\n        final finalRefreshToken = newRefreshToken ?? currentRefreshToken;\n        \n        // Tokens speichern und API-Service aktualisieren\n        await _saveTokensAndUpdateService(newAccessToken, finalRefreshToken);\n        return true;\n      } else {\n        await logout();\n        return false;\n      }\n    } catch (e) {\n      await logout();\n      return false;\n    } finally {\n      _refreshing = false;\n    }\n  }\n\n  // Optionaler Force-Refresh für manuelle Token-Erneuerung\n  Future<bool> forceRefreshToken() async {\n    final tokenValid = await refreshTokenIfNeeded();\n    if (!tokenValid) {\n      await logout();\n    }\n    return tokenValid;\n  }\n\n  // Fetch current user data with roles from server\n  Future<User?> fetchCurrentUser() async {\n    try {\n      final response = await _apiService.get(",
    "suggested_key": "inviteFinalCurrentrefreshtokenAwait",
    "context": "final newAccessToken = data['accessToken'];\n        \n        // Refresh-Token-Rotation: Neuen Refresh-Token verwenden falls vorhanden\n        final newRefreshToken = data['refreshToken'];\n        final currentRefreshToken = await TokenStorage.getRefreshToken();\n        final finalRefreshToken = newRefreshToken ?? currentRefreshToken;",
    "category": "invite",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 184,
    "column": 46,
    "original": "];\n        final refreshToken = data[",
    "suggested_key": "inviteFinalRefreshtokenData",
    "context": "if (response.statusCode == 200) {\n        final data = jsonDecode(response.body);\n        final accessToken = data['accessToken'];\n        final refreshToken = data['refreshToken'];\n        final userData = data['user'];",
    "category": "invite",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 186,
    "column": 36,
    "original": "];\n\n        // Tokens speichern und API-Service aktualisieren\n        await _saveTokensAndUpdateService(accessToken, refreshToken);\n        await TokenStorage.saveUserData(jsonEncode(userData));\n\n        // User-Objekt erstellen\n        _currentUser = User.fromJson(userData);\n        isAuthenticated.value = true; // Reaktiven Status setzen\n        \n        // Fetch complete user data with roles\n        await fetchCurrentUser();\n        \n        AppLogger.logAuthEvent(",
    "suggested_key": "inviteTokensSpeichernUnd",
    "context": "final data = jsonDecode(response.body);\n        final accessToken = data['accessToken'];\n        final refreshToken = data['refreshToken'];\n        final userData = data['user'];\n\n        // Tokens speichern und API-Service aktualisieren\n        await _saveTokensAndUpdateService(accessToken, refreshToken);",
    "category": "invite",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 244,
    "column": 46,
    "original": "];\n        final refreshToken = data[",
    "suggested_key": "inviteFinalRefreshtokenData",
    "context": "final data = jsonDecode(response.body);\n        \n        // Token aus der Response extrahieren\n        final accessToken = data['accessToken'];\n        final refreshToken = data['refreshToken'];\n        \n        if (accessToken != null && refreshToken != null) {",
    "category": "invite",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 245,
    "column": 48,
    "original": "];\n        \n        if (accessToken != null && refreshToken != null) {\n          // Tokens speichern und API-Service aktualisieren\n          await _saveTokensAndUpdateService(accessToken, refreshToken);\n        }\n        \n        final userData = data[",
    "suggested_key": "inviteIfAccesstokenNull",
    "context": "// Token aus der Response extrahieren\n        final accessToken = data['accessToken'];\n        final refreshToken = data['refreshToken'];\n        \n        if (accessToken != null && refreshToken != null) {\n          // Tokens speichern und API-Service aktualisieren",
    "category": "invite",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 384,
    "column": 49,
    "original": "];\n        \n        // Refresh-Token-Rotation: Neuen Refresh-Token verwenden falls vorhanden\n        final newRefreshToken = data[",
    "suggested_key": "inviteRefreshtokenrotationNeuenRefreshtoken",
    "context": "if (response.statusCode == 200) {\n        final data = jsonDecode(response.body);\n        final newAccessToken = data['accessToken'];\n        \n        // Refresh-Token-Rotation: Neuen Refresh-Token verwenden falls vorhanden\n        final newRefreshToken = data['refreshToken'];",
    "category": "invite",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 387,
    "column": 51,
    "original": "];\n        final currentRefreshToken = await TokenStorage.getRefreshToken();\n        final finalRefreshToken = newRefreshToken ?? currentRefreshToken;\n        \n        // Tokens speichern und API-Service aktualisieren\n        await _saveTokensAndUpdateService(newAccessToken, finalRefreshToken);\n        return true;\n      } else {\n        await logout();\n        return false;\n      }\n    } catch (e) {\n      await logout();\n      return false;\n    } finally {\n      _refreshing = false;\n    }\n  }\n\n  // Optionaler Force-Refresh für manuelle Token-Erneuerung\n  Future<bool> forceRefreshToken() async {\n    final tokenValid = await refreshTokenIfNeeded();\n    if (!tokenValid) {\n      await logout();\n    }\n    return tokenValid;\n  }\n\n  // Fetch current user data with roles from server\n  Future<User?> fetchCurrentUser() async {\n    try {\n      final response = await _apiService.get(",
    "suggested_key": "inviteFinalCurrentrefreshtokenAwait",
    "context": "final newAccessToken = data['accessToken'];\n        \n        // Refresh-Token-Rotation: Neuen Refresh-Token verwenden falls vorhanden\n        final newRefreshToken = data['refreshToken'];\n        final currentRefreshToken = await TokenStorage.getRefreshToken();\n        final finalRefreshToken = newRefreshToken ?? currentRefreshToken;",
    "category": "invite",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 527,
    "column": 24,
    "original": ": _refreshing,\n        };\n      }\n\n      final accessExp = _getTokenExpiration(accessToken);\n      final refreshExp = _getTokenExpiration(refreshToken);\n      final now = DateTime.now();\n\n      return {\n        ",
    "suggested_key": "invite_refreshingFinalAccessexp",
    "context": "'refreshTokenValid': false,\n          'accessTokenExpiresIn': null,\n          'refreshTokenExpiresIn': null,\n          'isRefreshing': _refreshing,\n        };\n      }",
    "category": "invite",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 4,
    "column": 25,
    "original": ";\n\n// Invite-Model für bessere Typisierung\nclass Invite {\n  final int id;\n  final String email;\n  final String status;\n  final DateTime? createdAt;\n  final DateTime? expiresAt;\n\n  Invite({\n    required this.id,\n    required this.email,\n    required this.status,\n    this.createdAt,\n    this.expiresAt,\n  });\n\n  factory Invite.fromJson(Map<String, dynamic> json) {\n    return Invite(\n      id: json[",
    "suggested_key": "inviteInvitemodelFürBessere",
    "context": "import 'dart:convert';\nimport 'dart:io';\nimport 'package:http/http.dart' as http;\nimport 'api_service.dart';\n\n// Invite-Model für bessere Typisierung\nclass Invite {",
    "category": "invite",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 128,
    "column": 31,
    "original": "Registrierung erfolgreich! Du wirst zur Einladung weitergeleitet...",
    "suggested_key": "inviteRegistrierungErfolgreichDu",
    "context": "ScaffoldMessenger.of(context).showSnackBar(\n              const SnackBar(\n                content: Text('Registrierung erfolgreich! Du wirst zur Einladung weitergeleitet...'),\n                backgroundColor: Colors.green,\n                duration: Duration(seconds: 2),\n              ),",
    "category": "invite",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 150,
    "column": 31,
    "original": "Registrierung erfolgreich! Du wirst zur Einladung weitergeleitet...",
    "suggested_key": "inviteRegistrierungErfolgreichDu",
    "context": "ScaffoldMessenger.of(context).showSnackBar(\n              const SnackBar(\n                content: Text('Registrierung erfolgreich! Du wirst zur Einladung weitergeleitet...'),\n                backgroundColor: Colors.green,\n                duration: Duration(seconds: 2),\n              ),",
    "category": "invite",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 128,
    "column": 31,
    "original": "Registrierung erfolgreich! Du wirst zur Einladung weitergeleitet...",
    "suggested_key": "inviteRegistrierungErfolgreichDu",
    "context": "ScaffoldMessenger.of(context).showSnackBar(\n              const SnackBar(\n                content: Text('Registrierung erfolgreich! Du wirst zur Einladung weitergeleitet...'),\n                backgroundColor: Colors.green,\n                duration: Duration(seconds: 2),\n              ),",
    "category": "invite",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 150,
    "column": 31,
    "original": "Registrierung erfolgreich! Du wirst zur Einladung weitergeleitet...",
    "suggested_key": "inviteRegistrierungErfolgreichDu",
    "context": "ScaffoldMessenger.of(context).showSnackBar(\n              const SnackBar(\n                content: Text('Registrierung erfolgreich! Du wirst zur Einladung weitergeleitet...'),\n                backgroundColor: Colors.green,\n                duration: Duration(seconds: 2),\n              ),",
    "category": "invite",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 128,
    "column": 31,
    "original": "Registrierung erfolgreich! Du wirst zur Einladung weitergeleitet...",
    "suggested_key": "inviteRegistrierungErfolgreichDu",
    "context": "ScaffoldMessenger.of(context).showSnackBar(\n              const SnackBar(\n                content: Text('Registrierung erfolgreich! Du wirst zur Einladung weitergeleitet...'),\n                backgroundColor: Colors.green,\n                duration: Duration(seconds: 2),\n              ),",
    "category": "invite",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 150,
    "column": 31,
    "original": "Registrierung erfolgreich! Du wirst zur Einladung weitergeleitet...",
    "suggested_key": "inviteRegistrierungErfolgreichDu",
    "context": "ScaffoldMessenger.of(context).showSnackBar(\n              const SnackBar(\n                content: Text('Registrierung erfolgreich! Du wirst zur Einladung weitergeleitet...'),\n                backgroundColor: Colors.green,\n                duration: Duration(seconds: 2),\n              ),",
    "category": "invite",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 273,
    "column": 24,
    "original": "\\n\\n✅ Diese Einladung wurde bereits akzeptiert.",
    "suggested_key": "inviteNnDieseEinladung",
    "context": "final dateStr = '${expiresAtLocal.day.toString().padLeft(2, '0')}.${expiresAtLocal.month.toString().padLeft(2, '0')}.${expiresAtLocal.year} ${expiresAtLocal.hour.toString().padLeft(2, '0')}:${expiresAtLocal.minute.toString().padLeft(2, '0')}';\n      \n      if (isAccepted) {\n        validityText = '\\n\\n✅ Diese Einladung wurde bereits akzeptiert.';\n      } else if (isExpired) {\n        validityText = '\\n\\n❌ Diese Einladung ist am $dateStr abgelaufen.';\n      } else {",
    "category": "invite",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 275,
    "column": 24,
    "original": "\\n\\n❌ Diese Einladung ist am $dateStr abgelaufen.",
    "suggested_key": "inviteNnDieseEinladung",
    "context": "if (isAccepted) {\n        validityText = '\\n\\n✅ Diese Einladung wurde bereits akzeptiert.';\n      } else if (isExpired) {\n        validityText = '\\n\\n❌ Diese Einladung ist am $dateStr abgelaufen.';\n      } else {\n        validityText = '\\n\\n⏰ Gültig bis: $dateStr';\n      }",
    "category": "invite",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 277,
    "column": 51,
    "original": ";\n      }\n    }\n    \n    final baseInfoText = ",
    "suggested_key": "inviteFinalBaseinfotext",
    "context": "} else if (isExpired) {\n        validityText = '\\n\\n❌ Diese Einladung ist am $dateStr abgelaufen.';\n      } else {\n        validityText = '\\n\\n⏰ Gültig bis: $dateStr';\n      }\n    }",
    "category": "invite",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 327,
    "column": 20,
    "original": "$baseInfoText\\n\\n$actionText",
    "suggested_key": "inviteBaseinfotextnnactiontext",
    "context": "default:\n        AppLogger.app.w('❌ Unbekannter User-Status: $status');\n        actionText = 'Unbekannter Status: $status';\n        infoText = '$baseInfoText\\n\\n$actionText';\n    }\n    \n    // Bei ungültigen Invites zusätzliche Info",
    "category": "invite",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 332,
    "column": 19,
    "original": "\\n\\n⚠️ Diese Einladung kann nicht mehr verwendet werden.",
    "suggested_key": "inviteNnDieseEinladung",
    "context": "// Bei ungültigen Invites zusätzliche Info\n    if (!isInviteValid) {\n      infoText += '\\n\\n⚠️ Diese Einladung kann nicht mehr verwendet werden.';\n    }\n    \n    setState(() {",
    "category": "invite",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1683,
    "column": 40,
    "original": ",\n                    style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),\n                  ),\n          ),\n        ),\n      );\n    }\n\n    // **LOGOUT BUTTON (wenn User mit falscher E-Mail angemeldet)**\n    if (_showLogoutButton) {\n      buttons.add(\n        Container(\n          width: double.infinity,\n          margin: const EdgeInsets.only(bottom: 12.0),\n          child: ElevatedButton(\n            onPressed: () async {\n              await _authService.logout();\n              // Nach Logout zur Landing-Page\n              if (mounted) {\n                context.go(",
    "suggested_key": "inviteStyleTextstylefontsize16",
    "context": "),\n                  )\n                : const Text(\n                    'Einladung annehmen',\n                    style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),\n                  ),\n          ),",
    "category": "invite",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 332,
    "column": 76,
    "original": ";\n    }\n    \n    setState(() {\n      _infoMessage = infoText;\n      _inviteEmail = inviteEmail;\n      \n      // Button-Flags setzen\n      _showLoginButton = showLoginButton;\n      _showRegistrationButton = showRegisterButton; \n      _showLogoutButton = showLogoutButton;\n      _showAcceptInviteButton = showAcceptButton;\n      \n      // WICHTIG: Alte Fehlermeldung zurücksetzen!\n      _errorMessage = null;\n      \n      _isLoading = false;\n    });\n  }\n\n  // Neue Methode: World-Status für normale Navigation prüfen\n  Future<void> _checkWorldStatus() async {\n    if (_world == null) return;\n    \n    try {\n      // Prüfe ob User bereits Mitglied ist\n      _isJoined = await _worldService.isPlayerInWorld(_world!.id);\n      \n      // Prüfe Vorregistrierung\n      final preRegStatus = await _worldService.getPreRegistrationStatus(_world!.id);\n      _isPreRegistered = preRegStatus.isPreRegistered;\n      \n      AppLogger.app.d(",
    "suggested_key": "inviteSetstate_infomessageInfotext",
    "context": "// Bei ungültigen Invites zusätzliche Info\n    if (!isInviteValid) {\n      infoText += '\\n\\n⚠️ Diese Einladung kann nicht mehr verwendet werden.';\n    }\n    \n    setState(() {",
    "category": "invite",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 273,
    "column": 24,
    "original": "\\n\\n✅ Diese Einladung wurde bereits akzeptiert.",
    "suggested_key": "inviteNnDieseEinladung",
    "context": "final dateStr = '${expiresAtLocal.day.toString().padLeft(2, '0')}.${expiresAtLocal.month.toString().padLeft(2, '0')}.${expiresAtLocal.year} ${expiresAtLocal.hour.toString().padLeft(2, '0')}:${expiresAtLocal.minute.toString().padLeft(2, '0')}';\n      \n      if (isAccepted) {\n        validityText = '\\n\\n✅ Diese Einladung wurde bereits akzeptiert.';\n      } else if (isExpired) {\n        validityText = '\\n\\n❌ Diese Einladung ist am $dateStr abgelaufen.';\n      } else {",
    "category": "invite",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 275,
    "column": 24,
    "original": "\\n\\n❌ Diese Einladung ist am $dateStr abgelaufen.",
    "suggested_key": "inviteNnDieseEinladung",
    "context": "if (isAccepted) {\n        validityText = '\\n\\n✅ Diese Einladung wurde bereits akzeptiert.';\n      } else if (isExpired) {\n        validityText = '\\n\\n❌ Diese Einladung ist am $dateStr abgelaufen.';\n      } else {\n        validityText = '\\n\\n⏰ Gültig bis: $dateStr';\n      }",
    "category": "invite",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 332,
    "column": 19,
    "original": "\\n\\n⚠️ Diese Einladung kann nicht mehr verwendet werden.",
    "suggested_key": "inviteNnDieseEinladung",
    "context": "// Bei ungültigen Invites zusätzliche Info\n    if (!isInviteValid) {\n      infoText += '\\n\\n⚠️ Diese Einladung kann nicht mehr verwendet werden.';\n    }\n    \n    setState(() {",
    "category": "invite",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1683,
    "column": 21,
    "original": "Einladung annehmen",
    "suggested_key": "inviteEinladungAnnehmen",
    "context": "),\n                  )\n                : const Text(\n                    'Einladung annehmen',\n                    style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),\n                  ),\n          ),",
    "category": "invite",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 496,
    "column": 62,
    "original": "),\n              backgroundColor: Colors.green,\n            ),\n          );\n        }\n      } catch (e) {\n        if (mounted) {\n          // Prüfe ob es ein Token-Problem ist\n          if (e.toString().contains(",
    "suggested_key": "inviteBackgroundcolorColorsgreenCatch",
    "context": "if (success && mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            const SnackBar(\n              content: Text('Einladung erfolgreich versendet!'),\n              backgroundColor: Colors.green,\n            ),\n          );",
    "category": "invite",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 496,
    "column": 29,
    "original": "Einladung erfolgreich versendet!",
    "suggested_key": "inviteEinladungErfolgreichVersendet",
    "context": "if (success && mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            const SnackBar(\n              content: Text('Einladung erfolgreich versendet!'),\n              backgroundColor: Colors.green,\n            ),\n          );",
    "category": "invite",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 496,
    "column": 29,
    "original": "Einladung erfolgreich versendet!",
    "suggested_key": "inviteEinladungErfolgreichVersendet",
    "context": "if (success && mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            const SnackBar(\n              content: Text('Einladung erfolgreich versendet!'),\n              backgroundColor: Colors.green,\n            ),\n          );",
    "category": "invite",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\invite_dialog.dart",
    "line": 149,
    "column": 28,
    "original": "Einladung senden",
    "suggested_key": "inviteEinladungSenden",
    "context": "valueColor: AlwaysStoppedAnimation<Color>(Colors.white),\n                  ),\n                )\n              : const Text('Einladung senden'),\n          ),\n        ),\n      ],",
    "category": "invite",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 15,
    "column": 24,
    "original": ";\n\n// Flow-Type-Enum für klare Trennung der beiden User-Journeys\nenum WorldJoinFlowType {\n  normal,   // Normale Navigation: User kommt von World-List\n  invite,   // Invite-Flow: User kommt über externen Link\n}\n\nclass WorldJoinPage extends StatefulWidget {\n  final String? worldId;\n  final String? inviteToken;\n  final WorldJoinFlowType flowType;\n  \n  const WorldJoinPage({\n    super.key, \n    this.worldId, \n    this.inviteToken,\n    required this.flowType,\n  });\n\n  @override\n  State<WorldJoinPage> createState() => _WorldJoinPageState();\n}\n\nclass _WorldJoinPageState extends State<WorldJoinPage> with SingleTickerProviderStateMixin {\n  // DI-ready: ServiceLocator verwenden\n  late final WorldService _worldService;\n  late final AuthService _authService;\n  \n  // Tab Controller\n  late TabController _tabController;\n  \n  bool _isLoading = false;\n  bool _isJoining = false;\n  bool _isPreRegistering = false;\n  bool _isAuthenticated = false;\n  bool _isJoined = false;\n  bool _isPreRegistered = false;\n  World? _world;\n  String? _errorMessage;\n  String? _infoMessage;\n  String? _joinError;\n  bool _showRegistrationButton = false;\n  bool _showLogoutButton = false;\n  String? _inviteEmail;\n  bool _showLoginButton = false;\n  bool _showAcceptInviteButton = false;\n  bool isInviteValid = true; // Neue Variable für Gültigkeit der Einladung\n\n  @override\n  void initState() {\n    super.initState();\n    \n    _tabController = TabController(length: 1, vsync: this);\n    _initializeServices();\n    _loadWorldData();\n  }\n  \n  @override\n  void dispose() {\n    _tabController.dispose();\n    super.dispose();\n  }\n\n  @override\n  void didChangeDependencies() {\n    super.didChangeDependencies();\n    // Authentication-Status bei Kontext-Änderungen prüfen\n    _checkAuthenticationStatus();\n  }\n\n  void _initializeServices() {\n    try {\n      if (ServiceLocator.has<WorldService>()) {\n        _worldService = ServiceLocator.get<WorldService>();\n      } else {\n        _worldService = WorldService();\n      }\n      \n      if (ServiceLocator.has<AuthService>()) {\n        _authService = ServiceLocator.get<AuthService>();\n      } else {\n        _authService = AuthService();\n      }\n      \n      // Authentication-Status prüfen\n      _checkAuthenticationStatus();\n    } catch (e) {\n      AppLogger.app.w(",
    "suggested_key": "navigationFlowtypeenumFürKlare",
    "context": "import '../../shared/widgets/navigation_widget.dart';\n\n// ServiceLocator Import für DI\nimport '../../main.dart';\n\n// Flow-Type-Enum für klare Trennung der beiden User-Journeys\nenum WorldJoinFlowType {",
    "category": "navigation",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 191,
    "column": 71,
    "original": ");\n      \n      if (response.statusCode == 200) {\n        final List<dynamic> invitesJson = jsonDecode(response.body);\n        return invitesJson.map((json) => Invite.fromJson(json as Map<String, dynamic>)).toList();\n      } else {\n        throw Exception(",
    "suggested_key": "worldIfResponsestatuscode200",
    "context": "Future<List<Invite>> getInvites(int worldId) async {\n    try {\n      final response = await _apiService.get('/worlds/$worldId/invites');\n      \n      if (response.statusCode == 200) {\n        final List<dynamic> invitesJson = jsonDecode(response.body);",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 137,
    "column": 54,
    "original": ");\n      \n      if (response.statusCode == 200) {\n        final List<dynamic> worldsJson = jsonDecode(response.body);\n        return worldsJson.map((json) => World.fromJson(json)).toList();\n      } else {\n        throw Exception(",
    "suggested_key": "worldIfResponsestatuscode200",
    "context": "Future<List<World>> getWorlds() async {\n    try {\n      final response = await _apiService.get('/worlds');\n      \n      if (response.statusCode == 200) {\n        final List<dynamic> worldsJson = jsonDecode(response.body);",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 411,
    "column": 36,
    "original": "];\n        }\n      }\n      \n      // Fehlerbehandlung für spezifische HTTP-Status-Codes\n      if (response.statusCode == 409) {\n        AppLogger.app.w(",
    "suggested_key": "worldFehlerbehandlungFürSpezifische",
    "context": "'worldId': responseData['data']['world']?['id'],\n            'worldName': responseData['data']['world']?['name']\n          });\n          return responseData['data'];\n        }\n      }",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 411,
    "column": 36,
    "original": "];\n        }\n      }\n      \n      // Fehlerbehandlung für spezifische HTTP-Status-Codes\n      if (response.statusCode == 409) {\n        AppLogger.app.w(",
    "suggested_key": "worldFehlerbehandlungFürSpezifische",
    "context": "'worldId': responseData['data']['world']?['id'],\n            'worldName': responseData['data']['world']?['name']\n          });\n          return responseData['data'];\n        }\n      }",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 234,
    "column": 37,
    "original": "Melde dich an, um deine Welten zu verwalten",
    "suggested_key": "worldMeldeDichAn",
    "context": "),\n                                  const SizedBox(height: 8),\n                                  Text(\n                                    'Melde dich an, um deine Welten zu verwalten',\n                                    style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                                      color: Colors.grey[300],\n                                      fontSize: 16,",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 225,
    "column": 37,
    "original": "Willkommen bei Weltenwind",
    "suggested_key": "worldWillkommenBeiWeltenwind",
    "context": "),\n                                  const SizedBox(height: 20),\n                                  Text(\n                                    'Willkommen bei Weltenwind',\n                                    style: Theme.of(context).textTheme.headlineMedium?.copyWith(\n                                      color: Colors.white,\n                                      fontWeight: FontWeight.bold,",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 234,
    "column": 37,
    "original": "Melde dich an, um deine Welten zu verwalten",
    "suggested_key": "worldMeldeDichAn",
    "context": "),\n                                  const SizedBox(height: 8),\n                                  Text(\n                                    'Melde dich an, um deine Welten zu verwalten',\n                                    style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                                      color: Colors.grey[300],\n                                      fontSize: 16,",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 160,
    "column": 77,
    "original": ": _inviteToken!});\n            }\n          } else {\n            // Standard-Redirect zu Welten-Liste\n            ScaffoldMessenger.of(context).showSnackBar(\n              const SnackBar(\n                content: Text(",
    "suggested_key": "world_invitetokenElseStandardredirect",
    "context": "await Future.delayed(const Duration(milliseconds: 500));\n            \n            if (mounted) {\n              context.goNamed('world-join-by-token', pathParameters: {'token': _inviteToken!});\n            }\n          } else {\n            // Standard-Redirect zu Welten-Liste",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 166,
    "column": 85,
    "original": "),\n                backgroundColor: Colors.green,\n                duration: Duration(seconds: 2),\n              ),\n            );\n            \n            context.goNamed(",
    "suggested_key": "worldBackgroundcolorColorsgreenDuration",
    "context": "// Standard-Redirect zu Welten-Liste\n            ScaffoldMessenger.of(context).showSnackBar(\n              const SnackBar(\n                content: Text('Registrierung erfolgreich! Willkommen bei Weltenwind!'),\n                backgroundColor: Colors.green,\n                duration: Duration(seconds: 2),\n              ),",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 262,
    "column": 31,
    "original": "Erstelle dein Konto für Weltenwind",
    "suggested_key": "worldErstelleDeinKonto",
    "context": "),\n                            const SizedBox(height: 8),\n                            Text(\n                              'Erstelle dein Konto für Weltenwind',\n                              style: Theme.of(context).textTheme.bodyMedium?.copyWith(\n                                color: Colors.grey[300],\n                                fontSize: 16,",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 160,
    "column": 31,
    "original": "world-join-by-token",
    "suggested_key": "worldWorldjoinbytoken",
    "context": "await Future.delayed(const Duration(milliseconds: 500));\n            \n            if (mounted) {\n              context.goNamed('world-join-by-token', pathParameters: {'token': _inviteToken!});\n            }\n          } else {\n            // Standard-Redirect zu Welten-Liste",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 166,
    "column": 31,
    "original": "Registrierung erfolgreich! Willkommen bei Weltenwind!",
    "suggested_key": "worldRegistrierungErfolgreichWillkommen",
    "context": "// Standard-Redirect zu Welten-Liste\n            ScaffoldMessenger.of(context).showSnackBar(\n              const SnackBar(\n                content: Text('Registrierung erfolgreich! Willkommen bei Weltenwind!'),\n                backgroundColor: Colors.green,\n                duration: Duration(seconds: 2),\n              ),",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 160,
    "column": 77,
    "original": ": _inviteToken!});\n            }\n          } else {\n            // Standard-Redirect zu Welten-Liste\n            ScaffoldMessenger.of(context).showSnackBar(\n              const SnackBar(\n                content: Text(",
    "suggested_key": "world_invitetokenElseStandardredirect",
    "context": "await Future.delayed(const Duration(milliseconds: 500));\n            \n            if (mounted) {\n              context.goNamed('world-join-by-token', pathParameters: {'token': _inviteToken!});\n            }\n          } else {\n            // Standard-Redirect zu Welten-Liste",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 262,
    "column": 31,
    "original": "Erstelle dein Konto für Weltenwind",
    "suggested_key": "worldErstelleDeinKonto",
    "context": "),\n                            const SizedBox(height: 8),\n                            Text(\n                              'Erstelle dein Konto für Weltenwind',\n                              style: Theme.of(context).textTheme.bodyMedium?.copyWith(\n                                color: Colors.grey[300],\n                                fontSize: 16,",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 2,
    "column": 8,
    "original": "package:flutter/foundation.dart",
    "suggested_key": "worldPackageflutterfoundationdart",
    "context": "import 'package:flutter/material.dart';\nimport 'package:flutter/foundation.dart';\nimport '../../../config/logger.dart';\nimport '../../../core/models/world.dart';\nimport '../../../core/services/world_service.dart';",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 26,
    "column": 30,
    "original": ";\n  bool _sortAscending = true;\n\n  // Getters\n  List<World> get worlds => _worlds;\n  List<World> get filteredWorlds => _filteredWorlds;\n  Map<int, int> get playerCounts => _playerCounts;\n  Map<int, bool> get preRegisteredWorlds => _preRegisteredWorlds;\n  Map<int, bool> get joinedWorlds => _joinedWorlds;\n  bool get isLoading => _isLoading;\n  String? get error => _error;\n  WorldStatus? get statusFilter => _statusFilter;\n  WorldCategory? get categoryFilter => _categoryFilter;\n  String get sortBy => _sortBy;\n  bool get sortAscending => _sortAscending;\n\n  WorldListController({\n    required WorldService worldService,\n    required InviteService inviteService,\n  })  : _worldService = worldService,\n        _inviteService = inviteService;\n\n  Future<void> loadWorlds() async {\n    _setLoading(true);\n    _error = null;\n\n    try {\n      _worlds = await _worldService.getWorlds();\n      await _loadPlayerCounts();\n      await _checkPlayerStatuses();\n      _applyFiltersAndSorting();\n    } catch (e) {\n      _error = ",
    "suggested_key": "worldBool_sortascendingTrue",
    "context": "// Filters & Sorting\n  WorldStatus? _statusFilter;\n  WorldCategory? _categoryFilter;\n  String _sortBy = 'startDate';\n  bool _sortAscending = true;\n\n  // Getters",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 173,
    "column": 55,
    "original": ")) {\n      return WorldCategory.experimental;\n    }\n    return WorldCategory.classic;\n  }\n\n  Future<void> joinWorld(World world) async {\n    try {\n      await _worldService.joinWorld(world.id);\n      _joinedWorlds[world.id] = true;\n      \n      // Update player count\n      final currentCount = _playerCounts[world.id] ?? 0;\n      _playerCounts[world.id] = currentCount + 1;\n      \n      notifyListeners();\n    } catch (e) {\n      _error = ",
    "suggested_key": "worldReturnWorldcategoryexperimentalReturn",
    "context": "} else if (world.name.toLowerCase().contains('event')) {\n      return WorldCategory.event;\n    } else if (world.name.toLowerCase().contains('experimental') || \n               world.name.toLowerCase().contains('test')) {\n      return WorldCategory.experimental;\n    }\n    return WorldCategory.classic;",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_card.dart",
    "line": 3,
    "column": 38,
    "original": ";\n\nenum WorldCategory {\n  classic,\n  pvp,\n  event,\n  experimental,\n}\n\nclass WorldCard extends StatelessWidget {\n  final World world;\n  final int playerCount;\n  final WorldCategory category;\n  final bool isPreRegistered;\n  final bool isJoined;\n  final VoidCallback? onJoin;\n  final VoidCallback? onLeave;\n  final VoidCallback? onPlay;\n  final VoidCallback? onPreRegister;\n  final VoidCallback? onCancelPreRegistration;\n  final VoidCallback? onInvite;\n  final VoidCallback? onTap;\n\n  const WorldCard({\n    super.key,\n    required this.world,\n    required this.playerCount,\n    required this.category,\n    this.isPreRegistered = false,\n    this.isJoined = false,\n    this.onJoin,\n    this.onLeave,\n    this.onPlay,\n    this.onPreRegister,\n    this.onCancelPreRegistration,\n    this.onInvite,\n    this.onTap,\n  });\n\n  Color get categoryColor {\n    switch (category) {\n      case WorldCategory.classic:\n        return Colors.blue;\n      case WorldCategory.pvp:\n        return Colors.red;\n      case WorldCategory.event:\n        return Colors.purple;\n      case WorldCategory.experimental:\n        return Colors.orange;\n    }\n  }\n\n  String get categoryLabel {\n    switch (category) {\n      case WorldCategory.classic:\n        return ",
    "suggested_key": "worldEnumWorldcategoryClassic",
    "context": "import 'package:flutter/material.dart';\nimport '../../../core/models/world.dart';\nimport '../../../theme/app_theme.dart';\n\nenum WorldCategory {\n  classic,",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_card.dart",
    "line": 64,
    "column": 29,
    "original": ";\n    }\n  }\n\n  IconData get categoryIcon {\n    switch (category) {\n      case WorldCategory.classic:\n        return Icons.castle;\n      case WorldCategory.pvp:\n        return Icons.sports_kabaddi;\n      case WorldCategory.event:\n        return Icons.celebration;\n      case WorldCategory.experimental:\n        return Icons.science;\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return GestureDetector(\n      onTap: onTap,\n      child: Container(\n        margin: const EdgeInsets.only(bottom: 16),\n        decoration: BoxDecoration(\n          gradient: const LinearGradient(\n            begin: Alignment.topLeft,\n            end: Alignment.bottomRight,\n            colors: [\n              Color(0xFF1E1E1E),\n              Color(0xFF2A2A2A),\n            ],\n          ),\n          borderRadius: BorderRadius.circular(16),\n          border: Border.all(\n            color: world.isActive\n                ? categoryColor.withOpacity(0.5)\n                : Colors.grey.withOpacity(0.3),\n            width: world.isActive ? 2 : 1,\n          ),\n          boxShadow: world.isActive\n              ? [\n                  BoxShadow(\n                    color: categoryColor.withOpacity(0.3),\n                    blurRadius: 12,\n                    offset: const Offset(0, 4),\n                  ),\n                ]\n              : [],\n        ),\n        child: ClipRRect(\n          borderRadius: BorderRadius.circular(16),\n          child: Column(\n            children: [\n              _buildHeader(),\n              _buildContent(),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n\n  Widget _buildHeader() {\n    return Container(\n      padding: const EdgeInsets.all(16),\n      decoration: BoxDecoration(\n        gradient: LinearGradient(\n          begin: Alignment.topLeft,\n          end: Alignment.bottomRight,\n          colors: [\n            categoryColor.withOpacity(0.2),\n            categoryColor.withOpacity(0.1),\n          ],\n        ),\n      ),\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          Row(\n            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n            children: [\n              _buildCategoryBadge(),\n              _buildStatusBadge(),\n            ],\n          ),\n          const SizedBox(height: 16),\n          Row(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              _buildWorldIcon(),\n              const SizedBox(width: 16),\n              Expanded(\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    Text(\n                      world.name,\n                      style: const TextStyle(\n                        fontSize: 20,\n                        fontWeight: FontWeight.bold,\n                        color: Colors.white,\n                      ),\n                    ),\n                    const SizedBox(height: 4),\n                    Text(\n                      ",
    "suggested_key": "worldIcondataGetCategoryicon",
    "context": "case WorldCategory.event:\n        return 'Event';\n      case WorldCategory.experimental:\n        return 'Experimental';\n    }\n  }",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_card.dart",
    "line": 169,
    "column": 60,
    "original": ",\n                      style: TextStyle(\n                        fontSize: 14,\n                        color: Colors.grey[300],\n                      ),\n                      maxLines: 2,\n                      overflow: TextOverflow.ellipsis,\n                    ),\n                  ],\n                ),\n              ),\n            ],\n          ),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildWorldIcon() {\n    return Container(\n      width: 48,\n      height: 48,\n      decoration: BoxDecoration(\n        color: categoryColor.withOpacity(0.2),\n        borderRadius: BorderRadius.circular(12),\n        border: Border.all(\n          color: categoryColor.withOpacity(0.5),\n        ),\n      ),\n      child: Icon(\n        Icons.public,\n        color: categoryColor,\n        size: 24,\n      ),\n    );\n  }\n\n  Widget _buildCategoryBadge() {\n    return Container(\n      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),\n      decoration: BoxDecoration(\n        color: categoryColor.withOpacity(0.3),\n        borderRadius: BorderRadius.circular(20),\n        border: Border.all(\n          color: categoryColor.withOpacity(0.5),\n        ),\n      ),\n      child: Row(\n        mainAxisSize: MainAxisSize.min,\n        children: [\n          Icon(\n            categoryIcon,\n            size: 16,\n            color: categoryColor,\n          ),\n          const SizedBox(width: 6),\n          Text(\n            categoryLabel,\n            style: TextStyle(\n              color: categoryColor,\n              fontWeight: FontWeight.bold,\n              fontSize: 12,\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildStatusBadge() {\n    Color statusColor;\n    IconData statusIcon;\n    \n    switch (world.status) {\n      case WorldStatus.upcoming:\n        statusColor = Colors.orange;\n        statusIcon = Icons.schedule;\n        break;\n      case WorldStatus.open:\n        statusColor = Colors.green;\n        statusIcon = Icons.lock_open;\n        break;\n      case WorldStatus.running:\n        statusColor = Colors.blue;\n        statusIcon = Icons.play_circle;\n        break;\n      case WorldStatus.closed:\n        statusColor = Colors.red;\n        statusIcon = Icons.lock;\n        break;\n      case WorldStatus.archived:\n        statusColor = Colors.grey;\n        statusIcon = Icons.archive;\n        break;\n    }\n    \n    return Container(\n      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),\n      decoration: BoxDecoration(\n        color: statusColor.withOpacity(0.2),\n        borderRadius: BorderRadius.circular(20),\n        border: Border.all(\n          color: statusColor.withOpacity(0.5),\n        ),\n      ),\n      child: Row(\n        mainAxisSize: MainAxisSize.min,\n        children: [\n          Icon(\n            statusIcon,\n            size: 16,\n            color: statusColor,\n          ),\n          const SizedBox(width: 6),\n          Text(\n            world.statusText,\n            style: TextStyle(\n              color: statusColor,\n              fontWeight: FontWeight.bold,\n              fontSize: 12,\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildContent() {\n    return Container(\n      padding: const EdgeInsets.all(16),\n      child: Column(\n        children: [\n          _buildPlayerInfo(),\n          const SizedBox(height: 16),\n          _buildDateInfo(),\n          const SizedBox(height: 16),\n          _buildActionButtons(),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildPlayerInfo() {\n    return Row(\n      children: [\n        Icon(\n          Icons.people,\n          size: 16,\n          color: Colors.grey[400],\n        ),\n        const SizedBox(width: 4),\n        Text(\n          ",
    "suggested_key": "worldStyleTextstyleFontsize",
    "context": "),\n                    const SizedBox(height: 4),\n                    Text(\n                      'Eine spannende Welt voller Abenteuer',\n                      style: TextStyle(\n                        fontSize: 14,\n                        color: Colors.grey[300],",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_card.dart",
    "line": 321,
    "column": 38,
    "original": ",\n          style: TextStyle(\n            color: Colors.grey[400],\n            fontSize: 14,\n          ),\n        ),\n      ],\n    );\n  }\n\n  Widget _buildDateInfo() {\n    return Column(\n      crossAxisAlignment: CrossAxisAlignment.start,\n      children: [\n        Row(\n          children: [\n            Icon(\n              Icons.calendar_today,\n              size: 16,\n              color: Colors.grey[400],\n            ),\n            const SizedBox(width: 4),\n            Text(\n              ",
    "suggested_key": "worldStyleTextstyleColor",
    "context": "),\n        const SizedBox(width: 4),\n        Text(\n          '$playerCount Spieler aktiv',\n          style: TextStyle(\n            color: Colors.grey[400],\n            fontSize: 14,",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_card.dart",
    "line": 344,
    "column": 91,
    "original": ",\n              style: TextStyle(\n                color: Colors.grey[400],\n                fontSize: 14,\n              ),\n            ),\n          ],\n        ),\n        if (world.endsAt != null) ...[\n          Builder(\n            builder: (context) {\n              final endDate = world.endsAt!;\n              return Column(\n                children: [\n                  const SizedBox(height: 4),\n                  Row(\n                    children: [\n                      Icon(\n                        Icons.event_busy,\n                        size: 16,\n                        color: Colors.grey[400],\n                      ),\n                      const SizedBox(width: 4),\n                      Text(\n                        ",
    "suggested_key": "worldStyleTextstyleColor",
    "context": "),\n            const SizedBox(width: 4),\n            Text(\n              'Start: ${world.startsAt.day}.${world.startsAt.month}.${world.startsAt.year}',\n              style: TextStyle(\n                color: Colors.grey[400],\n                fontSize: 14,",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_card.dart",
    "line": 462,
    "column": 35,
    "original": ",\n      ));\n    }\n    \n    // Wenn keine Buttons verfügbar sind\n    if (buttons.isEmpty) {\n      return _buildStatusBadge();\n    }\n    \n    return Wrap(\n      spacing: 8,\n      runSpacing: 4,\n      children: buttons,\n    );\n  }\n  \n  Widget _buildButton({\n    required VoidCallback? onPressed,\n    required IconData icon,\n    required String? label,\n    required Color? color,\n    bool iconOnly = false,\n    String? tooltip,\n  }) {\n    if (onPressed == null) return const SizedBox.shrink();\n    \n    final button = iconOnly\n        ? ElevatedButton(\n            onPressed: onPressed,\n            style: ElevatedButton.styleFrom(\n              backgroundColor: color,\n              foregroundColor: Colors.white,\n              padding: const EdgeInsets.all(8),\n              shape: RoundedRectangleBorder(\n                borderRadius: BorderRadius.circular(8),\n              ),\n            ),\n            child: Icon(icon, size: 16),\n          )\n        : ElevatedButton.icon(\n            onPressed: onPressed,\n            icon: Icon(icon, size: 16),\n            label: Text(label ?? ",
    "suggested_key": "worldWennKeineButtons",
    "context": "label: null,\n        color: Colors.purple[600],\n        iconOnly: true,\n        tooltip: 'Spieler einladen',\n      ));\n    }",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_card.dart",
    "line": 462,
    "column": 18,
    "original": "Spieler einladen",
    "suggested_key": "worldSpielerEinladen",
    "context": "label: null,\n        color: Colors.purple[600],\n        iconOnly: true,\n        tooltip: 'Spieler einladen',\n      ));\n    }",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_card.dart",
    "line": 169,
    "column": 23,
    "original": "Eine spannende Welt voller Abenteuer",
    "suggested_key": "worldEineSpannendeWelt",
    "context": "),\n                    const SizedBox(height: 4),\n                    Text(\n                      'Eine spannende Welt voller Abenteuer',\n                      style: TextStyle(\n                        fontSize: 14,\n                        color: Colors.grey[300],",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_card.dart",
    "line": 321,
    "column": 11,
    "original": "$playerCount Spieler aktiv",
    "suggested_key": "worldPlayercountSpielerAktiv",
    "context": "),\n        const SizedBox(width: 4),\n        Text(\n          '$playerCount Spieler aktiv',\n          style: TextStyle(\n            color: Colors.grey[400],\n            fontSize: 14,",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_card.dart",
    "line": 462,
    "column": 18,
    "original": "Spieler einladen",
    "suggested_key": "worldSpielerEinladen",
    "context": "label: null,\n        color: Colors.purple[600],\n        iconOnly: true,\n        tooltip: 'Spieler einladen',\n      ));\n    }",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_filters.dart",
    "line": 3,
    "column": 26,
    "original": ";\n\nclass WorldFilters extends StatelessWidget {\n  final WorldStatus? statusFilter;\n  final WorldCategory? categoryFilter;\n  final String sortBy;\n  final bool sortAscending;\n  final ValueChanged<WorldStatus?> onStatusChanged;\n  final ValueChanged<WorldCategory?> onCategoryChanged;\n  final ValueChanged<String> onSortByChanged;\n  final VoidCallback onSortOrderChanged;\n  final VoidCallback onResetFilters;\n\n  const WorldFilters({\n    super.key,\n    this.statusFilter,\n    this.categoryFilter,\n    required this.sortBy,\n    required this.sortAscending,\n    required this.onStatusChanged,\n    required this.onCategoryChanged,\n    required this.onSortByChanged,\n    required this.onSortOrderChanged,\n    required this.onResetFilters,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n      crossAxisAlignment: CrossAxisAlignment.start,\n      children: [\n        // Status Filter\n        _buildStatusFilter(),\n        const SizedBox(height: 12),\n        \n        // Category Filter\n        _buildCategoryFilter(),\n        const SizedBox(height: 12),\n        \n        // Sort Options\n        _buildSortOptions(),\n        const SizedBox(height: 12),\n        \n        // Active Filters & Reset\n        if (statusFilter != null || categoryFilter != null)\n          _buildActiveFilters(),\n      ],\n    );\n  }\n\n  Widget _buildStatusFilter() {\n    return SingleChildScrollView(\n      scrollDirection: Axis.horizontal,\n      padding: const EdgeInsets.symmetric(horizontal: 16),\n      child: Row(\n        children: [\n          Text(\n            ",
    "suggested_key": "worldClassWorldfiltersExtends",
    "context": "import 'package:flutter/material.dart';\nimport '../../../core/models/world.dart';\nimport './world_card.dart';\n\nclass WorldFilters extends StatelessWidget {\n  final WorldStatus? statusFilter;",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_filters.dart",
    "line": 197,
    "column": 45,
    "original": "),\n                ),\n              ],\n              onChanged: (value) {\n                if (value != null) {\n                  onSortByChanged(value);\n                }\n              },\n            ),\n          ),\n          const SizedBox(width: 8),\n          Container(\n            height: 40,\n            decoration: BoxDecoration(\n              color: const Color(0xFF2D2D2D),\n              borderRadius: BorderRadius.circular(8),\n              border: Border.all(color: Colors.grey[600]!),\n            ),\n            child: IconButton(\n              icon: Icon(\n                sortAscending ? Icons.arrow_upward : Icons.arrow_downward,\n                color: Colors.grey[300],\n                size: 20,\n              ),\n              onPressed: onSortOrderChanged,\n              tooltip: sortAscending ? ",
    "suggested_key": "worldOnchangedValueIf",
    "context": "),\n                DropdownMenuItem(\n                  value: 'playerCount',\n                  child: Text('Spieleranzahl'),\n                ),\n              ],\n              onChanged: (value) {",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_list_header.dart",
    "line": 2,
    "column": 38,
    "original": ";\n\nclass WorldListHeader extends StatelessWidget {\n  final VoidCallback? onRefresh;\n  final VoidCallback? onCreateWorld;\n  final bool hasCreatePermission;\n\n  const WorldListHeader({\n    super.key,\n    this.onRefresh,\n    this.onCreateWorld,\n    this.hasCreatePermission = false,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n      children: [\n        // Logo\n        Container(\n          width: 80,\n          height: 80,\n          decoration: BoxDecoration(\n            color: AppTheme.primaryColor.withOpacity(0.2),\n            borderRadius: BorderRadius.circular(20),\n            border: Border.all(\n              color: AppTheme.primaryColor.withOpacity(0.5),\n              width: 2,\n            ),\n          ),\n          child: const Icon(\n            Icons.public,\n            size: 40,\n            color: AppTheme.primaryColor,\n          ),\n        ),\n        const SizedBox(height: 24),\n        \n        // Title\n        Text(\n          ",
    "suggested_key": "worldClassWorldlistheaderExtends",
    "context": "import 'package:flutter/material.dart';\nimport '../../../theme/app_theme.dart';\n\nclass WorldListHeader extends StatelessWidget {\n  final VoidCallback? onRefresh;",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_list_header.dart",
    "line": 53,
    "column": 11,
    "original": "Wähle deine Welt",
    "suggested_key": "worldWähleDeineWelt",
    "context": "// Subtitle\n        Text(\n          'Wähle deine Welt',\n          style: Theme.of(context).textTheme.titleMedium?.copyWith(\n            color: Colors.grey[300],\n            fontSize: 18,",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_list_header.dart",
    "line": 53,
    "column": 11,
    "original": "Wähle deine Welt",
    "suggested_key": "worldWähleDeineWelt",
    "context": "// Subtitle\n        Text(\n          'Wähle deine Welt',\n          style: Theme.of(context).textTheme.titleMedium?.copyWith(\n            color: Colors.grey[300],\n            fontSize: 18,",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_list_states.dart",
    "line": 2,
    "column": 38,
    "original": ";\n\nclass WorldListLoadingState extends StatelessWidget {\n  const WorldListLoadingState({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const Center(\n      child: Column(\n        mainAxisAlignment: MainAxisAlignment.center,\n        children: [\n          CircularProgressIndicator(\n            valueColor: AlwaysStoppedAnimation<Color>(AppTheme.primaryColor),\n          ),\n          SizedBox(height: 16),\n          Text(\n            ",
    "suggested_key": "worldClassWorldlistloadingstateExtends",
    "context": "import 'package:flutter/material.dart';\nimport '../../../theme/app_theme.dart';\n\nclass WorldListLoadingState extends StatelessWidget {\n  const WorldListLoadingState({super.key});",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_list_states.dart",
    "line": 18,
    "column": 38,
    "original": ",\n            style: TextStyle(\n              color: Colors.grey,\n              fontSize: 16,\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n\nclass WorldListEmptyState extends StatelessWidget {\n  final VoidCallback? onRefresh;\n  final bool hasActiveFilters;\n\n  const WorldListEmptyState({\n    super.key,\n    this.onRefresh,\n    this.hasActiveFilters = false,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n      child: Column(\n        mainAxisAlignment: MainAxisAlignment.center,\n        children: [\n          Icon(\n            Icons.public_off,\n            size: 64,\n            color: Colors.grey[600],\n          ),\n          const SizedBox(height: 16),\n          Text(\n            hasActiveFilters\n                ? ",
    "suggested_key": "worldStyleTextstyleColor",
    "context": "),\n          SizedBox(height: 16),\n          Text(\n            'Welten werden geladen...',\n            style: TextStyle(\n              color: Colors.grey,\n              fontSize: 16,",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_list_states.dart",
    "line": 55,
    "column": 19,
    "original": "Noch keine Welten verfügbar",
    "suggested_key": "worldNochKeineWelten",
    "context": "Text(\n            hasActiveFilters\n                ? 'Keine Welten gefunden'\n                : 'Noch keine Welten verfügbar',\n            style: TextStyle(\n              fontSize: 18,\n              fontWeight: FontWeight.bold,",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_list_states.dart",
    "line": 66,
    "column": 19,
    "original": "Versuche die Filter anzupassen oder zurückzusetzen.",
    "suggested_key": "worldVersucheDieFilter",
    "context": "const SizedBox(height: 8),\n          Text(\n            hasActiveFilters\n                ? 'Versuche die Filter anzupassen oder zurückzusetzen.'\n                : 'Schaue später noch einmal vorbei oder erstelle eine neue Welt.',\n            style: TextStyle(\n              fontSize: 14,",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_list_states.dart",
    "line": 67,
    "column": 19,
    "original": "Schaue später noch einmal vorbei oder erstelle eine neue Welt.",
    "suggested_key": "worldSchaueSpäterNoch",
    "context": "Text(\n            hasActiveFilters\n                ? 'Versuche die Filter anzupassen oder zurückzusetzen.'\n                : 'Schaue später noch einmal vorbei oder erstelle eine neue Welt.',\n            style: TextStyle(\n              fontSize: 14,\n              color: Colors.grey[500],",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_list_states.dart",
    "line": 18,
    "column": 13,
    "original": "Welten werden geladen...",
    "suggested_key": "worldWeltenWerdenGeladen",
    "context": "),\n          SizedBox(height: 16),\n          Text(\n            'Welten werden geladen...',\n            style: TextStyle(\n              color: Colors.grey,\n              fontSize: 16,",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_list_states.dart",
    "line": 66,
    "column": 19,
    "original": "Versuche die Filter anzupassen oder zurückzusetzen.",
    "suggested_key": "worldVersucheDieFilter",
    "context": "const SizedBox(height: 8),\n          Text(\n            hasActiveFilters\n                ? 'Versuche die Filter anzupassen oder zurückzusetzen.'\n                : 'Schaue später noch einmal vorbei oder erstelle eine neue Welt.',\n            style: TextStyle(\n              fontSize: 14,",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_list_states.dart",
    "line": 18,
    "column": 13,
    "original": "Welten werden geladen...",
    "suggested_key": "worldWeltenWerdenGeladen",
    "context": "),\n          SizedBox(height: 16),\n          Text(\n            'Welten werden geladen...',\n            style: TextStyle(\n              color: Colors.grey,\n              fontSize: 16,",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_list_states.dart",
    "line": 54,
    "column": 19,
    "original": "Keine Welten gefunden",
    "suggested_key": "worldKeineWeltenGefunden",
    "context": "const SizedBox(height: 16),\n          Text(\n            hasActiveFilters\n                ? 'Keine Welten gefunden'\n                : 'Noch keine Welten verfügbar',\n            style: TextStyle(\n              fontSize: 18,",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_list_states.dart",
    "line": 55,
    "column": 19,
    "original": "Noch keine Welten verfügbar",
    "suggested_key": "worldNochKeineWelten",
    "context": "Text(\n            hasActiveFilters\n                ? 'Keine Welten gefunden'\n                : 'Noch keine Welten verfügbar',\n            style: TextStyle(\n              fontSize: 18,\n              fontWeight: FontWeight.bold,",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_list_states.dart",
    "line": 67,
    "column": 19,
    "original": "Schaue später noch einmal vorbei oder erstelle eine neue Welt.",
    "suggested_key": "worldSchaueSpäterNoch",
    "context": "Text(\n            hasActiveFilters\n                ? 'Versuche die Filter anzupassen oder zurückzusetzen.'\n                : 'Schaue später noch einmal vorbei oder erstelle eine neue Welt.',\n            style: TextStyle(\n              fontSize: 14,\n              color: Colors.grey[500],",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 281,
    "column": 87,
    "original": " $actionTypeText.$validityText';\n    \n    // Je nach Status unterschiedliche Logik\n    switch (status) {\n      case 'not_logged_in':\n        if (requiresAction == 'register') {\n          // Mail ist unbekannt -> nur Register\n          actionText = 'Du musst dich mit der E-Mail-Adresse $inviteEmail registrieren.';\n          infoText = '$baseInfoText\\n\\n$actionText';\n          showRegisterButton = isInviteValid; // Nur bei gültigen Invites\n        }\n        break;\n        \n      case 'user_exists_not_logged_in':\n        if (requiresAction == 'login') {\n          // Mail ist bekannt, User nicht angemeldet -> nur Login\n          actionText = 'Dein Account mit $inviteEmail ist bereits registriert. Bitte melde dich an.';\n          infoText = '$baseInfoText\\n\\n$actionText';\n          showLoginButton = isInviteValid; // Nur bei gültigen Invites\n        }\n        break;\n        \n      case 'wrong_email':\n        if (requiresAction == 'logout_and_register') {\n          final currentUserEmail = userStatusData['currentUser']?['email'];\n          // User mit falscher Mail angemeldet -> Logout + Register\n          actionText = 'Diese Einladung ist für $inviteEmail bestimmt, aber du bist als $currentUserEmail angemeldet.';\n          infoText = '$baseInfoText\\n\\n$actionText\\n\\nBitte melde dich ab und registriere dich mit der richtigen E-Mail-Adresse.';\n          showLogoutButton = isInviteValid; // Nur bei gültigen Invites\n        }\n        break;\n        \n      case 'correct_email':\n        if (requiresAction == 'join_world') {\n          // User richtig angemeldet -> nur Accept Button (KEIN Auto-Accept!)\n          actionText = 'Du bist mit der richtigen E-Mail-Adresse angemeldet und kannst die Einladung jetzt annehmen.';\n          infoText = '$baseInfoText\\n\\n$actionText';\n          showAcceptButton = isInviteValid; // Nur bei gültigen Invites\n          \n          // Auto-Accept entfernt: User soll bewusst entscheiden!\n        }\n        break;\n        \n      default:\n        AppLogger.app.w('❌ Unbekannter User-Status: $status');\n        actionText = 'Unbekannter Status: $status';\n        infoText = '$baseInfoText\\n\\n$actionText';\n    }\n    \n    // Bei ungültigen Invites zusätzliche Info\n    if (!isInviteValid) {\n      infoText += '\\n\\n⚠️ Diese Einladung kann nicht mehr verwendet werden.';\n    }\n    \n    setState(() {\n      _infoMessage = infoText;\n      _inviteEmail = inviteEmail;\n      \n      // Button-Flags setzen\n      _showLoginButton = showLoginButton;\n      _showRegistrationButton = showRegisterButton; \n      _showLogoutButton = showLogoutButton;\n      _showAcceptInviteButton = showAcceptButton;\n      \n      // WICHTIG: Alte Fehlermeldung zurücksetzen!\n      _errorMessage = null;\n      \n      _isLoading = false;\n    });\n  }\n\n  // Neue Methode: World-Status für normale Navigation prüfen\n  Future<void> _checkWorldStatus() async {\n    if (_world == null) return;\n    \n    try {\n      // Prüfe ob User bereits Mitglied ist\n      _isJoined = await _worldService.isPlayerInWorld(_world!.id);\n      \n      // Prüfe Vorregistrierung\n      final preRegStatus = await _worldService.getPreRegistrationStatus(_world!.id);\n      _isPreRegistered = preRegStatus.isPreRegistered;\n      \n      AppLogger.app.d('✅ World-Status geprüft', error: {\n        'worldName': _world!.name,\n        'isJoined': _isJoined,\n        'isPreRegistered': _isPreRegistered\n      });\n    } catch (e) {\n      AppLogger.logError('Fehler beim Prüfen des World-Status', e);\n    }\n  }\n\n  // Neue Methode: Automatische Invite-Akzeptierung\n  Future<void> _autoAcceptInvite() async {\n    if (widget.inviteToken == null) return;\n    \n    try {\n      final result = await _worldService.acceptInvite(widget.inviteToken!);\n      \n      if (result != null) {\n        setState(() {\n          _isJoined = true;\n          _infoMessage = 'Willkommen in der Welt ",
    "suggested_key": "worldActiontypetextvaliditytextJeNach",
    "context": "}\n    }\n    \n    final baseInfoText = 'Du wurdest von $inviterText eingeladen, der Welt \"$worldName\" $actionTypeText.$validityText';\n    \n    // Je nach Status unterschiedliche Logik\n    switch (status) {",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "\""
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 384,
    "column": 66,
    "original": "! Das Invite wurde automatisch akzeptiert.';\n        });\n        \n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Erfolgreich der Welt ",
    "suggested_key": "worldDasInviteWurde",
    "context": "if (result != null) {\n        setState(() {\n          _isJoined = true;\n          _infoMessage = 'Willkommen in der Welt \"${_world?.name}\"! Das Invite wurde automatisch akzeptiert.';\n        });\n        \n        if (mounted) {",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "\""
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 390,
    "column": 67,
    "original": " beigetreten!'),\n              backgroundColor: Colors.green,\n              duration: const Duration(seconds: 3),\n            ),\n          );\n        }\n      }\n    } catch (e) {\n      // SPEZIALBEHANDLUNG: ",
    "suggested_key": "worldBeigetretenBackgroundcolorColorsgreen",
    "context": "if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Erfolgreich der Welt \"${_world!.name}\" beigetreten!'),\n              backgroundColor: Colors.green,\n              duration: const Duration(seconds: 3),\n            ),",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "\""
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 402,
    "column": 80,
    "original": "!';\n        });\n        \n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Du bist bereits Mitglied der Welt ",
    "suggested_key": "worldIfMountedScaffoldmessengerofcontextshowsnackbar",
    "context": "if (e.toString().contains('Invite bereits akzeptiert')) {\n        setState(() {\n          _isJoined = true;\n          _infoMessage = 'Du bist bereits Mitglied dieser Welt \"${_world?.name}\"!';\n        });\n        \n        if (mounted) {",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "\""
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 408,
    "column": 80,
    "original": "!'),\n              backgroundColor: Colors.orange,\n              duration: const Duration(seconds: 3),\n            ),\n          );\n        }\n        return; // Erfolgreicher Exit\n      }\n      \n      // Andere Fehler normal behandeln\n      AppLogger.logError('Automatische Invite-Akzeptierung fehlgeschlagen', e);\n      // Fehler nicht als kritisch behandeln - User kann manuell beitreten\n      setState(() {\n        _infoMessage = 'Du kannst nun der Welt beitreten.';\n      });\n    }\n  }\n\n  Future<void> _joinWorld() async {\n    if (_world == null) return;\n\n    setState(() {\n      _isJoining = true;\n      _joinError = null;\n    });\n\n    try {\n      bool success = false;\n      \n      // **INVITE-TOKEN FLOW: Invite akzeptieren**\n      if (widget.inviteToken != null) {\n        AppLogger.app.i('🎫 Versuche Invite-Akzeptierung für World-Join');\n        final inviteResult = await _worldService.acceptInvite(widget.inviteToken!);\n        \n        if (inviteResult != null) {\n          success = true;\n          AppLogger.app.i('✅ Invite erfolgreich akzeptiert', error: {\n            'worldId': _world!.id,\n            'worldName': _world!.name\n          });\n        }\n      } else {\n        // **NORMALE NAVIGATION: Standard World-Join**\n        AppLogger.app.i('🌍 Versuche normalen World-Join');\n        success = await _worldService.joinWorld(_world!.id);\n      }\n      \n      if (success) {\n        setState(() {\n          _isJoined = true;\n        });\n        \n        if (mounted) {\n          final message = widget.inviteToken != null \n            ? 'Einladung akzeptiert! Willkommen in der Welt ",
    "suggested_key": "worldBackgroundcolorColorsorangeDuration",
    "context": "if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Du bist bereits Mitglied der Welt \"${_world?.name}\"!'),\n              backgroundColor: Colors.orange,\n              duration: const Duration(seconds: 3),\n            ),",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "\""
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 462,
    "column": 77,
    "original": "!'\n            : 'Erfolgreich der Welt ",
    "suggested_key": "worldErfolgreichDerWelt",
    "context": "if (mounted) {\n          final message = widget.inviteToken != null \n            ? 'Einladung akzeptiert! Willkommen in der Welt \"${_world!.name}\"!'\n            : 'Erfolgreich der Welt \"${_world!.name}\" beigetreten!';\n            \n          ScaffoldMessenger.of(context).showSnackBar(",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "\""
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 463,
    "column": 53,
    "original": " beigetreten!';\n            \n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text(message),\n              backgroundColor: Colors.green,\n              duration: const Duration(seconds: 3),\n            ),\n          );\n        }\n      } else {\n        setState(() {\n          _joinError = 'Beitritt fehlgeschlagen. Versuche es erneut.';\n        });\n      }\n    } catch (e) {\n      AppLogger.logError('World Join fehlgeschlagen', e, context: {\n        'worldId': _world?.id,\n        'worldName': _world?.name,\n        'hasInviteToken': widget.inviteToken != null,\n        'inviteToken': widget.inviteToken?.substring(0, 8)\n      });\n      \n      setState(() {\n        // Bessere Fehlermeldungen für verschiedene Szenarien\n        if (e.toString().contains('bereits akzeptiert')) {\n          _joinError = 'Diese Einladung wurde bereits akzeptiert.';\n          _isJoined = true; // User ist bereits Mitglied\n        } else if (e.toString().contains('nicht für deine E-Mail-Adresse')) {\n          _joinError = 'Diese Einladung ist nicht für deine E-Mail-Adresse bestimmt.';\n        } else if (e.toString().contains('abgelaufen')) {\n          _joinError = 'Diese Einladung ist abgelaufen.';\n        } else {\n          _joinError = 'Ein Fehler ist aufgetreten: ${e.toString().replaceAll('Exception: ', '')}';\n        }\n      });\n    } finally {\n      setState(() {\n        _isJoining = false;\n      });\n    }\n  }\n  \n  Future<void> _preRegisterWorld() async {\n    final world = _world;\n    if (world == null) return;\n\n    setState(() {\n      _isPreRegistering = true;\n      _joinError = null;\n    });\n\n    try {\n      final success = await _worldService.preRegisterWorldAuthenticated(world.id);\n      \n      if (success) {\n        setState(() {\n          _isPreRegistered = true;\n        });\n        \n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Erfolgreich für ${world.name} vorregistriert!'),\n              backgroundColor: Colors.green,\n            ),\n          );\n        }\n      } else {\n        setState(() {\n          _joinError = 'Fehler bei der Vorregistrierung';\n        });\n      }\n    } catch (e) {\n      setState(() {\n        _joinError = e.toString().replaceAll('Exception: ', '');\n      });\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isPreRegistering = false;\n        });\n      }\n    }\n  }\n  \n  Future<void> _cancelPreRegistration() async {\n    final world = _world;\n    if (world == null) return;\n\n    setState(() {\n      _isPreRegistering = true;\n      _joinError = null;\n    });\n\n    try {\n      final success = await _worldService.cancelPreRegistrationAuthenticated(world.id);\n      if (success) {\n        setState(() {\n          _isPreRegistered = false;\n        });\n        \n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Vorregistrierung für ${world.name} zurückgezogen.'),\n              backgroundColor: Colors.orange,\n            ),\n          );\n        }\n      } else {\n        setState(() {\n          _joinError = 'Fehler beim Zurückziehen der Vorregistrierung';\n        });\n      }\n    } catch (e) {\n      setState(() {\n        _joinError = e.toString().replaceAll('Exception: ', '');\n      });\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isPreRegistering = false;\n        });\n      }\n    }\n  }\n  \n  Future<void> _leaveWorld() async {\n    final world = _world;\n    if (world == null) return;\n    \n    // Bestätigungsdialog anzeigen\n    final confirmed = await showDialog<bool>(\n      context: context,\n      builder: (context) => AlertDialog(\n        title: const Text('Welt verlassen?'),\n        content: Text('Möchtest du die Welt ",
    "suggested_key": "worldBeigetretenScaffoldmessengerofcontextshowsnackbarSnackbar",
    "context": "if (mounted) {\n          final message = widget.inviteToken != null \n            ? 'Einladung akzeptiert! Willkommen in der Welt \"${_world!.name}\"!'\n            : 'Erfolgreich der Welt \"${_world!.name}\" beigetreten!';\n            \n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "\""
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 384,
    "column": 26,
    "original": "Willkommen in der Welt \"${_world?.name}\"! Das Invite wurde automatisch akzeptiert.",
    "suggested_key": "worldWillkommenInDer",
    "context": "if (result != null) {\n        setState(() {\n          _isJoined = true;\n          _infoMessage = 'Willkommen in der Welt \"${_world?.name}\"! Das Invite wurde automatisch akzeptiert.';\n        });\n        \n        if (mounted) {",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 390,
    "column": 29,
    "original": "Erfolgreich der Welt \"${_world!.name}\" beigetreten!",
    "suggested_key": "worldErfolgreichDerWelt",
    "context": "if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Erfolgreich der Welt \"${_world!.name}\" beigetreten!'),\n              backgroundColor: Colors.green,\n              duration: const Duration(seconds: 3),\n            ),",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 402,
    "column": 26,
    "original": "Du bist bereits Mitglied dieser Welt \"${_world?.name}\"!",
    "suggested_key": "worldDuBistBereits",
    "context": "if (e.toString().contains('Invite bereits akzeptiert')) {\n        setState(() {\n          _isJoined = true;\n          _infoMessage = 'Du bist bereits Mitglied dieser Welt \"${_world?.name}\"!';\n        });\n        \n        if (mounted) {",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 408,
    "column": 29,
    "original": "Du bist bereits Mitglied der Welt \"${_world?.name}\"!",
    "suggested_key": "worldDuBistBereits",
    "context": "if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Du bist bereits Mitglied der Welt \"${_world?.name}\"!'),\n              backgroundColor: Colors.orange,\n              duration: const Duration(seconds: 3),\n            ),",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 439,
    "column": 25,
    "original": "🎫 Versuche Invite-Akzeptierung für World-Join",
    "suggested_key": "worldVersucheInviteakzeptierungFür",
    "context": "// **INVITE-TOKEN FLOW: Invite akzeptieren**\n      if (widget.inviteToken != null) {\n        AppLogger.app.i('🎫 Versuche Invite-Akzeptierung für World-Join');\n        final inviteResult = await _worldService.acceptInvite(widget.inviteToken!);\n        \n        if (inviteResult != null) {",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 462,
    "column": 15,
    "original": "Einladung akzeptiert! Willkommen in der Welt \"${_world!.name}\"!",
    "suggested_key": "worldEinladungAkzeptiertWillkommen",
    "context": "if (mounted) {\n          final message = widget.inviteToken != null \n            ? 'Einladung akzeptiert! Willkommen in der Welt \"${_world!.name}\"!'\n            : 'Erfolgreich der Welt \"${_world!.name}\" beigetreten!';\n            \n          ScaffoldMessenger.of(context).showSnackBar(",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 463,
    "column": 15,
    "original": "Erfolgreich der Welt \"${_world!.name}\" beigetreten!",
    "suggested_key": "worldErfolgreichDerWelt",
    "context": "if (mounted) {\n          final message = widget.inviteToken != null \n            ? 'Einladung akzeptiert! Willkommen in der Welt \"${_world!.name}\"!'\n            : 'Erfolgreich der Welt \"${_world!.name}\" beigetreten!';\n            \n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 483,
    "column": 21,
    "original": ": widget.inviteToken?.substring(0, 8)\n      });\n      \n      setState(() {\n        // Bessere Fehlermeldungen für verschiedene Szenarien\n        if (e.toString().contains(",
    "suggested_key": "worldWidgetinvitetokensubstring08Setstate",
    "context": "'worldId': _world?.id,\n        'worldName': _world?.name,\n        'hasInviteToken': widget.inviteToken != null,\n        'inviteToken': widget.inviteToken?.substring(0, 8)\n      });\n      \n      setState(() {",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 526,
    "column": 75,
    "original": "),\n              backgroundColor: Colors.green,\n            ),\n          );\n        }\n      } else {\n        setState(() {\n          _joinError = ",
    "suggested_key": "worldBackgroundcolorColorsgreenElse",
    "context": "if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Erfolgreich für ${world.name} vorregistriert!'),\n              backgroundColor: Colors.green,\n            ),\n          );",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 568,
    "column": 79,
    "original": "),\n              backgroundColor: Colors.orange,\n            ),\n          );\n        }\n      } else {\n        setState(() {\n          _joinError = ",
    "suggested_key": "worldBackgroundcolorColorsorangeElse",
    "context": "if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Vorregistrierung für ${world.name} zurückgezogen.'),\n              backgroundColor: Colors.orange,\n            ),\n          );",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 633,
    "column": 60,
    "original": "),\n            backgroundColor: Colors.orange,\n          ),\n        );\n      }\n    } catch (e) {\n      setState(() {\n        _joinError = e.toString().replaceAll(",
    "suggested_key": "worldBackgroundcolorColorsorangeCatch",
    "context": "if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text('Du hast ${world.name} verlassen.'),\n            backgroundColor: Colors.orange,\n          ),\n        );",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 661,
    "column": 41,
    "original": ";\n    return world.statusText;\n  }\n\n  // Welt-Status-Farbe\n  Color _getWorldStatusColor() {\n    final world = _world;\n    if (world == null) return Colors.grey;\n    \n    switch (world.status) {\n      case WorldStatus.upcoming:\n        return Colors.orange;\n      case WorldStatus.open:\n        return Colors.green;\n      case WorldStatus.running:\n        return Colors.blue;\n      case WorldStatus.closed:\n        return Colors.red;\n      case WorldStatus.archived:\n        return Colors.grey;\n    }\n  }\n\n  // Kann der Benutzer beitreten?\n  // Retry-Funktion\n  Future<void> _retry() async {\n    await _loadWorldData();\n  }\n\n  // Navigation zu Registration mit vorausgefüllter E-Mail\n  void _navigateToRegistration(String email) {\n    AppLogger.app.i(",
    "suggested_key": "worldReturnWorldstatustextWeltstatusfarbe",
    "context": "// Welt-Status bestimmen\n  String _getWorldStatusText() {\n    final world = _world;\n    if (world == null) return 'Unbekannt';\n    return world.statusText;\n  }",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1084,
    "column": 25,
    "original": "Welt nicht gefunden",
    "suggested_key": "worldWeltNichtGefunden",
    "context": "),\n                      const SizedBox(height: 24),\n                      Text(\n                        'Welt nicht gefunden',\n                        style: Theme.of(context).textTheme.headlineSmall?.copyWith(\n                          color: Colors.white,\n                          fontWeight: FontWeight.bold,",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1092,
    "column": 25,
    "original": "Die angeforderte Welt existiert nicht oder ist nicht verfügbar.",
    "suggested_key": "worldDieAngeforderteWelt",
    "context": "),\n                      const SizedBox(height: 16),\n                      Text(\n                        'Die angeforderte Welt existiert nicht oder ist nicht verfügbar.',\n                        style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                          color: Colors.grey[300],\n                        ),",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1111,
    "column": 45,
    "original": "Zurück zu den Welten",
    "suggested_key": "worldZurückZuDen",
    "context": "borderRadius: BorderRadius.circular(12),\n                            ),\n                          ),\n                          child: const Text('Zurück zu den Welten'),\n                        ),\n                      ),\n                    ],",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1190,
    "column": 103,
    "original": ",\n                                      style: TextStyle(color: Colors.grey[400], fontSize: 14),\n                                    ),\n                                  ],\n                                ],\n                              ),\n                            ],\n                          ),\n                        ),\n                        Container(\n                          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),\n                          decoration: BoxDecoration(\n                            color: _getWorldStatusColor().withOpacity(0.2),\n                            borderRadius: BorderRadius.circular(20),\n                            border: Border.all(color: _getWorldStatusColor().withOpacity(0.5)),\n                          ),\n                          child: Row(\n                            mainAxisSize: MainAxisSize.min,\n                            children: [\n                              Icon(\n                                _getWorldStatusIcon(),\n                                color: _getWorldStatusColor(),\n                                size: 16,\n                              ),\n                              const SizedBox(width: 6),\n                              Text(\n                                _getWorldStatusText(),\n                                style: TextStyle(\n                                  color: _getWorldStatusColor(),\n                                  fontWeight: FontWeight.w600,\n                                  fontSize: 14,\n                                ),\n                              ),\n                            ],\n                          ),\n                        ),\n                      ],\n                    ),\n                  ],\n                ),\n              ),\n              \n              // Tab Bar\n              Container(\n                decoration: BoxDecoration(\n                  color: const Color(0xFF2A2A2A),\n                  border: Border(\n                    bottom: BorderSide(\n                      color: AppTheme.primaryColor.withOpacity(0.3),\n                      width: 1,\n                    ),\n                  ),\n                ),\n                child: TabBar(\n                  controller: _tabController,\n                  indicatorColor: AppTheme.primaryColor,\n                  indicatorWeight: 3,\n                  labelColor: AppTheme.primaryColor,\n                  unselectedLabelColor: Colors.grey[400],\n                  labelStyle: const TextStyle(fontWeight: FontWeight.w600),\n                  tabs: const [\n                    Tab(\n                      icon: Icon(Icons.description_outlined),\n                      text: ",
    "suggested_key": "worldStyleTextstylecolorColorsgrey400",
    "context": "Icon(Icons.event, size: 16, color: Colors.grey[400]),\n                                    const SizedBox(width: 4),\n                                    Text(\n                                      'Ende: ${_world?.endsAt.toString().split(' ')[0] ?? 'Unbekannt'}',\n                                      style: TextStyle(color: Colors.grey[400], fontSize: 14),\n                                    ),\n                                  ],",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1350,
    "column": 13,
    "original": "Dies ist eine spannende Welt voller Abenteuer und Herausforderungen. ",
    "suggested_key": "worldDiesIstEine",
    "context": "),\n          const SizedBox(height: 16),\n          Text(\n            'Dies ist eine spannende Welt voller Abenteuer und Herausforderungen. '\n            'Erkunde unbekannte Gebiete, schließe Allianzen und werde zur Legende!',\n            style: TextStyle(color: Colors.grey[300], height: 1.5),\n          ),",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1351,
    "column": 13,
    "original": "Erkunde unbekannte Gebiete, schließe Allianzen und werde zur Legende!",
    "suggested_key": "worldErkundeUnbekannteGebiete",
    "context": "const SizedBox(height: 16),\n          Text(\n            'Dies ist eine spannende Welt voller Abenteuer und Herausforderungen. '\n            'Erkunde unbekannte Gebiete, schließe Allianzen und werde zur Legende!',\n            style: TextStyle(color: Colors.grey[300], height: 1.5),\n          ),\n          const SizedBox(height: 24),",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1357,
    "column": 94,
    "original": ", Icons.access_time),\n        ],\n      ),\n    );\n  }\n  \n  Widget _buildRulesTab() {\n    return SingleChildScrollView(\n      padding: const EdgeInsets.all(24),\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          const Row(\n            children: [\n              Icon(Icons.rule, color: AppTheme.primaryColor, size: 24),\n              SizedBox(width: 8),\n              Text(\n                ",
    "suggested_key": "worldIconsaccess_timeWidget_buildrulestab",
    "context": "const SizedBox(height: 24),\n          _buildInfoCard('Kategorie', 'Standard', Icons.category),\n          _buildInfoCard('Welt-ID', '#${_world?.id ?? 'N/A'}', Icons.tag),\n          _buildInfoCard('Erstellt', _world?.createdAt.toString().split(' ')[0] ?? 'Unbekannt', Icons.access_time),\n        ],\n      ),\n    );",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1384,
    "column": 32,
    "original": "Respektiere andere Spieler",
    "suggested_key": "worldRespektiereAndereSpieler",
    "context": "],\n          ),\n          const SizedBox(height: 16),\n          _buildRuleItem('1.', 'Respektiere andere Spieler'),\n          _buildRuleItem('2.', 'Keine Cheats oder Exploits verwenden'),\n          _buildRuleItem('3.', 'Faire Spielweise ist Pflicht'),\n          _buildRuleItem('4.', 'Kommunikation nur im Spielchat'),",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1385,
    "column": 32,
    "original": "Keine Cheats oder Exploits verwenden",
    "suggested_key": "worldKeineCheatsOder",
    "context": "),\n          const SizedBox(height: 16),\n          _buildRuleItem('1.', 'Respektiere andere Spieler'),\n          _buildRuleItem('2.', 'Keine Cheats oder Exploits verwenden'),\n          _buildRuleItem('3.', 'Faire Spielweise ist Pflicht'),\n          _buildRuleItem('4.', 'Kommunikation nur im Spielchat'),\n          _buildRuleItem('5.', 'Entscheidungen der Spielleitung sind final'),",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1386,
    "column": 32,
    "original": "Faire Spielweise ist Pflicht",
    "suggested_key": "worldFaireSpielweiseIst",
    "context": "const SizedBox(height: 16),\n          _buildRuleItem('1.', 'Respektiere andere Spieler'),\n          _buildRuleItem('2.', 'Keine Cheats oder Exploits verwenden'),\n          _buildRuleItem('3.', 'Faire Spielweise ist Pflicht'),\n          _buildRuleItem('4.', 'Kommunikation nur im Spielchat'),\n          _buildRuleItem('5.', 'Entscheidungen der Spielleitung sind final'),\n        ],",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1387,
    "column": 32,
    "original": "Kommunikation nur im Spielchat",
    "suggested_key": "worldKommunikationNurIm",
    "context": "_buildRuleItem('1.', 'Respektiere andere Spieler'),\n          _buildRuleItem('2.', 'Keine Cheats oder Exploits verwenden'),\n          _buildRuleItem('3.', 'Faire Spielweise ist Pflicht'),\n          _buildRuleItem('4.', 'Kommunikation nur im Spielchat'),\n          _buildRuleItem('5.', 'Entscheidungen der Spielleitung sind final'),\n        ],\n      ),",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1405,
    "column": 17,
    "original": "Welt-Statistiken",
    "suggested_key": "worldWeltstatistiken",
    "context": "Icon(Icons.bar_chart, color: AppTheme.primaryColor, size: 24),\n              SizedBox(width: 8),\n              Text(\n                'Welt-Statistiken',\n                style: TextStyle(\n                  color: Colors.white,\n                  fontSize: 18,",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1427,
    "column": 62,
    "original": ", Icons.public)),\n            ],\n          ),\n        ],\n      ),\n    );\n  }\n  \n  Widget _buildInfoCard(String label, String value, IconData icon) {\n    return Container(\n      margin: const EdgeInsets.only(bottom: 12),\n      padding: const EdgeInsets.all(16),\n      decoration: BoxDecoration(\n        color: const Color(0xFF2A2A2A),\n        borderRadius: BorderRadius.circular(12),\n        border: Border.all(color: Colors.grey[800] ?? Colors.grey),\n      ),\n      child: Row(\n        children: [\n          Icon(icon, color: AppTheme.primaryColor, size: 20),\n          const SizedBox(width: 12),\n          Expanded(\n            child: Column(\n              crossAxisAlignment: CrossAxisAlignment.start,\n              children: [\n                Text(\n                  label,\n                  style: TextStyle(color: Colors.grey[400], fontSize: 12),\n                ),\n                const SizedBox(height: 2),\n                Text(\n                  value,\n                  style: const TextStyle(color: Colors.white, fontSize: 14, fontWeight: FontWeight.w500),\n                ),\n              ],\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n  \n  Widget _buildRuleItem(String number, String rule) {\n    return Container(\n      margin: const EdgeInsets.only(bottom: 12),\n      padding: const EdgeInsets.all(12),\n      decoration: BoxDecoration(\n        color: const Color(0xFF2A2A2A),\n        borderRadius: BorderRadius.circular(8),\n        border: Border.all(color: Colors.grey[800] ?? Colors.grey),\n      ),\n      child: Row(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          Container(\n            width: 28,\n            height: 28,\n            decoration: BoxDecoration(\n              color: AppTheme.primaryColor.withOpacity(0.2),\n              shape: BoxShape.circle,\n            ),\n            child: Center(\n              child: Text(\n                number,\n                style: const TextStyle(\n                  color: AppTheme.primaryColor,\n                  fontWeight: FontWeight.bold,\n                  fontSize: 12,\n                ),\n              ),\n            ),\n          ),\n          const SizedBox(width: 12),\n          Expanded(\n            child: Text(\n              rule,\n              style: TextStyle(color: Colors.grey[300], height: 1.3),\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n  \n  Widget _buildStatCard(String label, String value, IconData icon) {\n    return Container(\n      padding: const EdgeInsets.all(20),\n      decoration: BoxDecoration(\n        color: const Color(0xFF2A2A2A),\n        borderRadius: BorderRadius.circular(16),\n        border: Border.all(color: AppTheme.primaryColor.withOpacity(0.3)),\n      ),\n      child: Column(\n        children: [\n          Icon(icon, color: AppTheme.primaryColor, size: 32),\n          const SizedBox(height: 12),\n          Text(\n            value,\n            style: const TextStyle(\n              color: Colors.white,\n              fontSize: 20,\n              fontWeight: FontWeight.bold,\n            ),\n          ),\n          const SizedBox(height: 4),\n          Text(\n            label,\n            style: TextStyle(\n              color: Colors.grey[400],\n              fontSize: 14,\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n  \n  IconData _getWorldStatusIcon() {\n    switch (_world?.status) {\n      case WorldStatus.upcoming:\n        return Icons.schedule;\n      case WorldStatus.open:\n        return Icons.lock_open;\n      case WorldStatus.running:\n        return Icons.play_circle_outline;\n      case WorldStatus.closed:\n        return Icons.lock;\n      default:\n        return Icons.help_outline;\n    }\n  }\n\n  Widget _buildInfoRow(String label, String value) {\n    return Padding(\n      padding: const EdgeInsets.symmetric(vertical: 4),\n      child: Row(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          SizedBox(\n            width: 80,\n            child: Text(\n              ",
    "suggested_key": "worldIconspublicWidget_buildinfocardstring",
    "context": "children: [\n              Expanded(child: _buildStatCard('Status', _getWorldStatusText(), Icons.circle)),\n              const SizedBox(width: 16),\n              Expanded(child: _buildStatCard('Typ', 'Standard', Icons.public)),\n            ],\n          ),\n        ],",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Card",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1868,
    "column": 29,
    "original": "Diese Welt ist archiviert",
    "suggested_key": "worldDieseWeltIst",
    "context": "Text(\n                      world.status == WorldStatus.closed\n                          ? 'Diese Welt ist derzeit geschlossen'\n                          : 'Diese Welt ist archiviert',\n                      style: TextStyle(\n                        color: Colors.grey[700],\n                        fontWeight: FontWeight.w500,",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 281,
    "column": 87,
    "original": " $actionTypeText.$validityText';\n    \n    // Je nach Status unterschiedliche Logik\n    switch (status) {\n      case 'not_logged_in':\n        if (requiresAction == 'register') {\n          // Mail ist unbekannt -> nur Register\n          actionText = 'Du musst dich mit der E-Mail-Adresse $inviteEmail registrieren.';\n          infoText = '$baseInfoText\\n\\n$actionText';\n          showRegisterButton = isInviteValid; // Nur bei gültigen Invites\n        }\n        break;\n        \n      case 'user_exists_not_logged_in':\n        if (requiresAction == 'login') {\n          // Mail ist bekannt, User nicht angemeldet -> nur Login\n          actionText = 'Dein Account mit $inviteEmail ist bereits registriert. Bitte melde dich an.';\n          infoText = '$baseInfoText\\n\\n$actionText';\n          showLoginButton = isInviteValid; // Nur bei gültigen Invites\n        }\n        break;\n        \n      case 'wrong_email':\n        if (requiresAction == 'logout_and_register') {\n          final currentUserEmail = userStatusData['currentUser']?['email'];\n          // User mit falscher Mail angemeldet -> Logout + Register\n          actionText = 'Diese Einladung ist für $inviteEmail bestimmt, aber du bist als $currentUserEmail angemeldet.';\n          infoText = '$baseInfoText\\n\\n$actionText\\n\\nBitte melde dich ab und registriere dich mit der richtigen E-Mail-Adresse.';\n          showLogoutButton = isInviteValid; // Nur bei gültigen Invites\n        }\n        break;\n        \n      case 'correct_email':\n        if (requiresAction == 'join_world') {\n          // User richtig angemeldet -> nur Accept Button (KEIN Auto-Accept!)\n          actionText = 'Du bist mit der richtigen E-Mail-Adresse angemeldet und kannst die Einladung jetzt annehmen.';\n          infoText = '$baseInfoText\\n\\n$actionText';\n          showAcceptButton = isInviteValid; // Nur bei gültigen Invites\n          \n          // Auto-Accept entfernt: User soll bewusst entscheiden!\n        }\n        break;\n        \n      default:\n        AppLogger.app.w('❌ Unbekannter User-Status: $status');\n        actionText = 'Unbekannter Status: $status';\n        infoText = '$baseInfoText\\n\\n$actionText';\n    }\n    \n    // Bei ungültigen Invites zusätzliche Info\n    if (!isInviteValid) {\n      infoText += '\\n\\n⚠️ Diese Einladung kann nicht mehr verwendet werden.';\n    }\n    \n    setState(() {\n      _infoMessage = infoText;\n      _inviteEmail = inviteEmail;\n      \n      // Button-Flags setzen\n      _showLoginButton = showLoginButton;\n      _showRegistrationButton = showRegisterButton; \n      _showLogoutButton = showLogoutButton;\n      _showAcceptInviteButton = showAcceptButton;\n      \n      // WICHTIG: Alte Fehlermeldung zurücksetzen!\n      _errorMessage = null;\n      \n      _isLoading = false;\n    });\n  }\n\n  // Neue Methode: World-Status für normale Navigation prüfen\n  Future<void> _checkWorldStatus() async {\n    if (_world == null) return;\n    \n    try {\n      // Prüfe ob User bereits Mitglied ist\n      _isJoined = await _worldService.isPlayerInWorld(_world!.id);\n      \n      // Prüfe Vorregistrierung\n      final preRegStatus = await _worldService.getPreRegistrationStatus(_world!.id);\n      _isPreRegistered = preRegStatus.isPreRegistered;\n      \n      AppLogger.app.d('✅ World-Status geprüft', error: {\n        'worldName': _world!.name,\n        'isJoined': _isJoined,\n        'isPreRegistered': _isPreRegistered\n      });\n    } catch (e) {\n      AppLogger.logError('Fehler beim Prüfen des World-Status', e);\n    }\n  }\n\n  // Neue Methode: Automatische Invite-Akzeptierung\n  Future<void> _autoAcceptInvite() async {\n    if (widget.inviteToken == null) return;\n    \n    try {\n      final result = await _worldService.acceptInvite(widget.inviteToken!);\n      \n      if (result != null) {\n        setState(() {\n          _isJoined = true;\n          _infoMessage = 'Willkommen in der Welt ",
    "suggested_key": "worldActiontypetextvaliditytextJeNach",
    "context": "}\n    }\n    \n    final baseInfoText = 'Du wurdest von $inviterText eingeladen, der Welt \"$worldName\" $actionTypeText.$validityText';\n    \n    // Je nach Status unterschiedliche Logik\n    switch (status) {",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "\""
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 408,
    "column": 80,
    "original": "!'),\n              backgroundColor: Colors.orange,\n              duration: const Duration(seconds: 3),\n            ),\n          );\n        }\n        return; // Erfolgreicher Exit\n      }\n      \n      // Andere Fehler normal behandeln\n      AppLogger.logError('Automatische Invite-Akzeptierung fehlgeschlagen', e);\n      // Fehler nicht als kritisch behandeln - User kann manuell beitreten\n      setState(() {\n        _infoMessage = 'Du kannst nun der Welt beitreten.';\n      });\n    }\n  }\n\n  Future<void> _joinWorld() async {\n    if (_world == null) return;\n\n    setState(() {\n      _isJoining = true;\n      _joinError = null;\n    });\n\n    try {\n      bool success = false;\n      \n      // **INVITE-TOKEN FLOW: Invite akzeptieren**\n      if (widget.inviteToken != null) {\n        AppLogger.app.i('🎫 Versuche Invite-Akzeptierung für World-Join');\n        final inviteResult = await _worldService.acceptInvite(widget.inviteToken!);\n        \n        if (inviteResult != null) {\n          success = true;\n          AppLogger.app.i('✅ Invite erfolgreich akzeptiert', error: {\n            'worldId': _world!.id,\n            'worldName': _world!.name\n          });\n        }\n      } else {\n        // **NORMALE NAVIGATION: Standard World-Join**\n        AppLogger.app.i('🌍 Versuche normalen World-Join');\n        success = await _worldService.joinWorld(_world!.id);\n      }\n      \n      if (success) {\n        setState(() {\n          _isJoined = true;\n        });\n        \n        if (mounted) {\n          final message = widget.inviteToken != null \n            ? 'Einladung akzeptiert! Willkommen in der Welt ",
    "suggested_key": "worldBackgroundcolorColorsorangeDuration",
    "context": "if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Du bist bereits Mitglied der Welt \"${_world?.name}\"!'),\n              backgroundColor: Colors.orange,\n              duration: const Duration(seconds: 3),\n            ),",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "\""
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 463,
    "column": 53,
    "original": " beigetreten!';\n            \n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text(message),\n              backgroundColor: Colors.green,\n              duration: const Duration(seconds: 3),\n            ),\n          );\n        }\n      } else {\n        setState(() {\n          _joinError = 'Beitritt fehlgeschlagen. Versuche es erneut.';\n        });\n      }\n    } catch (e) {\n      AppLogger.logError('World Join fehlgeschlagen', e, context: {\n        'worldId': _world?.id,\n        'worldName': _world?.name,\n        'hasInviteToken': widget.inviteToken != null,\n        'inviteToken': widget.inviteToken?.substring(0, 8)\n      });\n      \n      setState(() {\n        // Bessere Fehlermeldungen für verschiedene Szenarien\n        if (e.toString().contains('bereits akzeptiert')) {\n          _joinError = 'Diese Einladung wurde bereits akzeptiert.';\n          _isJoined = true; // User ist bereits Mitglied\n        } else if (e.toString().contains('nicht für deine E-Mail-Adresse')) {\n          _joinError = 'Diese Einladung ist nicht für deine E-Mail-Adresse bestimmt.';\n        } else if (e.toString().contains('abgelaufen')) {\n          _joinError = 'Diese Einladung ist abgelaufen.';\n        } else {\n          _joinError = 'Ein Fehler ist aufgetreten: ${e.toString().replaceAll('Exception: ', '')}';\n        }\n      });\n    } finally {\n      setState(() {\n        _isJoining = false;\n      });\n    }\n  }\n  \n  Future<void> _preRegisterWorld() async {\n    final world = _world;\n    if (world == null) return;\n\n    setState(() {\n      _isPreRegistering = true;\n      _joinError = null;\n    });\n\n    try {\n      final success = await _worldService.preRegisterWorldAuthenticated(world.id);\n      \n      if (success) {\n        setState(() {\n          _isPreRegistered = true;\n        });\n        \n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Erfolgreich für ${world.name} vorregistriert!'),\n              backgroundColor: Colors.green,\n            ),\n          );\n        }\n      } else {\n        setState(() {\n          _joinError = 'Fehler bei der Vorregistrierung';\n        });\n      }\n    } catch (e) {\n      setState(() {\n        _joinError = e.toString().replaceAll('Exception: ', '');\n      });\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isPreRegistering = false;\n        });\n      }\n    }\n  }\n  \n  Future<void> _cancelPreRegistration() async {\n    final world = _world;\n    if (world == null) return;\n\n    setState(() {\n      _isPreRegistering = true;\n      _joinError = null;\n    });\n\n    try {\n      final success = await _worldService.cancelPreRegistrationAuthenticated(world.id);\n      if (success) {\n        setState(() {\n          _isPreRegistered = false;\n        });\n        \n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Vorregistrierung für ${world.name} zurückgezogen.'),\n              backgroundColor: Colors.orange,\n            ),\n          );\n        }\n      } else {\n        setState(() {\n          _joinError = 'Fehler beim Zurückziehen der Vorregistrierung';\n        });\n      }\n    } catch (e) {\n      setState(() {\n        _joinError = e.toString().replaceAll('Exception: ', '');\n      });\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isPreRegistering = false;\n        });\n      }\n    }\n  }\n  \n  Future<void> _leaveWorld() async {\n    final world = _world;\n    if (world == null) return;\n    \n    // Bestätigungsdialog anzeigen\n    final confirmed = await showDialog<bool>(\n      context: context,\n      builder: (context) => AlertDialog(\n        title: const Text('Welt verlassen?'),\n        content: Text('Möchtest du die Welt ",
    "suggested_key": "worldBeigetretenScaffoldmessengerofcontextshowsnackbarSnackbar",
    "context": "if (mounted) {\n          final message = widget.inviteToken != null \n            ? 'Einladung akzeptiert! Willkommen in der Welt \"${_world!.name}\"!'\n            : 'Erfolgreich der Welt \"${_world!.name}\" beigetreten!';\n            \n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "\""
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 281,
    "column": 87,
    "original": " $actionTypeText.$validityText';\n    \n    // Je nach Status unterschiedliche Logik\n    switch (status) {\n      case 'not_logged_in':\n        if (requiresAction == 'register') {\n          // Mail ist unbekannt -> nur Register\n          actionText = 'Du musst dich mit der E-Mail-Adresse $inviteEmail registrieren.';\n          infoText = '$baseInfoText\\n\\n$actionText';\n          showRegisterButton = isInviteValid; // Nur bei gültigen Invites\n        }\n        break;\n        \n      case 'user_exists_not_logged_in':\n        if (requiresAction == 'login') {\n          // Mail ist bekannt, User nicht angemeldet -> nur Login\n          actionText = 'Dein Account mit $inviteEmail ist bereits registriert. Bitte melde dich an.';\n          infoText = '$baseInfoText\\n\\n$actionText';\n          showLoginButton = isInviteValid; // Nur bei gültigen Invites\n        }\n        break;\n        \n      case 'wrong_email':\n        if (requiresAction == 'logout_and_register') {\n          final currentUserEmail = userStatusData['currentUser']?['email'];\n          // User mit falscher Mail angemeldet -> Logout + Register\n          actionText = 'Diese Einladung ist für $inviteEmail bestimmt, aber du bist als $currentUserEmail angemeldet.';\n          infoText = '$baseInfoText\\n\\n$actionText\\n\\nBitte melde dich ab und registriere dich mit der richtigen E-Mail-Adresse.';\n          showLogoutButton = isInviteValid; // Nur bei gültigen Invites\n        }\n        break;\n        \n      case 'correct_email':\n        if (requiresAction == 'join_world') {\n          // User richtig angemeldet -> nur Accept Button (KEIN Auto-Accept!)\n          actionText = 'Du bist mit der richtigen E-Mail-Adresse angemeldet und kannst die Einladung jetzt annehmen.';\n          infoText = '$baseInfoText\\n\\n$actionText';\n          showAcceptButton = isInviteValid; // Nur bei gültigen Invites\n          \n          // Auto-Accept entfernt: User soll bewusst entscheiden!\n        }\n        break;\n        \n      default:\n        AppLogger.app.w('❌ Unbekannter User-Status: $status');\n        actionText = 'Unbekannter Status: $status';\n        infoText = '$baseInfoText\\n\\n$actionText';\n    }\n    \n    // Bei ungültigen Invites zusätzliche Info\n    if (!isInviteValid) {\n      infoText += '\\n\\n⚠️ Diese Einladung kann nicht mehr verwendet werden.';\n    }\n    \n    setState(() {\n      _infoMessage = infoText;\n      _inviteEmail = inviteEmail;\n      \n      // Button-Flags setzen\n      _showLoginButton = showLoginButton;\n      _showRegistrationButton = showRegisterButton; \n      _showLogoutButton = showLogoutButton;\n      _showAcceptInviteButton = showAcceptButton;\n      \n      // WICHTIG: Alte Fehlermeldung zurücksetzen!\n      _errorMessage = null;\n      \n      _isLoading = false;\n    });\n  }\n\n  // Neue Methode: World-Status für normale Navigation prüfen\n  Future<void> _checkWorldStatus() async {\n    if (_world == null) return;\n    \n    try {\n      // Prüfe ob User bereits Mitglied ist\n      _isJoined = await _worldService.isPlayerInWorld(_world!.id);\n      \n      // Prüfe Vorregistrierung\n      final preRegStatus = await _worldService.getPreRegistrationStatus(_world!.id);\n      _isPreRegistered = preRegStatus.isPreRegistered;\n      \n      AppLogger.app.d('✅ World-Status geprüft', error: {\n        'worldName': _world!.name,\n        'isJoined': _isJoined,\n        'isPreRegistered': _isPreRegistered\n      });\n    } catch (e) {\n      AppLogger.logError('Fehler beim Prüfen des World-Status', e);\n    }\n  }\n\n  // Neue Methode: Automatische Invite-Akzeptierung\n  Future<void> _autoAcceptInvite() async {\n    if (widget.inviteToken == null) return;\n    \n    try {\n      final result = await _worldService.acceptInvite(widget.inviteToken!);\n      \n      if (result != null) {\n        setState(() {\n          _isJoined = true;\n          _infoMessage = 'Willkommen in der Welt ",
    "suggested_key": "worldActiontypetextvaliditytextJeNach",
    "context": "}\n    }\n    \n    final baseInfoText = 'Du wurdest von $inviterText eingeladen, der Welt \"$worldName\" $actionTypeText.$validityText';\n    \n    // Je nach Status unterschiedliche Logik\n    switch (status) {",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "\""
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 384,
    "column": 66,
    "original": "! Das Invite wurde automatisch akzeptiert.';\n        });\n        \n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Erfolgreich der Welt ",
    "suggested_key": "worldDasInviteWurde",
    "context": "if (result != null) {\n        setState(() {\n          _isJoined = true;\n          _infoMessage = 'Willkommen in der Welt \"${_world?.name}\"! Das Invite wurde automatisch akzeptiert.';\n        });\n        \n        if (mounted) {",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "\""
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 408,
    "column": 80,
    "original": "!'),\n              backgroundColor: Colors.orange,\n              duration: const Duration(seconds: 3),\n            ),\n          );\n        }\n        return; // Erfolgreicher Exit\n      }\n      \n      // Andere Fehler normal behandeln\n      AppLogger.logError('Automatische Invite-Akzeptierung fehlgeschlagen', e);\n      // Fehler nicht als kritisch behandeln - User kann manuell beitreten\n      setState(() {\n        _infoMessage = 'Du kannst nun der Welt beitreten.';\n      });\n    }\n  }\n\n  Future<void> _joinWorld() async {\n    if (_world == null) return;\n\n    setState(() {\n      _isJoining = true;\n      _joinError = null;\n    });\n\n    try {\n      bool success = false;\n      \n      // **INVITE-TOKEN FLOW: Invite akzeptieren**\n      if (widget.inviteToken != null) {\n        AppLogger.app.i('🎫 Versuche Invite-Akzeptierung für World-Join');\n        final inviteResult = await _worldService.acceptInvite(widget.inviteToken!);\n        \n        if (inviteResult != null) {\n          success = true;\n          AppLogger.app.i('✅ Invite erfolgreich akzeptiert', error: {\n            'worldId': _world!.id,\n            'worldName': _world!.name\n          });\n        }\n      } else {\n        // **NORMALE NAVIGATION: Standard World-Join**\n        AppLogger.app.i('🌍 Versuche normalen World-Join');\n        success = await _worldService.joinWorld(_world!.id);\n      }\n      \n      if (success) {\n        setState(() {\n          _isJoined = true;\n        });\n        \n        if (mounted) {\n          final message = widget.inviteToken != null \n            ? 'Einladung akzeptiert! Willkommen in der Welt ",
    "suggested_key": "worldBackgroundcolorColorsorangeDuration",
    "context": "if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Du bist bereits Mitglied der Welt \"${_world?.name}\"!'),\n              backgroundColor: Colors.orange,\n              duration: const Duration(seconds: 3),\n            ),",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "\""
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 462,
    "column": 77,
    "original": "!'\n            : 'Erfolgreich der Welt ",
    "suggested_key": "worldErfolgreichDerWelt",
    "context": "if (mounted) {\n          final message = widget.inviteToken != null \n            ? 'Einladung akzeptiert! Willkommen in der Welt \"${_world!.name}\"!'\n            : 'Erfolgreich der Welt \"${_world!.name}\" beigetreten!';\n            \n          ScaffoldMessenger.of(context).showSnackBar(",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "\""
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 463,
    "column": 53,
    "original": " beigetreten!';\n            \n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text(message),\n              backgroundColor: Colors.green,\n              duration: const Duration(seconds: 3),\n            ),\n          );\n        }\n      } else {\n        setState(() {\n          _joinError = 'Beitritt fehlgeschlagen. Versuche es erneut.';\n        });\n      }\n    } catch (e) {\n      AppLogger.logError('World Join fehlgeschlagen', e, context: {\n        'worldId': _world?.id,\n        'worldName': _world?.name,\n        'hasInviteToken': widget.inviteToken != null,\n        'inviteToken': widget.inviteToken?.substring(0, 8)\n      });\n      \n      setState(() {\n        // Bessere Fehlermeldungen für verschiedene Szenarien\n        if (e.toString().contains('bereits akzeptiert')) {\n          _joinError = 'Diese Einladung wurde bereits akzeptiert.';\n          _isJoined = true; // User ist bereits Mitglied\n        } else if (e.toString().contains('nicht für deine E-Mail-Adresse')) {\n          _joinError = 'Diese Einladung ist nicht für deine E-Mail-Adresse bestimmt.';\n        } else if (e.toString().contains('abgelaufen')) {\n          _joinError = 'Diese Einladung ist abgelaufen.';\n        } else {\n          _joinError = 'Ein Fehler ist aufgetreten: ${e.toString().replaceAll('Exception: ', '')}';\n        }\n      });\n    } finally {\n      setState(() {\n        _isJoining = false;\n      });\n    }\n  }\n  \n  Future<void> _preRegisterWorld() async {\n    final world = _world;\n    if (world == null) return;\n\n    setState(() {\n      _isPreRegistering = true;\n      _joinError = null;\n    });\n\n    try {\n      final success = await _worldService.preRegisterWorldAuthenticated(world.id);\n      \n      if (success) {\n        setState(() {\n          _isPreRegistered = true;\n        });\n        \n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Erfolgreich für ${world.name} vorregistriert!'),\n              backgroundColor: Colors.green,\n            ),\n          );\n        }\n      } else {\n        setState(() {\n          _joinError = 'Fehler bei der Vorregistrierung';\n        });\n      }\n    } catch (e) {\n      setState(() {\n        _joinError = e.toString().replaceAll('Exception: ', '');\n      });\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isPreRegistering = false;\n        });\n      }\n    }\n  }\n  \n  Future<void> _cancelPreRegistration() async {\n    final world = _world;\n    if (world == null) return;\n\n    setState(() {\n      _isPreRegistering = true;\n      _joinError = null;\n    });\n\n    try {\n      final success = await _worldService.cancelPreRegistrationAuthenticated(world.id);\n      if (success) {\n        setState(() {\n          _isPreRegistered = false;\n        });\n        \n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Vorregistrierung für ${world.name} zurückgezogen.'),\n              backgroundColor: Colors.orange,\n            ),\n          );\n        }\n      } else {\n        setState(() {\n          _joinError = 'Fehler beim Zurückziehen der Vorregistrierung';\n        });\n      }\n    } catch (e) {\n      setState(() {\n        _joinError = e.toString().replaceAll('Exception: ', '');\n      });\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isPreRegistering = false;\n        });\n      }\n    }\n  }\n  \n  Future<void> _leaveWorld() async {\n    final world = _world;\n    if (world == null) return;\n    \n    // Bestätigungsdialog anzeigen\n    final confirmed = await showDialog<bool>(\n      context: context,\n      builder: (context) => AlertDialog(\n        title: const Text('Welt verlassen?'),\n        content: Text('Möchtest du die Welt ",
    "suggested_key": "worldBeigetretenScaffoldmessengerofcontextshowsnackbarSnackbar",
    "context": "if (mounted) {\n          final message = widget.inviteToken != null \n            ? 'Einladung akzeptiert! Willkommen in der Welt \"${_world!.name}\"!'\n            : 'Erfolgreich der Welt \"${_world!.name}\" beigetreten!';\n            \n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "\""
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 210,
    "column": 45,
    "original": "]);\n    \n    // Invite-Details extrahieren\n    final inviteData = tokenData[",
    "suggested_key": "worldInvitedetailsExtrahierenFinal",
    "context": "}\n    \n    // World aus Token-Daten laden\n    _world = World.fromJson(tokenData['world']);\n    \n    // Invite-Details extrahieren\n    final inviteData = tokenData['invite'];",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 242,
    "column": 55,
    "original": ";\n    final worldStatus = _world?.status ?? WorldStatus.upcoming;\n    final isUpcoming = worldStatus == WorldStatus.upcoming;\n    \n    // User-Status analysieren\n    final userStatusData = tokenData[",
    "suggested_key": "worldFinalWorldstatus_worldstatus",
    "context": "isInviteValid = !isExpired && !isAccepted;\n    \n    // World-Details\n    final worldName = _world?.name ?? 'Unbekannte Welt';\n    final worldStatus = _world?.status ?? WorldStatus.upcoming;\n    final isUpcoming = worldStatus == WorldStatus.upcoming;",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 281,
    "column": 26,
    "original": "Du wurdest von $inviterText eingeladen, der Welt \"$worldName\" $actionTypeText.$validityText",
    "suggested_key": "worldDuWurdestVon",
    "context": "}\n    }\n    \n    final baseInfoText = 'Du wurdest von $inviterText eingeladen, der Welt \"$worldName\" $actionTypeText.$validityText';\n    \n    // Je nach Status unterschiedliche Logik\n    switch (status) {",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 390,
    "column": 29,
    "original": "Erfolgreich der Welt \"${_world!.name}\" beigetreten!",
    "suggested_key": "worldErfolgreichDerWelt",
    "context": "if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Erfolgreich der Welt \"${_world!.name}\" beigetreten!'),\n              backgroundColor: Colors.green,\n              duration: const Duration(seconds: 3),\n            ),",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 408,
    "column": 82,
    "original": "),\n              backgroundColor: Colors.orange,\n              duration: const Duration(seconds: 3),\n            ),\n          );\n        }\n        return; // Erfolgreicher Exit\n      }\n      \n      // Andere Fehler normal behandeln\n      AppLogger.logError(",
    "suggested_key": "worldBackgroundcolorColorsorangeDuration",
    "context": "if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Du bist bereits Mitglied der Welt \"${_world?.name}\"!'),\n              backgroundColor: Colors.orange,\n              duration: const Duration(seconds: 3),\n            ),",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 439,
    "column": 71,
    "original": ");\n        final inviteResult = await _worldService.acceptInvite(widget.inviteToken!);\n        \n        if (inviteResult != null) {\n          success = true;\n          AppLogger.app.i(",
    "suggested_key": "worldFinalInviteresultAwait",
    "context": "// **INVITE-TOKEN FLOW: Invite akzeptieren**\n      if (widget.inviteToken != null) {\n        AppLogger.app.i('🎫 Versuche Invite-Akzeptierung für World-Join');\n        final inviteResult = await _worldService.acceptInvite(widget.inviteToken!);\n        \n        if (inviteResult != null) {",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 463,
    "column": 15,
    "original": "Erfolgreich der Welt \"${_world!.name}\" beigetreten!",
    "suggested_key": "worldErfolgreichDerWelt",
    "context": "if (mounted) {\n          final message = widget.inviteToken != null \n            ? 'Einladung akzeptiert! Willkommen in der Welt \"${_world!.name}\"!'\n            : 'Erfolgreich der Welt \"${_world!.name}\" beigetreten!';\n            \n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 526,
    "column": 29,
    "original": "Erfolgreich für ${world.name} vorregistriert!",
    "suggested_key": "worldErfolgreichFürWorldname",
    "context": "if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Erfolgreich für ${world.name} vorregistriert!'),\n              backgroundColor: Colors.green,\n            ),\n          );",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 568,
    "column": 29,
    "original": "Vorregistrierung für ${world.name} zurückgezogen.",
    "suggested_key": "worldVorregistrierungFürWorldname",
    "context": "if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Vorregistrierung für ${world.name} zurückgezogen.'),\n              backgroundColor: Colors.orange,\n            ),\n          );",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1111,
    "column": 45,
    "original": "Zurück zu den Welten",
    "suggested_key": "worldZurückZuDen",
    "context": "borderRadius: BorderRadius.circular(12),\n                            ),\n                          ),\n                          child: const Text('Zurück zu den Welten'),\n                        ),\n                      ),\n                    ],",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 281,
    "column": 87,
    "original": " $actionTypeText.$validityText';\n    \n    // Je nach Status unterschiedliche Logik\n    switch (status) {\n      case 'not_logged_in':\n        if (requiresAction == 'register') {\n          // Mail ist unbekannt -> nur Register\n          actionText = 'Du musst dich mit der E-Mail-Adresse $inviteEmail registrieren.';\n          infoText = '$baseInfoText\\n\\n$actionText';\n          showRegisterButton = isInviteValid; // Nur bei gültigen Invites\n        }\n        break;\n        \n      case 'user_exists_not_logged_in':\n        if (requiresAction == 'login') {\n          // Mail ist bekannt, User nicht angemeldet -> nur Login\n          actionText = 'Dein Account mit $inviteEmail ist bereits registriert. Bitte melde dich an.';\n          infoText = '$baseInfoText\\n\\n$actionText';\n          showLoginButton = isInviteValid; // Nur bei gültigen Invites\n        }\n        break;\n        \n      case 'wrong_email':\n        if (requiresAction == 'logout_and_register') {\n          final currentUserEmail = userStatusData['currentUser']?['email'];\n          // User mit falscher Mail angemeldet -> Logout + Register\n          actionText = 'Diese Einladung ist für $inviteEmail bestimmt, aber du bist als $currentUserEmail angemeldet.';\n          infoText = '$baseInfoText\\n\\n$actionText\\n\\nBitte melde dich ab und registriere dich mit der richtigen E-Mail-Adresse.';\n          showLogoutButton = isInviteValid; // Nur bei gültigen Invites\n        }\n        break;\n        \n      case 'correct_email':\n        if (requiresAction == 'join_world') {\n          // User richtig angemeldet -> nur Accept Button (KEIN Auto-Accept!)\n          actionText = 'Du bist mit der richtigen E-Mail-Adresse angemeldet und kannst die Einladung jetzt annehmen.';\n          infoText = '$baseInfoText\\n\\n$actionText';\n          showAcceptButton = isInviteValid; // Nur bei gültigen Invites\n          \n          // Auto-Accept entfernt: User soll bewusst entscheiden!\n        }\n        break;\n        \n      default:\n        AppLogger.app.w('❌ Unbekannter User-Status: $status');\n        actionText = 'Unbekannter Status: $status';\n        infoText = '$baseInfoText\\n\\n$actionText';\n    }\n    \n    // Bei ungültigen Invites zusätzliche Info\n    if (!isInviteValid) {\n      infoText += '\\n\\n⚠️ Diese Einladung kann nicht mehr verwendet werden.';\n    }\n    \n    setState(() {\n      _infoMessage = infoText;\n      _inviteEmail = inviteEmail;\n      \n      // Button-Flags setzen\n      _showLoginButton = showLoginButton;\n      _showRegistrationButton = showRegisterButton; \n      _showLogoutButton = showLogoutButton;\n      _showAcceptInviteButton = showAcceptButton;\n      \n      // WICHTIG: Alte Fehlermeldung zurücksetzen!\n      _errorMessage = null;\n      \n      _isLoading = false;\n    });\n  }\n\n  // Neue Methode: World-Status für normale Navigation prüfen\n  Future<void> _checkWorldStatus() async {\n    if (_world == null) return;\n    \n    try {\n      // Prüfe ob User bereits Mitglied ist\n      _isJoined = await _worldService.isPlayerInWorld(_world!.id);\n      \n      // Prüfe Vorregistrierung\n      final preRegStatus = await _worldService.getPreRegistrationStatus(_world!.id);\n      _isPreRegistered = preRegStatus.isPreRegistered;\n      \n      AppLogger.app.d('✅ World-Status geprüft', error: {\n        'worldName': _world!.name,\n        'isJoined': _isJoined,\n        'isPreRegistered': _isPreRegistered\n      });\n    } catch (e) {\n      AppLogger.logError('Fehler beim Prüfen des World-Status', e);\n    }\n  }\n\n  // Neue Methode: Automatische Invite-Akzeptierung\n  Future<void> _autoAcceptInvite() async {\n    if (widget.inviteToken == null) return;\n    \n    try {\n      final result = await _worldService.acceptInvite(widget.inviteToken!);\n      \n      if (result != null) {\n        setState(() {\n          _isJoined = true;\n          _infoMessage = 'Willkommen in der Welt ",
    "suggested_key": "worldActiontypetextvaliditytextJeNach",
    "context": "}\n    }\n    \n    final baseInfoText = 'Du wurdest von $inviterText eingeladen, der Welt \"$worldName\" $actionTypeText.$validityText';\n    \n    // Je nach Status unterschiedliche Logik\n    switch (status) {",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "\""
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 384,
    "column": 66,
    "original": "! Das Invite wurde automatisch akzeptiert.';\n        });\n        \n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Erfolgreich der Welt ",
    "suggested_key": "worldDasInviteWurde",
    "context": "if (result != null) {\n        setState(() {\n          _isJoined = true;\n          _infoMessage = 'Willkommen in der Welt \"${_world?.name}\"! Das Invite wurde automatisch akzeptiert.';\n        });\n        \n        if (mounted) {",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "\""
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 402,
    "column": 80,
    "original": "!';\n        });\n        \n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Du bist bereits Mitglied der Welt ",
    "suggested_key": "worldIfMountedScaffoldmessengerofcontextshowsnackbar",
    "context": "if (e.toString().contains('Invite bereits akzeptiert')) {\n        setState(() {\n          _isJoined = true;\n          _infoMessage = 'Du bist bereits Mitglied dieser Welt \"${_world?.name}\"!';\n        });\n        \n        if (mounted) {",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "\""
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 408,
    "column": 80,
    "original": "!'),\n              backgroundColor: Colors.orange,\n              duration: const Duration(seconds: 3),\n            ),\n          );\n        }\n        return; // Erfolgreicher Exit\n      }\n      \n      // Andere Fehler normal behandeln\n      AppLogger.logError('Automatische Invite-Akzeptierung fehlgeschlagen', e);\n      // Fehler nicht als kritisch behandeln - User kann manuell beitreten\n      setState(() {\n        _infoMessage = 'Du kannst nun der Welt beitreten.';\n      });\n    }\n  }\n\n  Future<void> _joinWorld() async {\n    if (_world == null) return;\n\n    setState(() {\n      _isJoining = true;\n      _joinError = null;\n    });\n\n    try {\n      bool success = false;\n      \n      // **INVITE-TOKEN FLOW: Invite akzeptieren**\n      if (widget.inviteToken != null) {\n        AppLogger.app.i('🎫 Versuche Invite-Akzeptierung für World-Join');\n        final inviteResult = await _worldService.acceptInvite(widget.inviteToken!);\n        \n        if (inviteResult != null) {\n          success = true;\n          AppLogger.app.i('✅ Invite erfolgreich akzeptiert', error: {\n            'worldId': _world!.id,\n            'worldName': _world!.name\n          });\n        }\n      } else {\n        // **NORMALE NAVIGATION: Standard World-Join**\n        AppLogger.app.i('🌍 Versuche normalen World-Join');\n        success = await _worldService.joinWorld(_world!.id);\n      }\n      \n      if (success) {\n        setState(() {\n          _isJoined = true;\n        });\n        \n        if (mounted) {\n          final message = widget.inviteToken != null \n            ? 'Einladung akzeptiert! Willkommen in der Welt ",
    "suggested_key": "worldBackgroundcolorColorsorangeDuration",
    "context": "if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Du bist bereits Mitglied der Welt \"${_world?.name}\"!'),\n              backgroundColor: Colors.orange,\n              duration: const Duration(seconds: 3),\n            ),",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "\""
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 462,
    "column": 77,
    "original": "!'\n            : 'Erfolgreich der Welt ",
    "suggested_key": "worldErfolgreichDerWelt",
    "context": "if (mounted) {\n          final message = widget.inviteToken != null \n            ? 'Einladung akzeptiert! Willkommen in der Welt \"${_world!.name}\"!'\n            : 'Erfolgreich der Welt \"${_world!.name}\" beigetreten!';\n            \n          ScaffoldMessenger.of(context).showSnackBar(",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "\""
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 463,
    "column": 53,
    "original": " beigetreten!';\n            \n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text(message),\n              backgroundColor: Colors.green,\n              duration: const Duration(seconds: 3),\n            ),\n          );\n        }\n      } else {\n        setState(() {\n          _joinError = 'Beitritt fehlgeschlagen. Versuche es erneut.';\n        });\n      }\n    } catch (e) {\n      AppLogger.logError('World Join fehlgeschlagen', e, context: {\n        'worldId': _world?.id,\n        'worldName': _world?.name,\n        'hasInviteToken': widget.inviteToken != null,\n        'inviteToken': widget.inviteToken?.substring(0, 8)\n      });\n      \n      setState(() {\n        // Bessere Fehlermeldungen für verschiedene Szenarien\n        if (e.toString().contains('bereits akzeptiert')) {\n          _joinError = 'Diese Einladung wurde bereits akzeptiert.';\n          _isJoined = true; // User ist bereits Mitglied\n        } else if (e.toString().contains('nicht für deine E-Mail-Adresse')) {\n          _joinError = 'Diese Einladung ist nicht für deine E-Mail-Adresse bestimmt.';\n        } else if (e.toString().contains('abgelaufen')) {\n          _joinError = 'Diese Einladung ist abgelaufen.';\n        } else {\n          _joinError = 'Ein Fehler ist aufgetreten: ${e.toString().replaceAll('Exception: ', '')}';\n        }\n      });\n    } finally {\n      setState(() {\n        _isJoining = false;\n      });\n    }\n  }\n  \n  Future<void> _preRegisterWorld() async {\n    final world = _world;\n    if (world == null) return;\n\n    setState(() {\n      _isPreRegistering = true;\n      _joinError = null;\n    });\n\n    try {\n      final success = await _worldService.preRegisterWorldAuthenticated(world.id);\n      \n      if (success) {\n        setState(() {\n          _isPreRegistered = true;\n        });\n        \n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Erfolgreich für ${world.name} vorregistriert!'),\n              backgroundColor: Colors.green,\n            ),\n          );\n        }\n      } else {\n        setState(() {\n          _joinError = 'Fehler bei der Vorregistrierung';\n        });\n      }\n    } catch (e) {\n      setState(() {\n        _joinError = e.toString().replaceAll('Exception: ', '');\n      });\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isPreRegistering = false;\n        });\n      }\n    }\n  }\n  \n  Future<void> _cancelPreRegistration() async {\n    final world = _world;\n    if (world == null) return;\n\n    setState(() {\n      _isPreRegistering = true;\n      _joinError = null;\n    });\n\n    try {\n      final success = await _worldService.cancelPreRegistrationAuthenticated(world.id);\n      if (success) {\n        setState(() {\n          _isPreRegistered = false;\n        });\n        \n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Vorregistrierung für ${world.name} zurückgezogen.'),\n              backgroundColor: Colors.orange,\n            ),\n          );\n        }\n      } else {\n        setState(() {\n          _joinError = 'Fehler beim Zurückziehen der Vorregistrierung';\n        });\n      }\n    } catch (e) {\n      setState(() {\n        _joinError = e.toString().replaceAll('Exception: ', '');\n      });\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isPreRegistering = false;\n        });\n      }\n    }\n  }\n  \n  Future<void> _leaveWorld() async {\n    final world = _world;\n    if (world == null) return;\n    \n    // Bestätigungsdialog anzeigen\n    final confirmed = await showDialog<bool>(\n      context: context,\n      builder: (context) => AlertDialog(\n        title: const Text('Welt verlassen?'),\n        content: Text('Möchtest du die Welt ",
    "suggested_key": "worldBeigetretenScaffoldmessengerofcontextshowsnackbarSnackbar",
    "context": "if (mounted) {\n          final message = widget.inviteToken != null \n            ? 'Einladung akzeptiert! Willkommen in der Welt \"${_world!.name}\"!'\n            : 'Erfolgreich der Welt \"${_world!.name}\" beigetreten!';\n            \n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "\""
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 242,
    "column": 39,
    "original": "Unbekannte Welt",
    "suggested_key": "worldUnbekannteWelt",
    "context": "isInviteValid = !isExpired && !isAccepted;\n    \n    // World-Details\n    final worldName = _world?.name ?? 'Unbekannte Welt';\n    final worldStatus = _world?.status ?? WorldStatus.upcoming;\n    final isUpcoming = worldStatus == WorldStatus.upcoming;",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 281,
    "column": 26,
    "original": "Du wurdest von $inviterText eingeladen, der Welt \"$worldName\" $actionTypeText.$validityText",
    "suggested_key": "worldDuWurdestVon",
    "context": "}\n    }\n    \n    final baseInfoText = 'Du wurdest von $inviterText eingeladen, der Welt \"$worldName\" $actionTypeText.$validityText';\n    \n    // Je nach Status unterschiedliche Logik\n    switch (status) {",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 384,
    "column": 26,
    "original": "Willkommen in der Welt \"${_world?.name}\"! Das Invite wurde automatisch akzeptiert.",
    "suggested_key": "worldWillkommenInDer",
    "context": "if (result != null) {\n        setState(() {\n          _isJoined = true;\n          _infoMessage = 'Willkommen in der Welt \"${_world?.name}\"! Das Invite wurde automatisch akzeptiert.';\n        });\n        \n        if (mounted) {",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 390,
    "column": 29,
    "original": "Erfolgreich der Welt \"${_world!.name}\" beigetreten!",
    "suggested_key": "worldErfolgreichDerWelt",
    "context": "if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Erfolgreich der Welt \"${_world!.name}\" beigetreten!'),\n              backgroundColor: Colors.green,\n              duration: const Duration(seconds: 3),\n            ),",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 402,
    "column": 26,
    "original": "Du bist bereits Mitglied dieser Welt \"${_world?.name}\"!",
    "suggested_key": "worldDuBistBereits",
    "context": "if (e.toString().contains('Invite bereits akzeptiert')) {\n        setState(() {\n          _isJoined = true;\n          _infoMessage = 'Du bist bereits Mitglied dieser Welt \"${_world?.name}\"!';\n        });\n        \n        if (mounted) {",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 408,
    "column": 29,
    "original": "Du bist bereits Mitglied der Welt \"${_world?.name}\"!",
    "suggested_key": "worldDuBistBereits",
    "context": "if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Du bist bereits Mitglied der Welt \"${_world?.name}\"!'),\n              backgroundColor: Colors.orange,\n              duration: const Duration(seconds: 3),\n            ),",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 462,
    "column": 15,
    "original": "Einladung akzeptiert! Willkommen in der Welt \"${_world!.name}\"!",
    "suggested_key": "worldEinladungAkzeptiertWillkommen",
    "context": "if (mounted) {\n          final message = widget.inviteToken != null \n            ? 'Einladung akzeptiert! Willkommen in der Welt \"${_world!.name}\"!'\n            : 'Erfolgreich der Welt \"${_world!.name}\" beigetreten!';\n            \n          ScaffoldMessenger.of(context).showSnackBar(",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 463,
    "column": 15,
    "original": "Erfolgreich der Welt \"${_world!.name}\" beigetreten!",
    "suggested_key": "worldErfolgreichDerWelt",
    "context": "if (mounted) {\n          final message = widget.inviteToken != null \n            ? 'Einladung akzeptiert! Willkommen in der Welt \"${_world!.name}\"!'\n            : 'Erfolgreich der Welt \"${_world!.name}\" beigetreten!';\n            \n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 655,
    "column": 60,
    "original": ": world.id.toString()});\n  }\n\n  // Welt-Status bestimmen\n  String _getWorldStatusText() {\n    final world = _world;\n    if (world == null) return ",
    "suggested_key": "worldWorldidtostringWeltstatusBestimmen",
    "context": "final world = _world;\n    if (world == null) return;\n    // Navigate directly to world dashboard for playing\n    context.goNamed('world-dashboard', pathParameters: {'id': world.id.toString()});\n  }\n\n  // Welt-Status bestimmen",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 661,
    "column": 41,
    "original": ";\n    return world.statusText;\n  }\n\n  // Welt-Status-Farbe\n  Color _getWorldStatusColor() {\n    final world = _world;\n    if (world == null) return Colors.grey;\n    \n    switch (world.status) {\n      case WorldStatus.upcoming:\n        return Colors.orange;\n      case WorldStatus.open:\n        return Colors.green;\n      case WorldStatus.running:\n        return Colors.blue;\n      case WorldStatus.closed:\n        return Colors.red;\n      case WorldStatus.archived:\n        return Colors.grey;\n    }\n  }\n\n  // Kann der Benutzer beitreten?\n  // Retry-Funktion\n  Future<void> _retry() async {\n    await _loadWorldData();\n  }\n\n  // Navigation zu Registration mit vorausgefüllter E-Mail\n  void _navigateToRegistration(String email) {\n    AppLogger.app.i(",
    "suggested_key": "worldReturnWorldstatustextWeltstatusfarbe",
    "context": "// Welt-Status bestimmen\n  String _getWorldStatusText() {\n    final world = _world;\n    if (world == null) return 'Unbekannt';\n    return world.statusText;\n  }",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1084,
    "column": 25,
    "original": "Welt nicht gefunden",
    "suggested_key": "worldWeltNichtGefunden",
    "context": "),\n                      const SizedBox(height: 24),\n                      Text(\n                        'Welt nicht gefunden',\n                        style: Theme.of(context).textTheme.headlineSmall?.copyWith(\n                          color: Colors.white,\n                          fontWeight: FontWeight.bold,",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1092,
    "column": 25,
    "original": "Die angeforderte Welt existiert nicht oder ist nicht verfügbar.",
    "suggested_key": "worldDieAngeforderteWelt",
    "context": "),\n                      const SizedBox(height: 16),\n                      Text(\n                        'Die angeforderte Welt existiert nicht oder ist nicht verfügbar.',\n                        style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                          color: Colors.grey[300],\n                        ),",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1111,
    "column": 45,
    "original": "Zurück zu den Welten",
    "suggested_key": "worldZurückZuDen",
    "context": "borderRadius: BorderRadius.circular(12),\n                            ),\n                          ),\n                          child: const Text('Zurück zu den Welten'),\n                        ),\n                      ),\n                    ],",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1170,
    "column": 49,
    "original": "Unbekannte Welt",
    "suggested_key": "worldUnbekannteWelt",
    "context": "crossAxisAlignment: CrossAxisAlignment.start,\n                            children: [\n                              Text(\n                                _world?.name ?? 'Unbekannte Welt',\n                                style: Theme.of(context).textTheme.headlineMedium?.copyWith(\n                                  color: Colors.white,\n                                  fontWeight: FontWeight.bold,",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1339,
    "column": 17,
    "original": "Über diese Welt",
    "suggested_key": "worldÜberDieseWelt",
    "context": "Icon(Icons.info_outline, color: AppTheme.primaryColor, size: 24),\n              SizedBox(width: 8),\n              Text(\n                'Über diese Welt',\n                style: TextStyle(\n                  color: Colors.white,\n                  fontSize: 18,",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1350,
    "column": 13,
    "original": "Dies ist eine spannende Welt voller Abenteuer und Herausforderungen. ",
    "suggested_key": "worldDiesIstEine",
    "context": "),\n          const SizedBox(height: 16),\n          Text(\n            'Dies ist eine spannende Welt voller Abenteuer und Herausforderungen. '\n            'Erkunde unbekannte Gebiete, schließe Allianzen und werde zur Legende!',\n            style: TextStyle(color: Colors.grey[300], height: 1.5),\n          ),",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1356,
    "column": 26,
    "original": "Welt-ID",
    "suggested_key": "worldWeltid",
    "context": "),\n          const SizedBox(height: 24),\n          _buildInfoCard('Kategorie', 'Standard', Icons.category),\n          _buildInfoCard('Welt-ID', '#${_world?.id ?? 'N/A'}', Icons.tag),\n          _buildInfoCard('Erstellt', _world?.createdAt.toString().split(' ')[0] ?? 'Unbekannt', Icons.access_time),\n        ],\n      ),",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1384,
    "column": 32,
    "original": "Respektiere andere Spieler",
    "suggested_key": "worldRespektiereAndereSpieler",
    "context": "],\n          ),\n          const SizedBox(height: 16),\n          _buildRuleItem('1.', 'Respektiere andere Spieler'),\n          _buildRuleItem('2.', 'Keine Cheats oder Exploits verwenden'),\n          _buildRuleItem('3.', 'Faire Spielweise ist Pflicht'),\n          _buildRuleItem('4.', 'Kommunikation nur im Spielchat'),",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1386,
    "column": 32,
    "original": "Faire Spielweise ist Pflicht",
    "suggested_key": "worldFaireSpielweiseIst",
    "context": "const SizedBox(height: 16),\n          _buildRuleItem('1.', 'Respektiere andere Spieler'),\n          _buildRuleItem('2.', 'Keine Cheats oder Exploits verwenden'),\n          _buildRuleItem('3.', 'Faire Spielweise ist Pflicht'),\n          _buildRuleItem('4.', 'Kommunikation nur im Spielchat'),\n          _buildRuleItem('5.', 'Entscheidungen der Spielleitung sind final'),\n        ],",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1387,
    "column": 32,
    "original": "Kommunikation nur im Spielchat",
    "suggested_key": "worldKommunikationNurIm",
    "context": "_buildRuleItem('1.', 'Respektiere andere Spieler'),\n          _buildRuleItem('2.', 'Keine Cheats oder Exploits verwenden'),\n          _buildRuleItem('3.', 'Faire Spielweise ist Pflicht'),\n          _buildRuleItem('4.', 'Kommunikation nur im Spielchat'),\n          _buildRuleItem('5.', 'Entscheidungen der Spielleitung sind final'),\n        ],\n      ),",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1405,
    "column": 17,
    "original": "Welt-Statistiken",
    "suggested_key": "worldWeltstatistiken",
    "context": "Icon(Icons.bar_chart, color: AppTheme.primaryColor, size: 24),\n              SizedBox(width: 8),\n              Text(\n                'Welt-Statistiken',\n                style: TextStyle(\n                  color: Colors.white,\n                  fontSize: 18,",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1867,
    "column": 29,
    "original": "Diese Welt ist derzeit geschlossen",
    "suggested_key": "worldDieseWeltIst",
    "context": "const SizedBox(height: 8),\n                    Text(\n                      world.status == WorldStatus.closed\n                          ? 'Diese Welt ist derzeit geschlossen'\n                          : 'Diese Welt ist archiviert',\n                      style: TextStyle(\n                        color: Colors.grey[700],",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1868,
    "column": 29,
    "original": "Diese Welt ist archiviert",
    "suggested_key": "worldDieseWeltIst",
    "context": "Text(\n                      world.status == WorldStatus.closed\n                          ? 'Diese Welt ist derzeit geschlossen'\n                          : 'Diese Welt ist archiviert',\n                      style: TextStyle(\n                        color: Colors.grey[700],\n                        fontWeight: FontWeight.w500,",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 20,
    "column": 24,
    "original": ";\n\nclass WorldListPage extends StatefulWidget {\n  const WorldListPage({super.key});\n\n  @override\n  State<WorldListPage> createState() => _WorldListPageState();\n}\n\nclass _WorldListPageState extends State<WorldListPage> {\n  // DI-ready: ServiceLocator verwenden\n  late final AuthService _authService;\n  late final WorldService _worldService;\n  late final InviteService _inviteService;\n  \n  List<World> _worlds = [];\n  List<World> _filteredWorlds = [];\n  bool _isLoading = true;\n  String? _error;\n  \n  // Track button states for each world\n  final Map<int, bool> _preRegisteredWorlds = {};\n  final Map<int, bool> _joinedWorlds = {};\n  \n  // Filter und Sortierung\n  WorldStatus? _statusFilter;\n  WorldCategory? _categoryFilter;\n  String _sortBy = ",
    "suggested_key": "worldClassWorldlistpageExtends",
    "context": "import './widgets/world_filters.dart';\n\n// ServiceLocator Import für DI\nimport '../../main.dart';\n\nclass WorldListPage extends StatefulWidget {\n  const WorldListPage({super.key});",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 47,
    "column": 64,
    "original": "\n  bool _sortAscending = true;\n  \n  // Spieleranzahl (Simulation - später vom Backend)\n  final Map<int, int> _playerCounts = {};\n\n  @override\n  void initState() {\n    super.initState();\n    \n    // DI-ready: ServiceLocator verwenden mit robuster Fehlerbehandlung\n    _initializeServices();\n    _loadWorlds();\n  }\n\n  void _initializeServices() {\n    try {\n      if (ServiceLocator.has<AuthService>()) {\n        _authService = ServiceLocator.get<AuthService>();\n      } else {\n        _authService = AuthService();\n      }\n      \n      if (ServiceLocator.has<WorldService>()) {\n        _worldService = ServiceLocator.get<WorldService>();\n      } else {\n        _worldService = WorldService();\n      }\n      \n      if (ServiceLocator.has<InviteService>()) {\n        _inviteService = ServiceLocator.get<InviteService>();\n      } else {\n        _inviteService = InviteService();\n      }\n    } catch (e) {\n      AppLogger.app.w(",
    "suggested_key": "worldBool_sortascendingTrue",
    "context": "// Filter und Sortierung\n  WorldStatus? _statusFilter;\n  WorldCategory? _categoryFilter;\n  String _sortBy = 'startDate'; // 'startDate', 'name', 'status'\n  bool _sortAscending = true;\n  \n  // Spieleranzahl (Simulation - später vom Backend)",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 310,
    "column": 27,
    "original": "Erfolgreich zu ${world.name} beigetreten!",
    "suggested_key": "worldErfolgreichZuWorldname",
    "context": "ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text('Erfolgreich zu ${world.name} beigetreten!'),\n            backgroundColor: Colors.green,\n          ),\n        );",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 315,
    "column": 25,
    "original": "world-dashboard",
    "suggested_key": "worldWorlddashboard",
    "context": "),\n        );\n        // Navigate to world dashboard\n        context.goNamed('world-dashboard', pathParameters: {'id': world.id.toString()});\n      }\n    } catch (e) {\n      if (mounted) {",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 315,
    "column": 64,
    "original": ": world.id.toString()});\n      }\n    } catch (e) {\n      if (mounted) {\n        // Prüfe ob es ein Token-Problem ist\n        if (e.toString().contains(",
    "suggested_key": "worldWorldidtostringCatchE",
    "context": "),\n        );\n        // Navigate to world dashboard\n        context.goNamed('world-dashboard', pathParameters: {'id': world.id.toString()});\n      }\n    } catch (e) {\n      if (mounted) {",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 350,
    "column": 73,
    "original": "),\n            backgroundColor: Colors.green,\n          ),\n        );\n      }\n    } catch (e) {\n      if (mounted) {\n        // Prüfe ob es ein Token-Problem ist\n        if (e.toString().contains(",
    "suggested_key": "worldBackgroundcolorColorsgreenCatch",
    "context": "ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text('Erfolgreich für ${world.name} vorregistriert!'),\n            backgroundColor: Colors.green,\n          ),\n        );",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 417,
    "column": 60,
    "original": "),\n            backgroundColor: Colors.orange,\n          ),\n        );\n      }\n    } catch (e) {\n      if (mounted) {\n        // Prüfe ob es ein Token-Problem ist\n        if (e.toString().contains(",
    "suggested_key": "worldBackgroundcolorColorsorangeCatch",
    "context": "ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text('Du hast ${world.name} verlassen.'),\n            backgroundColor: Colors.orange,\n          ),\n        );",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 456,
    "column": 77,
    "original": "),\n            backgroundColor: Colors.orange,\n          ),\n        );\n      }\n    } catch (e) {\n      if (mounted) {\n        // Prüfe ob es ein Token-Problem ist\n        if (e.toString().contains(",
    "suggested_key": "worldBackgroundcolorColorsorangeCatch",
    "context": "ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text('Vorregistrierung für ${world.name} zurückgezogen.'),\n            backgroundColor: Colors.orange,\n          ),\n        );",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 527,
    "column": 55,
    "original": ": world.id.toString()});\n  }\n\n  void _playWorld(World world) {\n    // Navigate directly to world dashboard for playing\n    context.goNamed(",
    "suggested_key": "worldWorldidtostringVoid_playworldworld",
    "context": "// Deep-Link zur World-Join-Page\n  void _navigateToWorldJoin(World world) {\n    context.goNamed('world-join', pathParameters: {'id': world.id.toString()});\n  }\n\n  void _playWorld(World world) {",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 532,
    "column": 60,
    "original": ": world.id.toString()});\n  }\n\n// Filter and sort methods removed - now using WorldFilters widget\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: BackgroundWidget(\n        child: Stack(\n          children: [\n            // Main content\n            Center(\n              child: SingleChildScrollView(\n                padding: const EdgeInsets.all(24.0),\n                child: Center(\n                  child: ConstrainedBox(\n                    constraints: const BoxConstraints(maxWidth: 800),\n                    child: Card(\n                      elevation: 12,\n                      color: const Color(0xFF1A1A1A), // Dunkle Karte\n                      shape: RoundedRectangleBorder(\n                        borderRadius: BorderRadius.circular(20),\n                        side: BorderSide(\n                          color: AppTheme.primaryColor.withOpacity(0.3),\n                          width: 1,\n                        ),\n                      ),\n                      child: Container(\n                        decoration: BoxDecoration(\n                          borderRadius: BorderRadius.circular(20),\n                          gradient: const LinearGradient(\n                            begin: Alignment.topLeft,\n                            end: Alignment.bottomRight,\n                            colors: [\n                              Color(0xFF1A1A1A),\n                              Color(0xFF2A2A2A),\n                            ],\n                          ),\n                        ),\n                        child: Padding(\n                          padding: const EdgeInsets.all(32.0),\n                          child: Column(\n                            mainAxisSize: MainAxisSize.min,\n                            children: [\n                              // Logo\n                              Container(\n                                width: 80,\n                                height: 80,\n                                decoration: BoxDecoration(\n                                  color: AppTheme.primaryColor.withOpacity(0.2),\n                                  borderRadius: BorderRadius.circular(20),\n                                  border: Border.all(\n                                    color: AppTheme.primaryColor.withOpacity(0.5),\n                                    width: 2,\n                                  ),\n                                ),\n                                child: const Icon(\n                                  Icons.public,\n                                  size: 40,\n                                  color: AppTheme.primaryColor,\n                                ),\n                              ),\n                              const SizedBox(height: 24),\n                              \n                              // Title\n                              Text(\n                                ",
    "suggested_key": "worldWorldidtostringFilterAnd",
    "context": "void _playWorld(World world) {\n    // Navigate directly to world dashboard for playing\n    context.goNamed('world-dashboard', pathParameters: {'id': world.id.toString()});\n  }\n\n// Filter and sort methods removed - now using WorldFilters widget",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 609,
    "column": 33,
    "original": "Wähle deine Welt aus",
    "suggested_key": "worldWähleDeineWelt",
    "context": "// Subtitle\n                              Text(\n                                'Wähle deine Welt aus',\n                                style: Theme.of(context).textTheme.headlineMedium?.copyWith(\n                                  color: Colors.grey[300],\n                                ),",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 47,
    "column": 64,
    "original": "\n  bool _sortAscending = true;\n  \n  // Spieleranzahl (Simulation - später vom Backend)\n  final Map<int, int> _playerCounts = {};\n\n  @override\n  void initState() {\n    super.initState();\n    \n    // DI-ready: ServiceLocator verwenden mit robuster Fehlerbehandlung\n    _initializeServices();\n    _loadWorlds();\n  }\n\n  void _initializeServices() {\n    try {\n      if (ServiceLocator.has<AuthService>()) {\n        _authService = ServiceLocator.get<AuthService>();\n      } else {\n        _authService = AuthService();\n      }\n      \n      if (ServiceLocator.has<WorldService>()) {\n        _worldService = ServiceLocator.get<WorldService>();\n      } else {\n        _worldService = WorldService();\n      }\n      \n      if (ServiceLocator.has<InviteService>()) {\n        _inviteService = ServiceLocator.get<InviteService>();\n      } else {\n        _inviteService = InviteService();\n      }\n    } catch (e) {\n      AppLogger.app.w(",
    "suggested_key": "worldBool_sortascendingTrue",
    "context": "// Filter und Sortierung\n  WorldStatus? _statusFilter;\n  WorldCategory? _categoryFilter;\n  String _sortBy = 'startDate'; // 'startDate', 'name', 'status'\n  bool _sortAscending = true;\n  \n  // Spieleranzahl (Simulation - später vom Backend)",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 310,
    "column": 27,
    "original": "Erfolgreich zu ${world.name} beigetreten!",
    "suggested_key": "worldErfolgreichZuWorldname",
    "context": "ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text('Erfolgreich zu ${world.name} beigetreten!'),\n            backgroundColor: Colors.green,\n          ),\n        );",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 315,
    "column": 64,
    "original": ": world.id.toString()});\n      }\n    } catch (e) {\n      if (mounted) {\n        // Prüfe ob es ein Token-Problem ist\n        if (e.toString().contains(",
    "suggested_key": "worldWorldidtostringCatchE",
    "context": "),\n        );\n        // Navigate to world dashboard\n        context.goNamed('world-dashboard', pathParameters: {'id': world.id.toString()});\n      }\n    } catch (e) {\n      if (mounted) {",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 350,
    "column": 27,
    "original": "Erfolgreich für ${world.name} vorregistriert!",
    "suggested_key": "worldErfolgreichFürWorldname",
    "context": "ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text('Erfolgreich für ${world.name} vorregistriert!'),\n            backgroundColor: Colors.green,\n          ),\n        );",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 417,
    "column": 60,
    "original": "),\n            backgroundColor: Colors.orange,\n          ),\n        );\n      }\n    } catch (e) {\n      if (mounted) {\n        // Prüfe ob es ein Token-Problem ist\n        if (e.toString().contains(",
    "suggested_key": "worldBackgroundcolorColorsorangeCatch",
    "context": "ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text('Du hast ${world.name} verlassen.'),\n            backgroundColor: Colors.orange,\n          ),\n        );",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 456,
    "column": 27,
    "original": "Vorregistrierung für ${world.name} zurückgezogen.",
    "suggested_key": "worldVorregistrierungFürWorldname",
    "context": "ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text('Vorregistrierung für ${world.name} zurückgezogen.'),\n            backgroundColor: Colors.orange,\n          ),\n        );",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 47,
    "column": 64,
    "original": "\n  bool _sortAscending = true;\n  \n  // Spieleranzahl (Simulation - später vom Backend)\n  final Map<int, int> _playerCounts = {};\n\n  @override\n  void initState() {\n    super.initState();\n    \n    // DI-ready: ServiceLocator verwenden mit robuster Fehlerbehandlung\n    _initializeServices();\n    _loadWorlds();\n  }\n\n  void _initializeServices() {\n    try {\n      if (ServiceLocator.has<AuthService>()) {\n        _authService = ServiceLocator.get<AuthService>();\n      } else {\n        _authService = AuthService();\n      }\n      \n      if (ServiceLocator.has<WorldService>()) {\n        _worldService = ServiceLocator.get<WorldService>();\n      } else {\n        _worldService = WorldService();\n      }\n      \n      if (ServiceLocator.has<InviteService>()) {\n        _inviteService = ServiceLocator.get<InviteService>();\n      } else {\n        _inviteService = InviteService();\n      }\n    } catch (e) {\n      AppLogger.app.w(",
    "suggested_key": "worldBool_sortascendingTrue",
    "context": "// Filter und Sortierung\n  WorldStatus? _statusFilter;\n  WorldCategory? _categoryFilter;\n  String _sortBy = 'startDate'; // 'startDate', 'name', 'status'\n  bool _sortAscending = true;\n  \n  // Spieleranzahl (Simulation - später vom Backend)",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 609,
    "column": 33,
    "original": "Wähle deine Welt aus",
    "suggested_key": "worldWähleDeineWelt",
    "context": "// Subtitle\n                              Text(\n                                'Wähle deine Welt aus',\n                                style: Theme.of(context).textTheme.headlineMedium?.copyWith(\n                                  color: Colors.grey[300],\n                                ),",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 723,
    "column": 41,
    "original": "Keine Welten gefunden",
    "suggested_key": "worldKeineWeltenGefunden",
    "context": "),\n                                      const SizedBox(height: 16),\n                                      Text(\n                                        'Keine Welten gefunden',\n                                        style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                                          color: Colors.grey[300],\n                                        ),",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\invite_dialog.dart",
    "line": 58,
    "column": 9,
    "original": "Einladung für ${widget.worldName}",
    "suggested_key": "worldEinladungFürWidgetworldname",
    "context": "),\n      ),\n      title: Text(\n        'Einladung für ${widget.worldName}',\n        style: const TextStyle(\n          color: Colors.white,\n          fontWeight: FontWeight.bold,",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: AlertDialog",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\pre_register_dialog.dart",
    "line": 90,
    "column": 15,
    "original": "Geben Sie Ihre E-Mail-Adresse ein, um sich für diese Welt vorzuregistrieren:",
    "suggested_key": "worldGebenSieIhre",
    "context": "mainAxisSize: MainAxisSize.min,\n          children: [\n            Text(\n              'Geben Sie Ihre E-Mail-Adresse ein, um sich für diese Welt vorzuregistrieren:',\n              style: TextStyle(\n                color: Colors.grey[300],\n              ),",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\pre_register_dialog.dart",
    "line": 78,
    "column": 9,
    "original": "Vorregistrierung für ${widget.worldName}",
    "suggested_key": "worldVorregistrierungFürWidgetworldname",
    "context": "),\n      ),\n      title: Text(\n        'Vorregistrierung für ${widget.worldName}',\n        style: const TextStyle(\n          color: Colors.white,\n          fontWeight: FontWeight.bold,",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: AlertDialog",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\pre_register_dialog.dart",
    "line": 90,
    "column": 15,
    "original": "Geben Sie Ihre E-Mail-Adresse ein, um sich für diese Welt vorzuregistrieren:",
    "suggested_key": "worldGebenSieIhre",
    "context": "mainAxisSize: MainAxisSize.min,\n          children: [\n            Text(\n              'Geben Sie Ihre E-Mail-Adresse ein, um sich für diese Welt vorzuregistrieren:',\n              style: TextStyle(\n                color: Colors.grey[300],\n              ),",
    "category": "world",
    "confidence": 1.0,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 151,
    "column": 35,
    "original": ");\n      return parts.length == 3;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  // Token-Ablaufzeit extrahieren\n  DateTime? _getTokenExpiration(String token) {\n    try {\n      final parts = token.split(",
    "suggested_key": "formReturnPartslength3",
    "context": "// JWT-Token Format validieren\n  bool _isValidJWT(String token) {\n    try {\n      final parts = token.split('.');\n      return parts.length == 3;\n    } catch (e) {\n      return false;",
    "category": "form",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\forgot_password_page.dart",
    "line": 199,
    "column": 61,
    "original": ",\n                                  labelStyle: TextStyle(color: Colors.grey[400]),\n                                  prefixIcon: const Icon(Icons.email, color: AppTheme.primaryColor),\n                                  filled: true,\n                                  fillColor: const Color(0xFF2D2D2D),\n                                  border: OutlineInputBorder(\n                                    borderRadius: BorderRadius.circular(12),\n                                    borderSide: BorderSide(color: Colors.grey[600]!),\n                                  ),\n                                  enabledBorder: OutlineInputBorder(\n                                    borderRadius: BorderRadius.circular(12),\n                                    borderSide: BorderSide(color: Colors.grey[600]!),\n                                  ),\n                                  focusedBorder: OutlineInputBorder(\n                                    borderRadius: BorderRadius.circular(12),\n                                    borderSide: const BorderSide(color: AppTheme.primaryColor, width: 2),\n                                  ),\n                                  errorBorder: OutlineInputBorder(\n                                    borderRadius: BorderRadius.circular(12),\n                                    borderSide: BorderSide(color: Colors.red[400]!),\n                                  ),\n                                  focusedErrorBorder: OutlineInputBorder(\n                                    borderRadius: BorderRadius.circular(12),\n                                    borderSide: BorderSide(color: Colors.red[400]!, width: 2),\n                                  ),\n                                ),\n                                validator: (value) {\n                                  if (value == null || value.trim().isEmpty) {\n                                    return ",
    "suggested_key": "formLabelstyleTextstylecolorColorsgrey400",
    "context": "textInputAction: TextInputAction.done,\n                                onFieldSubmitted: (_) => _isLoading ? null : _requestPasswordReset(),\n                                decoration: InputDecoration(\n                                  labelText: 'E-Mail-Adresse',\n                                  labelStyle: TextStyle(color: Colors.grey[400]),\n                                  prefixIcon: const Icon(Icons.email, color: AppTheme.primaryColor),\n                                  filled: true,",
    "category": "form",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\forgot_password_page.dart",
    "line": 227,
    "column": 44,
    "original": "Bitte gib deine E-Mail-Adresse ein",
    "suggested_key": "formBitteGibDeine",
    "context": "),\n                                validator: (value) {\n                                  if (value == null || value.trim().isEmpty) {\n                                    return 'Bitte gib deine E-Mail-Adresse ein';\n                                  }\n                                  if (!_emailRegex.hasMatch(value.trim())) {\n                                    return 'Bitte gib eine gültige E-Mail-Adresse ein';",
    "category": "form",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 257,
    "column": 63,
    "original": ",\n                                      labelStyle: TextStyle(color: Colors.grey[400]),\n                                      prefixIcon: const Icon(Icons.person, color: AppTheme.primaryColor),\n                                      filled: true,\n                                      fillColor: const Color(0xFF2D2D2D),\n                                      border: OutlineInputBorder(\n                                        borderRadius: BorderRadius.circular(12),\n                                        borderSide: BorderSide(color: Colors.grey[600]!),\n                                      ),\n                                      enabledBorder: OutlineInputBorder(\n                                        borderRadius: BorderRadius.circular(12),\n                                        borderSide: BorderSide(color: Colors.grey[600]!),\n                                      ),\n                                      focusedBorder: OutlineInputBorder(\n                                        borderRadius: BorderRadius.circular(12),\n                                        borderSide: const BorderSide(color: AppTheme.primaryColor, width: 2),\n                                      ),\n                                      errorBorder: OutlineInputBorder(\n                                        borderRadius: BorderRadius.circular(12),\n                                        borderSide: BorderSide(color: Colors.red[400]!),\n                                      ),\n                                      focusedErrorBorder: OutlineInputBorder(\n                                        borderRadius: BorderRadius.circular(12),\n                                        borderSide: BorderSide(color: Colors.red[400]!, width: 2),\n                                      ),\n                                    ),\n                                    validator: (value) {\n                                      if (value == null || value.trim().isEmpty) {\n                                        return ",
    "suggested_key": "formLabelstyleTextstylecolorColorsgrey400",
    "context": "}\n                                    },\n                                    decoration: InputDecoration(\n                                      labelText: 'Benutzername',\n                                      labelStyle: TextStyle(color: Colors.grey[400]),\n                                      prefixIcon: const Icon(Icons.person, color: AppTheme.primaryColor),\n                                      filled: true,",
    "category": "form",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 285,
    "column": 48,
    "original": "Bitte gib deinen Benutzernamen ein",
    "suggested_key": "formBitteGibDeinen",
    "context": "),\n                                    validator: (value) {\n                                      if (value == null || value.trim().isEmpty) {\n                                        return 'Bitte gib deinen Benutzernamen ein';\n                                      }\n                                      if (value.trim().length < 3) {\n                                        return 'Benutzername muss mindestens 3 Zeichen lang sein';",
    "category": "form",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 350,
    "column": 48,
    "original": "Bitte gib dein Passwort ein",
    "suggested_key": "formBitteGibDein",
    "context": "),\n                                    validator: (value) {\n                                      if (value == null || value.isEmpty) {\n                                        return 'Bitte gib dein Passwort ein';\n                                      }\n                                      if (_hasInteractedWithPassword && value.length < 6) {\n                                        return 'Passwort muss mindestens 6 Zeichen lang sein';",
    "category": "form",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 276,
    "column": 57,
    "original": ",\n                                labelStyle: TextStyle(color: Colors.grey[400]),\n                                prefixIcon: const Icon(Icons.person, color: AppTheme.primaryColor),\n                                filled: true,\n                                fillColor: const Color(0xFF2D2D2D),\n                                border: OutlineInputBorder(\n                                  borderRadius: BorderRadius.circular(12),\n                                  borderSide: BorderSide(color: Colors.grey[600]!),\n                                ),\n                                enabledBorder: OutlineInputBorder(\n                                  borderRadius: BorderRadius.circular(12),\n                                  borderSide: BorderSide(color: Colors.grey[600]!),\n                                ),\n                                focusedBorder: OutlineInputBorder(\n                                  borderRadius: BorderRadius.circular(12),\n                                  borderSide: const BorderSide(color: AppTheme.primaryColor, width: 2),\n                                ),\n                                errorBorder: OutlineInputBorder(\n                                  borderRadius: BorderRadius.circular(12),\n                                  borderSide: BorderSide(color: Colors.red[400]!),\n                                ),\n                                focusedErrorBorder: OutlineInputBorder(\n                                  borderRadius: BorderRadius.circular(12),\n                                  borderSide: BorderSide(color: Colors.red[400]!, width: 2),\n                                ),\n                              ),\n                              validator: (value) {\n                                if (value == null || value.trim().isEmpty) {\n                                  return ",
    "suggested_key": "formLabelstyleTextstylecolorColorsgrey400",
    "context": "controller: _usernameController,\n                              style: const TextStyle(color: Colors.white),\n                              decoration: InputDecoration(\n                                labelText: 'Benutzername',\n                                labelStyle: TextStyle(color: Colors.grey[400]),\n                                prefixIcon: const Icon(Icons.person, color: AppTheme.primaryColor),\n                                filled: true,",
    "category": "form",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 323,
    "column": 51,
    "original": ",\n                                labelStyle: TextStyle(color: Colors.grey[400]),\n                                prefixIcon: const Icon(Icons.email, color: AppTheme.primaryColor),\n                                filled: true,\n                                fillColor: const Color(0xFF2D2D2D),\n                                border: OutlineInputBorder(\n                                  borderRadius: BorderRadius.circular(12),\n                                  borderSide: BorderSide(color: Colors.grey[600]!),\n                                ),\n                                enabledBorder: OutlineInputBorder(\n                                  borderRadius: BorderRadius.circular(12),\n                                  borderSide: BorderSide(color: Colors.grey[600]!),\n                                ),\n                                focusedBorder: OutlineInputBorder(\n                                  borderRadius: BorderRadius.circular(12),\n                                  borderSide: const BorderSide(color: AppTheme.primaryColor, width: 2),\n                                ),\n                                errorBorder: OutlineInputBorder(\n                                  borderRadius: BorderRadius.circular(12),\n                                  borderSide: BorderSide(color: Colors.red[400]!),\n                                ),\n                                focusedErrorBorder: OutlineInputBorder(\n                                  borderRadius: BorderRadius.circular(12),\n                                  borderSide: BorderSide(color: Colors.red[400]!, width: 2),\n                                ),\n                              ),\n                              validator: (value) {\n                                if (value == null || value.trim().isEmpty) {\n                                  return ",
    "suggested_key": "formLabelstyleTextstylecolorColorsgrey400",
    "context": "controller: _emailController,\n                              style: const TextStyle(color: Colors.white),\n                              decoration: InputDecoration(\n                                labelText: 'E-Mail',\n                                labelStyle: TextStyle(color: Colors.grey[400]),\n                                prefixIcon: const Icon(Icons.email, color: AppTheme.primaryColor),\n                                filled: true,",
    "category": "form",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 288,
    "column": 46,
    "original": "Bitte gib ein neues Passwort ein",
    "suggested_key": "formBitteGibEin",
    "context": "),\n                                  validator: (value) {\n                                    if (value == null || value.isEmpty) {\n                                      return 'Bitte gib ein neues Passwort ein';\n                                    }\n                                    if (value.length < 6) {\n                                      return 'Passwort muss mindestens 6 Zeichen lang sein';",
    "category": "form",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 358,
    "column": 46,
    "original": "Die Passwörter stimmen nicht überein",
    "suggested_key": "formDiePasswörterStimmen",
    "context": "return 'Bitte bestätige dein neues Passwort';\n                                    }\n                                    if (value != _passwordController.text) {\n                                      return 'Die Passwörter stimmen nicht überein';\n                                    }\n                                    return null;\n                                  },",
    "category": "form",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 388,
    "column": 57,
    "original": "Keine Leerzeichen",
    "suggested_key": "formKeineLeerzeichen",
    "context": "const SizedBox(height: 8),\n                                      _buildRequirement('Mindestens 6 Zeichen', \n                                        _passwordController.text.length >= 6),\n                                      _buildRequirement('Keine Leerzeichen', \n                                        !_passwordController.text.contains(' ')),\n                                      _buildRequirement('Passwörter stimmen überein', \n                                        _passwordController.text.isNotEmpty &&",
    "category": "form",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 390,
    "column": 57,
    "original": "Passwörter stimmen überein",
    "suggested_key": "formPasswörterStimmenÜberein",
    "context": "_passwordController.text.length >= 6),\n                                      _buildRequirement('Keine Leerzeichen', \n                                        !_passwordController.text.contains(' ')),\n                                      _buildRequirement('Passwörter stimmen überein', \n                                        _passwordController.text.isNotEmpty && \n                                        _passwordController.text == _confirmPasswordController.text),\n                                    ],",
    "category": "form",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 288,
    "column": 46,
    "original": "Bitte gib ein neues Passwort ein",
    "suggested_key": "formBitteGibEin",
    "context": "),\n                                  validator: (value) {\n                                    if (value == null || value.isEmpty) {\n                                      return 'Bitte gib ein neues Passwort ein';\n                                    }\n                                    if (value.length < 6) {\n                                      return 'Passwort muss mindestens 6 Zeichen lang sein';",
    "category": "form",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 355,
    "column": 46,
    "original": "Bitte bestätige dein neues Passwort",
    "suggested_key": "formBitteBestätigeDein",
    "context": "),\n                                  validator: (value) {\n                                    if (value == null || value.isEmpty) {\n                                      return 'Bitte bestätige dein neues Passwort';\n                                    }\n                                    if (value != _passwordController.text) {\n                                      return 'Die Passwörter stimmen nicht überein';",
    "category": "form",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 390,
    "column": 84,
    "original": ", \n                                        _passwordController.text.isNotEmpty && \n                                        _passwordController.text == _confirmPasswordController.text),\n                                    ],\n                                  ),\n                                ),\n                                const SizedBox(height: 16),\n                              ],\n                              \n                              // Error message\n                              if (_errorMessage != null)\n                                Container(\n                                  width: double.infinity,\n                                  padding: const EdgeInsets.all(12),\n                                  margin: const EdgeInsets.only(bottom: 16),\n                                  decoration: BoxDecoration(\n                                    color: Colors.red[900]!.withOpacity(0.3),\n                                    borderRadius: BorderRadius.circular(8),\n                                    border: Border.all(color: Colors.red[400]!.withOpacity(0.5)),\n                                  ),\n                                  child: Row(\n                                    children: [\n                                      Icon(Icons.error_outline, color: Colors.red[400], size: 20),\n                                      const SizedBox(width: 8),\n                                      Expanded(\n                                        child: Text(\n                                          _errorMessage!,\n                                          style: TextStyle(color: Colors.red[200], fontSize: 14),\n                                        ),\n                                      ),\n                                    ],\n                                  ),\n                                ),\n                              \n                              // Submit button\n                              if (!_isSuccess)\n                                SizedBox(\n                                  width: double.infinity,\n                                  height: 56,\n                                  child: ElevatedButton(\n                                    onPressed: _isLoading ? null : _resetPassword,\n                                    style: ElevatedButton.styleFrom(\n                                      backgroundColor: AppTheme.primaryColor,\n                                      foregroundColor: Colors.white,\n                                      shape: RoundedRectangleBorder(\n                                        borderRadius: BorderRadius.circular(12),\n                                      ),\n                                      elevation: 8,\n                                      shadowColor: AppTheme.primaryColor.withOpacity(0.5),\n                                    ),\n                                    child: _isLoading\n                                        ? const SizedBox(\n                                            height: 20,\n                                            width: 20,\n                                            child: CircularProgressIndicator(\n                                              strokeWidth: 2,\n                                              valueColor: AlwaysStoppedAnimation<Color>(Colors.white),\n                                            ),\n                                          )\n                                        : const Text(\n                                            ",
    "suggested_key": "form_passwordcontrollertextisnotempty_passwordcontrollertext_confirmpasswordcontrollertext",
    "context": "_passwordController.text.length >= 6),\n                                      _buildRequirement('Keine Leerzeichen', \n                                        !_passwordController.text.contains(' ')),\n                                      _buildRequirement('Passwörter stimmen überein', \n                                        _passwordController.text.isNotEmpty && \n                                        _passwordController.text == _confirmPasswordController.text),\n                                    ],",
    "category": "form",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 8,
    "column": 35,
    "original": ";\n\nclass WorldListController extends ChangeNotifier {\n  final WorldService _worldService;\n  final InviteService _inviteService;\n\n  // State\n  List<World> _worlds = [];\n  List<World> _filteredWorlds = [];\n  final Map<int, int> _playerCounts = {};\n  final Map<int, bool> _preRegisteredWorlds = {};\n  final Map<int, bool> _joinedWorlds = {};\n  bool _isLoading = false;\n  String? _error;\n\n  // Filters & Sorting\n  WorldStatus? _statusFilter;\n  WorldCategory? _categoryFilter;\n  String _sortBy = ",
    "suggested_key": "formClassWorldlistcontrollerExtends",
    "context": "import '../../../core/services/world_service.dart';\nimport '../../../core/services/auth_service.dart';\nimport '../../../core/services/invite_service.dart';\nimport '../widgets/world_card.dart';\n\nclass WorldListController extends ChangeNotifier {\n  final WorldService _worldService;",
    "category": "form",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1007,
    "column": 41,
    "original": "Keine Information verfügbar",
    "suggested_key": "formKeineInformationVerfügbar",
    "context": "),\n                      const SizedBox(height: 16),\n                      Text(\n                        _infoMessage ?? 'Keine Information verfügbar',\n                        style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                          color: Colors.grey[300],\n                        ),",
    "category": "form",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1007,
    "column": 69,
    "original": ",\n                        style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                          color: Colors.grey[300],\n                        ),\n                        textAlign: TextAlign.center,\n                      ),\n                      const SizedBox(height: 32),\n                      \n                      // **NEUE INTELLIGENTE BUTTONS**\n                      _buildActionButtons(),\n                      \n                      // **INVITE-FLOWS: Kein \"Zurück\"-Link (User kommt von externem Link)**\n                      if (widget.inviteToken == null) ...[\n                        const SizedBox(height: 16),\n                        TextButton(\n                          onPressed: () => context.goNamed(",
    "suggested_key": "formStyleThemeofcontexttextthemebodylargecopywithColor",
    "context": "),\n                      const SizedBox(height: 16),\n                      Text(\n                        _infoMessage ?? 'Keine Information verfügbar',\n                        style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                          color: Colors.grey[300],\n                        ),",
    "category": "form",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\invite_dialog.dart",
    "line": 82,
    "column": 43,
    "original": ",\n                labelStyle: TextStyle(color: Colors.grey[400]),\n                prefixIcon: const Icon(Icons.email, color: AppTheme.primaryColor),\n                filled: true,\n                fillColor: const Color(0xFF2D2D2D),\n                border: OutlineInputBorder(\n                  borderRadius: BorderRadius.circular(12),\n                  borderSide: BorderSide(color: Colors.grey[600]!),\n                ),\n                enabledBorder: OutlineInputBorder(\n                  borderRadius: BorderRadius.circular(12),\n                  borderSide: BorderSide(color: Colors.grey[600]!),\n                ),\n                focusedBorder: OutlineInputBorder(\n                  borderRadius: BorderRadius.circular(12),\n                  borderSide: const BorderSide(color: AppTheme.primaryColor),\n                ),\n                errorBorder: OutlineInputBorder(\n                  borderRadius: BorderRadius.circular(12),\n                  borderSide: BorderSide(color: Colors.red[400]!),\n                ),\n              ),\n              validator: (value) {\n                if (value == null || value.isEmpty) {\n                  return ",
    "suggested_key": "formLabelstyleTextstylecolorColorsgrey400",
    "context": "keyboardType: TextInputType.emailAddress,\n              style: const TextStyle(color: Colors.white), // Weiße Schrift\n              decoration: InputDecoration(\n                labelText: 'E-Mail-Adresse',\n                labelStyle: TextStyle(color: Colors.grey[400]),\n                prefixIcon: const Icon(Icons.email, color: AppTheme.primaryColor),\n                filled: true,",
    "category": "form",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\pre_register_dialog.dart",
    "line": 101,
    "column": 43,
    "original": ",\n                labelStyle: TextStyle(color: Colors.grey[400]),\n                prefixIcon: const Icon(Icons.email, color: AppTheme.primaryColor),\n                filled: true,\n                fillColor: const Color(0xFF2D2D2D),\n                border: OutlineInputBorder(\n                  borderRadius: BorderRadius.circular(12),\n                  borderSide: BorderSide(color: Colors.grey[600]!),\n                ),\n                enabledBorder: OutlineInputBorder(\n                  borderRadius: BorderRadius.circular(12),\n                  borderSide: BorderSide(color: Colors.grey[600]!),\n                ),\n                focusedBorder: OutlineInputBorder(\n                  borderRadius: BorderRadius.circular(12),\n                  borderSide: const BorderSide(color: AppTheme.primaryColor),\n                ),\n                errorBorder: OutlineInputBorder(\n                  borderRadius: BorderRadius.circular(12),\n                  borderSide: BorderSide(color: Colors.red[400]!),\n                ),\n              ),\n              validator: (value) {\n                if (value == null || value.isEmpty) {\n                  return ",
    "suggested_key": "formLabelstyleTextstylecolorColorsgrey400",
    "context": "keyboardType: TextInputType.emailAddress,\n              style: const TextStyle(color: Colors.white), // Weiße Schrift\n              decoration: InputDecoration(\n                labelText: 'E-Mail-Adresse',\n                labelStyle: TextStyle(color: Colors.grey[400]),\n                prefixIcon: const Icon(Icons.email, color: AppTheme.primaryColor),\n                filled: true,",
    "category": "form",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\forgot_password_page.dart",
    "line": 5,
    "column": 8,
    "original": "../../theme/background_widget.dart",
    "suggested_key": "navigationThemebackground_widgetdart",
    "context": "import 'package:go_router/go_router.dart';\nimport '../../core/services/auth_service.dart';\nimport '../../theme/app_theme.dart';\nimport '../../theme/background_widget.dart';\n\nclass ForgotPasswordPage extends StatefulWidget {\n  const ForgotPasswordPage({super.key});",
    "category": "navigation",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 120,
    "column": 51,
    "original": "] as Map<String, String>?;\n            \n            if (params != null) {\n              context.goNamed(routeName, pathParameters: params);\n            } else {\n              context.goNamed(routeName);\n            }\n          } else if (_inviteToken != null) {\n            // Fallback: Wenn Invite-Token in Query-Parametern, direkt zur Invite-Seite\n            AppLogger.app.i(",
    "suggested_key": "navigationAsMapstringString",
    "context": "// Redirect zur ursprünglichen Invite-Seite\n            final routeName = pendingRedirect['route'] as String;\n            final params = pendingRedirect['params'] as Map<String, String>?;\n            \n            if (params != null) {\n              context.goNamed(routeName, pathParameters: params);",
    "category": "navigation",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 120,
    "column": 51,
    "original": "] as Map<String, String>?;\n            \n            if (params != null) {\n              context.goNamed(routeName, pathParameters: params);\n            } else {\n              context.goNamed(routeName);\n            }\n          } else if (_inviteToken != null) {\n            // Fallback: Wenn Invite-Token in Query-Parametern, direkt zur Invite-Seite\n            AppLogger.app.i(",
    "suggested_key": "navigationAsMapstringString",
    "context": "// Redirect zur ursprünglichen Invite-Seite\n            final routeName = pendingRedirect['route'] as String;\n            final params = pendingRedirect['params'] as Map<String, String>?;\n            \n            if (params != null) {\n              context.goNamed(routeName, pathParameters: params);",
    "category": "navigation",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 5,
    "column": 8,
    "original": "../../theme/background_widget.dart",
    "suggested_key": "navigationThemebackground_widgetdart",
    "context": "import 'package:go_router/go_router.dart';\nimport '../../core/services/auth_service.dart';\nimport '../../theme/app_theme.dart';\nimport '../../theme/background_widget.dart';\n\nclass ResetPasswordPage extends StatefulWidget {\n  final String token;",
    "category": "navigation",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 5,
    "column": 43,
    "original": ";\n\nclass ResetPasswordPage extends StatefulWidget {\n  final String token;\n  \n  const ResetPasswordPage({\n    super.key,\n    required this.token,\n  });\n\n  @override\n  State<ResetPasswordPage> createState() => _ResetPasswordPageState();\n}\n\nclass _ResetPasswordPageState extends State<ResetPasswordPage> with SingleTickerProviderStateMixin {\n  final _formKey = GlobalKey<FormState>();\n  final _passwordController = TextEditingController();\n  final _confirmPasswordController = TextEditingController();\n  final AuthService _authService = AuthService();\n  \n  late AnimationController _animationController;\n  late Animation<double> _fadeAnimation;\n  \n  bool _isLoading = false;\n  bool _isSuccess = false;\n  String? _errorMessage;\n  bool _obscurePassword = true;\n  bool _obscureConfirmPassword = true;\n  \n  // Für bessere Validierung\n  bool _hasInteractedWithPassword = false;\n  bool _hasInteractedWithConfirmPassword = false;\n\n  @override\n  void initState() {\n    super.initState();\n    \n    // Animation Setup\n    _animationController = AnimationController(\n      duration: const Duration(milliseconds: 800),\n      vsync: this,\n    );\n    _fadeAnimation = Tween<double>(\n      begin: 0.0,\n      end: 1.0,\n    ).animate(CurvedAnimation(\n      parent: _animationController,\n      curve: Curves.easeIn,\n    ));\n    \n    _animationController.forward();\n  }\n\n  @override\n  void dispose() {\n    _animationController.dispose();\n    _passwordController.dispose();\n    _confirmPasswordController.dispose();\n    super.dispose();\n  }\n\n  Future<void> _resetPassword() async {\n    if (!_formKey.currentState!.validate()) {\n      return;\n    }\n\n    setState(() {\n      _isLoading = true;\n      _errorMessage = null;\n      _isSuccess = false;\n    });\n\n    try {\n      final success = await _authService.resetPassword(\n        widget.token,\n        _passwordController.text,\n      );\n\n      if (success && mounted) {\n        setState(() {\n          _isSuccess = true;\n        });\n        \n        // Erfolgsmeldung zeigen und nach 3 Sekunden zum Login\n        await Future.delayed(const Duration(seconds: 3));\n        if (mounted) {\n          context.goNamed(",
    "suggested_key": "navigationClassResetpasswordpageExtends",
    "context": "import 'package:go_router/go_router.dart';\nimport '../../core/services/auth_service.dart';\nimport '../../theme/app_theme.dart';\nimport '../../theme/background_widget.dart';\n\nclass ResetPasswordPage extends StatefulWidget {\n  final String token;",
    "category": "navigation",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 2,
    "column": 8,
    "original": "package:flutter/foundation.dart",
    "suggested_key": "navigationPackageflutterfoundationdart",
    "context": "import 'package:flutter/material.dart';\nimport 'package:flutter/foundation.dart';\nimport 'package:go_router/go_router.dart';\nimport '../../config/logger.dart';\nimport '../../core/models/world.dart';",
    "category": "navigation",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 10,
    "column": 8,
    "original": "../../theme/background_widget.dart",
    "suggested_key": "navigationThemebackground_widgetdart",
    "context": "import '../../core/services/auth_service.dart';\nimport '../../core/services/api_service.dart';\nimport '../../theme/app_theme.dart';\nimport '../../theme/background_widget.dart';\nimport '../../shared/widgets/user_info_widget.dart';\nimport '../../shared/widgets/navigation_widget.dart';",
    "category": "navigation",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 12,
    "column": 52,
    "original": ";\n\n// ServiceLocator Import für DI\nimport ",
    "suggested_key": "navigationServicelocatorImportFür",
    "context": "import '../../theme/app_theme.dart';\nimport '../../theme/background_widget.dart';\nimport '../../shared/widgets/user_info_widget.dart';\nimport '../../shared/widgets/navigation_widget.dart';\n\n// ServiceLocator Import für DI\nimport '../../main.dart';",
    "category": "navigation",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 15,
    "column": 24,
    "original": ";\n\n// Flow-Type-Enum für klare Trennung der beiden User-Journeys\nenum WorldJoinFlowType {\n  normal,   // Normale Navigation: User kommt von World-List\n  invite,   // Invite-Flow: User kommt über externen Link\n}\n\nclass WorldJoinPage extends StatefulWidget {\n  final String? worldId;\n  final String? inviteToken;\n  final WorldJoinFlowType flowType;\n  \n  const WorldJoinPage({\n    super.key, \n    this.worldId, \n    this.inviteToken,\n    required this.flowType,\n  });\n\n  @override\n  State<WorldJoinPage> createState() => _WorldJoinPageState();\n}\n\nclass _WorldJoinPageState extends State<WorldJoinPage> with SingleTickerProviderStateMixin {\n  // DI-ready: ServiceLocator verwenden\n  late final WorldService _worldService;\n  late final AuthService _authService;\n  \n  // Tab Controller\n  late TabController _tabController;\n  \n  bool _isLoading = false;\n  bool _isJoining = false;\n  bool _isPreRegistering = false;\n  bool _isAuthenticated = false;\n  bool _isJoined = false;\n  bool _isPreRegistered = false;\n  World? _world;\n  String? _errorMessage;\n  String? _infoMessage;\n  String? _joinError;\n  bool _showRegistrationButton = false;\n  bool _showLogoutButton = false;\n  String? _inviteEmail;\n  bool _showLoginButton = false;\n  bool _showAcceptInviteButton = false;\n  bool isInviteValid = true; // Neue Variable für Gültigkeit der Einladung\n\n  @override\n  void initState() {\n    super.initState();\n    \n    _tabController = TabController(length: 1, vsync: this);\n    _initializeServices();\n    _loadWorldData();\n  }\n  \n  @override\n  void dispose() {\n    _tabController.dispose();\n    super.dispose();\n  }\n\n  @override\n  void didChangeDependencies() {\n    super.didChangeDependencies();\n    // Authentication-Status bei Kontext-Änderungen prüfen\n    _checkAuthenticationStatus();\n  }\n\n  void _initializeServices() {\n    try {\n      if (ServiceLocator.has<WorldService>()) {\n        _worldService = ServiceLocator.get<WorldService>();\n      } else {\n        _worldService = WorldService();\n      }\n      \n      if (ServiceLocator.has<AuthService>()) {\n        _authService = ServiceLocator.get<AuthService>();\n      } else {\n        _authService = AuthService();\n      }\n      \n      // Authentication-Status prüfen\n      _checkAuthenticationStatus();\n    } catch (e) {\n      AppLogger.app.w(",
    "suggested_key": "navigationFlowtypeenumFürKlare",
    "context": "import '../../shared/widgets/navigation_widget.dart';\n\n// ServiceLocator Import für DI\nimport '../../main.dart';\n\n// Flow-Type-Enum für klare Trennung der beiden User-Journeys\nenum WorldJoinFlowType {",
    "category": "navigation",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 699,
    "column": 80,
    "original": ": widget.inviteToken});\n  }\n\n  // Navigation zu Login \n  void _navigateToLogin(String email) {\n    AppLogger.app.i(",
    "suggested_key": "navigationWidgetinvitetokenNavigationZu",
    "context": "_authService.setPendingInviteRedirect(widget.inviteToken!);\n    }\n    \n    context.goNamed('register', queryParameters: {'email': email, 'invite_token': widget.inviteToken});\n  }\n\n  // Navigation zu Login",
    "category": "navigation",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 778,
    "column": 34,
    "original": ": widget.worldId},\n                isJoinedWorld: _isJoined,\n              ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildErrorState() {\n    return Center(\n      child: Padding(\n        padding: const EdgeInsets.all(24.0),\n        child: Center(\n          child: ConstrainedBox(\n            constraints: const BoxConstraints(maxWidth: 500),\n            child: Card(\n              elevation: 12,\n              color: const Color(0xFF1A1A1A), // Dunkle Karte\n              shape: RoundedRectangleBorder(\n                borderRadius: BorderRadius.circular(20),\n                side: BorderSide(\n                  color: AppTheme.primaryColor.withOpacity(0.3),\n                  width: 1,\n                ),\n              ),\n              child: Container(\n                decoration: BoxDecoration(\n                  borderRadius: BorderRadius.circular(20),\n                  gradient: const LinearGradient(\n                    begin: Alignment.topLeft,\n                    end: Alignment.bottomRight,\n                    colors: [\n                      Color(0xFF1A1A1A),\n                      Color(0xFF2A2A2A),\n                    ],\n                  ),\n                ),\n                child: Padding(\n                  padding: const EdgeInsets.all(32.0),\n                  child: Column(\n                    mainAxisSize: MainAxisSize.min,\n                    children: [\n                      Icon(\n                        Icons.error_outline,\n                        size: 80,\n                        color: Colors.red[400],\n                      ),\n                      const SizedBox(height: 24),\n                      Text(\n                        ",
    "suggested_key": "navigationWidgetworldidIsjoinedworld_isjoined",
    "context": "if (_isAuthenticated)\n              NavigationWidget(\n                currentRoute: 'world-join',\n                routeParams: {'id': widget.worldId},\n                isJoinedWorld: _isJoined,\n              ),\n          ],",
    "category": "navigation",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 15,
    "column": 24,
    "original": ";\n\n// Flow-Type-Enum für klare Trennung der beiden User-Journeys\nenum WorldJoinFlowType {\n  normal,   // Normale Navigation: User kommt von World-List\n  invite,   // Invite-Flow: User kommt über externen Link\n}\n\nclass WorldJoinPage extends StatefulWidget {\n  final String? worldId;\n  final String? inviteToken;\n  final WorldJoinFlowType flowType;\n  \n  const WorldJoinPage({\n    super.key, \n    this.worldId, \n    this.inviteToken,\n    required this.flowType,\n  });\n\n  @override\n  State<WorldJoinPage> createState() => _WorldJoinPageState();\n}\n\nclass _WorldJoinPageState extends State<WorldJoinPage> with SingleTickerProviderStateMixin {\n  // DI-ready: ServiceLocator verwenden\n  late final WorldService _worldService;\n  late final AuthService _authService;\n  \n  // Tab Controller\n  late TabController _tabController;\n  \n  bool _isLoading = false;\n  bool _isJoining = false;\n  bool _isPreRegistering = false;\n  bool _isAuthenticated = false;\n  bool _isJoined = false;\n  bool _isPreRegistered = false;\n  World? _world;\n  String? _errorMessage;\n  String? _infoMessage;\n  String? _joinError;\n  bool _showRegistrationButton = false;\n  bool _showLogoutButton = false;\n  String? _inviteEmail;\n  bool _showLoginButton = false;\n  bool _showAcceptInviteButton = false;\n  bool isInviteValid = true; // Neue Variable für Gültigkeit der Einladung\n\n  @override\n  void initState() {\n    super.initState();\n    \n    _tabController = TabController(length: 1, vsync: this);\n    _initializeServices();\n    _loadWorldData();\n  }\n  \n  @override\n  void dispose() {\n    _tabController.dispose();\n    super.dispose();\n  }\n\n  @override\n  void didChangeDependencies() {\n    super.didChangeDependencies();\n    // Authentication-Status bei Kontext-Änderungen prüfen\n    _checkAuthenticationStatus();\n  }\n\n  void _initializeServices() {\n    try {\n      if (ServiceLocator.has<WorldService>()) {\n        _worldService = ServiceLocator.get<WorldService>();\n      } else {\n        _worldService = WorldService();\n      }\n      \n      if (ServiceLocator.has<AuthService>()) {\n        _authService = ServiceLocator.get<AuthService>();\n      } else {\n        _authService = AuthService();\n      }\n      \n      // Authentication-Status prüfen\n      _checkAuthenticationStatus();\n    } catch (e) {\n      AppLogger.app.w(",
    "suggested_key": "navigationFlowtypeenumFürKlare",
    "context": "import '../../shared/widgets/navigation_widget.dart';\n\n// ServiceLocator Import für DI\nimport '../../main.dart';\n\n// Flow-Type-Enum für klare Trennung der beiden User-Journeys\nenum WorldJoinFlowType {",
    "category": "navigation",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 451,
    "column": 56,
    "original": ");\n        success = await _worldService.joinWorld(_world!.id);\n      }\n      \n      if (success) {\n        setState(() {\n          _isJoined = true;\n        });\n        \n        if (mounted) {\n          final message = widget.inviteToken != null \n            ? ",
    "suggested_key": "navigationSuccessAwait_worldservicejoinworld_worldid",
    "context": "}\n      } else {\n        // **NORMALE NAVIGATION: Standard World-Join**\n        AppLogger.app.i('🌍 Versuche normalen World-Join');\n        success = await _worldService.joinWorld(_world!.id);\n      }",
    "category": "navigation",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 2,
    "column": 8,
    "original": "package:flutter/foundation.dart",
    "suggested_key": "navigationPackageflutterfoundationdart",
    "context": "import 'package:flutter/material.dart';\nimport 'package:flutter/foundation.dart';\nimport 'package:go_router/go_router.dart';\nimport '../../config/logger.dart';\nimport '../../core/services/auth_service.dart';",
    "category": "navigation",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 17,
    "column": 37,
    "original": ";\n\n// ServiceLocator Import für DI\nimport ",
    "suggested_key": "navigationServicelocatorImportFür",
    "context": "import '../../shared/widgets/user_info_widget.dart';\nimport '../../shared/widgets/navigation_widget.dart';\nimport './widgets/world_card.dart';\nimport './widgets/world_filters.dart';\n\n// ServiceLocator Import für DI\nimport '../../main.dart';",
    "category": "navigation",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 135,
    "column": 81,
    "original": ")) {\n            await _authService.logout();\n            // Cache invalidieren nach Logout\n            AppRouter.invalidateAuthCache();\n            if (mounted) {\n              context.goNamed(",
    "suggested_key": "navigationAwait_authservicelogoutCache",
    "context": "});\n          \n          // If token is invalid, redirect to login\n          if (e.toString().contains('401') || e.toString().contains('Token fehlt')) {\n            await _authService.logout();\n            // Cache invalidieren nach Logout\n            AppRouter.invalidateAuthCache();",
    "category": "navigation",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 140,
    "column": 37,
    "original": ");\n            }\n          }\n        }\n      }\n    }\n  }\n\n  void _generateMockPlayerCounts() {\n    final random = DateTime.now().millisecondsSinceEpoch;\n    for (final world in _worlds) {\n      // Generate realistic player counts based on world status\n      int baseCount = 0;\n      switch (world.status) {\n        case WorldStatus.upcoming:\n          baseCount = 5 + (random % 15); // 5-20 players\n          break;\n        case WorldStatus.open:\n          baseCount = 20 + (random % 30); // 20-50 players\n          break;\n        case WorldStatus.running:\n          baseCount = 50 + (random % 100); // 50-150 players\n          break;\n        case WorldStatus.closed:\n        case WorldStatus.archived:\n          baseCount = 0 + (random % 10); // 0-10 players\n          break;\n      }\n      _playerCounts[world.id] = baseCount;\n    }\n  }\n\n  void _applyFiltersAndSorting() {\n    List<World> filtered = List.from(_worlds);\n    \n    // Apply status filter\n    if (_statusFilter != null) {\n      filtered = filtered.where((world) => world.status == _statusFilter).toList();\n    }\n    \n    // Apply category filter (mock implementation)\n    if (_categoryFilter != null) {\n      // In real app, this would be based on world.category field\n      // For now, we",
    "suggested_key": "navigationVoid_generatemockplayercountsFinal",
    "context": "// Cache invalidieren nach Logout\n            AppRouter.invalidateAuthCache();\n            if (mounted) {\n              context.goNamed('login');\n            }\n          }\n        }",
    "category": "navigation",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 320,
    "column": 79,
    "original": ")) {\n          await _authService.logout();\n          // Cache invalidieren nach Logout\n          AppRouter.invalidateAuthCache();\n          if (mounted) {\n            context.goNamed(",
    "suggested_key": "navigationAwait_authservicelogoutCache",
    "context": "} catch (e) {\n      if (mounted) {\n        // Prüfe ob es ein Token-Problem ist\n        if (e.toString().contains('401') || e.toString().contains('Token fehlt')) {\n          await _authService.logout();\n          // Cache invalidieren nach Logout\n          AppRouter.invalidateAuthCache();",
    "category": "navigation",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 358,
    "column": 79,
    "original": ")) {\n          await _authService.logout();\n          // Cache invalidieren nach Logout\n          AppRouter.invalidateAuthCache();\n          if (mounted) {\n            context.goNamed(",
    "suggested_key": "navigationAwait_authservicelogoutCache",
    "context": "} catch (e) {\n      if (mounted) {\n        // Prüfe ob es ein Token-Problem ist\n        if (e.toString().contains('401') || e.toString().contains('Token fehlt')) {\n          await _authService.logout();\n          // Cache invalidieren nach Logout\n          AppRouter.invalidateAuthCache();",
    "category": "navigation",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 425,
    "column": 79,
    "original": ")) {\n          await _authService.logout();\n          // Cache invalidieren nach Logout\n          AppRouter.invalidateAuthCache();\n          if (mounted) {\n            context.goNamed(",
    "suggested_key": "navigationAwait_authservicelogoutCache",
    "context": "} catch (e) {\n      if (mounted) {\n        // Prüfe ob es ein Token-Problem ist\n        if (e.toString().contains('401') || e.toString().contains('Token fehlt')) {\n          await _authService.logout();\n          // Cache invalidieren nach Logout\n          AppRouter.invalidateAuthCache();",
    "category": "navigation",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 464,
    "column": 79,
    "original": ")) {\n          await _authService.logout();\n          // Cache invalidieren nach Logout\n          AppRouter.invalidateAuthCache();\n          if (mounted) {\n            context.goNamed(",
    "suggested_key": "navigationAwait_authservicelogoutCache",
    "context": "} catch (e) {\n      if (mounted) {\n        // Prüfe ob es ein Token-Problem ist\n        if (e.toString().contains('401') || e.toString().contains('Token fehlt')) {\n          await _authService.logout();\n          // Cache invalidieren nach Logout\n          AppRouter.invalidateAuthCache();",
    "category": "navigation",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 504,
    "column": 81,
    "original": ")) {\n            await _authService.logout();\n            // Cache invalidieren nach Logout\n            AppRouter.invalidateAuthCache();\n            if (mounted) {\n              context.goNamed(",
    "suggested_key": "navigationAwait_authservicelogoutCache",
    "context": "} catch (e) {\n        if (mounted) {\n          // Prüfe ob es ein Token-Problem ist\n          if (e.toString().contains('401') || e.toString().contains('Token fehlt')) {\n            await _authService.logout();\n            // Cache invalidieren nach Logout\n            AppRouter.invalidateAuthCache();",
    "category": "navigation",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 135,
    "column": 69,
    "original": "Token fehlt",
    "suggested_key": "navigationTokenFehlt",
    "context": "});\n          \n          // If token is invalid, redirect to login\n          if (e.toString().contains('401') || e.toString().contains('Token fehlt')) {\n            await _authService.logout();\n            // Cache invalidieren nach Logout\n            AppRouter.invalidateAuthCache();",
    "category": "navigation",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 320,
    "column": 67,
    "original": "Token fehlt",
    "suggested_key": "navigationTokenFehlt",
    "context": "} catch (e) {\n      if (mounted) {\n        // Prüfe ob es ein Token-Problem ist\n        if (e.toString().contains('401') || e.toString().contains('Token fehlt')) {\n          await _authService.logout();\n          // Cache invalidieren nach Logout\n          AppRouter.invalidateAuthCache();",
    "category": "navigation",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 358,
    "column": 67,
    "original": "Token fehlt",
    "suggested_key": "navigationTokenFehlt",
    "context": "} catch (e) {\n      if (mounted) {\n        // Prüfe ob es ein Token-Problem ist\n        if (e.toString().contains('401') || e.toString().contains('Token fehlt')) {\n          await _authService.logout();\n          // Cache invalidieren nach Logout\n          AppRouter.invalidateAuthCache();",
    "category": "navigation",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 425,
    "column": 67,
    "original": "Token fehlt",
    "suggested_key": "navigationTokenFehlt",
    "context": "} catch (e) {\n      if (mounted) {\n        // Prüfe ob es ein Token-Problem ist\n        if (e.toString().contains('401') || e.toString().contains('Token fehlt')) {\n          await _authService.logout();\n          // Cache invalidieren nach Logout\n          AppRouter.invalidateAuthCache();",
    "category": "navigation",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 464,
    "column": 67,
    "original": "Token fehlt",
    "suggested_key": "navigationTokenFehlt",
    "context": "} catch (e) {\n      if (mounted) {\n        // Prüfe ob es ein Token-Problem ist\n        if (e.toString().contains('401') || e.toString().contains('Token fehlt')) {\n          await _authService.logout();\n          // Cache invalidieren nach Logout\n          AppRouter.invalidateAuthCache();",
    "category": "navigation",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 504,
    "column": 69,
    "original": "Token fehlt",
    "suggested_key": "navigationTokenFehlt",
    "context": "} catch (e) {\n        if (mounted) {\n          // Prüfe ob es ein Token-Problem ist\n          if (e.toString().contains('401') || e.toString().contains('Token fehlt')) {\n            await _authService.logout();\n            // Cache invalidieren nach Logout\n            AppRouter.invalidateAuthCache();",
    "category": "navigation",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1616,
    "column": 24,
    "original": ",\n              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),\n            ),\n          ),\n        ),\n      );\n    }\n\n    // **REGISTRATION BUTTON**\n    if (_showRegistrationButton && _inviteEmail != null) {\n      buttons.add(\n        Container(\n          width: double.infinity,\n          margin: const EdgeInsets.only(bottom: 12.0),\n          child: ElevatedButton(\n            onPressed: () {\n              // Redirect auf Register-Seite mit E-Mail vorausgefüllt\n              final registerRoute = ",
    "suggested_key": "uiStyleTextstylefontsize16",
    "context": "),\n            ),\n            child: const Text(\n              'Anmelden',\n              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),\n            ),\n          ),",
    "category": "ui",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1649,
    "column": 28,
    "original": ",\n              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),\n            ),\n          ),\n        ),\n      );\n    }\n\n    // **ACCEPT INVITE BUTTON (wenn User korrekt angemeldet)**\n    if (_showAcceptInviteButton && widget.inviteToken != null) {\n      buttons.add(\n        Container(\n          width: double.infinity,\n          margin: const EdgeInsets.only(bottom: 12.0),\n          child: ElevatedButton(\n            onPressed: _isJoining || !isInviteValid ? null : () => _joinWorld(),\n            style: ElevatedButton.styleFrom(\n              backgroundColor: Colors.green[600],\n              foregroundColor: Colors.white,\n              padding: const EdgeInsets.symmetric(vertical: 16),\n              shape: RoundedRectangleBorder(\n                borderRadius: BorderRadius.circular(12),\n              ),\n            ),\n            child: _isJoining\n                ? const SizedBox(\n                    height: 20,\n                    width: 20,\n                    child: CircularProgressIndicator(\n                      strokeWidth: 2,\n                      valueColor: AlwaysStoppedAnimation<Color>(Colors.white),\n                    ),\n                  )\n                : const Text(\n                    ",
    "suggested_key": "uiStyleTextstylefontsize16",
    "context": "),\n            ),\n            child: const Text(\n              'Registrieren',\n              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),\n            ),\n          ),",
    "category": "ui",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1714,
    "column": 24,
    "original": ",\n              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),\n            ),\n          ),\n        ),\n      );\n    }\n\n    // FALLBACK: Normale World-Join-Buttons wenn keine spezifischen Buttons\n    if (buttons.isEmpty) {\n      // **NORMALE WORLD-JOIN LOGIC** (wenn kein Invite-Token)\n      if (widget.inviteToken == null && _world != null) {\n        final world = _world!;\n        \n        // **STATUS-BASIERTE INTELLIGENTE BUTTON-LOGIK**\n        switch (world.status) {\n          case WorldStatus.upcoming:\n            // Vorregistrierung oder Zurückziehen\n            if (_isPreRegistered) {\n              buttons.add(\n                Container(\n                  width: double.infinity,\n                  margin: const EdgeInsets.only(bottom: 12.0),\n                  child: ElevatedButton.icon(\n                    onPressed: (_isPreRegistering || _isJoining) ? null : _cancelPreRegistration,\n                    icon: const Icon(Icons.cancel),\n                    label: Text(_isPreRegistering ? ",
    "suggested_key": "uiStyleTextstylefontsize16",
    "context": "),\n            ),\n            child: const Text(\n              'Abmelden',\n              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),\n            ),\n          ),",
    "category": "ui",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1649,
    "column": 28,
    "original": ",\n              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),\n            ),\n          ),\n        ),\n      );\n    }\n\n    // **ACCEPT INVITE BUTTON (wenn User korrekt angemeldet)**\n    if (_showAcceptInviteButton && widget.inviteToken != null) {\n      buttons.add(\n        Container(\n          width: double.infinity,\n          margin: const EdgeInsets.only(bottom: 12.0),\n          child: ElevatedButton(\n            onPressed: _isJoining || !isInviteValid ? null : () => _joinWorld(),\n            style: ElevatedButton.styleFrom(\n              backgroundColor: Colors.green[600],\n              foregroundColor: Colors.white,\n              padding: const EdgeInsets.symmetric(vertical: 16),\n              shape: RoundedRectangleBorder(\n                borderRadius: BorderRadius.circular(12),\n              ),\n            ),\n            child: _isJoining\n                ? const SizedBox(\n                    height: 20,\n                    width: 20,\n                    child: CircularProgressIndicator(\n                      strokeWidth: 2,\n                      valueColor: AlwaysStoppedAnimation<Color>(Colors.white),\n                    ),\n                  )\n                : const Text(\n                    ",
    "suggested_key": "uiStyleTextstylefontsize16",
    "context": "),\n            ),\n            child: const Text(\n              'Registrieren',\n              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),\n            ),\n          ),",
    "category": "ui",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1714,
    "column": 24,
    "original": ",\n              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),\n            ),\n          ),\n        ),\n      );\n    }\n\n    // FALLBACK: Normale World-Join-Buttons wenn keine spezifischen Buttons\n    if (buttons.isEmpty) {\n      // **NORMALE WORLD-JOIN LOGIC** (wenn kein Invite-Token)\n      if (widget.inviteToken == null && _world != null) {\n        final world = _world!;\n        \n        // **STATUS-BASIERTE INTELLIGENTE BUTTON-LOGIK**\n        switch (world.status) {\n          case WorldStatus.upcoming:\n            // Vorregistrierung oder Zurückziehen\n            if (_isPreRegistered) {\n              buttons.add(\n                Container(\n                  width: double.infinity,\n                  margin: const EdgeInsets.only(bottom: 12.0),\n                  child: ElevatedButton.icon(\n                    onPressed: (_isPreRegistering || _isJoining) ? null : _cancelPreRegistration,\n                    icon: const Icon(Icons.cancel),\n                    label: Text(_isPreRegistering ? ",
    "suggested_key": "uiStyleTextstylefontsize16",
    "context": "),\n            ),\n            child: const Text(\n              'Abmelden',\n              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),\n            ),\n          ),",
    "category": "ui",
    "confidence": 0.9500000000000001,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\config\\logger.dart",
    "line": 29,
    "column": 46,
    "original": "),\n      level: kDebugMode ? Level.debug : Level.info,\n      output: _getLogOutput(),\n    );\n\n    _navigationLogger = Logger(\n      printer: _getLogPrinter(prefix: ",
    "suggested_key": "authLevelKdebugmodeLeveldebug",
    "context": ");\n\n    _authLogger = Logger(\n      printer: _getLogPrinter(prefix: '[AUTH]'),\n      level: kDebugMode ? Level.debug : Level.info,\n      output: _getLogOutput(),\n    );",
    "category": "auth",
    "confidence": 0.95,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 123,
    "column": 84,
    "original": ");\n          \n          final refreshed = await _authService.refreshTokenIfNeeded();\n          if (refreshed) {\n            final newToken = await _authService.getCurrentAccessToken();\n            if (newToken != null) {\n              setToken(newToken);\n              \n                          // Request mit neuem Token wiederholen\n            return await _retryRequest(endpoint, response.request!.method);\n            }\n          }\n        } catch (e) {\n          AppLogger.api.e(",
    "suggested_key": "authFinalRefreshedAwait",
    "context": "final expiresIn = int.tryParse(response.headers['x-token-expires-in'] ?? '0');\n      if (expiresIn != null && expiresIn < 60) {\n        try {\n          AppLogger.api.i('🔄 Proaktive Token-Erneuerung - läuft ab in ${expiresIn}s');\n          \n          final refreshed = await _authService.refreshTokenIfNeeded();\n          if (refreshed) {",
    "category": "auth",
    "confidence": 0.95,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 144,
    "column": 60,
    "original": ");\n        \n        final refreshed = await _authService.refreshTokenIfNeeded();\n        if (refreshed) {\n          final newToken = await _authService.getCurrentAccessToken();\n          if (newToken != null) {\n            setToken(newToken);\n            \n            // Request mit neuem Token wiederholen\n            return await _retryRequest(endpoint, response.request!.method);\n          }\n        }\n      } catch (e) {\n        AppLogger.api.e(",
    "suggested_key": "authFinalRefreshedAwait",
    "context": "// Reaktive Token-Erneuerung bei 401\n    if (response.statusCode == 401 && !endpoint.startsWith('/auth/')) {\n      try {\n        AppLogger.api.i('🔄 Reactive Token-Refresh wegen 401');\n        \n        final refreshed = await _authService.refreshTokenIfNeeded();\n        if (refreshed) {",
    "category": "auth",
    "confidence": 0.95,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 211,
    "column": 37,
    "original": ")) {\n      await _ensureValidToken();\n    }\n    \n    final request = http.Request(",
    "suggested_key": "authAwait_ensurevalidtokenFinal",
    "context": "_requestBodies[endpoint] = data;\n    \n    // Automatische Token-Validierung für geschützte Endpoints\n    if (!endpoint.startsWith('/auth/')) {\n      await _ensureValidToken();\n    }",
    "category": "auth",
    "confidence": 0.95,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 302,
    "column": 48,
    "original": ") ? _sanitizeAuthData(data) : data;\n    AppLogger.logApiRequest(",
    "suggested_key": "auth_sanitizeauthdatadataDataApploggerlogapirequest",
    "context": "_requestBodies[endpoint] = data;\n    \n    // Log API Request (ohne sensitive Daten für Auth-Endpoints)\n    final logBody = endpoint.startsWith('/auth/') ? _sanitizeAuthData(data) : data;\n    AppLogger.logApiRequest('POST', endpoint, headers: _headers, body: logBody);\n    \n    // Automatische Token-Validierung für geschützte Endpoints",
    "category": "auth",
    "confidence": 0.95,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\forgot_password_page.dart",
    "line": 304,
    "column": 46,
    "original": "Zurück zum Login",
    "suggested_key": "buttonZurückZumLogin",
    "context": "TextButton(\n                              onPressed: () => context.goNamed('login'),\n                              child: Text(\n                                _isSuccess ? 'Zurück zum Login' : 'Abbrechen',\n                                style: const TextStyle(\n                                  color: AppTheme.primaryColor,\n                                  fontSize: 16,",
    "category": "button",
    "confidence": 0.95,
    "widget_context": "Widget: TextButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 466,
    "column": 37,
    "original": "Zurück zur Anmeldung",
    "suggested_key": "buttonZurückZurAnmeldung",
    "context": "TextButton(\n                                  onPressed: () => context.goNamed('login'),\n                                  child: const Text(\n                                    'Zurück zur Anmeldung',\n                                    style: TextStyle(\n                                      color: AppTheme.primaryColor,\n                                      fontSize: 16,",
    "category": "button",
    "confidence": 0.95,
    "widget_context": "Widget: TextButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_filters.dart",
    "line": 289,
    "column": 31,
    "original": "Alle zurücksetzen",
    "suggested_key": "buttonAlleZurücksetzen",
    "context": "TextButton.icon(\n            onPressed: onResetFilters,\n            icon: const Icon(Icons.clear_all, size: 16),\n            label: const Text('Alle zurücksetzen'),\n            style: TextButton.styleFrom(\n              foregroundColor: Colors.grey[400],\n            ),",
    "category": "button",
    "confidence": 0.95,
    "widget_context": "Widget: TextButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 871,
    "column": 77,
    "original": "),\n                            style: OutlinedButton.styleFrom(\n                              foregroundColor: AppTheme.primaryColor,\n                              side: BorderSide(color: AppTheme.primaryColor),\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                      ] else if (_showLogoutButton && _inviteEmail != null) ...[\n                        // Logout Button für falschen User\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: ElevatedButton.icon(\n                            onPressed: _logout,\n                            icon: const Icon(Icons.logout),\n                            label: const Text(",
    "suggested_key": "buttonStyleOutlinedbuttonstylefromForegroundcolor",
    "context": "child: OutlinedButton.icon(\n                            onPressed: () => _navigateToLogin(_inviteEmail!),\n                            icon: const Icon(Icons.login),\n                            label: const Text('Bereits registriert? Anmelden'),\n                            style: OutlinedButton.styleFrom(\n                              foregroundColor: AppTheme.primaryColor,\n                              side: BorderSide(color: AppTheme.primaryColor),",
    "category": "button",
    "confidence": 0.95,
    "widget_context": "Widget: OutlinedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 907,
    "column": 47,
    "original": "Zurück zur Startseite",
    "suggested_key": "buttonZurückZurStartseite",
    "context": "child: OutlinedButton.icon(\n                            onPressed: () => context.goNamed('landing'),\n                            icon: const Icon(Icons.arrow_back),\n                            label: const Text('Zurück zur Startseite'),\n                            style: OutlinedButton.styleFrom(\n                              foregroundColor: Colors.grey,\n                              side: BorderSide(color: Colors.grey),",
    "category": "button",
    "confidence": 0.95,
    "widget_context": "Widget: OutlinedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 940,
    "column": 27,
    "original": "Zurück zu den Welten",
    "suggested_key": "buttonZurückZuDen",
    "context": "TextButton(\n                        onPressed: () => context.goNamed('world-list'),\n                        child: const Text(\n                          'Zurück zu den Welten',\n                          style: TextStyle(\n                            color: AppTheme.primaryColor,\n                            fontWeight: FontWeight.bold,",
    "category": "button",
    "confidence": 0.95,
    "widget_context": "Widget: TextButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1024,
    "column": 29,
    "original": "Zurück zu den Welten",
    "suggested_key": "buttonZurückZuDen",
    "context": "TextButton(\n                          onPressed: () => context.goNamed('world-list'),\n                          child: const Text(\n                            'Zurück zu den Welten',\n                            style: TextStyle(\n                              color: AppTheme.primaryColor,\n                              fontWeight: FontWeight.bold,",
    "category": "button",
    "confidence": 0.95,
    "widget_context": "Widget: TextButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1600,
    "column": 93,
    "original": ";\n              \n              // Pending Redirect setzen für Post-Auth-Redirect\n              _authService.setPendingInviteRedirect(widget.inviteToken!);\n              \n              context.go(loginRoute);\n            },\n            style: ElevatedButton.styleFrom(\n              backgroundColor: AppTheme.primaryColor,\n              foregroundColor: Colors.white,\n              padding: const EdgeInsets.symmetric(vertical: 16),\n              shape: RoundedRectangleBorder(\n                borderRadius: BorderRadius.circular(12),\n              ),\n            ),\n            child: const Text(\n              ",
    "suggested_key": "buttonPendingRedirectSetzen",
    "context": "child: ElevatedButton(\n            onPressed: () {\n              // Redirect auf Login-Seite mit E-Mail vorausgefüllt\n              final loginRoute = '/go/auth/login?email=${Uri.encodeComponent(_inviteEmail!)}';\n              \n              // Pending Redirect setzen für Post-Auth-Redirect\n              _authService.setPendingInviteRedirect(widget.inviteToken!);",
    "category": "button",
    "confidence": 0.95,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1633,
    "column": 99,
    "original": ";\n              \n              // Pending Redirect setzen für Post-Auth-Redirect\n              _authService.setPendingInviteRedirect(widget.inviteToken!);\n              \n              context.go(registerRoute);\n            },\n            style: ElevatedButton.styleFrom(\n              backgroundColor: AppTheme.secondaryColor,\n              foregroundColor: Colors.white,\n              padding: const EdgeInsets.symmetric(vertical: 16),\n              shape: RoundedRectangleBorder(\n                borderRadius: BorderRadius.circular(12),\n              ),\n            ),\n            child: const Text(\n              ",
    "suggested_key": "buttonPendingRedirectSetzen",
    "context": "child: ElevatedButton(\n            onPressed: () {\n              // Redirect auf Register-Seite mit E-Mail vorausgefüllt\n              final registerRoute = '/go/auth/register?email=${Uri.encodeComponent(_inviteEmail!)}';\n              \n              // Pending Redirect setzen für Post-Auth-Redirect\n              _authService.setPendingInviteRedirect(widget.inviteToken!);",
    "category": "button",
    "confidence": 0.95,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1740,
    "column": 79,
    "original": "Vorregistrierung zurückziehen",
    "suggested_key": "buttonVorregistrierungZurückziehen",
    "context": "child: ElevatedButton.icon(\n                    onPressed: (_isPreRegistering || _isJoining) ? null : _cancelPreRegistration,\n                    icon: const Icon(Icons.cancel),\n                    label: Text(_isPreRegistering ? 'Wird zurückgezogen...' : 'Vorregistrierung zurückziehen'),\n                    style: ElevatedButton.styleFrom(\n                      backgroundColor: Colors.red[600],\n                      foregroundColor: Colors.white,",
    "category": "button",
    "confidence": 0.95,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1829,
    "column": 86,
    "original": "),\n                    style: ElevatedButton.styleFrom(\n                      backgroundColor: AppTheme.primaryColor,\n                      foregroundColor: Colors.white,\n                      padding: const EdgeInsets.symmetric(vertical: 16),\n                      shape: RoundedRectangleBorder(\n                        borderRadius: BorderRadius.circular(12),\n                      ),\n                    ),\n                  ),\n                ),\n              );\n            }\n            break;\n            \n          case WorldStatus.closed:\n          case WorldStatus.archived:\n            // Keine Aktionen möglich - Status-Info\n            buttons.add(\n              Container(\n                width: double.infinity,\n                margin: const EdgeInsets.only(bottom: 12.0),\n                padding: const EdgeInsets.all(16),\n                decoration: BoxDecoration(\n                  color: Colors.grey.withOpacity(0.1),\n                  borderRadius: BorderRadius.circular(12),\n                  border: Border.all(color: Colors.grey.withOpacity(0.3)),\n                ),\n                child: Column(\n                  children: [\n                    Icon(\n                      Icons.lock_outline,\n                      color: Colors.grey[600],\n                      size: 32,\n                    ),\n                    const SizedBox(height: 8),\n                    Text(\n                      world.status == WorldStatus.closed\n                          ? ",
    "suggested_key": "buttonStyleElevatedbuttonstylefromBackgroundcolor",
    "context": "child: ElevatedButton.icon(\n                    onPressed: _isJoining ? null : _joinWorld,\n                    icon: const Icon(Icons.play_arrow),\n                    label: Text(_isJoining ? 'Wird beigetreten...' : 'Jetzt beitreten'),\n                    style: ElevatedButton.styleFrom(\n                      backgroundColor: AppTheme.primaryColor,\n                      foregroundColor: Colors.white,",
    "category": "button",
    "confidence": 0.95,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 601,
    "column": 39,
    "original": "Alle Welten anzeigen",
    "suggested_key": "buttonAlleWeltenAnzeigen",
    "context": "ElevatedButton.icon(\n                    onPressed: () => context.goNamed('world-list'),\n                    icon: const Icon(Icons.list),\n                    label: const Text('Alle Welten anzeigen'),\n                    style: ElevatedButton.styleFrom(\n                      backgroundColor: AppTheme.primaryColor,\n                      foregroundColor: Colors.white,",
    "category": "button",
    "confidence": 0.95,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\config\\logger.dart",
    "line": 41,
    "column": 47,
    "original": "),\n      level: Level.warning,\n      output: _getLogOutput(),\n    );\n  }\n\n  /// Custom Log Printer mit strukturiertem Format\n  static LogPrinter _getLogPrinter({String? prefix}) {\n    return PrettyPrinter(\n      methodCount: 2, // Stack trace depth\n      errorMethodCount: 8, // Error stack trace depth\n      lineLength: 120, // Width of the output\n      colors: kDebugMode, // Colorful log in debug mode\n      printEmojis: true, // Print emoji for each log level\n      dateTimeFormat: DateTimeFormat.onlyTimeAndSinceStart, // Include timestamp\n      noBoxingByDefault: false,\n    );\n  }\n\n  /// Log Output - Debug: Console, Release: File + Remote\n  static LogOutput _getLogOutput() {\n    if (kDebugMode) {\n      return ConsoleOutput();\n    } else {\n      // In Production: File + Remote Upload\n      return MultiOutput([\n        ConsoleOutput(),\n        FileOutput(), // Local file storage\n        // TODO: RemoteOutput(), // Upload to backend\n      ]);\n    }\n  }\n\n  // === Public API ===\n\n  /// General App Logger\n  static Logger get app => _logger;\n\n  /// API Calls & Responses\n  static Logger get api => _apiLogger;\n\n  /// Authentication Events\n  static Logger get auth => _authLogger;\n\n  /// Navigation & Routing\n  static Logger get navigation => _navigationLogger;\n\n  /// Errors & Crashes\n  static Logger get error => _errorLogger;\n\n  // === Convenience Methods ===\n\n  /// Log API Request\n  static void logApiRequest(String method, String url, {Map<String, dynamic>? headers, dynamic body}) {\n    api.i(",
    "suggested_key": "errorLevelLevelwarningOutput",
    "context": ");\n\n    _errorLogger = Logger(\n      printer: _getLogPrinter(prefix: '[ERROR]'),\n      level: Level.warning,\n      output: _getLogOutput(),\n    );",
    "category": "error",
    "confidence": 0.95,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 157,
    "column": 56,
    "original": ", error: e);\n        // Bei Token-Refresh-Fehlern automatisch ausloggen\n        await _authService.logout();\n        // Cache invalidieren nach Logout\n        AppRouter.invalidateAuthCache();\n      }\n    }\n    return response;\n  }\n\n  // Vollständige Request-Wiederholung für alle HTTP-Methoden mit erweiterter Kontext-Verwaltung\n  Future<http.Response> _retryRequest(String endpoint, String method) async {\n    switch (method) {\n      case ",
    "suggested_key": "errorErrorEBei",
    "context": "}\n        }\n      } catch (e) {\n        AppLogger.api.e('❌ Token-Refresh fehlgeschlagen', error: e);\n        // Bei Token-Refresh-Fehlern automatisch ausloggen\n        await _authService.logout();\n        // Cache invalidieren nach Logout",
    "category": "error",
    "confidence": 0.95,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 290,
    "column": 33,
    "original": ", endpoint, error, stackTrace: stackTrace);\n      rethrow;\n    }\n  }\n\n  Future<http.Response> post(String endpoint, Map<String, dynamic> data) async {\n    await _ensureInitialized();\n    \n    // Erweiterte Request-Kontext-Verwaltung für parallele Requests\n    _requestBodies[endpoint] = data;\n    \n    // Log API Request (ohne sensitive Daten für Auth-Endpoints)\n    final logBody = endpoint.startsWith(",
    "suggested_key": "errorEndpointErrorStacktrace",
    "context": "return await _handleResponse(response, endpoint);\n    } catch (error, stackTrace) {\n      // Log API Error\n      AppLogger.logApiError('GET', endpoint, error, stackTrace: stackTrace);\n      rethrow;\n    }\n  }",
    "category": "error",
    "confidence": 0.95,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 324,
    "column": 34,
    "original": ", endpoint, error, stackTrace: stackTrace);\n      rethrow;\n    }\n  }\n\n  Future<http.Response> put(String endpoint, Map<String, dynamic> data) async {\n    await _ensureInitialized();\n    \n    // Erweiterte Request-Kontext-Verwaltung für parallele Requests\n    _requestBodies[endpoint] = data;\n    \n    // Log API Request\n    AppLogger.logApiRequest(",
    "suggested_key": "errorEndpointErrorStacktrace",
    "context": "return await _handleResponse(response, endpoint);\n    } catch (error, stackTrace) {\n      // Log API Error\n      AppLogger.logApiError('POST', endpoint, error, stackTrace: stackTrace);\n      rethrow;\n    }\n  }",
    "category": "error",
    "confidence": 0.95,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 356,
    "column": 33,
    "original": ", endpoint, error, stackTrace: stackTrace);\n      rethrow;\n    }\n  }\n\n  Future<http.Response> delete(String endpoint) async {\n    await _ensureInitialized();\n    \n    // Log API Request\n    AppLogger.logApiRequest(",
    "suggested_key": "errorEndpointErrorStacktrace",
    "context": "return await _handleResponse(response, endpoint);\n    } catch (error, stackTrace) {\n      // Log API Error\n      AppLogger.logApiError('PUT', endpoint, error, stackTrace: stackTrace);\n      rethrow;\n    }\n  }",
    "category": "error",
    "confidence": 0.95,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\main.dart",
    "line": 37,
    "column": 19,
    "original": "🚀 WeltenwindApp wird gestartet...",
    "suggested_key": "errorWeltenwindappWirdGestartet",
    "context": "// Initialisiere das Logging-System\n  AppLogger.initialize();\n  AppLogger.app.i('🚀 WeltenwindApp wird gestartet...');\n\n  // Flutter Error Handling\n  FlutterError.onError = (FlutterErrorDetails details) {",
    "category": "error",
    "confidence": 0.95,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 338,
    "column": 46,
    "original": ")) {\n          return const AuthErrorPage();\n        }\n        \n        // Welt nicht gefunden - robuste Erkennung\n        if (goException.message.contains(",
    "suggested_key": "errorReturnConstAutherrorpage",
    "context": "final goException = state.error as GoException;\n        \n        // Auth-Fehler\n        if (goException.message.contains('401')) {\n          return const AuthErrorPage();\n        }",
    "category": "error",
    "confidence": 0.95,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 215,
    "column": 95,
    "original": "));\n    request.headers.addAll(_headers);\n    request.body = jsonEncode(data);\n    \n    final streamedResponse = await request.send();\n    final response = await http.Response.fromStream(streamedResponse);\n    \n    return await _handleResponse(response, endpoint);\n  }\n\n  // Helper für das Sanitieren von sensiblen Daten aus dem Request-Body\n  Map<String, dynamic> _sanitizeAuthData(Map<String, dynamic> data) {\n    final sanitized = <String, dynamic>{};\n    for (final entry in data.entries) {\n      if (entry.key == ",
    "suggested_key": "inviteRequestheadersaddall_headersRequestbodyJsonencodedata",
    "context": "await _ensureValidToken();\n    }\n    \n    final request = http.Request('DELETE', Uri.parse('${Env.apiUrl}${Env.apiBasePath}$endpoint'));\n    request.headers.addAll(_headers);\n    request.body = jsonEncode(data);",
    "category": "invite",
    "confidence": 0.95,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\forgot_password_page.dart",
    "line": 181,
    "column": 94,
    "original": ",\n                                        style: TextStyle(color: Colors.green[200], fontSize: 14),\n                                      ),\n                                    ),\n                                  ],\n                                ),\n                              ),\n                            \n                            // Email field\n                            if (!_isSuccess)\n                              TextFormField(\n                                controller: _emailController,\n                                style: const TextStyle(color: Colors.white),\n                                keyboardType: TextInputType.emailAddress,\n                                autofillHints: const [AutofillHints.email],\n                                textInputAction: TextInputAction.done,\n                                onFieldSubmitted: (_) => _isLoading ? null : _requestPasswordReset(),\n                                decoration: InputDecoration(\n                                  labelText: ",
    "suggested_key": "uiStyleTextstylecolorColorsgreen200",
    "context": "const SizedBox(width: 8),\n                                    Expanded(\n                                      child: Text(\n                                        'E-Mail gesendet! Bitte überprüfe deinen Posteingang.',\n                                        style: TextStyle(color: Colors.green[200], fontSize: 14),\n                                      ),\n                                    ),",
    "category": "ui",
    "confidence": 0.95,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1388,
    "column": 32,
    "original": "Entscheidungen der Spielleitung sind final",
    "suggested_key": "uiEntscheidungenDerSpielleitung",
    "context": "_buildRuleItem('2.', 'Keine Cheats oder Exploits verwenden'),\n          _buildRuleItem('3.', 'Faire Spielweise ist Pflicht'),\n          _buildRuleItem('4.', 'Kommunikation nur im Spielchat'),\n          _buildRuleItem('5.', 'Entscheidungen der Spielleitung sind final'),\n        ],\n      ),\n    );",
    "category": "ui",
    "confidence": 0.95,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 13,
    "column": 36,
    "original": ";\n\nclass WeltenwindApp extends StatefulWidget {\n  const WeltenwindApp({super.key});\n\n  @override\n  State<WeltenwindApp> createState() => _WeltenwindAppState();\n}\n\nclass _WeltenwindAppState extends State<WeltenwindApp> {\n  final LocaleProvider _localeProvider = LocaleProvider();\n  \n  @override\n  void initState() {\n    super.initState();\n    // Listener für Locale-Änderungen\n    _localeProvider.addListener(() {\n      setState(() {});\n    });\n  }\n  \n  @override\n  void dispose() {\n    _localeProvider.removeListener(() {});\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    AppLogger.app.d(",
    "suggested_key": "worldClassWeltenwindappExtends",
    "context": "import 'core/services/world_service.dart';\nimport 'core/services/invite_service.dart';\nimport 'core/providers/locale_provider.dart';\nimport 'l10n/app_localizations.dart';\n\nclass WeltenwindApp extends StatefulWidget {\n  const WeltenwindApp({super.key});",
    "category": "world",
    "confidence": 0.95,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\config\\logger.dart",
    "line": 2,
    "column": 40,
    "original": ";\n\n/// Zentrale Logger-Konfiguration für Weltenwind Flutter Client\nclass AppLogger {\n  static late Logger _logger;\n  static late Logger _apiLogger;\n  static late Logger _authLogger;\n  static late Logger _navigationLogger;\n  static late Logger _errorLogger;\n\n  /// Initialisiere alle Logger\n  static void initialize() {\n    // Base Logger mit Custom Printer\n    _logger = Logger(\n      printer: _getLogPrinter(),\n      level: kDebugMode ? Level.debug : Level.info,\n      output: _getLogOutput(),\n    );\n\n    // Spezielle Logger für verschiedene Bereiche\n    _apiLogger = Logger(\n      printer: _getLogPrinter(prefix: ",
    "suggested_key": "worldZentraleLoggerkonfigurationFür",
    "context": "import 'package:logger/logger.dart';\nimport 'package:flutter/foundation.dart';\n\n/// Zentrale Logger-Konfiguration für Weltenwind Flutter Client\nclass AppLogger {",
    "category": "world",
    "confidence": 0.95,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\dashboard\\dashboard_page.dart",
    "line": 73,
    "column": 31,
    "original": "Welt-Dashboard",
    "suggested_key": "worldWeltdashboard",
    "context": "// Title\n                            Text(\n                              'Welt-Dashboard',\n                              style: Theme.of(context).textTheme.headlineMedium?.copyWith(\n                                color: Colors.white,\n                                fontWeight: FontWeight.bold,",
    "category": "world",
    "confidence": 0.95,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\dashboard\\dashboard_page.dart",
    "line": 83,
    "column": 31,
    "original": "Welt ID: $worldId",
    "suggested_key": "worldWeltIdWorldid",
    "context": "// Subtitle\n                            Text(\n                              'Welt ID: $worldId',\n                              style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                                color: Colors.grey[300],\n                              ),",
    "category": "world",
    "confidence": 0.95,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 267,
    "column": 43,
    "original": "Dein Portal zu unendlichen Welten",
    "suggested_key": "worldDeinPortalZu",
    "context": "// Enhanced Subtitle\n                                        Text(\n                                          'Dein Portal zu unendlichen Welten',\n                                          style: TextStyle(\n                                            color: Colors.grey[200],\n                                            fontSize: 22,",
    "category": "world",
    "confidence": 0.95,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 479,
    "column": 29,
    "original": "Was macht Weltenwind besonders?",
    "suggested_key": "worldWasMachtWeltenwind",
    "context": "child: Column(\n                        children: [\n                          const Text(\n                            'Was macht Weltenwind besonders?',\n                            style: TextStyle(\n                              fontSize: 32,\n                              fontWeight: FontWeight.bold,",
    "category": "world",
    "confidence": 0.95,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 513,
    "column": 44,
    "original": "Unendliche Welten",
    "suggested_key": "worldUnendlicheWelten",
    "context": "children: [\n                                  _buildFeatureCard(\n                                    icon: Icons.public,\n                                    title: 'Unendliche Welten',\n                                    description: 'Erkunde hunderte einzigartige Spielwelten oder erschaffe deine eigene',\n                                    color: Colors.blue,\n                                  ),",
    "category": "world",
    "confidence": 0.95,
    "widget_context": "Widget: Card",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 514,
    "column": 50,
    "original": "Erkunde hunderte einzigartige Spielwelten oder erschaffe deine eigene",
    "suggested_key": "worldErkundeHunderteEinzigartige",
    "context": "_buildFeatureCard(\n                                    icon: Icons.public,\n                                    title: 'Unendliche Welten',\n                                    description: 'Erkunde hunderte einzigartige Spielwelten oder erschaffe deine eigene',\n                                    color: Colors.blue,\n                                  ),\n                                  _buildFeatureCard(",
    "category": "world",
    "confidence": 0.95,
    "widget_context": "Widget: Card",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 520,
    "column": 50,
    "original": "Verbinde dich mit Spielern aus der ganzen Welt",
    "suggested_key": "worldVerbindeDichMit",
    "context": "_buildFeatureCard(\n                                    icon: Icons.group,\n                                    title: 'Community',\n                                    description: 'Verbinde dich mit Spielern aus der ganzen Welt',\n                                    color: Colors.green,\n                                  ),\n                                  _buildFeatureCard(",
    "category": "world",
    "confidence": 0.95,
    "widget_context": "Widget: Card",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 581,
    "column": 35,
    "original": "Schließe dich tausenden Spielern an und starte noch heute!",
    "suggested_key": "worldSchließeDichTausenden",
    "context": "),\n                                const SizedBox(height: 16),\n                                Text(\n                                  'Schließe dich tausenden Spielern an und starte noch heute!',\n                                  style: TextStyle(\n                                    fontSize: 16,\n                                    color: Colors.grey[300],",
    "category": "world",
    "confidence": 0.95,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 633,
    "column": 25,
    "original": "© 2024 Weltenwind. Alle Rechte vorbehalten.",
    "suggested_key": "world2024WeltenwindAlle",
    "context": "child: Column(\n                    children: [\n                      Text(\n                        '© 2024 Weltenwind. Alle Rechte vorbehalten.',\n                        style: TextStyle(\n                          color: Colors.grey[600],\n                          fontSize: 14,",
    "category": "world",
    "confidence": 0.95,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1111,
    "column": 45,
    "original": "Zurück zu den Welten",
    "suggested_key": "worldZurückZuDen",
    "context": "borderRadius: BorderRadius.circular(12),\n                            ),\n                          ),\n                          child: const Text('Zurück zu den Welten'),\n                        ),\n                      ),\n                    ],",
    "category": "world",
    "confidence": 0.95,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 583,
    "column": 21,
    "original": "Welt nicht gefunden",
    "suggested_key": "worldWeltNichtGefunden",
    "context": "),\n                  const SizedBox(height: 24),\n                  Text(\n                    'Welt nicht gefunden',\n                    style: Theme.of(context).textTheme.headlineMedium?.copyWith(\n                      color: AppTheme.textPrimary,\n                      fontWeight: FontWeight.bold,",
    "category": "world",
    "confidence": 0.95,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 591,
    "column": 21,
    "original": "Die angeforderte Welt existiert nicht oder wurde entfernt.",
    "suggested_key": "worldDieAngeforderteWelt",
    "context": "),\n                  const SizedBox(height: 16),\n                  Text(\n                    'Die angeforderte Welt existiert nicht oder wurde entfernt.',\n                    style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                      color: AppTheme.textSecondary,\n                    ),",
    "category": "world",
    "confidence": 0.95,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 359,
    "column": 18,
    "original": "Sie müssen der Welt beitreten, um das Dashboard zu sehen",
    "suggested_key": "worldSieMüssenDer",
    "context": "// Tooltip hinzufügen wenn disabled\n    if (isDisabled && item.label.contains('Dashboard')) {\n      return Tooltip(\n        message: 'Sie müssen der Welt beitreten, um das Dashboard zu sehen',\n        child: widget,\n      );\n    }",
    "category": "world",
    "confidence": 0.95,
    "widget_context": "Widget: Tooltip",
    "quote_type": "'"
  },
  {
    "file": "lib\\theme\\background_widget.dart",
    "line": 19,
    "column": 29,
    "original": "assets/images/weltenwind-background-1.png",
    "suggested_key": "worldAssetsimagesweltenwindbackground1png",
    "context": "return Container(\n      decoration: const BoxDecoration(\n        image: DecorationImage(\n          image: AssetImage('assets/images/weltenwind-background-1.png'),\n          fit: BoxFit.cover,\n        ),\n      ),",
    "category": "world",
    "confidence": 0.95,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 103,
    "column": 47,
    "original": ");\n      \n      // 3. Token-Validierung beim App-Start (VOR loadStoredUser)\n      bool isValid = false;\n      try {\n        isValid = await authService.validateTokensOnStart();\n        AppLogger.app.i(",
    "suggested_key": "auth3TokenvalidierungBeim",
    "context": "ServiceLocator.register<WorldService>(worldService);\n      ServiceLocator.register<InviteService>(inviteService);\n      \n      AppLogger.app.i('⚙️ Services registriert');\n      \n      // 3. Token-Validierung beim App-Start (VOR loadStoredUser)\n      bool isValid = false;",
    "category": "auth",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 127,
    "column": 29,
    "original": "👤 User geladen und authentifiziert",
    "suggested_key": "authUserGeladenUnd",
    "context": "final user = await authService.loadStoredUser();\n          if (user != null) {\n            authService.isAuthenticated.value = true;\n            AppLogger.app.i('👤 User geladen und authentifiziert');\n          } else {\n            AppLogger.app.i('👤 Kein gespeicherter User gefunden');\n          }",
    "category": "auth",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 103,
    "column": 47,
    "original": ");\n      \n      // 3. Token-Validierung beim App-Start (VOR loadStoredUser)\n      bool isValid = false;\n      try {\n        isValid = await authService.validateTokensOnStart();\n        AppLogger.app.i(",
    "suggested_key": "auth3TokenvalidierungBeim",
    "context": "ServiceLocator.register<WorldService>(worldService);\n      ServiceLocator.register<InviteService>(inviteService);\n      \n      AppLogger.app.i('⚙️ Services registriert');\n      \n      // 3. Token-Validierung beim App-Start (VOR loadStoredUser)\n      bool isValid = false;",
    "category": "auth",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 112,
    "column": 27,
    "original": "⚠️ Tokens ungültig - logout",
    "suggested_key": "authTokensUngültigLogout",
    "context": "AppLogger.app.i('🔑 Tokens valid: $isValid');\n        \n        if (!isValid) {\n          AppLogger.app.w('⚠️ Tokens ungültig - logout');\n          await authService.logout();\n        }\n      } catch (e) {",
    "category": "auth",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 127,
    "column": 29,
    "original": "👤 User geladen und authentifiziert",
    "suggested_key": "authUserGeladenUnd",
    "context": "final user = await authService.loadStoredUser();\n          if (user != null) {\n            authService.isAuthenticated.value = true;\n            AppLogger.app.i('👤 User geladen und authentifiziert');\n          } else {\n            AppLogger.app.i('👤 Kein gespeicherter User gefunden');\n          }",
    "category": "auth",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\config\\env.dart",
    "line": 11,
    "column": 42,
    "original": ";\n  \n  // Storage Keys\n  static const String tokenKey = ",
    "suggested_key": "authStorageKeysStatic",
    "context": "// App Configuration\n  static const String appName = 'Weltenwind';\n  static const String appVersion = '1.0.0';\n  \n  // Storage Keys\n  static const String tokenKey = 'auth_token';",
    "category": "auth",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\config\\env.dart",
    "line": 14,
    "column": 45,
    "original": ";\n  static const String refreshTokenKey = ",
    "suggested_key": "authStaticConstString",
    "context": "static const String appVersion = '1.0.0';\n  \n  // Storage Keys\n  static const String tokenKey = 'auth_token';\n  static const String refreshTokenKey = 'refresh_token';\n  static const String userIdKey = 'user_id';\n  static const String currentWorldKey = 'current_world';",
    "category": "auth",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 72,
    "column": 49,
    "original": ";\n    }\n    \n    return headers;\n  }\n\n  // Vollständige Token-Validierung mit JWT-Decoding (mit Rekursionsschutz)\n  Future<void> _ensureValidToken() async {\n    if (_token != null && !_isValidatingToken) {\n      _isValidatingToken = true;\n      try {\n        final token = _token;\n        if (token == null) return;\n        final parts = token.split(",
    "suggested_key": "authReturnHeadersVollständige",
    "context": "};\n    \n    if (_token != null) {\n      headers['Authorization'] = 'Bearer $_token';\n    }\n    \n    return headers;",
    "category": "auth",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 123,
    "column": 84,
    "original": ");\n          \n          final refreshed = await _authService.refreshTokenIfNeeded();\n          if (refreshed) {\n            final newToken = await _authService.getCurrentAccessToken();\n            if (newToken != null) {\n              setToken(newToken);\n              \n                          // Request mit neuem Token wiederholen\n            return await _retryRequest(endpoint, response.request!.method);\n            }\n          }\n        } catch (e) {\n          AppLogger.api.e(",
    "suggested_key": "authFinalRefreshedAwait",
    "context": "final expiresIn = int.tryParse(response.headers['x-token-expires-in'] ?? '0');\n      if (expiresIn != null && expiresIn < 60) {\n        try {\n          AppLogger.api.i('🔄 Proaktive Token-Erneuerung - läuft ab in ${expiresIn}s');\n          \n          final refreshed = await _authService.refreshTokenIfNeeded();\n          if (refreshed) {",
    "category": "auth",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 144,
    "column": 60,
    "original": ");\n        \n        final refreshed = await _authService.refreshTokenIfNeeded();\n        if (refreshed) {\n          final newToken = await _authService.getCurrentAccessToken();\n          if (newToken != null) {\n            setToken(newToken);\n            \n            // Request mit neuem Token wiederholen\n            return await _retryRequest(endpoint, response.request!.method);\n          }\n        }\n      } catch (e) {\n        AppLogger.api.e(",
    "suggested_key": "authFinalRefreshedAwait",
    "context": "// Reaktive Token-Erneuerung bei 401\n    if (response.statusCode == 401 && !endpoint.startsWith('/auth/')) {\n      try {\n        AppLogger.api.i('🔄 Reactive Token-Refresh wegen 401');\n        \n        final refreshed = await _authService.refreshTokenIfNeeded();\n        if (refreshed) {",
    "category": "auth",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 230,
    "column": 36,
    "original": ";\n      } else {\n        sanitized[entry.key] = entry.value;\n      }\n    }\n    return sanitized;\n  }\n\n  // Helper für das Sanitieren von sensiblen Daten aus der Response-Body\n  String _sanitizeAuthResponse(String body) {\n    try {\n      final decodedBody = jsonDecode(body);\n      if (decodedBody is Map<String, dynamic>) {\n        final sanitized = <String, dynamic>{};\n        for (final entry in decodedBody.entries) {\n          if (entry.key.contains(",
    "suggested_key": "authElseSanitizedentrykeyEntryvalue",
    "context": "final sanitized = <String, dynamic>{};\n    for (final entry in data.entries) {\n      if (entry.key == 'password' || entry.key == 'token') {\n        sanitized[entry.key] = '***';\n      } else {\n        sanitized[entry.key] = entry.value;\n      }",
    "category": "auth",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 265,
    "column": 33,
    "original": ", endpoint, headers: _headers);\n    \n    // Automatische Token-Validierung für geschützte Endpoints\n    if (!endpoint.startsWith(",
    "suggested_key": "authEndpointHeaders_headers",
    "context": "await _ensureInitialized();\n    \n    // Log API Request\n    AppLogger.logApiRequest('GET', endpoint, headers: _headers);\n    \n    // Automatische Token-Validierung für geschützte Endpoints\n    if (!endpoint.startsWith('/auth/')) {",
    "category": "auth",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 303,
    "column": 34,
    "original": ", endpoint, headers: _headers, body: logBody);\n    \n    // Automatische Token-Validierung für geschützte Endpoints\n    if (!endpoint.startsWith(",
    "suggested_key": "authEndpointHeaders_headers",
    "context": "// Log API Request (ohne sensitive Daten für Auth-Endpoints)\n    final logBody = endpoint.startsWith('/auth/') ? _sanitizeAuthData(data) : data;\n    AppLogger.logApiRequest('POST', endpoint, headers: _headers, body: logBody);\n    \n    // Automatische Token-Validierung für geschützte Endpoints\n    if (!endpoint.startsWith('/auth/')) {",
    "category": "auth",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 336,
    "column": 33,
    "original": ", endpoint, headers: _headers, body: data);\n    \n    // Automatische Token-Validierung für geschützte Endpoints\n    if (!endpoint.startsWith(",
    "suggested_key": "authEndpointHeaders_headers",
    "context": "_requestBodies[endpoint] = data;\n    \n    // Log API Request\n    AppLogger.logApiRequest('PUT', endpoint, headers: _headers, body: data);\n    \n    // Automatische Token-Validierung für geschützte Endpoints\n    if (!endpoint.startsWith('/auth/')) {",
    "category": "auth",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 365,
    "column": 36,
    "original": ", endpoint, headers: _headers);\n    \n    // Automatische Token-Validierung für geschützte Endpoints\n    if (!endpoint.startsWith(",
    "suggested_key": "authEndpointHeaders_headers",
    "context": "await _ensureInitialized();\n    \n    // Log API Request\n    AppLogger.logApiRequest('DELETE', endpoint, headers: _headers);\n    \n    // Automatische Token-Validierung für geschützte Endpoints\n    if (!endpoint.startsWith('/auth/')) {",
    "category": "auth",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 72,
    "column": 34,
    "original": "Bearer $_token",
    "suggested_key": "authBearer_token",
    "context": "};\n    \n    if (_token != null) {\n      headers['Authorization'] = 'Bearer $_token';\n    }\n    \n    return headers;",
    "category": "auth",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 94,
    "column": 83,
    "original": ");\n            \n            final refreshed = await _authService.refreshTokenIfNeeded();\n            if (refreshed) {\n              final newToken = await _authService.getCurrentAccessToken();\n              if (newToken != null) {\n                setToken(newToken);\n                AppLogger.api.i(",
    "suggested_key": "authFinalRefreshedAwait",
    "context": "// Token erneuern wenn weniger als 60 Sekunden gültig\n          if (exp - now < 60) {\n            // Log Token-Refresh\n            AppLogger.api.i('🔄 Token läuft ab in ${exp - now}s - erneuere proaktiv');\n            \n            final refreshed = await _authService.refreshTokenIfNeeded();\n            if (refreshed) {",
    "category": "auth",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 101,
    "column": 62,
    "original": ");\n              }\n            }\n          }\n        }\n      } catch (e) {\n        // Token validation error\n        AppLogger.api.w(",
    "suggested_key": "authCatchEToken",
    "context": "final newToken = await _authService.getCurrentAccessToken();\n              if (newToken != null) {\n                setToken(newToken);\n                AppLogger.api.i('✅ Token erfolgreich erneuert');\n              }\n            }\n          }",
    "category": "auth",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 123,
    "column": 27,
    "original": "🔄 Proaktive Token-Erneuerung - läuft ab in ${expiresIn}s",
    "suggested_key": "authProaktiveTokenerneuerungLäuft",
    "context": "final expiresIn = int.tryParse(response.headers['x-token-expires-in'] ?? '0');\n      if (expiresIn != null && expiresIn < 60) {\n        try {\n          AppLogger.api.i('🔄 Proaktive Token-Erneuerung - läuft ab in ${expiresIn}s');\n          \n          final refreshed = await _authService.refreshTokenIfNeeded();\n          if (refreshed) {",
    "category": "auth",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 144,
    "column": 25,
    "original": "🔄 Reactive Token-Refresh wegen 401",
    "suggested_key": "authReactiveTokenrefreshWegen",
    "context": "// Reaktive Token-Erneuerung bei 401\n    if (response.statusCode == 401 && !endpoint.startsWith('/auth/')) {\n      try {\n        AppLogger.api.i('🔄 Reactive Token-Refresh wegen 401');\n        \n        final refreshed = await _authService.refreshTokenIfNeeded();\n        if (refreshed) {",
    "category": "auth",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 211,
    "column": 37,
    "original": ")) {\n      await _ensureValidToken();\n    }\n    \n    final request = http.Request(",
    "suggested_key": "authAwait_ensurevalidtokenFinal",
    "context": "_requestBodies[endpoint] = data;\n    \n    // Automatische Token-Validierung für geschützte Endpoints\n    if (!endpoint.startsWith('/auth/')) {\n      await _ensureValidToken();\n    }",
    "category": "auth",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 265,
    "column": 33,
    "original": ", endpoint, headers: _headers);\n    \n    // Automatische Token-Validierung für geschützte Endpoints\n    if (!endpoint.startsWith(",
    "suggested_key": "authEndpointHeaders_headers",
    "context": "await _ensureInitialized();\n    \n    // Log API Request\n    AppLogger.logApiRequest('GET', endpoint, headers: _headers);\n    \n    // Automatische Token-Validierung für geschützte Endpoints\n    if (!endpoint.startsWith('/auth/')) {",
    "category": "auth",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 268,
    "column": 37,
    "original": ")) {\n      await _ensureValidToken();\n    }\n    \n    try {\n      final response = await http.get(\n        Uri.parse(",
    "suggested_key": "authAwait_ensurevalidtokenTry",
    "context": "AppLogger.logApiRequest('GET', endpoint, headers: _headers);\n    \n    // Automatische Token-Validierung für geschützte Endpoints\n    if (!endpoint.startsWith('/auth/')) {\n      await _ensureValidToken();\n    }",
    "category": "auth",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 303,
    "column": 34,
    "original": ", endpoint, headers: _headers, body: logBody);\n    \n    // Automatische Token-Validierung für geschützte Endpoints\n    if (!endpoint.startsWith(",
    "suggested_key": "authEndpointHeaders_headers",
    "context": "// Log API Request (ohne sensitive Daten für Auth-Endpoints)\n    final logBody = endpoint.startsWith('/auth/') ? _sanitizeAuthData(data) : data;\n    AppLogger.logApiRequest('POST', endpoint, headers: _headers, body: logBody);\n    \n    // Automatische Token-Validierung für geschützte Endpoints\n    if (!endpoint.startsWith('/auth/')) {",
    "category": "auth",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 306,
    "column": 37,
    "original": ")) {\n      await _ensureValidToken();\n    }\n    \n    try {\n      final response = await http.post(\n        Uri.parse(",
    "suggested_key": "authAwait_ensurevalidtokenTry",
    "context": "AppLogger.logApiRequest('POST', endpoint, headers: _headers, body: logBody);\n    \n    // Automatische Token-Validierung für geschützte Endpoints\n    if (!endpoint.startsWith('/auth/')) {\n      await _ensureValidToken();\n    }",
    "category": "auth",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 336,
    "column": 33,
    "original": ", endpoint, headers: _headers, body: data);\n    \n    // Automatische Token-Validierung für geschützte Endpoints\n    if (!endpoint.startsWith(",
    "suggested_key": "authEndpointHeaders_headers",
    "context": "_requestBodies[endpoint] = data;\n    \n    // Log API Request\n    AppLogger.logApiRequest('PUT', endpoint, headers: _headers, body: data);\n    \n    // Automatische Token-Validierung für geschützte Endpoints\n    if (!endpoint.startsWith('/auth/')) {",
    "category": "auth",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 339,
    "column": 37,
    "original": ")) {\n      await _ensureValidToken();\n    }\n    \n    try {\n      final response = await http.put(\n        Uri.parse(",
    "suggested_key": "authAwait_ensurevalidtokenTry",
    "context": "AppLogger.logApiRequest('PUT', endpoint, headers: _headers, body: data);\n    \n    // Automatische Token-Validierung für geschützte Endpoints\n    if (!endpoint.startsWith('/auth/')) {\n      await _ensureValidToken();\n    }",
    "category": "auth",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 365,
    "column": 36,
    "original": ", endpoint, headers: _headers);\n    \n    // Automatische Token-Validierung für geschützte Endpoints\n    if (!endpoint.startsWith(",
    "suggested_key": "authEndpointHeaders_headers",
    "context": "await _ensureInitialized();\n    \n    // Log API Request\n    AppLogger.logApiRequest('DELETE', endpoint, headers: _headers);\n    \n    // Automatische Token-Validierung für geschützte Endpoints\n    if (!endpoint.startsWith('/auth/')) {",
    "category": "auth",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 368,
    "column": 37,
    "original": ")) {\n      await _ensureValidToken();\n    }\n    \n    try {\n      final response = await http.delete(\n        Uri.parse(",
    "suggested_key": "authAwait_ensurevalidtokenTry",
    "context": "AppLogger.logApiRequest('DELETE', endpoint, headers: _headers);\n    \n    // Automatische Token-Validierung für geschützte Endpoints\n    if (!endpoint.startsWith('/auth/')) {\n      await _ensureValidToken();\n    }",
    "category": "auth",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 2,
    "column": 8,
    "original": "package:flutter/foundation.dart",
    "suggested_key": "authPackageflutterfoundationdart",
    "context": "import 'dart:convert';\nimport 'package:flutter/foundation.dart';\nimport '../models/user.dart';\nimport '../../config/logger.dart';\nimport 'api_service.dart';",
    "category": "auth",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 260,
    "column": 59,
    "original": "],\n          });\n        }\n        \n        // User-Daten speichern\n        await TokenStorage.saveUserData(jsonEncode(userData));\n        \n        _currentUser = User.fromJson(userData);\n        isAuthenticated.value = true; // Reaktiven Status setzen\n        \n        // Fetch complete user data with roles\n        await fetchCurrentUser();\n        \n        AppLogger.logAuthEvent(",
    "suggested_key": "authUserdatenSpeichernAwait",
    "context": "'userId': userData['id'],\n            'username': userData['username'],\n            'rolesCount': userData['_debug']['rolesCount'],\n            'roleDetails': userData['_debug']['roleDetails'],\n          });\n        }",
    "category": "auth",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 288,
    "column": 48,
    "original": "Benutzername muss mindestens 3 Zeichen lang sein",
    "suggested_key": "authBenutzernameMussMindestens",
    "context": "return 'Bitte gib deinen Benutzernamen ein';\n                                      }\n                                      if (value.trim().length < 3) {\n                                        return 'Benutzername muss mindestens 3 Zeichen lang sein';\n                                      }\n                                      return null;\n                                    },",
    "category": "auth",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 307,
    "column": 42,
    "original": "Benutzername muss mindestens 3 Zeichen lang sein",
    "suggested_key": "authBenutzernameMussMindestens",
    "context": "return 'Benutzername ist erforderlich';\n                                }\n                                if (value.length < 3) {\n                                  return 'Benutzername muss mindestens 3 Zeichen lang sein';\n                                }\n                                if (!RegExp(r'^[a-zA-Z0-9_]+$').hasMatch(value)) {\n                                  return 'Benutzername darf nur Buchstaben, Zahlen und Unterstriche enthalten';",
    "category": "auth",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 310,
    "column": 42,
    "original": "Benutzername darf nur Buchstaben, Zahlen und Unterstriche enthalten",
    "suggested_key": "authBenutzernameDarfNur",
    "context": "return 'Benutzername muss mindestens 3 Zeichen lang sein';\n                                }\n                                if (!RegExp(r'^[a-zA-Z0-9_]+$').hasMatch(value)) {\n                                  return 'Benutzername darf nur Buchstaben, Zahlen und Unterstriche enthalten';\n                                }\n                                return null;\n                              },",
    "category": "auth",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 411,
    "column": 42,
    "original": "Passwort muss mindestens 6 Zeichen lang sein",
    "suggested_key": "authPasswortMussMindestens",
    "context": "return 'Passwort ist erforderlich';\n                                }\n                                if (value.length < 6) {\n                                  return 'Passwort muss mindestens 6 Zeichen lang sein';\n                                }\n                                return null;\n                              },",
    "category": "auth",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 411,
    "column": 87,
    "original": ";\n                                }\n                                return null;\n                              },\n                              textInputAction: TextInputAction.done,\n                            ),\n                            const SizedBox(height: 24),\n\n                            // Error message\n                            if (_registerError != null)\n                              Container(\n                                width: double.infinity,\n                                padding: const EdgeInsets.all(12),\n                                decoration: BoxDecoration(\n                                  color: Colors.red[900]!.withOpacity(0.3),\n                                  borderRadius: BorderRadius.circular(8),\n                                  border: Border.all(color: Colors.red[400]!.withOpacity(0.5)),\n                                ),\n                                child: Text(\n                                  _registerError!,\n                                  style: TextStyle(color: Colors.red[200]),\n                                  textAlign: TextAlign.center,\n                                ),\n                              ),\n                            if (_registerError != null) const SizedBox(height: 16),\n\n                            // Register button\n                            SizedBox(\n                              width: double.infinity,\n                              height: 56,\n                              child: ElevatedButton(\n                                onPressed: _isLoading ? null : _register,\n                                style: ElevatedButton.styleFrom(\n                                  backgroundColor: AppTheme.primaryColor,\n                                  foregroundColor: Colors.white,\n                                  shape: RoundedRectangleBorder(\n                                    borderRadius: BorderRadius.circular(12),\n                                  ),\n                                  elevation: 8,\n                                  shadowColor: AppTheme.primaryColor.withOpacity(0.5),\n                                ),\n                                child: _isLoading\n                                    ? const SizedBox(\n                                        height: 20,\n                                        width: 20,\n                                        child: CircularProgressIndicator(\n                                          strokeWidth: 2,\n                                          valueColor: AlwaysStoppedAnimation<Color>(Colors.white),\n                                        ),\n                                      )\n                                    : const Text(\n                                        ",
    "suggested_key": "authReturnNullTextinputaction",
    "context": "return 'Passwort ist erforderlich';\n                                }\n                                if (value.length < 6) {\n                                  return 'Passwort muss mindestens 6 Zeichen lang sein';\n                                }\n                                return null;\n                              },",
    "category": "auth",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 291,
    "column": 46,
    "original": "Passwort muss mindestens 6 Zeichen lang sein",
    "suggested_key": "authPasswortMussMindestens",
    "context": "return 'Bitte gib ein neues Passwort ein';\n                                    }\n                                    if (value.length < 6) {\n                                      return 'Passwort muss mindestens 6 Zeichen lang sein';\n                                    }\n                                    if (value.contains(' ')) {\n                                      return 'Passwort darf keine Leerzeichen enthalten';",
    "category": "auth",
    "confidence": 0.9,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 294,
    "column": 46,
    "original": "Passwort darf keine Leerzeichen enthalten",
    "suggested_key": "authPasswortDarfKeine",
    "context": "return 'Passwort muss mindestens 6 Zeichen lang sein';\n                                    }\n                                    if (value.contains(' ')) {\n                                      return 'Passwort darf keine Leerzeichen enthalten';\n                                    }\n                                    return null;\n                                  },",
    "category": "auth",
    "confidence": 0.9,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 8,
    "column": 8,
    "original": "../features/world/world_list_page.dart",
    "suggested_key": "authFeaturesworldworld_list_pagedart",
    "context": "import '../features/auth/register_page.dart';\nimport '../features/auth/forgot_password_page.dart';\nimport '../features/auth/reset_password_page.dart';\nimport '../features/world/world_list_page.dart';\nimport '../features/world/world_join_page.dart';\nimport '../features/dashboard/dashboard_page.dart';\nimport '../features/landing/landing_page.dart';",
    "category": "auth",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 10,
    "column": 8,
    "original": "../features/dashboard/dashboard_page.dart",
    "suggested_key": "authFeaturesdashboarddashboard_pagedart",
    "context": "import '../features/auth/reset_password_page.dart';\nimport '../features/world/world_list_page.dart';\nimport '../features/world/world_join_page.dart';\nimport '../features/dashboard/dashboard_page.dart';\nimport '../features/landing/landing_page.dart';\nimport '../core/services/auth_service.dart';\nimport '../theme/app_theme.dart';",
    "category": "auth",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 600,
    "column": 59,
    "original": " wirklich verlassen?'),\n        actions: [\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(false),\n            child: const Text('Abbrechen'),\n          ),\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(true),\n            style: TextButton.styleFrom(\n              foregroundColor: Colors.red,\n            ),\n            child: const Text('Verlassen'),\n          ),\n        ],\n      ),\n    );\n    \n    if (confirmed != true) return;\n\n    setState(() {\n      _isJoining = true;\n      _joinError = null;\n    });\n\n    try {\n      await _worldService.leaveWorld(world.id);\n      setState(() {\n        _isJoined = false;\n      });\n      \n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text('Du hast ${world.name} verlassen.'),\n            backgroundColor: Colors.orange,\n          ),\n        );\n      }\n    } catch (e) {\n      setState(() {\n        _joinError = e.toString().replaceAll('Exception: ', '');\n      });\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isJoining = false;\n        });\n      }\n    }\n  }\n  \n  void _playWorld() {\n    final world = _world;\n    if (world == null) return;\n    // Navigate directly to world dashboard for playing\n    context.goNamed('world-dashboard', pathParameters: {'id': world.id.toString()});\n  }\n\n  // Welt-Status bestimmen\n  String _getWorldStatusText() {\n    final world = _world;\n    if (world == null) return 'Unbekannt';\n    return world.statusText;\n  }\n\n  // Welt-Status-Farbe\n  Color _getWorldStatusColor() {\n    final world = _world;\n    if (world == null) return Colors.grey;\n    \n    switch (world.status) {\n      case WorldStatus.upcoming:\n        return Colors.orange;\n      case WorldStatus.open:\n        return Colors.green;\n      case WorldStatus.running:\n        return Colors.blue;\n      case WorldStatus.closed:\n        return Colors.red;\n      case WorldStatus.archived:\n        return Colors.grey;\n    }\n  }\n\n  // Kann der Benutzer beitreten?\n  // Retry-Funktion\n  Future<void> _retry() async {\n    await _loadWorldData();\n  }\n\n  // Navigation zu Registration mit vorausgefüllter E-Mail\n  void _navigateToRegistration(String email) {\n    AppLogger.app.i('🎫 Navigation zur Registration mit Invite-E-Mail', error: {'email': email});\n    \n    // FIXED: Invite-Token für Post-Auth-Redirect setzen\n    if (widget.inviteToken != null) {\n      _authService.setPendingInviteRedirect(widget.inviteToken!);\n    }\n    \n    context.goNamed('register', queryParameters: {'email': email, 'invite_token': widget.inviteToken});\n  }\n\n  // Navigation zu Login \n  void _navigateToLogin(String email) {\n    AppLogger.app.i('🎫 Navigation zum Login für Invite', error: {'email': email});\n    \n    // FIXED: Invite-Token für Post-Auth-Redirect setzen\n    if (widget.inviteToken != null) {\n      _authService.setPendingInviteRedirect(widget.inviteToken!);\n    }\n    \n    context.goNamed('login', queryParameters: {'invite_token': widget.inviteToken});\n  }\n\n  // User abmelden und zur Registration weiterleiten\n  Future<void> _logout() async {\n    try {\n      AppLogger.app.i('🎫 User logout für Invite-Umleitung', error: {'inviteEmail': _inviteEmail});\n      \n      // FIXED: Invite-Token für Post-Auth-Redirect setzen BEVOR logout\n      if (widget.inviteToken != null) {\n        _authService.setPendingInviteRedirect(widget.inviteToken!);\n      }\n      \n      await _authService.logout();\n      \n      if (mounted && _inviteEmail != null) {\n        // Nach Logout zur Registration mit korrekter E-Mail\n        context.goNamed('register', queryParameters: {\n          'email': _inviteEmail!,\n          'invite_token': widget.inviteToken ?? ''\n        });\n      }\n    } catch (e) {\n      AppLogger.logError('Logout für Invite fehlgeschlagen', e);\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          const SnackBar(\n            content: Text('Fehler beim Abmelden'),\n            backgroundColor: Colors.red,\n          ),\n        );\n      }\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    \n    return Scaffold(\n      body: BackgroundWidget(\n        child: Stack(\n          children: [\n            // Main content\n            SafeArea(\n              child: _isLoading\n                  ? const Center(\n                      child: CircularProgressIndicator(\n                        valueColor: AlwaysStoppedAnimation<Color>(AppTheme.primaryColor),\n                      ),\n                    )\n                  : _errorMessage != null\n                      ? _buildErrorState()\n                      : _infoMessage != null\n                          ? _buildInfoState()\n                          : _world == null\n                              ? _buildNotFoundState()\n                              : _buildWorldContent(),\n            ),\n            \n            // User info widget (only show when authenticated)\n            if (_isAuthenticated)\n              const UserInfoWidget(),\n            \n            // Navigation widget (only show when authenticated)\n            if (_isAuthenticated)\n              NavigationWidget(\n                currentRoute: 'world-join',\n                routeParams: {'id': widget.worldId},\n                isJoinedWorld: _isJoined,\n              ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildErrorState() {\n    return Center(\n      child: Padding(\n        padding: const EdgeInsets.all(24.0),\n        child: Center(\n          child: ConstrainedBox(\n            constraints: const BoxConstraints(maxWidth: 500),\n            child: Card(\n              elevation: 12,\n              color: const Color(0xFF1A1A1A), // Dunkle Karte\n              shape: RoundedRectangleBorder(\n                borderRadius: BorderRadius.circular(20),\n                side: BorderSide(\n                  color: AppTheme.primaryColor.withOpacity(0.3),\n                  width: 1,\n                ),\n              ),\n              child: Container(\n                decoration: BoxDecoration(\n                  borderRadius: BorderRadius.circular(20),\n                  gradient: const LinearGradient(\n                    begin: Alignment.topLeft,\n                    end: Alignment.bottomRight,\n                    colors: [\n                      Color(0xFF1A1A1A),\n                      Color(0xFF2A2A2A),\n                    ],\n                  ),\n                ),\n                child: Padding(\n                  padding: const EdgeInsets.all(32.0),\n                  child: Column(\n                    mainAxisSize: MainAxisSize.min,\n                    children: [\n                      Icon(\n                        Icons.error_outline,\n                        size: 80,\n                        color: Colors.red[400],\n                      ),\n                      const SizedBox(height: 24),\n                      Text(\n                        'Fehler beim Laden',\n                        style: Theme.of(context).textTheme.headlineSmall?.copyWith(\n                          color: Colors.white,\n                          fontWeight: FontWeight.bold,\n                        ),\n                      ),\n                      const SizedBox(height: 16),\n                      Text(\n                        _errorMessage ?? 'Unbekannter Fehler',\n                        style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                          color: Colors.grey[300],\n                        ),\n                        textAlign: TextAlign.center,\n                      ),\n                      const SizedBox(height: 32),\n                      \n                      // Verschiedene Action-Buttons je nach Szenario\n                      if (_showRegistrationButton && _inviteEmail != null) ...[\n                        // Registration Button für neuen User\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: ElevatedButton.icon(\n                            onPressed: () => _navigateToRegistration(_inviteEmail!),\n                            icon: const Icon(Icons.person_add),\n                            label: const Text('Jetzt registrieren'),\n                            style: ElevatedButton.styleFrom(\n                              backgroundColor: AppTheme.primaryColor,\n                              foregroundColor: Colors.white,\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                        const SizedBox(height: 12),\n                        // Login Button als Alternative\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: OutlinedButton.icon(\n                            onPressed: () => _navigateToLogin(_inviteEmail!),\n                            icon: const Icon(Icons.login),\n                            label: const Text('Bereits registriert? Anmelden'),\n                            style: OutlinedButton.styleFrom(\n                              foregroundColor: AppTheme.primaryColor,\n                              side: BorderSide(color: AppTheme.primaryColor),\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                      ] else if (_showLogoutButton && _inviteEmail != null) ...[\n                        // Logout Button für falschen User\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: ElevatedButton.icon(\n                            onPressed: _logout,\n                            icon: const Icon(Icons.logout),\n                            label: const Text('Abmelden & neu registrieren'),\n                            style: ElevatedButton.styleFrom(\n                              backgroundColor: Colors.orange,\n                              foregroundColor: Colors.white,\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                        const SizedBox(height: 12),\n                        // Abbrechen Button\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: OutlinedButton.icon(\n                            onPressed: () => context.goNamed('landing'),\n                            icon: const Icon(Icons.arrow_back),\n                            label: const Text('Zurück zur Startseite'),\n                            style: OutlinedButton.styleFrom(\n                              foregroundColor: Colors.grey,\n                              side: BorderSide(color: Colors.grey),\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                      ] else ...[\n                        // Standard Retry Button\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: ElevatedButton.icon(\n                            onPressed: _retry,\n                            icon: const Icon(Icons.refresh),\n                            label: const Text('Erneut versuchen'),\n                            style: ElevatedButton.styleFrom(\n                              backgroundColor: AppTheme.primaryColor,\n                              foregroundColor: Colors.white,\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                      ],\n                      const SizedBox(height: 16),\n                      TextButton(\n                        onPressed: () => context.goNamed('world-list'),\n                        child: const Text(\n                          'Zurück zu den Welten',\n                          style: TextStyle(\n                            color: AppTheme.primaryColor,\n                            fontWeight: FontWeight.bold,\n                          ),\n                        ),\n                      ),\n                    ],\n                  ),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n\n  Widget _buildInfoState() {\n    return Center(\n      child: Padding(\n        padding: const EdgeInsets.all(24.0),\n        child: Center(\n          child: ConstrainedBox(\n            constraints: const BoxConstraints(maxWidth: 500),\n            child: Card(\n              elevation: 12,\n              color: const Color(0xFF1A1A1A), // Dunkle Karte\n              shape: RoundedRectangleBorder(\n                borderRadius: BorderRadius.circular(20),\n                side: BorderSide(\n                  color: AppTheme.primaryColor.withOpacity(0.3),\n                  width: 1,\n                ),\n              ),\n              child: Container(\n                decoration: BoxDecoration(\n                  borderRadius: BorderRadius.circular(20),\n                  gradient: const LinearGradient(\n                    begin: Alignment.topLeft,\n                    end: Alignment.bottomRight,\n                    colors: [\n                      Color(0xFF1A1A1A),\n                      Color(0xFF2A2A2A),\n                    ],\n                  ),\n                ),\n                child: Padding(\n                  padding: const EdgeInsets.all(32.0),\n                  child: Column(\n                    mainAxisSize: MainAxisSize.min,\n                    children: [\n                      Icon(\n                        Icons.info_outline,\n                        size: 80,\n                        color: Colors.blue[400],\n                      ),\n                      const SizedBox(height: 24),\n                      Text(\n                        'Information',\n                        style: Theme.of(context).textTheme.headlineSmall?.copyWith(\n                          color: Colors.white,\n                          fontWeight: FontWeight.bold,\n                        ),\n                      ),\n                      const SizedBox(height: 16),\n                      Text(\n                        _infoMessage ?? 'Keine Information verfügbar',\n                        style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                          color: Colors.grey[300],\n                        ),\n                        textAlign: TextAlign.center,\n                      ),\n                      const SizedBox(height: 32),\n                      \n                      // **NEUE INTELLIGENTE BUTTONS**\n                      _buildActionButtons(),\n                      \n                      // **INVITE-FLOWS: Kein ",
    "suggested_key": "buttonWirklichVerlassenActions",
    "context": "context: context,\n      builder: (context) => AlertDialog(\n        title: const Text('Welt verlassen?'),\n        content: Text('Möchtest du die Welt \"${world.name}\" wirklich verlassen?'),\n        actions: [\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(false),",
    "category": "button",
    "confidence": 0.9,
    "widget_context": "Widget: AlertDialog",
    "quote_type": "\""
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 448,
    "column": 54,
    "original": "),\n                        style: ElevatedButton.styleFrom(\n                          backgroundColor: AppTheme.primaryColor,\n                          foregroundColor: Colors.white,\n                        ),\n                      ),\n                      ElevatedButton.icon(\n                        onPressed: () => context.goNamed(",
    "suggested_key": "buttonStyleElevatedbuttonstylefromBackgroundcolor",
    "context": "ElevatedButton.icon(\n                        onPressed: () => context.goNamed('landing'),\n                        icon: const Icon(Icons.home),\n                        label: const Text('Startseite'),\n                        style: ElevatedButton.styleFrom(\n                          backgroundColor: AppTheme.primaryColor,\n                          foregroundColor: Colors.white,",
    "category": "button",
    "confidence": 0.9,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 457,
    "column": 50,
    "original": "),\n                        style: ElevatedButton.styleFrom(\n                          backgroundColor: AppTheme.surfaceColor,\n                          foregroundColor: AppTheme.textPrimary,\n                        ),\n                      ),\n                    ],\n                  ),\n                ],\n              ),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n\nclass AuthErrorPage extends StatelessWidget {\n  const AuthErrorPage({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Container(\n        decoration: BoxDecoration(\n          gradient: LinearGradient(\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n            colors: [\n              AppTheme.errorColor.withOpacity(0.1),\n              AppTheme.surfaceColor,\n            ],\n          ),\n        ),\n        child: Center(\n          child: Card(\n            elevation: 8,\n            shape: RoundedRectangleBorder(\n              borderRadius: BorderRadius.circular(16),\n            ),\n            child: Padding(\n              padding: const EdgeInsets.all(32.0),\n              child: Column(\n                mainAxisSize: MainAxisSize.min,\n                children: [\n                  const Icon(\n                    Icons.lock_outline,\n                    size: 64,\n                    color: AppTheme.errorColor,\n                  ),\n                  const SizedBox(height: 24),\n                  Text(\n                    ",
    "suggested_key": "buttonStyleElevatedbuttonstylefromBackgroundcolor",
    "context": "ElevatedButton.icon(\n                        onPressed: () => context.goNamed('world-list'),\n                        icon: const Icon(Icons.public),\n                        label: const Text('Welten'),\n                        style: ElevatedButton.styleFrom(\n                          backgroundColor: AppTheme.surfaceColor,\n                          foregroundColor: AppTheme.textPrimary,",
    "category": "button",
    "confidence": 0.9,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 528,
    "column": 48,
    "original": "),\n                    style: ElevatedButton.styleFrom(\n                      backgroundColor: AppTheme.primaryColor,\n                      foregroundColor: Colors.white,\n                      padding: const EdgeInsets.symmetric(\n                        horizontal: 24,\n                        vertical: 12,\n                      ),\n                    ),\n                  ),\n                ],\n              ),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n\nclass WorldNotFoundPage extends StatelessWidget {\n  const WorldNotFoundPage({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Container(\n        decoration: BoxDecoration(\n          gradient: LinearGradient(\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n            colors: [\n              AppTheme.primaryColor.withOpacity(0.1),\n              AppTheme.surfaceColor,\n            ],\n          ),\n        ),\n        child: Center(\n          child: Card(\n            elevation: 8,\n            shape: RoundedRectangleBorder(\n              borderRadius: BorderRadius.circular(16),\n            ),\n            child: Padding(\n              padding: const EdgeInsets.all(32.0),\n              child: Column(\n                mainAxisSize: MainAxisSize.min,\n                children: [\n                  Icon(\n                    Icons.public_off,\n                    size: 64,\n                    color: AppTheme.primaryColor.withOpacity(0.7),\n                  ),\n                  const SizedBox(height: 24),\n                  Text(\n                    ",
    "suggested_key": "buttonStyleElevatedbuttonstylefromBackgroundcolor",
    "context": "ElevatedButton.icon(\n                    onPressed: () => context.goNamed('login'),\n                    icon: const Icon(Icons.login),\n                    label: const Text('Anmelden'),\n                    style: ElevatedButton.styleFrom(\n                      backgroundColor: AppTheme.primaryColor,\n                      foregroundColor: Colors.white,",
    "category": "button",
    "confidence": 0.9,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 599,
    "column": 54,
    "original": "world-list",
    "suggested_key": "buttonWorldlist",
    "context": "),\n                  const SizedBox(height: 32),\n                  ElevatedButton.icon(\n                    onPressed: () => context.goNamed('world-list'),\n                    icon: const Icon(Icons.list),\n                    label: const Text('Alle Welten anzeigen'),\n                    style: ElevatedButton.styleFrom(",
    "category": "button",
    "confidence": 0.9,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\pre_register_dialog.dart",
    "line": 128,
    "column": 26,
    "original": "Bitte geben Sie eine gültige E-Mail-Adresse ein",
    "suggested_key": "dialogBitteGebenSie",
    "context": "return 'E-Mail-Adresse ist erforderlich';\n                }\n                if (!RegExp(r'^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$').hasMatch(value)) {\n                  return 'Bitte geben Sie eine gültige E-Mail-Adresse ein';\n                }\n                return null;\n              },",
    "category": "dialog",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\pre_register_dialog.dart",
    "line": 128,
    "column": 26,
    "original": "Bitte geben Sie eine gültige E-Mail-Adresse ein",
    "suggested_key": "dialogBitteGebenSie",
    "context": "return 'E-Mail-Adresse ist erforderlich';\n                }\n                if (!RegExp(r'^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$').hasMatch(value)) {\n                  return 'Bitte geben Sie eine gültige E-Mail-Adresse ein';\n                }\n                return null;\n              },",
    "category": "dialog",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 116,
    "column": 25,
    "original": "❌ Token-Validierung fehlgeschlagen",
    "suggested_key": "errorTokenvalidierungFehlgeschlagen",
    "context": "await authService.logout();\n        }\n      } catch (e) {\n        AppLogger.app.e('❌ Token-Validierung fehlgeschlagen', error: e);\n        // Bei Token-Validierungsfehlern einfach ausloggen\n        await authService.logout();\n      }",
    "category": "error",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 129,
    "column": 29,
    "original": "👤 Kein gespeicherter User gefunden",
    "suggested_key": "errorKeinGespeicherterUser",
    "context": "authService.isAuthenticated.value = true;\n            AppLogger.app.i('👤 User geladen und authentifiziert');\n          } else {\n            AppLogger.app.i('👤 Kein gespeicherter User gefunden');\n          }\n        } catch (e) {\n          AppLogger.app.e('❌ User-Load fehlgeschlagen', error: e);",
    "category": "error",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 135,
    "column": 25,
    "original": "👤 Keine gültigen Tokens - User-Load übersprungen",
    "suggested_key": "errorKeineGültigenTokens",
    "context": "AppLogger.app.e('❌ User-Load fehlgeschlagen', error: e);\n        }\n      } else {\n        AppLogger.app.i('👤 Keine gültigen Tokens - User-Load übersprungen');\n      }\n      \n      // Auth-Cache beim App-Start invalidieren",
    "category": "error",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 143,
    "column": 64,
    "original": ", error: e);\n      // Bei Auth-Service-Fehlern einfach weitermachen\n      // Die App kann auch ohne gültige Tokens funktionieren\n    }\n  }\n  \n  // Timeout-Callback für SplashScreen\n  void _onTimeout() {\n    AppLogger.app.w(",
    "suggested_key": "errorErrorEBei",
    "context": "AppLogger.app.i('✅ Initialisierung abgeschlossen');\n    } catch (e) {\n      AppLogger.app.e('❌ Service-Initialisierung fehlgeschlagen', error: e);\n      // Bei Auth-Service-Fehlern einfach weitermachen\n      // Die App kann auch ohne gültige Tokens funktionieren\n    }",
    "category": "error",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 116,
    "column": 25,
    "original": "❌ Token-Validierung fehlgeschlagen",
    "suggested_key": "errorTokenvalidierungFehlgeschlagen",
    "context": "await authService.logout();\n        }\n      } catch (e) {\n        AppLogger.app.e('❌ Token-Validierung fehlgeschlagen', error: e);\n        // Bei Token-Validierungsfehlern einfach ausloggen\n        await authService.logout();\n      }",
    "category": "error",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 135,
    "column": 25,
    "original": "👤 Keine gültigen Tokens - User-Load übersprungen",
    "suggested_key": "errorKeineGültigenTokens",
    "context": "AppLogger.app.e('❌ User-Load fehlgeschlagen', error: e);\n        }\n      } else {\n        AppLogger.app.i('👤 Keine gültigen Tokens - User-Load übersprungen');\n      }\n      \n      // Auth-Cache beim App-Start invalidieren",
    "category": "error",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 143,
    "column": 64,
    "original": ", error: e);\n      // Bei Auth-Service-Fehlern einfach weitermachen\n      // Die App kann auch ohne gültige Tokens funktionieren\n    }\n  }\n  \n  // Timeout-Callback für SplashScreen\n  void _onTimeout() {\n    AppLogger.app.w(",
    "suggested_key": "errorErrorEBei",
    "context": "AppLogger.app.i('✅ Initialisierung abgeschlossen');\n    } catch (e) {\n      AppLogger.app.e('❌ Service-Initialisierung fehlgeschlagen', error: e);\n      // Bei Auth-Service-Fehlern einfach weitermachen\n      // Die App kann auch ohne gültige Tokens funktionieren\n    }",
    "category": "error",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\config\\logger.dart",
    "line": 41,
    "column": 47,
    "original": "),\n      level: Level.warning,\n      output: _getLogOutput(),\n    );\n  }\n\n  /// Custom Log Printer mit strukturiertem Format\n  static LogPrinter _getLogPrinter({String? prefix}) {\n    return PrettyPrinter(\n      methodCount: 2, // Stack trace depth\n      errorMethodCount: 8, // Error stack trace depth\n      lineLength: 120, // Width of the output\n      colors: kDebugMode, // Colorful log in debug mode\n      printEmojis: true, // Print emoji for each log level\n      dateTimeFormat: DateTimeFormat.onlyTimeAndSinceStart, // Include timestamp\n      noBoxingByDefault: false,\n    );\n  }\n\n  /// Log Output - Debug: Console, Release: File + Remote\n  static LogOutput _getLogOutput() {\n    if (kDebugMode) {\n      return ConsoleOutput();\n    } else {\n      // In Production: File + Remote Upload\n      return MultiOutput([\n        ConsoleOutput(),\n        FileOutput(), // Local file storage\n        // TODO: RemoteOutput(), // Upload to backend\n      ]);\n    }\n  }\n\n  // === Public API ===\n\n  /// General App Logger\n  static Logger get app => _logger;\n\n  /// API Calls & Responses\n  static Logger get api => _apiLogger;\n\n  /// Authentication Events\n  static Logger get auth => _authLogger;\n\n  /// Navigation & Routing\n  static Logger get navigation => _navigationLogger;\n\n  /// Errors & Crashes\n  static Logger get error => _errorLogger;\n\n  // === Convenience Methods ===\n\n  /// Log API Request\n  static void logApiRequest(String method, String url, {Map<String, dynamic>? headers, dynamic body}) {\n    api.i(",
    "suggested_key": "errorLevelLevelwarningOutput",
    "context": ");\n\n    _errorLogger = Logger(\n      printer: _getLogPrinter(prefix: '[ERROR]'),\n      level: Level.warning,\n      output: _getLogOutput(),\n    );",
    "category": "error",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 108,
    "column": 25,
    "original": "⚠️ Token-Validierung fehlgeschlagen",
    "suggested_key": "errorTokenvalidierungFehlgeschlagen",
    "context": "}\n      } catch (e) {\n        // Token validation error\n        AppLogger.api.w('⚠️ Token-Validierung fehlgeschlagen', error: e);\n        await _authService.refreshTokenIfNeeded();\n      } finally {\n        _isValidatingToken = false;",
    "category": "error",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 157,
    "column": 56,
    "original": ", error: e);\n        // Bei Token-Refresh-Fehlern automatisch ausloggen\n        await _authService.logout();\n        // Cache invalidieren nach Logout\n        AppRouter.invalidateAuthCache();\n      }\n    }\n    return response;\n  }\n\n  // Vollständige Request-Wiederholung für alle HTTP-Methoden mit erweiterter Kontext-Verwaltung\n  Future<http.Response> _retryRequest(String endpoint, String method) async {\n    switch (method) {\n      case ",
    "suggested_key": "errorErrorEBei",
    "context": "}\n        }\n      } catch (e) {\n        AppLogger.api.e('❌ Token-Refresh fehlgeschlagen', error: e);\n        // Bei Token-Refresh-Fehlern automatisch ausloggen\n        await _authService.logout();\n        // Cache invalidieren nach Logout",
    "category": "error",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 283,
    "column": 66,
    "original": "/pre-register/me",
    "suggested_key": "errorPreregisterme",
    "context": "// Don't log 404 errors for player status checks\n      if (response.statusCode == 404 && \n          (endpoint.contains('/players/me') || endpoint.contains('/pre-register/me'))) {\n        return response;\n      }",
    "category": "error",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 290,
    "column": 33,
    "original": ", endpoint, error, stackTrace: stackTrace);\n      rethrow;\n    }\n  }\n\n  Future<http.Response> post(String endpoint, Map<String, dynamic> data) async {\n    await _ensureInitialized();\n    \n    // Erweiterte Request-Kontext-Verwaltung für parallele Requests\n    _requestBodies[endpoint] = data;\n    \n    // Log API Request (ohne sensitive Daten für Auth-Endpoints)\n    final logBody = endpoint.startsWith(",
    "suggested_key": "errorEndpointErrorStacktrace",
    "context": "return await _handleResponse(response, endpoint);\n    } catch (error, stackTrace) {\n      // Log API Error\n      AppLogger.logApiError('GET', endpoint, error, stackTrace: stackTrace);\n      rethrow;\n    }\n  }",
    "category": "error",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 324,
    "column": 34,
    "original": ", endpoint, error, stackTrace: stackTrace);\n      rethrow;\n    }\n  }\n\n  Future<http.Response> put(String endpoint, Map<String, dynamic> data) async {\n    await _ensureInitialized();\n    \n    // Erweiterte Request-Kontext-Verwaltung für parallele Requests\n    _requestBodies[endpoint] = data;\n    \n    // Log API Request\n    AppLogger.logApiRequest(",
    "suggested_key": "errorEndpointErrorStacktrace",
    "context": "return await _handleResponse(response, endpoint);\n    } catch (error, stackTrace) {\n      // Log API Error\n      AppLogger.logApiError('POST', endpoint, error, stackTrace: stackTrace);\n      rethrow;\n    }\n  }",
    "category": "error",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 356,
    "column": 33,
    "original": ", endpoint, error, stackTrace: stackTrace);\n      rethrow;\n    }\n  }\n\n  Future<http.Response> delete(String endpoint) async {\n    await _ensureInitialized();\n    \n    // Log API Request\n    AppLogger.logApiRequest(",
    "suggested_key": "errorEndpointErrorStacktrace",
    "context": "return await _handleResponse(response, endpoint);\n    } catch (error, stackTrace) {\n      // Log API Error\n      AppLogger.logApiError('PUT', endpoint, error, stackTrace: stackTrace);\n      rethrow;\n    }\n  }",
    "category": "error",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 108,
    "column": 61,
    "original": ", error: e);\n        await _authService.refreshTokenIfNeeded();\n      } finally {\n        _isValidatingToken = false;\n      }\n    }\n  }\n\n  // Response-Interceptor mit Header-Parsing für proaktive Token-Erneuerung\n  Future<http.Response> _handleResponse(http.Response response, String endpoint) async {\n    // Proaktive Token-Erneuerung basierend auf Response-Headers\n    if (response.headers[",
    "suggested_key": "errorErrorEAwait",
    "context": "}\n      } catch (e) {\n        // Token validation error\n        AppLogger.api.w('⚠️ Token-Validierung fehlgeschlagen', error: e);\n        await _authService.refreshTokenIfNeeded();\n      } finally {\n        _isValidatingToken = false;",
    "category": "error",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 136,
    "column": 27,
    "original": "❌ Proaktive Token-Erneuerung fehlgeschlagen",
    "suggested_key": "errorProaktiveTokenerneuerungFehlgeschlagen",
    "context": "}\n          }\n        } catch (e) {\n          AppLogger.api.e('❌ Proaktive Token-Erneuerung fehlgeschlagen', error: e);\n        }\n      }\n    }",
    "category": "error",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 157,
    "column": 25,
    "original": "❌ Token-Refresh fehlgeschlagen",
    "suggested_key": "errorTokenrefreshFehlgeschlagen",
    "context": "}\n        }\n      } catch (e) {\n        AppLogger.api.e('❌ Token-Refresh fehlgeschlagen', error: e);\n        // Bei Token-Refresh-Fehlern automatisch ausloggen\n        await _authService.logout();\n        // Cache invalidieren nach Logout",
    "category": "error",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 290,
    "column": 33,
    "original": ", endpoint, error, stackTrace: stackTrace);\n      rethrow;\n    }\n  }\n\n  Future<http.Response> post(String endpoint, Map<String, dynamic> data) async {\n    await _ensureInitialized();\n    \n    // Erweiterte Request-Kontext-Verwaltung für parallele Requests\n    _requestBodies[endpoint] = data;\n    \n    // Log API Request (ohne sensitive Daten für Auth-Endpoints)\n    final logBody = endpoint.startsWith(",
    "suggested_key": "errorEndpointErrorStacktrace",
    "context": "return await _handleResponse(response, endpoint);\n    } catch (error, stackTrace) {\n      // Log API Error\n      AppLogger.logApiError('GET', endpoint, error, stackTrace: stackTrace);\n      rethrow;\n    }\n  }",
    "category": "error",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 324,
    "column": 34,
    "original": ", endpoint, error, stackTrace: stackTrace);\n      rethrow;\n    }\n  }\n\n  Future<http.Response> put(String endpoint, Map<String, dynamic> data) async {\n    await _ensureInitialized();\n    \n    // Erweiterte Request-Kontext-Verwaltung für parallele Requests\n    _requestBodies[endpoint] = data;\n    \n    // Log API Request\n    AppLogger.logApiRequest(",
    "suggested_key": "errorEndpointErrorStacktrace",
    "context": "return await _handleResponse(response, endpoint);\n    } catch (error, stackTrace) {\n      // Log API Error\n      AppLogger.logApiError('POST', endpoint, error, stackTrace: stackTrace);\n      rethrow;\n    }\n  }",
    "category": "error",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\main.dart",
    "line": 18,
    "column": 49,
    "original": ");\n    }\n    return service as T;\n  }\n\n  static bool has<T>() {\n    return _services.containsKey(T);\n  }\n\n  static void clear() {\n    _services.clear();\n  }\n}\n\nvoid main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n\n  // Initialisiere das Logging-System\n  AppLogger.initialize();\n  AppLogger.app.i(",
    "suggested_key": "errorReturnServiceAs",
    "context": "static T get<T>() {\n    final service = _services[T];\n    if (service == null) {\n      throw Exception('Service $T not registered');\n    }\n    return service as T;\n  }",
    "category": "error",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 52,
    "column": 51,
    "original": ";\n  static const String worldDashboardRoute = ",
    "suggested_key": "errorStaticConstString",
    "context": "static const String registerRoute = 'register';\n  static const String forgotPasswordRoute = 'forgot-password';\n  static const String resetPasswordRoute = 'reset-password';\n  static const String worldListRoute = 'world-list';\n  static const String worldDashboardRoute = 'world-dashboard';\n  static const String worldJoinRoute = 'world-join';\n  static const String errorRoute = 'error';",
    "category": "error",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 55,
    "column": 42,
    "original": ";\n\n  // NavigatorKey für zukünftige Shell-Integration (z.B. BottomNav)\n  static final GlobalKey<NavigatorState> _rootNavigatorKey = GlobalKey<NavigatorState>();\n\n  static GoRouter? _routerInstance;\n  static bool _isInitialized = false;\n  \n  // Helper method to safely get AuthService - komplett unabhängig von ServiceLocator\n  static AuthService? _getAuthService() {\n    try {\n      if (ServiceLocator.has<AuthService>()) {\n        return ServiceLocator.get<AuthService>();\n      }\n    } catch (e) {\n      AppLogger.navigation.w(",
    "suggested_key": "errorNavigatorkeyFürZukünftige",
    "context": "static const String worldListRoute = 'world-list';\n  static const String worldDashboardRoute = 'world-dashboard';\n  static const String worldJoinRoute = 'world-join';\n  static const String errorRoute = 'error';\n\n  // NavigatorKey für zukünftige Shell-Integration (z.B. BottomNav)\n  static final GlobalKey<NavigatorState> _rootNavigatorKey = GlobalKey<NavigatorState>();",
    "category": "error",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 70,
    "column": 55,
    "original": ", error: e);\n    }\n    // Kein Fallback - Services sind nicht verfügbar\n    return null;\n  }\n  \n  static GoRouter get router {\n    AppLogger.navigation.d(",
    "suggested_key": "errorErrorEKein",
    "context": "return ServiceLocator.get<AuthService>();\n      }\n    } catch (e) {\n      AppLogger.navigation.w('⚠️ ServiceLocator Fehler', error: e);\n    }\n    // Kein Fallback - Services sind nicht verfügbar\n    return null;",
    "category": "error",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 77,
    "column": 78,
    "original": ": _routerInstance != null});\n    \n    if (_routerInstance != null) {\n      return _routerInstance!;\n    }\n    \n    // Router nur einmal initialisieren\n    if (!_isInitialized) {\n      AppLogger.navigation.i(",
    "suggested_key": "error_routerinstanceNullIf",
    "context": "}\n  \n  static GoRouter get router {\n    AppLogger.navigation.d('🔍 Router-Instanz angefragt', error: {'initialized': _routerInstance != null});\n    \n    if (_routerInstance != null) {\n      return _routerInstance!;",
    "category": "error",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 114,
    "column": 36,
    "original": "🔒 Redirect zu Login",
    "suggested_key": "errorRedirectZuLogin",
    "context": "!isInviteRoute; // Invite-Routen ausschließen\n\n          if (!isLoggedIn && isProtectedRoute) {\n            AppLogger.navigation.i('🔒 Redirect zu Login', error: {'from': state.matchedLocation});\n            return '/go/auth/login';\n          }",
    "category": "error",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 119,
    "column": 36,
    "original": "🏠 Redirect zu Worlds",
    "suggested_key": "errorRedirectZuWorlds",
    "context": "}\n\n          if (isLoggedIn && isAuthRoute) {\n            AppLogger.navigation.i('🏠 Redirect zu Worlds', error: {'from': state.matchedLocation});\n            return '/go/worlds';\n          }",
    "category": "error",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 120,
    "column": 31,
    "original": ";\n          }\n\n          // Invite-Routen werden durchgelassen (keine Weiterleitung)\n          if (isInviteRoute) {\n            AppLogger.navigation.i(",
    "suggested_key": "errorInviteroutenWerdenDurchgelassen",
    "context": "if (isLoggedIn && isAuthRoute) {\n            AppLogger.navigation.i('🏠 Redirect zu Worlds', error: {'from': state.matchedLocation});\n            return '/go/worlds';\n          }\n\n          // Invite-Routen werden durchgelassen (keine Weiterleitung)",
    "category": "error",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 130,
    "column": 59,
    "original": ", error: e, stackTrace: StackTrace.current);\n          // Bei Fehlern zur Login-Seite weiterleiten\n          return ",
    "suggested_key": "errorErrorEStacktrace",
    "context": "return null;\n        } catch (e) {\n          AppLogger.navigation.e('❌ Router Redirect Fehler', error: e, stackTrace: StackTrace.current);\n          // Bei Fehlern zur Login-Seite weiterleiten\n          return '/go/auth/login';\n        }",
    "category": "error",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 212,
    "column": 51,
    "original": "];\n          if (worldId == null) {\n            return CustomTransitionPage(\n              child: const ErrorPage(),\n              transitionsBuilder: (context, animation, secondaryAnimation, child) =>\n                SlideTransition(\n                  position: Tween<Offset>(\n                    begin: const Offset(0.0, 1.0),\n                    end: Offset.zero,\n                  ).animate(CurvedAnimation(\n                    parent: animation,\n                    curve: Curves.easeInOut,\n                  )),\n                  child: child,\n                ),\n            );\n          }\n          return CustomTransitionPage(\n            child: DashboardPage(worldId: worldId),\n            transitionsBuilder: (context, animation, secondaryAnimation, child) =>\n              SlideTransition(\n                position: Tween<Offset>(\n                  begin: const Offset(0.0, 1.0),\n                  end: Offset.zero,\n                ).animate(CurvedAnimation(\n                  parent: animation,\n                  curve: Curves.easeInOut,\n                )),\n                child: child,\n              ),\n          );\n        },\n      ),\n      // NORMALE WORLD-JOIN Route (über interne Navigation)\n      GoRoute(\n        path: ",
    "suggested_key": "errorIfWorldidNull",
    "context": "path: '/go/worlds/:id',\n        name: worldDashboardRoute,\n        pageBuilder: (context, state) {\n          final worldId = state.pathParameters['id'];\n          if (worldId == null) {\n            return CustomTransitionPage(\n              child: const ErrorPage(),",
    "category": "error",
    "confidence": 0.9,
    "widget_context": "Widget: child property",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 250,
    "column": 51,
    "original": "];\n          if (worldId == null) {\n            return CustomTransitionPage(\n              child: const ErrorPage(),\n              transitionsBuilder: (context, animation, secondaryAnimation, child) =>\n                SlideTransition(\n                  position: Tween<Offset>(\n                    begin: const Offset(0.0, 1.0),\n                    end: Offset.zero,\n                  ).animate(CurvedAnimation(\n                    parent: animation,\n                    curve: Curves.easeInOut,\n                  )),\n                  child: child,\n                ),\n            );\n          }\n          return CustomTransitionPage(\n            child: WorldJoinPage(\n              worldId: worldId,\n              flowType: WorldJoinFlowType.normal, // KLARE FLOW-KENNZEICHNUNG\n            ),\n            transitionsBuilder: (context, animation, secondaryAnimation, child) =>\n              SlideTransition(\n                position: Tween<Offset>(\n                  begin: const Offset(0.0, 1.0),\n                  end: Offset.zero,\n                ).animate(CurvedAnimation(\n                  parent: animation,\n                  curve: Curves.easeInOut,\n                )),\n                child: child,\n              ),\n          );\n        },\n      ),\n      // INVITE-FLOW Route (externe Links)\n      GoRoute(\n        path: ",
    "suggested_key": "errorIfWorldidNull",
    "context": "path: '/go/worlds/:id/join',\n        name: worldJoinRoute,\n        pageBuilder: (context, state) {\n          final worldId = state.pathParameters['id'];\n          if (worldId == null) {\n            return CustomTransitionPage(\n              child: const ErrorPage(),",
    "category": "error",
    "confidence": 0.9,
    "widget_context": "Widget: child property",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 293,
    "column": 74,
    "original": ": state.matchedLocation});\n            return CustomTransitionPage(\n              child: const ErrorPage(),\n              transitionsBuilder: (context, animation, secondaryAnimation, child) =>\n                SlideTransition(\n                  position: Tween<Offset>(\n                    begin: const Offset(0.0, 1.0),\n                    end: Offset.zero,\n                  ).animate(CurvedAnimation(\n                    parent: animation,\n                    curve: Curves.easeInOut,\n                  )),\n                  child: child,\n                ),\n            );\n          }\n          AppLogger.navigation.i(",
    "suggested_key": "errorStatematchedlocationReturnCustomtransitionpage",
    "context": "pageBuilder: (context, state) {\n          final token = state.pathParameters['token'];\n          if (token == null || token.isEmpty) {\n            AppLogger.navigation.w('⚠️ Invite-Token fehlt', error: {'path': state.matchedLocation});\n            return CustomTransitionPage(\n              child: const ErrorPage(),\n              transitionsBuilder: (context, animation, secondaryAnimation, child) =>",
    "category": "error",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 309,
    "column": 105,
    "original": "});\n          return CustomTransitionPage(\n            child: WorldJoinPage(\n              inviteToken: token,\n              flowType: WorldJoinFlowType.invite, // KLARE FLOW-KENNZEICHNUNG\n            ),\n            transitionsBuilder: (context, animation, secondaryAnimation, child) =>\n              SlideTransition(\n                position: Tween<Offset>(\n                  begin: const Offset(0.0, 1.0),\n                  end: Offset.zero,\n                ).animate(CurvedAnimation(\n                  parent: animation,\n                  curve: Curves.easeInOut,\n                )),\n                child: child,\n              ),\n          );\n        },\n      ),\n    ],\n    \n    // Verbesserte Fehlerbehandlung mit robuster 404-Erkennung\n    errorBuilder: (context, state) {\n      // Spezifische Fehlerbehandlung basierend auf Error-Typ\n      if (state.error is GoException) {\n        final goException = state.error as GoException;\n        \n        // Auth-Fehler\n        if (goException.message.contains(",
    "suggested_key": "errorReturnCustomtransitionpageChild",
    "context": "),\n            );\n          }\n          AppLogger.navigation.i('🎫 Invite-Token erkannt', error: {'token': token.substring(0, 8) + '...'});\n          return CustomTransitionPage(\n            child: WorldJoinPage(\n              inviteToken: token,",
    "category": "error",
    "confidence": 0.9,
    "widget_context": "Widget: child property",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 338,
    "column": 46,
    "original": ")) {\n          return const AuthErrorPage();\n        }\n        \n        // Welt nicht gefunden - robuste Erkennung\n        if (goException.message.contains(",
    "suggested_key": "errorReturnConstAutherrorpage",
    "context": "final goException = state.error as GoException;\n        \n        // Auth-Fehler\n        if (goException.message.contains('401')) {\n          return const AuthErrorPage();\n        }",
    "category": "error",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 345,
    "column": 53,
    "original": "))) {\n          return const WorldNotFoundPage();\n        }\n      }\n      \n      // Standard 404-Fehlerseite\n      return const ErrorPage();\n    },\n  );\n        \n        _isInitialized = true;\n      } catch (e) {\n        // Bei Fehler während der Initialisierung\n        AppLogger.navigation.e(",
    "suggested_key": "errorReturnConstWorldnotfoundpage",
    "context": "// Welt nicht gefunden - robuste Erkennung\n        if (goException.message.contains('404') && \n            (state.matchedLocation.contains('/worlds/') || \n             state.uri.pathSegments.contains('worlds'))) {\n          return const WorldNotFoundPage();\n        }\n      }",
    "category": "error",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 358,
    "column": 65,
    "original": ", error: e);\n        // Fallback: Minimaler Router nur mit Error Page\n        _routerInstance = GoRouter(\n          initialLocation: ",
    "suggested_key": "errorErrorEFallback",
    "context": "_isInitialized = true;\n      } catch (e) {\n        // Bei Fehler während der Initialisierung\n        AppLogger.navigation.e('❌ Router Initialisierungs-Fehler', error: e);\n        // Fallback: Minimaler Router nur mit Error Page\n        _routerInstance = GoRouter(\n          initialLocation: '/go',",
    "category": "error",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 364,
    "column": 25,
    "original": ",\n              builder: (context, state) => const ErrorPage(),\n            ),\n          ],\n        );\n        _isInitialized = true;\n      }\n    }\n    return _routerInstance!;\n  }\n\n  // Getter für NavigatorKey (für zukünftige Shell-Integration)\n  static GlobalKey<NavigatorState> get rootNavigatorKey => _rootNavigatorKey;\n  \n  // Public Methoden für Cache-Management\n  static void invalidateAuthCache() {\n    // Caching entfernt, daher keine Cache-Invalidierung mehr nötig\n  }\n  static bool? get cachedLoginState => null; // Caching entfernt\n  \n  // Cache beim App-Start invalidieren\n  static void invalidateCacheOnStart() {\n    // Caching entfernt, daher keine Cache-Invalidierung mehr nötig\n    AppLogger.navigation.i(",
    "suggested_key": "errorBuilderContextState",
    "context": "initialLocation: '/go',\n          routes: [\n            GoRoute(\n              path: '/go',\n              builder: (context, state) => const ErrorPage(),\n            ),\n          ],",
    "category": "error",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 70,
    "column": 30,
    "original": "⚠️ ServiceLocator Fehler",
    "suggested_key": "errorServicelocatorFehler",
    "context": "return ServiceLocator.get<AuthService>();\n      }\n    } catch (e) {\n      AppLogger.navigation.w('⚠️ ServiceLocator Fehler', error: e);\n    }\n    // Kein Fallback - Services sind nicht verfügbar\n    return null;",
    "category": "error",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 120,
    "column": 31,
    "original": ";\n          }\n\n          // Invite-Routen werden durchgelassen (keine Weiterleitung)\n          if (isInviteRoute) {\n            AppLogger.navigation.i(",
    "suggested_key": "errorInviteroutenWerdenDurchgelassen",
    "context": "if (isLoggedIn && isAuthRoute) {\n            AppLogger.navigation.i('🏠 Redirect zu Worlds', error: {'from': state.matchedLocation});\n            return '/go/worlds';\n          }\n\n          // Invite-Routen werden durchgelassen (keine Weiterleitung)",
    "category": "error",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 130,
    "column": 34,
    "original": "❌ Router Redirect Fehler",
    "suggested_key": "errorRouterRedirectFehler",
    "context": "return null;\n        } catch (e) {\n          AppLogger.navigation.e('❌ Router Redirect Fehler', error: e, stackTrace: StackTrace.current);\n          // Bei Fehlern zur Login-Seite weiterleiten\n          return '/go/auth/login';\n        }",
    "category": "error",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 293,
    "column": 36,
    "original": "⚠️ Invite-Token fehlt",
    "suggested_key": "errorInvitetokenFehlt",
    "context": "pageBuilder: (context, state) {\n          final token = state.pathParameters['token'];\n          if (token == null || token.isEmpty) {\n            AppLogger.navigation.w('⚠️ Invite-Token fehlt', error: {'path': state.matchedLocation});\n            return CustomTransitionPage(\n              child: const ErrorPage(),\n              transitionsBuilder: (context, animation, secondaryAnimation, child) =>",
    "category": "error",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 309,
    "column": 34,
    "original": "🎫 Invite-Token erkannt",
    "suggested_key": "errorInvitetokenErkannt",
    "context": "),\n            );\n          }\n          AppLogger.navigation.i('🎫 Invite-Token erkannt', error: {'token': token.substring(0, 8) + '...'});\n          return CustomTransitionPage(\n            child: WorldJoinPage(\n              inviteToken: token,",
    "category": "error",
    "confidence": 0.9,
    "widget_context": "Widget: child property",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 309,
    "column": 105,
    "original": "});\n          return CustomTransitionPage(\n            child: WorldJoinPage(\n              inviteToken: token,\n              flowType: WorldJoinFlowType.invite, // KLARE FLOW-KENNZEICHNUNG\n            ),\n            transitionsBuilder: (context, animation, secondaryAnimation, child) =>\n              SlideTransition(\n                position: Tween<Offset>(\n                  begin: const Offset(0.0, 1.0),\n                  end: Offset.zero,\n                ).animate(CurvedAnimation(\n                  parent: animation,\n                  curve: Curves.easeInOut,\n                )),\n                child: child,\n              ),\n          );\n        },\n      ),\n    ],\n    \n    // Verbesserte Fehlerbehandlung mit robuster 404-Erkennung\n    errorBuilder: (context, state) {\n      // Spezifische Fehlerbehandlung basierend auf Error-Typ\n      if (state.error is GoException) {\n        final goException = state.error as GoException;\n        \n        // Auth-Fehler\n        if (goException.message.contains(",
    "suggested_key": "errorReturnCustomtransitionpageChild",
    "context": "),\n            );\n          }\n          AppLogger.navigation.i('🎫 Invite-Token erkannt', error: {'token': token.substring(0, 8) + '...'});\n          return CustomTransitionPage(\n            child: WorldJoinPage(\n              inviteToken: token,",
    "category": "error",
    "confidence": 0.9,
    "widget_context": "Widget: child property",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 345,
    "column": 53,
    "original": "))) {\n          return const WorldNotFoundPage();\n        }\n      }\n      \n      // Standard 404-Fehlerseite\n      return const ErrorPage();\n    },\n  );\n        \n        _isInitialized = true;\n      } catch (e) {\n        // Bei Fehler während der Initialisierung\n        AppLogger.navigation.e(",
    "suggested_key": "errorReturnConstWorldnotfoundpage",
    "context": "// Welt nicht gefunden - robuste Erkennung\n        if (goException.message.contains('404') && \n            (state.matchedLocation.contains('/worlds/') || \n             state.uri.pathSegments.contains('worlds'))) {\n          return const WorldNotFoundPage();\n        }\n      }",
    "category": "error",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\splash_screen.dart",
    "line": 88,
    "column": 70,
    "original": ", e);\n      \n      if (mounted) {\n        setState(() {\n          _error = e.toString();\n        });\n      }\n    }\n  }\n\n  Future<void> _runInitializationWithSteps() async {\n    final initSteps = widget.initSteps;\n    if (initSteps != null && initSteps.isNotEmpty) {\n      for (int i = 0; i < initSteps.length; i++) {\n        if (mounted) {\n          setState(() {\n            _currentStepIndex = i;\n            _currentStepName = initSteps[i];\n          });\n        }\n        \n        // Simuliere Schritt-für-Schritt Initialisierung\n        await Future.delayed(const Duration(milliseconds: 300));\n      }\n    }\n    \n    // Führe die eigentliche Initialisierung aus\n    await widget.initializationFunction();\n  }\n\n  @override\n  void dispose() {\n    _animationController.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    if (_error != null) {\n      return _buildErrorScreen();\n    }\n    \n    if (_isInitialized) {\n      // Direkt das Child anzeigen ohne FadeTransition die ausblendet\n      return widget.child;\n    }\n    \n    return _buildSplashScreen();\n  }\n\n  Widget _buildSplashScreen() {\n    final initSteps = widget.initSteps;\n    final loadingText = widget.loadingText;\n    \n    return Scaffold(\n      backgroundColor: Theme.of(context).primaryColor,\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            // App Logo/Icon\n            widget.logo ?? Container(\n              width: 120,\n              height: 120,\n              decoration: BoxDecoration(\n                color: Colors.white,\n                borderRadius: BorderRadius.circular(20),\n                boxShadow: [\n                  BoxShadow(\n                    color: Colors.black.withOpacity(0.1),\n                    blurRadius: 10,\n                    offset: const Offset(0, 5),\n                  ),\n                ],\n              ),\n              child: const Icon(\n                Icons.public,\n                size: 60,\n                color: Colors.blue,\n              ),\n            ),\n            \n            const SizedBox(height: 40),\n            \n            // App Name\n            Text(\n              widget.appName ?? ",
    "suggested_key": "errorEIfMounted",
    "context": "// _animationController.reverse(); // ENTFERNT\n      }\n    } catch (e) {\n      AppLogger.logError('SplashScreen Initialisierung fehlgeschlagen', e);\n      \n      if (mounted) {\n        setState(() {",
    "category": "error",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\splash_screen.dart",
    "line": 290,
    "column": 27,
    "original": "Unbekannter Fehler",
    "suggested_key": "errorUnbekannterFehler",
    "context": "const SizedBox(height: 10),\n              \n              Text(\n                _error ?? 'Unbekannter Fehler',\n                textAlign: TextAlign.center,\n                style: const TextStyle(\n                  fontSize: 16,",
    "category": "error",
    "confidence": 0.9,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 68,
    "column": 21,
    "original": ": DateTime.now().millisecondsSinceEpoch.toString(),\n    };\n    \n    if (_token != null) {\n      headers[",
    "suggested_key": "inviteDatetimenowmillisecondssinceepochtostringIf_token",
    "context": "'Content-Type': 'application/json',\n      'X-Device-Fingerprint': deviceFingerprint,\n      'X-Client-Timezone': 'Europe/Berlin',\n      'X-Client-Time': DateTime.now().millisecondsSinceEpoch.toString(),\n    };\n    \n    if (_token != null) {",
    "category": "invite",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 88,
    "column": 35,
    "original": "] as int;\n          final now = DateTime.now().millisecondsSinceEpoch ~/ 1000;\n          \n          // Token erneuern wenn weniger als 60 Sekunden gültig\n          if (exp - now < 60) {\n            // Log Token-Refresh\n            AppLogger.api.i(",
    "suggested_key": "inviteAsIntFinal",
    "context": "final parts = token.split('.');\n        if (parts.length == 3) {\n          final payload = jsonDecode(utf8.decode(base64Url.decode(base64Url.normalize(parts[1]))));\n          final exp = payload['exp'] as int;\n          final now = DateTime.now().millisecondsSinceEpoch ~/ 1000;\n          \n          // Token erneuern wenn weniger als 60 Sekunden gültig",
    "category": "invite",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 119,
    "column": 58,
    "original": ") {\n      final expiresIn = int.tryParse(response.headers[",
    "suggested_key": "inviteFinalExpiresinInttryparseresponseheaders",
    "context": "// Response-Interceptor mit Header-Parsing für proaktive Token-Erneuerung\n  Future<http.Response> _handleResponse(http.Response response, String endpoint) async {\n    // Proaktive Token-Erneuerung basierend auf Response-Headers\n    if (response.headers['x-token-expires-soon'] == 'true') {\n      final expiresIn = int.tryParse(response.headers['x-token-expires-in'] ?? '0');\n      if (expiresIn != null && expiresIn < 60) {\n        try {",
    "category": "invite",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 215,
    "column": 95,
    "original": "));\n    request.headers.addAll(_headers);\n    request.body = jsonEncode(data);\n    \n    final streamedResponse = await request.send();\n    final response = await http.Response.fromStream(streamedResponse);\n    \n    return await _handleResponse(response, endpoint);\n  }\n\n  // Helper für das Sanitieren von sensiblen Daten aus dem Request-Body\n  Map<String, dynamic> _sanitizeAuthData(Map<String, dynamic> data) {\n    final sanitized = <String, dynamic>{};\n    for (final entry in data.entries) {\n      if (entry.key == ",
    "suggested_key": "inviteRequestheadersaddall_headersRequestbodyJsonencodedata",
    "context": "await _ensureValidToken();\n    }\n    \n    final request = http.Request('DELETE', Uri.parse('${Env.apiUrl}${Env.apiBasePath}$endpoint'));\n    request.headers.addAll(_headers);\n    request.body = jsonEncode(data);",
    "category": "invite",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 68,
    "column": 21,
    "original": ": DateTime.now().millisecondsSinceEpoch.toString(),\n    };\n    \n    if (_token != null) {\n      headers[",
    "suggested_key": "inviteDatetimenowmillisecondssinceepochtostringIf_token",
    "context": "'Content-Type': 'application/json',\n      'X-Device-Fingerprint': deviceFingerprint,\n      'X-Client-Timezone': 'Europe/Berlin',\n      'X-Client-Time': DateTime.now().millisecondsSinceEpoch.toString(),\n    };\n    \n    if (_token != null) {",
    "category": "invite",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 88,
    "column": 35,
    "original": "] as int;\n          final now = DateTime.now().millisecondsSinceEpoch ~/ 1000;\n          \n          // Token erneuern wenn weniger als 60 Sekunden gültig\n          if (exp - now < 60) {\n            // Log Token-Refresh\n            AppLogger.api.i(",
    "suggested_key": "inviteAsIntFinal",
    "context": "final parts = token.split('.');\n        if (parts.length == 3) {\n          final payload = jsonDecode(utf8.decode(base64Url.decode(base64Url.normalize(parts[1]))));\n          final exp = payload['exp'] as int;\n          final now = DateTime.now().millisecondsSinceEpoch ~/ 1000;\n          \n          // Token erneuern wenn weniger als 60 Sekunden gültig",
    "category": "invite",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 120,
    "column": 55,
    "original": "x-token-expires-in",
    "suggested_key": "inviteXtokenexpiresin",
    "context": "Future<http.Response> _handleResponse(http.Response response, String endpoint) async {\n    // Proaktive Token-Erneuerung basierend auf Response-Headers\n    if (response.headers['x-token-expires-soon'] == 'true') {\n      final expiresIn = int.tryParse(response.headers['x-token-expires-in'] ?? '0');\n      if (expiresIn != null && expiresIn < 60) {\n        try {\n          AppLogger.api.i('🔄 Proaktive Token-Erneuerung - läuft ab in ${expiresIn}s');",
    "category": "invite",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\token_storage.dart",
    "line": 3,
    "column": 59,
    "original": ";\n\nclass TokenStorage {\n  static const _accessTokenKey = ",
    "suggested_key": "inviteClassTokenstorageStatic",
    "context": "import 'package:flutter/foundation.dart' show kIsWeb;\nimport 'package:flutter_secure_storage/flutter_secure_storage.dart';\nimport 'package:shared_preferences/shared_preferences.dart';\n\nclass TokenStorage {\n  static const _accessTokenKey = 'access_token';",
    "category": "invite",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\token_storage.dart",
    "line": 6,
    "column": 47,
    "original": ";\n  static const _refreshTokenKey = ",
    "suggested_key": "inviteStaticConst_refreshtokenkey",
    "context": "import 'package:shared_preferences/shared_preferences.dart';\n\nclass TokenStorage {\n  static const _accessTokenKey = 'access_token';\n  static const _refreshTokenKey = 'refresh_token';\n  static const _userDataKey = 'user_data';",
    "category": "invite",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\invite_dialog.dart",
    "line": 109,
    "column": 26,
    "original": "Bitte geben Sie eine gültige E-Mail-Adresse ein",
    "suggested_key": "inviteBitteGebenSie",
    "context": "return 'E-Mail-Adresse ist erforderlich';\n                }\n                if (!RegExp(r'^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$').hasMatch(value)) {\n                  return 'Bitte geben Sie eine gültige E-Mail-Adresse ein';\n                }\n                return null;\n              },",
    "category": "invite",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\invite_dialog.dart",
    "line": 109,
    "column": 26,
    "original": "Bitte geben Sie eine gültige E-Mail-Adresse ein",
    "suggested_key": "inviteBitteGebenSie",
    "context": "return 'E-Mail-Adresse ist erforderlich';\n                }\n                if (!RegExp(r'^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$').hasMatch(value)) {\n                  return 'Bitte geben Sie eine gültige E-Mail-Adresse ein';\n                }\n                return null;\n              },",
    "category": "invite",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\config\\logger.dart",
    "line": 35,
    "column": 45,
    "original": "),\n      level: kDebugMode ? Level.debug : Level.info,\n      output: _getLogOutput(),\n    );\n\n    _errorLogger = Logger(\n      printer: _getLogPrinter(prefix: ",
    "suggested_key": "navigationLevelKdebugmodeLeveldebug",
    "context": ");\n\n    _navigationLogger = Logger(\n      printer: _getLogPrinter(prefix: '[NAV]'),\n      level: kDebugMode ? Level.debug : Level.info,\n      output: _getLogOutput(),\n    );",
    "category": "navigation",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 7,
    "column": 38,
    "original": ";\n\nclass ApiService {\n  static final ApiService _instance = ApiService._internal();\n  factory ApiService() => _instance;\n  ApiService._internal();\n\n  String? _token;\n  late final AuthService _authService;\n  String? _deviceFingerprint;\n  bool _initialized = false;\n  bool _isValidatingToken = false; // Verhindert rekursive Token-Validierung\n  \n  // Erweiterte Request-Kontext-Verwaltung für parallele Requests\n  final Map<String, Map<String, dynamic>> _requestBodies = {};\n\n  // Dependency Injection für bessere Testbarkeit\n  ApiService.withAuth(AuthService authService) : _authService = authService;\n\n  // Initialisierung beim ersten Zugriff\n  Future<void> _ensureInitialized() async {\n    if (!_initialized) {\n      _authService = AuthService(); // Fallback für Singleton-Pattern\n      try {\n        final accessToken = await _authService.getCurrentAccessToken();\n        if (accessToken != null) {\n          _token = accessToken;\n        }\n      } catch (e) {\n        // Error loading token\n      }\n      _initialized = true;\n    }\n  }\n\n  void setToken(String token) {\n    _token = token;\n  }\n\n  void clearToken() {\n    _token = null;\n  }\n\n  // Einfacher Device-Fingerprint\n  String get deviceFingerprint {\n    final currentFingerprint = _deviceFingerprint;\n    if (currentFingerprint != null) {\n      return currentFingerprint;\n    }\n    final fingerprint = kIsWeb \n        ? ",
    "suggested_key": "navigationClassApiserviceStatic",
    "context": "import '../../config/env.dart';\nimport '../../config/logger.dart';\nimport 'auth_service.dart';\nimport '../../routing/app_router.dart';\n\nclass ApiService {\n  static final ApiService _instance = ApiService._internal();",
    "category": "navigation",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 3,
    "column": 35,
    "original": ";\n\nclass NavigationWidget extends StatefulWidget {\n  final String? currentRoute;\n  final Map<String, dynamic>? routeParams;\n  final bool? isJoinedWorld; // Ob der User in der aktuellen Welt registriert ist\n  \n  const NavigationWidget({\n    super.key,\n    this.currentRoute,\n    this.routeParams,\n    this.isJoinedWorld,\n  });\n\n  @override\n  State<NavigationWidget> createState() => _NavigationWidgetState();\n}\n\nclass _NavigationWidgetState extends State<NavigationWidget> with SingleTickerProviderStateMixin {\n  late AnimationController _animationController;\n  late Animation<double> _fadeAnimation;\n  bool _isExpanded = false;\n  \n  @override\n  void initState() {\n    super.initState();\n    \n    _animationController = AnimationController(\n      duration: const Duration(milliseconds: 300),\n      vsync: this,\n    );\n    \n    _fadeAnimation = Tween<double>(\n      begin: 0.0,\n      end: 1.0,\n    ).animate(CurvedAnimation(\n      parent: _animationController,\n      curve: Curves.easeInOut,\n    ));\n    \n    _animationController.forward();\n  }\n  \n  @override\n  void dispose() {\n    _animationController.dispose();\n    super.dispose();\n  }\n  \n  void _toggleExpanded() {\n    setState(() {\n      _isExpanded = !_isExpanded;\n    });\n  }\n  \n  void _showJoinRequiredMessage() {\n    ScaffoldMessenger.of(context).showSnackBar(\n      SnackBar(\n        content: const Text(",
    "suggested_key": "navigationClassNavigationwidgetExtends",
    "context": "import 'package:flutter/material.dart';\nimport 'package:go_router/go_router.dart';\nimport '../../theme/app_theme.dart';\n\nclass NavigationWidget extends StatefulWidget {\n  final String? currentRoute;",
    "category": "navigation",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 83,
    "column": 17,
    "original": ",\n        onTap: () {},\n        isDivider: true,\n      ));\n    }\n    \n    // Immer zur Welten-Liste\n    items.add(NavigationItem(\n      icon: Icons.public,\n      label: ",
    "suggested_key": "navigationOntapIsdividerTrue",
    "context": "items.add(NavigationItem(\n        icon: Icons.remove,\n        label: '',\n        onTap: () {},\n        isDivider: true,\n      ));",
    "category": "navigation",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 94,
    "column": 51,
    "original": ",\n    ));\n    \n    // Welt-Details anzeigen (von Dashboard oder wenn auf Join-Page)\n    if ((widget.currentRoute == ",
    "suggested_key": "navigationWeltdetailsAnzeigenVon",
    "context": "icon: Icons.public,\n      label: 'Welten-Übersicht',\n      onTap: () => context.goNamed('world-list'),\n      isActive: widget.currentRoute == 'world-list',\n    ));\n    \n    // Welt-Details anzeigen (von Dashboard oder wenn auf Join-Page)",
    "category": "navigation",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 104,
    "column": 18,
    "original": "Welt-Details",
    "suggested_key": "navigationWeltdetails",
    "context": "if (worldIdParam != null) {\n        items.add(NavigationItem(\n          icon: Icons.info_outline,\n          label: 'Welt-Details',\n          onTap: () => context.goNamed('world-join', \n            pathParameters: {'id': worldIdParam.toString()}\n          ),",
    "category": "navigation",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 108,
    "column": 55,
    "original": ",\n        ));\n      }\n    }\n    \n    // Dashboard Link - nur aktiv wenn User in der Welt ist\n    if ((widget.currentRoute == ",
    "suggested_key": "navigationDashboardLinkNur",
    "context": "onTap: () => context.goNamed('world-join', \n            pathParameters: {'id': worldIdParam.toString()}\n          ),\n          isActive: widget.currentRoute == 'world-join',\n        ));\n      }\n    }",
    "category": "navigation",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 123,
    "column": 47,
    "original": "Dashboard (Beitreten erforderlich)",
    "suggested_key": "navigationDashboardBeitretenErforderlich",
    "context": "items.add(NavigationItem(\n          icon: Icons.dashboard,\n          label: isJoined ? 'Zum Dashboard' : 'Dashboard (Beitreten erforderlich)',\n          onTap: isJoined \n            ? () => context.goNamed('world-dashboard', pathParameters: {'id': worldId})\n            : () => _showJoinRequiredMessage(),",
    "category": "navigation",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\forgot_password_page.dart",
    "line": 155,
    "column": 31,
    "original": "Gib deine E-Mail-Adresse ein und wir senden dir einen Link zum Zurücksetzen deines Passworts.",
    "suggested_key": "uiGibDeineEmailadresse",
    "context": "const SizedBox(height: 8),\n                            \n                            Text(\n                              'Gib deine E-Mail-Adresse ein und wir senden dir einen Link zum Zurücksetzen deines Passworts.',\n                              style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                                color: Colors.grey[300],\n                                fontSize: 14,",
    "category": "ui",
    "confidence": 0.9,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\forgot_password_page.dart",
    "line": 181,
    "column": 41,
    "original": "E-Mail gesendet! Bitte überprüfe deinen Posteingang.",
    "suggested_key": "uiEmailGesendetBitte",
    "context": "const SizedBox(width: 8),\n                                    Expanded(\n                                      child: Text(\n                                        'E-Mail gesendet! Bitte überprüfe deinen Posteingang.',\n                                        style: TextStyle(color: Colors.green[200], fontSize: 14),\n                                      ),\n                                    ),",
    "category": "ui",
    "confidence": 0.9,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\forgot_password_page.dart",
    "line": 145,
    "column": 31,
    "original": "Passwort zurücksetzen",
    "suggested_key": "uiPasswortZurücksetzen",
    "context": "const SizedBox(height: 20),\n                            \n                            Text(\n                              'Passwort zurücksetzen',\n                              style: Theme.of(context).textTheme.headlineMedium?.copyWith(\n                                color: Colors.white,\n                                fontWeight: FontWeight.bold,",
    "category": "ui",
    "confidence": 0.9,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\forgot_password_page.dart",
    "line": 155,
    "column": 31,
    "original": "Gib deine E-Mail-Adresse ein und wir senden dir einen Link zum Zurücksetzen deines Passworts.",
    "suggested_key": "uiGibDeineEmailadresse",
    "context": "const SizedBox(height: 8),\n                            \n                            Text(\n                              'Gib deine E-Mail-Adresse ein und wir senden dir einen Link zum Zurücksetzen deines Passworts.',\n                              style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                                color: Colors.grey[300],\n                                fontSize: 14,",
    "category": "ui",
    "confidence": 0.9,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\forgot_password_page.dart",
    "line": 181,
    "column": 41,
    "original": "E-Mail gesendet! Bitte überprüfe deinen Posteingang.",
    "suggested_key": "uiEmailGesendetBitte",
    "context": "const SizedBox(width: 8),\n                                    Expanded(\n                                      child: Text(\n                                        'E-Mail gesendet! Bitte überprüfe deinen Posteingang.',\n                                        style: TextStyle(color: Colors.green[200], fontSize: 14),\n                                      ),\n                                    ),",
    "category": "ui",
    "confidence": 0.9,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 474,
    "column": 58,
    "original": ",\n                                                style: TextStyle(\n                                                  fontSize: 16,\n                                                  fontWeight: FontWeight.bold,\n                                                ),\n                                              ),\n                                      ),\n                                    ),\n                                  ),\n                                  const SizedBox(height: 24),\n                                  \n                                  // Divider with text\n                                  Row(\n                                    children: [\n                                      Expanded(\n                                        child: Divider(\n                                          color: Colors.grey[600],\n                                          thickness: 1,\n                                        ),\n                                      ),\n                                      Padding(\n                                        padding: const EdgeInsets.symmetric(horizontal: 16),\n                                        child: Text(\n                                          ",
    "suggested_key": "uiStyleTextstyleFontsize",
    "context": "),\n                                              )\n                                            : const Text(\n                                                'Anmelden',\n                                                style: TextStyle(\n                                                  fontSize: 16,\n                                                  fontWeight: FontWeight.bold,",
    "category": "ui",
    "confidence": 0.9,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 497,
    "column": 48,
    "original": ",\n                                          style: TextStyle(\n                                            color: Colors.grey[400],\n                                            fontSize: 14,\n                                          ),\n                                        ),\n                                      ),\n                                      Expanded(\n                                        child: Divider(\n                                          color: Colors.grey[600],\n                                          thickness: 1,\n                                        ),\n                                      ),\n                                    ],\n                                  ),\n                                  const SizedBox(height: 16),\n                                  \n                                  // Social Login Buttons (Placeholder)\n                                  Row(\n                                    mainAxisAlignment: MainAxisAlignment.center,\n                                    children: [\n                                      // Google Login\n                                      _buildSocialLoginButton(\n                                        onPressed: () {\n                                          ScaffoldMessenger.of(context).showSnackBar(\n                                            const SnackBar(\n                                              content: Text(",
    "suggested_key": "uiStyleTextstyleColor",
    "context": "Padding(\n                                        padding: const EdgeInsets.symmetric(horizontal: 16),\n                                        child: Text(\n                                          'oder',\n                                          style: TextStyle(\n                                            color: Colors.grey[400],\n                                            fontSize: 14,",
    "category": "ui",
    "confidence": 0.9,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 541,
    "column": 55,
    "original": ",\n                                      ),\n                                    ],\n                                  ),\n                                  const SizedBox(height: 20),\n                                  \n                                  // Register link\n                                  Row(\n                                    mainAxisAlignment: MainAxisAlignment.center,\n                                    children: [\n                                      Text(\n                                        ",
    "suggested_key": "uiConstSizedboxheight20",
    "context": ");\n                                        },\n                                        icon: Icons.code,\n                                        label: 'GitHub',\n                                      ),\n                                    ],\n                                  ),",
    "category": "ui",
    "confidence": 0.9,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 191,
    "column": 46,
    "original": "Passwort erfolgreich geändert!",
    "suggested_key": "uiPasswortErfolgreichGeändert",
    "context": "const SizedBox(height: 20),\n                              \n                              Text(\n                                _isSuccess ? 'Passwort erfolgreich geändert!' : 'Neues Passwort festlegen',\n                                style: Theme.of(context).textTheme.headlineMedium?.copyWith(\n                                  color: Colors.white,\n                                  fontWeight: FontWeight.bold,",
    "category": "ui",
    "confidence": 0.9,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 202,
    "column": 37,
    "original": "Du wirst automatisch zur Anmeldung weitergeleitet...",
    "suggested_key": "uiDuWirstAutomatisch",
    "context": "Text(\n                                _isSuccess \n                                  ? 'Du wirst automatisch zur Anmeldung weitergeleitet...'\n                                  : 'Bitte gib dein neues Passwort ein.',\n                                style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                                  color: Colors.grey[300],",
    "category": "ui",
    "confidence": 0.9,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 203,
    "column": 37,
    "original": "Bitte gib dein neues Passwort ein.",
    "suggested_key": "uiBitteGibDein",
    "context": "Text(\n                                _isSuccess \n                                  ? 'Du wirst automatisch zur Anmeldung weitergeleitet...'\n                                  : 'Bitte gib dein neues Passwort ein.',\n                                style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                                  color: Colors.grey[300],\n                                  fontSize: 14,",
    "category": "ui",
    "confidence": 0.9,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 378,
    "column": 41,
    "original": "Passwort-Anforderungen:",
    "suggested_key": "uiPasswortanforderungen",
    "context": "crossAxisAlignment: CrossAxisAlignment.start,\n                                    children: [\n                                      const Text(\n                                        'Passwort-Anforderungen:',\n                                        style: TextStyle(\n                                          color: Colors.white,\n                                          fontSize: 14,",
    "category": "ui",
    "confidence": 0.9,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 450,
    "column": 45,
    "original": "Passwort zurücksetzen",
    "suggested_key": "uiPasswortZurücksetzen",
    "context": "),\n                                          )\n                                        : const Text(\n                                            'Passwort zurücksetzen',\n                                            style: TextStyle(\n                                              fontSize: 16,\n                                              fontWeight: FontWeight.bold,",
    "category": "ui",
    "confidence": 0.9,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 191,
    "column": 46,
    "original": "Passwort erfolgreich geändert!",
    "suggested_key": "uiPasswortErfolgreichGeändert",
    "context": "const SizedBox(height: 20),\n                              \n                              Text(\n                                _isSuccess ? 'Passwort erfolgreich geändert!' : 'Neues Passwort festlegen',\n                                style: Theme.of(context).textTheme.headlineMedium?.copyWith(\n                                  color: Colors.white,\n                                  fontWeight: FontWeight.bold,",
    "category": "ui",
    "confidence": 0.9,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 202,
    "column": 37,
    "original": "Du wirst automatisch zur Anmeldung weitergeleitet...",
    "suggested_key": "uiDuWirstAutomatisch",
    "context": "Text(\n                                _isSuccess \n                                  ? 'Du wirst automatisch zur Anmeldung weitergeleitet...'\n                                  : 'Bitte gib dein neues Passwort ein.',\n                                style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                                  color: Colors.grey[300],",
    "category": "ui",
    "confidence": 0.9,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 203,
    "column": 37,
    "original": "Bitte gib dein neues Passwort ein.",
    "suggested_key": "uiBitteGibDein",
    "context": "Text(\n                                _isSuccess \n                                  ? 'Du wirst automatisch zur Anmeldung weitergeleitet...'\n                                  : 'Bitte gib dein neues Passwort ein.',\n                                style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                                  color: Colors.grey[300],\n                                  fontSize: 14,",
    "category": "ui",
    "confidence": 0.9,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_card.dart",
    "line": 368,
    "column": 79,
    "original": ",\n                        style: TextStyle(\n                          color: Colors.grey[400],\n                          fontSize: 14,\n                        ),\n                      ),\n                    ],\n                  ),\n                ],\n              );\n            }\n          ),\n        ],\n      ],\n    );\n  }\n\n  Widget _buildActionButtons() {\n    final List<Widget> buttons = [];\n    \n    // Status-basierte Button-Logik\n    switch (world.status) {\n      case WorldStatus.upcoming:\n        // Vorregistrierung oder Zurückziehen\n        if (isPreRegistered) {\n          if (onCancelPreRegistration != null) {\n            buttons.add(_buildButton(\n              onPressed: onCancelPreRegistration,\n              icon: Icons.cancel,\n              label: ",
    "suggested_key": "uiStyleTextstyleColor",
    "context": "),\n                      const SizedBox(width: 4),\n                      Text(\n                        'Ende: ${endDate.day}.${endDate.month}.${endDate.year}',\n                        style: TextStyle(\n                          color: Colors.grey[400],\n                          fontSize: 14,",
    "category": "ui",
    "confidence": 0.9,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_card.dart",
    "line": 368,
    "column": 79,
    "original": ",\n                        style: TextStyle(\n                          color: Colors.grey[400],\n                          fontSize: 14,\n                        ),\n                      ),\n                    ],\n                  ),\n                ],\n              );\n            }\n          ),\n        ],\n      ],\n    );\n  }\n\n  Widget _buildActionButtons() {\n    final List<Widget> buttons = [];\n    \n    // Status-basierte Button-Logik\n    switch (world.status) {\n      case WorldStatus.upcoming:\n        // Vorregistrierung oder Zurückziehen\n        if (isPreRegistered) {\n          if (onCancelPreRegistration != null) {\n            buttons.add(_buildButton(\n              onPressed: onCancelPreRegistration,\n              icon: Icons.cancel,\n              label: ",
    "suggested_key": "uiStyleTextstyleColor",
    "context": "),\n                      const SizedBox(width: 4),\n                      Text(\n                        'Ende: ${endDate.day}.${endDate.month}.${endDate.year}',\n                        style: TextStyle(\n                          color: Colors.grey[400],\n                          fontSize: 14,",
    "category": "ui",
    "confidence": 0.9,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_filters.dart",
    "line": 60,
    "column": 22,
    "original": ",\n            style: TextStyle(\n              color: Colors.grey[300],\n              fontWeight: FontWeight.w600,\n            ),\n          ),\n          const SizedBox(width: 8),\n          ...WorldStatus.values.map((status) {\n            final isSelected = statusFilter == status;\n            return Padding(\n              padding: const EdgeInsets.only(right: 8),\n              child: FilterChip(\n                selected: isSelected,\n                label: Text(\n                  _getStatusLabel(status),\n                  style: TextStyle(\n                    color: isSelected ? Colors.white : Colors.grey[300],\n                  ),\n                ),\n                avatar: Icon(\n                  _getStatusIcon(status),\n                  size: 16,\n                  color: isSelected ? Colors.white : _getStatusColor(status),\n                ),\n                onSelected: (selected) {\n                  onStatusChanged(selected ? status : null);\n                },\n                backgroundColor: const Color(0xFF2D2D2D),\n                selectedColor: _getStatusColor(status).withOpacity(0.3),\n                checkmarkColor: Colors.white,\n                side: BorderSide(\n                  color: isSelected ? _getStatusColor(status) : Colors.grey[600]!,\n                ),\n              ),\n            );\n          }),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildCategoryFilter() {\n    return SingleChildScrollView(\n      scrollDirection: Axis.horizontal,\n      padding: const EdgeInsets.symmetric(horizontal: 16),\n      child: Row(\n        children: [\n          Text(\n            ",
    "suggested_key": "uiStyleTextstyleColor",
    "context": "child: Row(\n        children: [\n          Text(\n            'Status: ',\n            style: TextStyle(\n              color: Colors.grey[300],\n              fontWeight: FontWeight.w600,",
    "category": "ui",
    "confidence": 0.9,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_filters.dart",
    "line": 108,
    "column": 25,
    "original": ",\n            style: TextStyle(\n              color: Colors.grey[300],\n              fontWeight: FontWeight.w600,\n            ),\n          ),\n          const SizedBox(width: 8),\n          ...WorldCategory.values.map((category) {\n            final isSelected = categoryFilter == category;\n            return Padding(\n              padding: const EdgeInsets.only(right: 8),\n              child: FilterChip(\n                selected: isSelected,\n                label: Row(\n                  mainAxisSize: MainAxisSize.min,\n                  children: [\n                    Icon(\n                      _getCategoryIcon(category),\n                      size: 16,\n                      color: isSelected ? Colors.white : _getCategoryColor(category),\n                    ),\n                    const SizedBox(width: 4),\n                    Text(\n                      _getCategoryLabel(category),\n                      style: TextStyle(\n                        color: isSelected ? Colors.white : Colors.grey[300],\n                      ),\n                    ),\n                  ],\n                ),\n                onSelected: (selected) {\n                  onCategoryChanged(selected ? category : null);\n                },\n                backgroundColor: const Color(0xFF2D2D2D),\n                selectedColor: _getCategoryColor(category).withOpacity(0.3),\n                checkmarkColor: Colors.white,\n                side: BorderSide(\n                  color: isSelected ? _getCategoryColor(category) : Colors.grey[600]!,\n                ),\n              ),\n            );\n          }),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildSortOptions() {\n    return Container(\n      padding: const EdgeInsets.symmetric(horizontal: 16),\n      child: Row(\n        children: [\n          Text(\n            ",
    "suggested_key": "uiStyleTextstyleColor",
    "context": "child: Row(\n        children: [\n          Text(\n            'Kategorie: ',\n            style: TextStyle(\n              color: Colors.grey[300],\n              fontWeight: FontWeight.w600,",
    "category": "ui",
    "confidence": 0.9,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_filters.dart",
    "line": 161,
    "column": 30,
    "original": ",\n            style: TextStyle(\n              color: Colors.grey[300],\n              fontWeight: FontWeight.w600,\n            ),\n          ),\n          const SizedBox(width: 8),\n          Container(\n            height: 40,\n            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 4),\n            decoration: BoxDecoration(\n              color: const Color(0xFF2D2D2D),\n              borderRadius: BorderRadius.circular(8),\n              border: Border.all(color: Colors.grey[600]!),\n            ),\n            child: DropdownButton<String>(\n              value: sortBy,\n              dropdownColor: const Color(0xFF2D2D2D),\n              style: const TextStyle(color: Colors.white),\n              underline: Container(),\n              icon: Icon(Icons.arrow_drop_down, color: Colors.grey[300]),\n              items: const [\n                DropdownMenuItem(\n                  value: ",
    "suggested_key": "uiStyleTextstyleColor",
    "context": "child: Row(\n        children: [\n          Text(\n            'Sortieren nach: ',\n            style: TextStyle(\n              color: Colors.grey[300],\n              fontWeight: FontWeight.w600,",
    "category": "ui",
    "confidence": 0.9,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_filters.dart",
    "line": 236,
    "column": 29,
    "original": ",\n            style: TextStyle(\n              color: Colors.grey[400],\n              fontSize: 12,\n            ),\n          ),\n          const SizedBox(width: 8),\n          if (statusFilter != null)\n            Builder(\n              builder: (context) {\n                final filter = statusFilter!;\n                return Padding(\n                  padding: const EdgeInsets.only(right: 8),\n                  child: Chip(\n                    label: Text(\n                      _getStatusLabel(filter),\n                      style: const TextStyle(fontSize: 12),\n                    ),\n                    backgroundColor: _getStatusColor(filter).withOpacity(0.2),\n                    deleteIcon: const Icon(Icons.close, size: 16),\n                    onDeleted: () => onStatusChanged(null),\n                    side: BorderSide(\n                      color: _getStatusColor(filter).withOpacity(0.5),\n                    ),\n                  ),\n                );\n              }\n            ),\n          if (categoryFilter != null)\n            Builder(\n              builder: (context) {\n                final filter = categoryFilter!;\n                return Padding(\n                  padding: const EdgeInsets.only(right: 8),\n                  child: Chip(\n                    label: Text(\n                      _getCategoryLabel(filter),\n                      style: const TextStyle(fontSize: 12),\n                    ),\n                    backgroundColor: _getCategoryColor(filter).withOpacity(0.2),\n                    deleteIcon: const Icon(Icons.close, size: 16),\n                    onDeleted: () => onCategoryChanged(null),\n                    side: BorderSide(\n                      color: _getCategoryColor(filter).withOpacity(0.5),\n                    ),\n                  ),\n                );\n              }\n            ),\n          const Spacer(),\n          TextButton.icon(\n            onPressed: onResetFilters,\n            icon: const Icon(Icons.clear_all, size: 16),\n            label: const Text(",
    "suggested_key": "uiStyleTextstyleColor",
    "context": "child: Row(\n        children: [\n          Text(\n            'Aktive Filter: ',\n            style: TextStyle(\n              color: Colors.grey[400],\n              fontSize: 12,",
    "category": "ui",
    "confidence": 0.9,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1388,
    "column": 32,
    "original": "Entscheidungen der Spielleitung sind final",
    "suggested_key": "uiEntscheidungenDerSpielleitung",
    "context": "_buildRuleItem('2.', 'Keine Cheats oder Exploits verwenden'),\n          _buildRuleItem('3.', 'Faire Spielweise ist Pflicht'),\n          _buildRuleItem('4.', 'Kommunikation nur im Spielchat'),\n          _buildRuleItem('5.', 'Entscheidungen der Spielleitung sind final'),\n        ],\n      ),\n    );",
    "category": "ui",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1568,
    "column": 23,
    "original": ",\n              style: Theme.of(context).textTheme.bodySmall?.copyWith(\n                color: Colors.grey[400],\n                fontWeight: FontWeight.w500,\n              ),\n            ),\n          ),\n          Expanded(\n            child: Text(\n              value,\n              style: Theme.of(context).textTheme.bodySmall?.copyWith(\n                color: Colors.white,\n              ),\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n  \n  Widget _buildActionButtons() {\n    List<Widget> buttons = [];\n\n    // **LOGIN BUTTON (wenn User existiert aber nicht angemeldet)**\n    if (_showLoginButton && _inviteEmail != null) {\n      buttons.add(\n        Container(\n          width: double.infinity,\n          margin: const EdgeInsets.only(bottom: 12.0),\n          child: ElevatedButton(\n            onPressed: () {\n              // Redirect auf Login-Seite mit E-Mail vorausgefüllt\n              final loginRoute = ",
    "suggested_key": "uiStyleThemeofcontexttextthemebodysmallcopywithColor",
    "context": "SizedBox(\n            width: 80,\n            child: Text(\n              '$label:',\n              style: Theme.of(context).textTheme.bodySmall?.copyWith(\n                color: Colors.grey[400],\n                fontWeight: FontWeight.w500,",
    "category": "ui",
    "confidence": 0.9,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 264,
    "column": 21,
    "original": ";\n    \n    // Gültigkeitstext erstellen\n    String validityText = ",
    "suggested_key": "uiGültigkeitstextErstellenString",
    "context": "final actionTypeText = isUpcoming \n      ? 'dich vorab zu registrieren für' \n      : 'beizutreten';\n    \n    // Gültigkeitstext erstellen\n    String validityText = '';",
    "category": "ui",
    "confidence": 0.9,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1261,
    "column": 41,
    "original": ",\n                    ),\n                  ],\n                ),\n              ),\n              \n              // Tab Content\n              SizedBox(\n                height: 300, // Feste Höhe für Tab-Content\n                child: TabBarView(\n                  controller: _tabController,\n                  children: [\n                    _buildDescriptionTab(),\n                    _buildRulesTab(),\n                    _buildStatisticsTab(),\n                  ],\n                ),\n              ),\n              \n              // Action Buttons\n              Container(\n                padding: const EdgeInsets.all(24),\n                decoration: const BoxDecoration(\n                  color: Color(0xFF1A1A1A),\n                  borderRadius: BorderRadius.only(\n                    bottomLeft: Radius.circular(24),\n                    bottomRight: Radius.circular(24),\n                  ),\n                ),\n                child: Column(\n                  children: [\n                    _buildActionButtons(),\n                    \n                    // Join-Fehler anzeigen\n                    if (_joinError != null) ...[\n                      const SizedBox(height: 16),\n                      Container(\n                        padding: const EdgeInsets.all(12),\n                        decoration: BoxDecoration(\n                          color: Colors.red.withOpacity(0.1),\n                          borderRadius: BorderRadius.circular(8),\n                          border: Border.all(color: Colors.red.withOpacity(0.3)),\n                        ),\n                        child: Row(\n                          children: [\n                            Icon(Icons.error_outline, color: Colors.red[400], size: 20),\n                            const SizedBox(width: 8),\n                            Expanded(\n                              child: Text(\n                                _joinError ?? ",
    "suggested_key": "uiTabContentSizedbox",
    "context": "),\n                    Tab(\n                      icon: Icon(Icons.analytics_outlined),\n                      text: 'Statistiken',\n                    ),\n                  ],\n                ),",
    "category": "ui",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 731,
    "column": 41,
    "original": "Versuche andere Filter-Einstellungen.",
    "suggested_key": "uiVersucheAndereFiltereinstellungen",
    "context": "),\n                                      const SizedBox(height: 8),\n                                      Text(\n                                        'Versuche andere Filter-Einstellungen.',\n                                        style: Theme.of(context).textTheme.bodyMedium?.copyWith(\n                                          color: Colors.grey[400],\n                                        ),",
    "category": "ui",
    "confidence": 0.9,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\invite_dialog.dart",
    "line": 70,
    "column": 15,
    "original": "Geben Sie die E-Mail-Adresse der Person ein, die Sie einladen möchten:",
    "suggested_key": "uiGebenSieDie",
    "context": "mainAxisSize: MainAxisSize.min,\n          children: [\n            Text(\n              'Geben Sie die E-Mail-Adresse der Person ein, die Sie einladen möchten:',\n              style: TextStyle(\n                color: Colors.grey[300],\n              ),",
    "category": "ui",
    "confidence": 0.9,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\invite_dialog.dart",
    "line": 70,
    "column": 15,
    "original": "Geben Sie die E-Mail-Adresse der Person ein, die Sie einladen möchten:",
    "suggested_key": "uiGebenSieDie",
    "context": "mainAxisSize: MainAxisSize.min,\n          children: [\n            Text(\n              'Geben Sie die E-Mail-Adresse der Person ein, die Sie einladen möchten:',\n              style: TextStyle(\n                color: Colors.grey[300],\n              ),",
    "category": "ui",
    "confidence": 0.9,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\pre_register_dialog.dart",
    "line": 43,
    "column": 57,
    "original": "),\n            backgroundColor: Colors.green,\n          ),\n        );\n      }\n    } catch (e) {\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text(",
    "suggested_key": "uiBackgroundcolorColorsgreenCatch",
    "context": "Navigator.of(context).pop(true);\n        ScaffoldMessenger.of(context).showSnackBar(\n          const SnackBar(\n            content: Text('Vorregistrierung erfolgreich!'),\n            backgroundColor: Colors.green,\n          ),\n        );",
    "category": "ui",
    "confidence": 0.9,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\pre_register_dialog.dart",
    "line": 43,
    "column": 27,
    "original": "Vorregistrierung erfolgreich!",
    "suggested_key": "uiVorregistrierungErfolgreich",
    "context": "Navigator.of(context).pop(true);\n        ScaffoldMessenger.of(context).showSnackBar(\n          const SnackBar(\n            content: Text('Vorregistrierung erfolgreich!'),\n            backgroundColor: Colors.green,\n          ),\n        );",
    "category": "ui",
    "confidence": 0.9,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 12,
    "column": 8,
    "original": "core/providers/locale_provider.dart",
    "suggested_key": "worldCoreproviderslocale_providerdart",
    "context": "import 'core/services/api_service.dart';\nimport 'core/services/world_service.dart';\nimport 'core/services/invite_service.dart';\nimport 'core/providers/locale_provider.dart';\nimport 'l10n/app_localizations.dart';\n\nclass WeltenwindApp extends StatefulWidget {",
    "category": "world",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 13,
    "column": 36,
    "original": ";\n\nclass WeltenwindApp extends StatefulWidget {\n  const WeltenwindApp({super.key});\n\n  @override\n  State<WeltenwindApp> createState() => _WeltenwindAppState();\n}\n\nclass _WeltenwindAppState extends State<WeltenwindApp> {\n  final LocaleProvider _localeProvider = LocaleProvider();\n  \n  @override\n  void initState() {\n    super.initState();\n    // Listener für Locale-Änderungen\n    _localeProvider.addListener(() {\n      setState(() {});\n    });\n  }\n  \n  @override\n  void dispose() {\n    _localeProvider.removeListener(() {});\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    AppLogger.app.d(",
    "suggested_key": "worldClassWeltenwindappExtends",
    "context": "import 'core/services/world_service.dart';\nimport 'core/services/invite_service.dart';\nimport 'core/providers/locale_provider.dart';\nimport 'l10n/app_localizations.dart';\n\nclass WeltenwindApp extends StatefulWidget {\n  const WeltenwindApp({super.key});",
    "category": "world",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\config\\logger.dart",
    "line": 2,
    "column": 8,
    "original": "package:flutter/foundation.dart",
    "suggested_key": "worldPackageflutterfoundationdart",
    "context": "import 'package:logger/logger.dart';\nimport 'package:flutter/foundation.dart';\n\n/// Zentrale Logger-Konfiguration für Weltenwind Flutter Client\nclass AppLogger {",
    "category": "world",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\dashboard\\dashboard_page.dart",
    "line": 83,
    "column": 49,
    "original": ",\n                              style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                                color: Colors.grey[300],\n                              ),\n                            ),\n                            const SizedBox(height: 32),\n                            \n                            // Info message\n                            Container(\n                              padding: const EdgeInsets.all(16),\n                              decoration: BoxDecoration(\n                                color: AppTheme.primaryColor.withOpacity(0.1),\n                                borderRadius: BorderRadius.circular(12),\n                                border: Border.all(\n                                  color: AppTheme.primaryColor.withOpacity(0.3),\n                                ),\n                              ),\n                              child: Row(\n                                children: [\n                                  const Icon(\n                                    Icons.construction,\n                                    color: AppTheme.primaryColor,\n                                    size: 24,\n                                  ),\n                                  const SizedBox(width: 12),\n                                  Expanded(\n                                    child: Text(\n                                      ",
    "suggested_key": "worldStyleThemeofcontexttextthemebodylargecopywithColor",
    "context": "// Subtitle\n                            Text(\n                              'Welt ID: $worldId',\n                              style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                                color: Colors.grey[300],\n                              ),",
    "category": "world",
    "confidence": 0.9,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 267,
    "column": 43,
    "original": "Dein Portal zu unendlichen Welten",
    "suggested_key": "worldDeinPortalZu",
    "context": "// Enhanced Subtitle\n                                        Text(\n                                          'Dein Portal zu unendlichen Welten',\n                                          style: TextStyle(\n                                            color: Colors.grey[200],\n                                            fontSize: 22,",
    "category": "world",
    "confidence": 0.9,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 514,
    "column": 50,
    "original": "Erkunde hunderte einzigartige Spielwelten oder erschaffe deine eigene",
    "suggested_key": "worldErkundeHunderteEinzigartige",
    "context": "_buildFeatureCard(\n                                    icon: Icons.public,\n                                    title: 'Unendliche Welten',\n                                    description: 'Erkunde hunderte einzigartige Spielwelten oder erschaffe deine eigene',\n                                    color: Colors.blue,\n                                  ),\n                                  _buildFeatureCard(",
    "category": "world",
    "confidence": 0.9,
    "widget_context": "Widget: Card",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 520,
    "column": 50,
    "original": "Verbinde dich mit Spielern aus der ganzen Welt",
    "suggested_key": "worldVerbindeDichMit",
    "context": "_buildFeatureCard(\n                                    icon: Icons.group,\n                                    title: 'Community',\n                                    description: 'Verbinde dich mit Spielern aus der ganzen Welt',\n                                    color: Colors.green,\n                                  ),\n                                  _buildFeatureCard(",
    "category": "world",
    "confidence": 0.9,
    "widget_context": "Widget: Card",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 581,
    "column": 35,
    "original": "Schließe dich tausenden Spielern an und starte noch heute!",
    "suggested_key": "worldSchließeDichTausenden",
    "context": "),\n                                const SizedBox(height: 16),\n                                Text(\n                                  'Schließe dich tausenden Spielern an und starte noch heute!',\n                                  style: TextStyle(\n                                    fontSize: 16,\n                                    color: Colors.grey[300],",
    "category": "world",
    "confidence": 0.9,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 117,
    "column": 25,
    "original": ";\n    _sortAscending = true;\n    _applyFiltersAndSorting();\n  }\n\n  void _applyFiltersAndSorting() {\n    var filtered = List<World>.from(_worlds);\n\n    // Apply status filter\n    if (_statusFilter != null) {\n      filtered = filtered.where((world) => world.status == _statusFilter).toList();\n    }\n\n    // Apply category filter\n    if (_categoryFilter != null) {\n      filtered = filtered.where((world) {\n        return _getWorldCategory(world) == _categoryFilter;\n      }).toList();\n    }\n\n    // Apply sorting\n    filtered.sort((a, b) {\n      int comparison = 0;\n\n      switch (_sortBy) {\n        case ",
    "suggested_key": "world_sortascendingTrue_applyfiltersandsorting",
    "context": "void resetFilters() {\n    _statusFilter = null;\n    _categoryFilter = null;\n    _sortBy = 'startDate';\n    _sortAscending = true;\n    _applyFiltersAndSorting();\n  }",
    "category": "world",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 153,
    "column": 24,
    "original": ":\n        default:\n          comparison = a.startsAt.compareTo(b.startsAt);\n          break;\n      }\n\n      return _sortAscending ? comparison : -comparison;\n    });\n\n    _filteredWorlds = filtered;\n    notifyListeners();\n  }\n\n  WorldCategory _getWorldCategory(World world) {\n    // This is a placeholder logic - you might want to adjust based on your needs\n    if (world.name.toLowerCase().contains(",
    "suggested_key": "worldDefaultComparisonAstartsatcomparetobstartsat",
    "context": "final countB = _playerCounts[b.id] ?? 0;\n          comparison = countA.compareTo(countB);\n          break;\n        case 'startDate':\n        default:\n          comparison = a.startsAt.compareTo(b.startsAt);\n          break;",
    "category": "world",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_filters.dart",
    "line": 222,
    "column": 67,
    "original": ",\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildActiveFilters() {\n    return Container(\n      padding: const EdgeInsets.symmetric(horizontal: 16),\n      child: Row(\n        children: [\n          Text(\n            ",
    "suggested_key": "worldWidget_buildactivefiltersReturn",
    "context": "size: 20,\n              ),\n              onPressed: onSortOrderChanged,\n              tooltip: sortAscending ? 'Aufsteigend' : 'Absteigend',\n            ),\n          ),\n        ],",
    "category": "world",
    "confidence": 0.9,
    "widget_context": "Widget: child property",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 652,
    "column": 59,
    "original": ";\n                                      _sortAscending = true;\n                                    });\n                                    _applyFiltersAndSorting();\n                                  },\n                                ),\n                                const SizedBox(height: 16),\n                              ],\n                              \n                              // World list\n                              if (_isLoading)\n                                const Center(\n                                  child: CircularProgressIndicator(\n                                    valueColor: AlwaysStoppedAnimation<Color>(AppTheme.primaryColor),\n                                  ),\n                                )\n                              else if (_error != null)\n                                Container(\n                                  padding: const EdgeInsets.all(16),\n                                  decoration: BoxDecoration(\n                                    color: (Colors.red[900] ?? Colors.red).withOpacity(0.3),\n                                    borderRadius: BorderRadius.circular(12),\n                                    border: Border.all(\n                                      color: (Colors.red[400] ?? Colors.red).withOpacity(0.5),\n                                    ),\n                                  ),\n                                  child: Column(\n                                    children: [\n                                      Icon(\n                                        Icons.error,\n                                        size: 48,\n                                        color: Colors.red[400],\n                                      ),\n                                      const SizedBox(height: 16),\n                                      Text(\n                                        ",
    "suggested_key": "world_sortascendingTrue_applyfiltersandsorting",
    "context": "setState(() {\n                                      _statusFilter = null;\n                                      _categoryFilter = null;\n                                      _sortBy = 'startDate';\n                                      _sortAscending = true;\n                                    });\n                                    _applyFiltersAndSorting();",
    "category": "world",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 591,
    "column": 21,
    "original": "Die angeforderte Welt existiert nicht oder wurde entfernt.",
    "suggested_key": "worldDieAngeforderteWelt",
    "context": "),\n                  const SizedBox(height: 16),\n                  Text(\n                    'Die angeforderte Welt existiert nicht oder wurde entfernt.',\n                    style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                      color: AppTheme.textSecondary,\n                    ),",
    "category": "world",
    "confidence": 0.9,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 61,
    "column": 91,
    "original": "),\n        backgroundColor: Colors.orange[700],\n        duration: const Duration(seconds: 3),\n      ),\n    );\n  }\n  \n  List<NavigationItem> _getNavigationItems() {\n    final items = <NavigationItem>[];\n    \n    // Zurück-Button (wenn nicht auf world-list)\n    if (widget.currentRoute != ",
    "suggested_key": "worldBackgroundcolorColorsorange700Duration",
    "context": "void _showJoinRequiredMessage() {\n    ScaffoldMessenger.of(context).showSnackBar(\n      SnackBar(\n        content: const Text('Sie müssen erst der Welt beitreten, um das Dashboard zu sehen'),\n        backgroundColor: Colors.orange[700],\n        duration: const Duration(seconds: 3),\n      ),",
    "category": "world",
    "confidence": 0.9,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 359,
    "column": 18,
    "original": "Sie müssen der Welt beitreten, um das Dashboard zu sehen",
    "suggested_key": "worldSieMüssenDer",
    "context": "// Tooltip hinzufügen wenn disabled\n    if (isDisabled && item.label.contains('Dashboard')) {\n      return Tooltip(\n        message: 'Sie müssen der Welt beitreten, um das Dashboard zu sehen',\n        child: widget,\n      );\n    }",
    "category": "world",
    "confidence": 0.9,
    "widget_context": "Widget: Tooltip",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 61,
    "column": 91,
    "original": "),\n        backgroundColor: Colors.orange[700],\n        duration: const Duration(seconds: 3),\n      ),\n    );\n  }\n  \n  List<NavigationItem> _getNavigationItems() {\n    final items = <NavigationItem>[];\n    \n    // Zurück-Button (wenn nicht auf world-list)\n    if (widget.currentRoute != ",
    "suggested_key": "worldBackgroundcolorColorsorange700Duration",
    "context": "void _showJoinRequiredMessage() {\n    ScaffoldMessenger.of(context).showSnackBar(\n      SnackBar(\n        content: const Text('Sie müssen erst der Welt beitreten, um das Dashboard zu sehen'),\n        backgroundColor: Colors.orange[700],\n        duration: const Duration(seconds: 3),\n      ),",
    "category": "world",
    "confidence": 0.9,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\splash_screen.dart",
    "line": 22,
    "column": 31,
    "original": ",\n    this.logo,\n  });\n\n  @override\n  State<SplashScreen> createState() => _SplashScreenState();\n}\n\nclass _SplashScreenState extends State<SplashScreen> with TickerProviderStateMixin {\n  late AnimationController _animationController;\n  bool _isInitialized = false;\n  String? _error;\n  bool _timedOut = false;\n  int _currentStepIndex = 0;\n  String? _currentStepName;\n\n  @override\n  void initState() {\n    super.initState();\n    \n    _animationController = AnimationController(\n      duration: const Duration(milliseconds: 1500),\n      vsync: this,\n    );\n    \n    _initialize();\n  }\n\n  Future<void> _initialize() async {\n    try {\n      _animationController.forward();\n      \n      // Timeout für Initialisierung\n      final timeout = widget.timeout;\n      if (timeout != null) {\n        final result = await Future.any([\n          _runInitializationWithSteps().then((_) => ",
    "suggested_key": "worldThislogoOverrideStatesplashscreen",
    "context": "this.timeout,\n    this.onTimeout,\n    this.initSteps,\n    this.appName = 'Weltenwind',\n    this.logo,\n  });",
    "category": "world",
    "confidence": 0.9,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\user_info_widget.dart",
    "line": 75,
    "column": 17,
    "original": ":\n      default:\n        return Colors.green[400] ?? Colors.green;\n    }\n  }\n  \n  @override\n  Widget build(BuildContext context) {\n    final user = _authService.currentUser;\n    if (user == null) return const SizedBox.shrink();\n    \n    return Positioned(\n      top: 16,\n      left: 16,\n      child: FadeTransition(\n        opacity: _fadeAnimation,\n        child: GestureDetector(\n          onTap: _toggleExpanded,\n          child: AnimatedContainer(\n            duration: const Duration(milliseconds: 300),\n            width: _isExpanded ? 320 : 180,\n            decoration: BoxDecoration(\n              color: const Color(0xFF1A1A1A).withOpacity(0.95),\n              borderRadius: BorderRadius.circular(16),\n              border: Border.all(\n                color: AppTheme.primaryColor.withOpacity(0.3),\n                width: 1,\n              ),\n              boxShadow: [\n                BoxShadow(\n                  color: Colors.black.withOpacity(0.3),\n                  blurRadius: 12,\n                  offset: const Offset(0, 4),\n                ),\n              ],\n            ),\n            child: Material(\n              color: Colors.transparent,\n              child: InkWell(\n                onTap: _toggleExpanded,\n                borderRadius: BorderRadius.circular(16),\n                child: Padding(\n                  padding: const EdgeInsets.all(12.0),\n                  child: Column(\n                    mainAxisSize: MainAxisSize.min,\n                    crossAxisAlignment: CrossAxisAlignment.start,\n                    children: [\n                      // Header mit Avatar und Name\n                      Row(\n                        children: [\n                          // Avatar\n                          Container(\n                            width: 40,\n                            height: 40,\n                            decoration: BoxDecoration(\n                              color: AppTheme.primaryColor.withOpacity(0.2),\n                              shape: BoxShape.circle,\n                              border: Border.all(\n                                color: AppTheme.primaryColor.withOpacity(0.5),\n                                width: 2,\n                              ),\n                            ),\n                            child: Center(\n                              child: Text(\n                                user.username.substring(0, 1).toUpperCase(),\n                                style: const TextStyle(\n                                  color: AppTheme.primaryColor,\n                                  fontSize: 18,\n                                  fontWeight: FontWeight.bold,\n                                ),\n                              ),\n                            ),\n                          ),\n                          const SizedBox(width: 12),\n                          // Name und Status\n                          Expanded(\n                            child: Column(\n                              crossAxisAlignment: CrossAxisAlignment.start,\n                              children: [\n                                Row(\n                                  children: [\n                                    Flexible(\n                                      child: Text(\n                                        user.username,\n                                        style: const TextStyle(\n                                          color: Colors.white,\n                                          fontSize: 16,\n                                          fontWeight: FontWeight.bold,\n                                        ),\n                                        overflow: TextOverflow.ellipsis,\n                                      ),\n                                    ),\n                                    if (user.isLocked ?? false) ...[\n                                      const SizedBox(width: 8),\n                                      Icon(\n                                        Icons.lock,\n                                        color: Colors.red[400],\n                                        size: 16,\n                                      ),\n                                    ],\n                                  ],\n                                ),\n                                if (!_isExpanded)\n                                  Text(\n                                    ",
    "suggested_key": "worldDefaultReturnColorsgreen400",
    "context": "return Colors.orange[400] ?? Colors.orange;\n      case 'world-admin':\n        return Colors.indigo[400] ?? Colors.indigo;\n      case 'user':\n      default:\n        return Colors.green[400] ?? Colors.green;\n    }",
    "category": "world",
    "confidence": 0.9,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 6,
    "column": 27,
    "original": ";\n\nclass AuthService {\n  static final AuthService _instance = AuthService._internal();\n  factory AuthService() => _instance;\n  AuthService._internal();\n\n  final ApiService _apiService = ApiService();\n  User? _currentUser;\n  bool _refreshing = false; // Rate-Limiting für parallele Refreshes\n\n  // Reaktiver Auth-Status für GoRouter\n  final ValueNotifier<bool> isAuthenticated = ValueNotifier(false);\n\n  // HINZUGEFÜGT: Post-Auth-Redirect System für Invite-Flow\n  String? _pendingInviteToken;\n  String? _pendingRedirectRoute;\n  Map<String, String>? _pendingRouteParams;\n\n  User? get currentUser => _currentUser;\n\n  // HINZUGEFÜGT: Invite-Redirect Management\n  void setPendingInviteRedirect(String inviteToken) {\n    _pendingInviteToken = inviteToken;\n    _pendingRedirectRoute = ",
    "suggested_key": "authClassAuthserviceStatic",
    "context": "import '../models/user.dart';\nimport '../../config/logger.dart';\nimport 'api_service.dart';\nimport 'token_storage.dart';\n\nclass AuthService {\n  static final AuthService _instance = AuthService._internal();",
    "category": "auth",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 42,
    "column": 17,
    "original": ": expiresAt?.toIso8601String(),\n    };\n  }\n}\n\n// Strukturierte Fehlercodes für bessere Wartbarkeit\nenum InviteErrorCode {\n  inviteAlreadySent,\n  permissionDenied,\n  worldNotFound,\n  worldNotOpen,\n  invalidEmail,\n  networkError,\n  unknown,\n}\n\nclass InviteService {\n  static final InviteService _instance = InviteService._internal();\n  factory InviteService() => _instance;\n  InviteService._internal();\n\n  final ApiService _apiService = ApiService();\n\n  // Strukturierte Fehlerbehandlung mit Error-Codes\n  InviteErrorCode _parseErrorCode(Map<String, dynamic> errorData) {\n    final errorCode = errorData[",
    "suggested_key": "authExpiresattoiso8601stringStrukturierteFehlercodes",
    "context": "'email': email,\n      'status': status,\n      'createdAt': createdAt?.toIso8601String(),\n      'expiresAt': expiresAt?.toIso8601String(),\n    };\n  }\n}",
    "category": "auth",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 7,
    "column": 33,
    "original": ";\n\n// PreRegistrationStatus-Model für bessere Typisierung\nclass PreRegistrationStatus {\n  final bool isPreRegistered;\n  final DateTime? registeredAt;\n  final String? status;\n  final Map<String, dynamic>? config;\n\n  PreRegistrationStatus({\n    required this.isPreRegistered,\n    this.registeredAt,\n    this.status,\n    this.config,\n  });\n\n  factory PreRegistrationStatus.fromJson(Map<String, dynamic> json) {\n    return PreRegistrationStatus(\n      isPreRegistered: json[",
    "suggested_key": "authPreregistrationstatusmodelFürBessere",
    "context": "import '../models/world.dart';\nimport 'api_service.dart';\nimport 'auth_service.dart';\nimport '../../config/logger.dart';\n\n// PreRegistrationStatus-Model für bessere Typisierung\nclass PreRegistrationStatus {",
    "category": "auth",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 39,
    "column": 14,
    "original": ": config,\n    };\n  }\n}\n\n// Strukturierte Fehlercodes für bessere Wartbarkeit\nenum WorldErrorCode {\n  worldNotFound,\n  permissionDenied,\n  worldArchived,\n  alreadyRegistered,\n  alreadyPreRegistered,\n  preRegistrationClosed,\n  notAuthenticated,\n  networkError,\n  unknown,\n}\n\nclass WorldService {\n  static final WorldService _instance = WorldService._internal();\n  factory WorldService() => _instance;\n  WorldService._internal();\n\n  final ApiService _apiService = ApiService();\n  final AuthService _authService = AuthService();\n\n  // Strukturierte Fehlerbehandlung mit Error-Codes\n  WorldErrorCode _parseErrorCode(Map<String, dynamic> errorData) {\n    final errorCode = errorData[",
    "suggested_key": "authConfigStrukturierteFehlercodes",
    "context": "'isPreRegistered': isPreRegistered,\n      'registeredAt': registeredAt?.toIso8601String(),\n      'status': status,\n      'config': config,\n    };\n  }\n}",
    "category": "auth",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\forgot_password_page.dart",
    "line": 230,
    "column": 44,
    "original": "Bitte gib eine gültige E-Mail-Adresse ein",
    "suggested_key": "authBitteGibEine",
    "context": "return 'Bitte gib deine E-Mail-Adresse ein';\n                                  }\n                                  if (!_emailRegex.hasMatch(value.trim())) {\n                                    return 'Bitte gib eine gültige E-Mail-Adresse ein';\n                                  }\n                                  return null;\n                                },",
    "category": "auth",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 6,
    "column": 43,
    "original": ";\n\n// ServiceLocator Import für DI\nimport ",
    "suggested_key": "authServicelocatorImportFür",
    "context": "import '../../config/logger.dart';\nimport '../../core/services/auth_service.dart';\nimport '../../theme/app_theme.dart';\nimport '../../theme/background_widget.dart';\n\n// ServiceLocator Import für DI\nimport '../../main.dart';",
    "category": "auth",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 9,
    "column": 24,
    "original": ";\n\nclass LoginPage extends StatefulWidget {\n  const LoginPage({super.key});\n\n  @override\n  State<LoginPage> createState() => _LoginPageState();\n}\n\nclass _LoginPageState extends State<LoginPage> with SingleTickerProviderStateMixin {\n  final _formKey = GlobalKey<FormState>();\n  final _usernameController = TextEditingController();\n  final _passwordController = TextEditingController();\n  \n  late final AuthService _authService;\n  late AnimationController _animationController;\n  late Animation<double> _fadeAnimation;\n  \n  bool _isLoading = false;\n  bool _obscurePassword = true;\n  String? _loginError;\n  bool _rememberMe = false;\n  \n  // Invite-Parameter\n  String? _inviteToken;\n  \n  // Für bessere Validierung\n  bool _hasInteractedWithUsername = false;\n  bool _hasInteractedWithPassword = false;\n\n  @override\n  void initState() {\n    super.initState();\n    _initializeServices();\n    _loadQueryParameters();\n    \n    // Animation Setup\n    _animationController = AnimationController(\n      duration: const Duration(milliseconds: 800),\n      vsync: this,\n    );\n    _fadeAnimation = Tween<double>(\n      begin: 0.0,\n      end: 1.0,\n    ).animate(CurvedAnimation(\n      parent: _animationController,\n      curve: Curves.easeIn,\n    ));\n    \n    _animationController.forward();\n  }\n\n  @override\n  void dispose() {\n    _animationController.dispose();\n    _usernameController.dispose();\n    _passwordController.dispose();\n    super.dispose();\n  }\n\n  void _initializeServices() {\n    try {\n      if (ServiceLocator.has<AuthService>()) {\n        _authService = ServiceLocator.get<AuthService>();\n      } else {\n        _authService = AuthService();\n      }\n    } catch (e) {\n      AppLogger.app.w(",
    "suggested_key": "authClassLoginpageExtends",
    "context": "import '../../theme/background_widget.dart';\n\n// ServiceLocator Import für DI\nimport '../../main.dart';\n\nclass LoginPage extends StatefulWidget {\n  const LoginPage({super.key});",
    "category": "auth",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 523,
    "column": 61,
    "original": "Google Login wird bald verfügbar sein",
    "suggested_key": "authGoogleLoginWird",
    "context": "onPressed: () {\n                                          ScaffoldMessenger.of(context).showSnackBar(\n                                            const SnackBar(\n                                              content: Text('Google Login wird bald verfügbar sein'),\n                                            ),\n                                          );\n                                        },",
    "category": "auth",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 536,
    "column": 61,
    "original": "GitHub Login wird bald verfügbar sein",
    "suggested_key": "authGithubLoginWird",
    "context": "onPressed: () {\n                                          ScaffoldMessenger.of(context).showSnackBar(\n                                            const SnackBar(\n                                              content: Text('GitHub Login wird bald verfügbar sein'),\n                                            ),\n                                          );\n                                        },",
    "category": "auth",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 7,
    "column": 43,
    "original": ";\n\n// ServiceLocator Import für DI\nimport ",
    "suggested_key": "authServicelocatorImportFür",
    "context": "import '../../core/services/auth_service.dart';\nimport '../../core/services/world_service.dart';\nimport '../../theme/app_theme.dart';\nimport '../../theme/background_widget.dart';\n\n// ServiceLocator Import für DI\nimport '../../main.dart';",
    "category": "auth",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 71,
    "column": 13,
    "original": ": _prefilledEmail\n    });\n    \n    // E-Mail vorbefüllen wenn vorhanden\n    if (_prefilledEmail != null && _prefilledEmail!.isNotEmpty) {\n      _emailController.text = _prefilledEmail!;\n      AppLogger.app.i(",
    "suggested_key": "auth_prefilledemailEmailVorbefüllen",
    "context": "'hasInviteToken': _inviteToken != null,\n      'hasPrefilledEmail': _prefilledEmail != null,\n      'inviteToken': _inviteToken?.substring(0, 8),\n      'email': _prefilledEmail\n    });\n    \n    // E-Mail vorbefüllen wenn vorhanden",
    "category": "auth",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 354,
    "column": 42,
    "original": "Bitte gib eine gültige E-Mail-Adresse ein",
    "suggested_key": "authBitteGibEine",
    "context": "return 'E-Mail ist erforderlich';\n                                }\n                                if (!_emailRegex.hasMatch(value)) {\n                                  return 'Bitte gib eine gültige E-Mail-Adresse ein';\n                                }\n                                return null;\n                              },",
    "category": "auth",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 122,
    "column": 17,
    "original": ": wasAuthenticated != _isAuthenticated\n      });\n      \n      // UI aktualisieren wenn sich Status geändert hat\n      if (wasAuthenticated != _isAuthenticated && mounted) {\n        setState(() {});\n      }\n    } catch (e) {\n      AppLogger.logError(",
    "suggested_key": "authWasauthenticated_isauthenticatedUi",
    "context": "'isAuthenticated': _isAuthenticated,\n        'userId': currentUser?.id,\n        'username': currentUser?.username,\n        'changed': wasAuthenticated != _isAuthenticated\n      });\n      \n      // UI aktualisieren wenn sich Status geändert hat",
    "category": "auth",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 316,
    "column": 48,
    "original": "Passwort bestätigen",
    "suggested_key": "buttonPasswortBestätigen",
    "context": "}\n                                  },\n                                  decoration: InputDecoration(\n                                    labelText: 'Passwort bestätigen',\n                                    labelStyle: TextStyle(color: Colors.grey[400]),\n                                    prefixIcon: const Icon(Icons.lock_outline, color: AppTheme.primaryColor),\n                                    suffixIcon: IconButton(",
    "category": "button",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_card.dart",
    "line": 406,
    "column": 38,
    "original": ",\n              color: Colors.orange[600],\n            ));\n          }\n        }\n        break;\n        \n      case WorldStatus.open:\n      case WorldStatus.running:\n        // Beitreten oder Verlassen\n        if (isJoined) {\n          // Spielen Button immer zuerst anzeigen wenn verfügbar\n          if (onPlay != null) {\n            buttons.add(_buildButton(\n              onPressed: onPlay,\n              icon: Icons.play_circle_filled,\n              label: ",
    "suggested_key": "buttonColorColorsorange600Break",
    "context": "buttons.add(_buildButton(\n              onPressed: onPreRegister,\n              icon: Icons.how_to_reg,\n              label: 'Vorregistrieren',\n              color: Colors.orange[600],\n            ));\n          }",
    "category": "button",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_card.dart",
    "line": 440,
    "column": 32,
    "original": ",\n              color: AppTheme.primaryColor,\n            ));\n          }\n        }\n        break;\n        \n      case WorldStatus.closed:\n      case WorldStatus.archived:\n        // Keine Aktions-Buttons bei geschlossenen/archivierten Welten\n        return _buildStatusBadge();\n    }\n    \n    // Invite Button für upcoming, open und running\n    if ([WorldStatus.upcoming, WorldStatus.open, WorldStatus.running].contains(world.status) && \n        onInvite != null) {\n      buttons.add(_buildButton(\n        onPressed: onInvite,\n        icon: Icons.person_add,\n        label: null,\n        color: Colors.purple[600],\n        iconOnly: true,\n        tooltip: ",
    "suggested_key": "buttonColorAppthemeprimarycolorBreak",
    "context": "buttons.add(_buildButton(\n              onPressed: onJoin,\n              icon: Icons.play_arrow,\n              label: 'Beitreten',\n              color: AppTheme.primaryColor,\n            ));\n          }",
    "category": "button",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 253,
    "column": 24,
    "original": ";\n    bool showLoginButton = false;\n    bool showRegisterButton = false;\n    bool showAcceptButton = false;\n    bool showLogoutButton = false;\n    \n    // Basis-Info-Text mit Einlader, Welt und Gültigkeitsstatus\n    final inviterText = invitedByName;\n    \n    final actionTypeText = isUpcoming \n      ? ",
    "suggested_key": "buttonBoolShowloginbuttonFalse",
    "context": "// **NEUE INTELLIGENTE BUTTON-LOGIK**\n    String actionText = '';\n    String infoText = '';\n    bool showLoginButton = false;\n    bool showRegisterButton = false;\n    bool showAcceptButton = false;",
    "category": "button",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 289,
    "column": 51,
    "original": ";\n          showRegisterButton = isInviteValid; // Nur bei gültigen Invites\n        }\n        break;\n        \n      case ",
    "suggested_key": "buttonShowregisterbuttonIsinvitevalidNur",
    "context": "if (requiresAction == 'register') {\n          // Mail ist unbekannt -> nur Register\n          actionText = 'Du musst dich mit der E-Mail-Adresse $inviteEmail registrieren.';\n          infoText = '$baseInfoText\\n\\n$actionText';\n          showRegisterButton = isInviteValid; // Nur bei gültigen Invites\n        }\n        break;",
    "category": "button",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 298,
    "column": 51,
    "original": ";\n          showLoginButton = isInviteValid; // Nur bei gültigen Invites\n        }\n        break;\n        \n      case ",
    "suggested_key": "buttonShowloginbuttonIsinvitevalidNur",
    "context": "if (requiresAction == 'login') {\n          // Mail ist bekannt, User nicht angemeldet -> nur Login\n          actionText = 'Dein Account mit $inviteEmail ist bereits registriert. Bitte melde dich an.';\n          infoText = '$baseInfoText\\n\\n$actionText';\n          showLoginButton = isInviteValid; // Nur bei gültigen Invites\n        }\n        break;",
    "category": "button",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 307,
    "column": 24,
    "original": "Diese Einladung ist für $inviteEmail bestimmt, aber du bist als $currentUserEmail angemeldet.",
    "suggested_key": "buttonDieseEinladungIst",
    "context": "if (requiresAction == 'logout_and_register') {\n          final currentUserEmail = userStatusData['currentUser']?['email'];\n          // User mit falscher Mail angemeldet -> Logout + Register\n          actionText = 'Diese Einladung ist für $inviteEmail bestimmt, aber du bist als $currentUserEmail angemeldet.';\n          infoText = '$baseInfoText\\n\\n$actionText\\n\\nBitte melde dich ab und registriere dich mit der richtigen E-Mail-Adresse.';\n          showLogoutButton = isInviteValid; // Nur bei gültigen Invites\n        }",
    "category": "button",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 308,
    "column": 129,
    "original": ";\n          showLogoutButton = isInviteValid; // Nur bei gültigen Invites\n        }\n        break;\n        \n      case ",
    "suggested_key": "buttonShowlogoutbuttonIsinvitevalidNur",
    "context": "final currentUserEmail = userStatusData['currentUser']?['email'];\n          // User mit falscher Mail angemeldet -> Logout + Register\n          actionText = 'Diese Einladung ist für $inviteEmail bestimmt, aber du bist als $currentUserEmail angemeldet.';\n          infoText = '$baseInfoText\\n\\n$actionText\\n\\nBitte melde dich ab und registriere dich mit der richtigen E-Mail-Adresse.';\n          showLogoutButton = isInviteValid; // Nur bei gültigen Invites\n        }\n        break;",
    "category": "button",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 317,
    "column": 51,
    "original": ";\n          showAcceptButton = isInviteValid; // Nur bei gültigen Invites\n          \n          // Auto-Accept entfernt: User soll bewusst entscheiden!\n        }\n        break;\n        \n      default:\n        AppLogger.app.w(",
    "suggested_key": "buttonShowacceptbuttonIsinvitevalidNur",
    "context": "if (requiresAction == 'join_world') {\n          // User richtig angemeldet -> nur Accept Button (KEIN Auto-Accept!)\n          actionText = 'Du bist mit der richtigen E-Mail-Adresse angemeldet und kannst die Einladung jetzt annehmen.';\n          infoText = '$baseInfoText\\n\\n$actionText';\n          showAcceptButton = isInviteValid; // Nur bei gültigen Invites\n          \n          // Auto-Accept entfernt: User soll bewusst entscheiden!",
    "category": "button",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\invite_dialog.dart",
    "line": 2,
    "column": 35,
    "original": ";\n\nclass InviteDialog extends StatefulWidget {\n  final String worldName;\n\n  const InviteDialog({\n    super.key,\n    required this.worldName,\n  });\n\n  @override\n  State<InviteDialog> createState() => _InviteDialogState();\n}\n\nclass _InviteDialogState extends State<InviteDialog> {\n  final _formKey = GlobalKey<FormState>();\n  final _emailController = TextEditingController();\n  bool _isLoading = false;\n\n  @override\n  void dispose() {\n    _emailController.dispose();\n    super.dispose();\n  }\n\n  void _submit() async {\n    final formState = _formKey.currentState;\n    if (formState == null || !formState.validate()) return;\n    \n    setState(() {\n      _isLoading = true;\n    });\n\n    // Simuliere API-Aufruf für E-Mail-Versand\n    await Future.delayed(const Duration(seconds: 1));\n    \n    if (mounted) {\n      setState(() {\n        _isLoading = false;\n      });\n      Navigator.of(context).pop(_emailController.text.trim());\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return AlertDialog(\n      backgroundColor: const Color(0xFF1A1A1A), // Dunkler Hintergrund\n      shape: RoundedRectangleBorder(\n        borderRadius: BorderRadius.circular(20),\n        side: BorderSide(\n          color: AppTheme.primaryColor.withOpacity(0.3),\n          width: 1,\n        ),\n      ),\n      title: Text(\n        ",
    "suggested_key": "dialogClassInvitedialogExtends",
    "context": "import 'package:flutter/material.dart';\nimport '../../theme/app_theme.dart';\n\nclass InviteDialog extends StatefulWidget {\n  final String worldName;",
    "category": "dialog",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 55,
    "column": 22,
    "original": "🧹 Pending-Redirect gelöscht",
    "suggested_key": "errorPendingredirectGelöscht",
    "context": "}\n\n  void clearPendingRedirect() {\n    AppLogger.auth.i('🧹 Pending-Redirect gelöscht', error: {\n      'hadRoute': _pendingRedirectRoute != null,\n      'hadInvite': _pendingInviteToken != null\n    });",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 67,
    "column": 24,
    "original": "🔍 Prüfe Authentication Status",
    "suggested_key": "errorPrüfeAuthenticationStatus",
    "context": "Future<bool> isLoggedIn() async {\n    try {\n      final accessToken = await TokenStorage.getAccessToken();\n      AppLogger.auth.d('🔍 Prüfe Authentication Status', error: {\n        'hasToken': accessToken != null,\n      });",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 98,
    "column": 54,
    "original": ", error: e);\n      await logout();\n      return false;\n    }\n  }\n\n  // Vollständige Token-Validierung beim App-Start (ohne API-Calls)\n  Future<bool> validateTokensOnStart() async {\n    try {\n      final accessToken = await TokenStorage.getAccessToken();\n      final refreshToken = await TokenStorage.getRefreshToken();\n      \n      if (accessToken == null || refreshToken == null) {\n        return false;\n      }\n\n      // JWT-Token Format validieren\n      if (!_isValidJWT(accessToken) || !_isValidJWT(refreshToken)) {\n        return false;\n      }\n\n      // Token-Ablauf prüfen (nur lokale Validierung, keine API-Calls)\n      final accessExp = _getTokenExpiration(accessToken);\n      final refreshExp = _getTokenExpiration(refreshToken);\n      \n      if (accessExp == null || refreshExp == null) {\n        return false;\n      }\n\n      final now = DateTime.now();\n      \n      // Refresh-Token ist abgelaufen\n      if (refreshExp.isBefore(now)) {\n        return false;\n      }\n      \n      // Access-Token ist abgelaufen, aber Refresh-Token ist noch gültig\n      if (accessExp.isBefore(now)) {\n        // Token ist abgelaufen, aber wir versuchen nicht zu erneuern\n        // Das wird beim ersten API-Call automatisch gemacht\n        return true; // Erlaube App-Start, Token-Refresh erfolgt bei Bedarf\n      }\n\n      // Beide Token sind gültig\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  // JWT-Token Format validieren\n  bool _isValidJWT(String token) {\n    try {\n      final parts = token.split(",
    "suggested_key": "errorErrorEAwait",
    "context": "isAuthenticated.value = false;\n      return false;\n    } catch (e) {\n      AppLogger.auth.e('❌ isLoggedIn() fehlgeschlagen', error: e);\n      await logout();\n      return false;\n    }",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 309,
    "column": 15,
    "original": ": email,\n      });\n      rethrow;\n    }\n  }\n\n  // Erweitertes Logout mit Server-Call und vollständigem Cleanup\n  Future<void> logout() async {\n    final username = _currentUser?.username ?? ",
    "suggested_key": "errorEmailRethrowErweitertes",
    "context": "} catch (e) {\n      AppLogger.logAuthEvent('register_error', username: username, metadata: {\n        'error': e.toString(),\n        'email': email,\n      });\n      rethrow;\n    }",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 344,
    "column": 40,
    "original": ", error: e);\n    }\n  }\n\n  // Rate-Limited Token-Refresh mit parallelem Schutz\n  Future<bool> refreshTokenIfNeeded() async {\n    if (_refreshing) {\n      // Warten bis aktueller Refresh abgeschlossen ist\n      while (_refreshing) {\n        await Future.delayed(const Duration(milliseconds: 100));\n      }\n      return true; // Annahme: Refresh war erfolgreich\n    }\n\n    _refreshing = true;\n    try {\n      final refreshToken = await TokenStorage.getRefreshToken();\n      if (refreshToken == null) {\n        await logout();\n        return false;\n      }\n\n      // Refresh-Token Format validieren\n      if (!_isValidJWT(refreshToken)) {\n        await logout();\n        return false;\n      }\n\n      // Refresh-Token Ablauf prüfen\n      final refreshExp = _getTokenExpiration(refreshToken);\n      if (refreshExp == null || refreshExp.isBefore(DateTime.now())) {\n        await logout();\n        return false;\n      }\n\n      _apiService.setToken(refreshToken);\n      final response = await _apiService.post(",
    "suggested_key": "errorErrorERatelimited",
    "context": "AppLogger.logAuthEvent('logout_success', username: username);\n    } catch (e) {\n      AppLogger.auth.e('❌ Logout-Fehler', error: e);\n    }\n  }",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 481,
    "column": 64,
    "original": ", error: e);\n      rethrow;\n    }\n  }\n\n  // Passwort zurücksetzen mit Token\n  Future<bool> resetPassword(String token, String newPassword) async {\n    try {\n      AppLogger.auth.i(",
    "suggested_key": "errorErrorERethrow",
    "context": "throw Exception(errorData['message'] ?? 'Passwort-Reset Anfrage fehlgeschlagen');\n      }\n    } catch (e) {\n      AppLogger.auth.e('❌ Password-Reset Anfrage fehlgeschlagen', error: e);\n      rethrow;\n    }\n  }",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 497,
    "column": 26,
    "original": "✅ Password erfolgreich zurückgesetzt",
    "suggested_key": "errorPasswordErfolgreichZurückgesetzt",
    "context": "});\n\n      if (response.statusCode == 200) {\n        AppLogger.auth.i('✅ Password erfolgreich zurückgesetzt');\n        return true;\n      } else {\n        final errorData = jsonDecode(response.body);",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 505,
    "column": 71,
    "original": "Passwort-Zurücksetzung fehlgeschlagen",
    "suggested_key": "errorPasswortzurücksetzungFehlgeschlagen",
    "context": "'statusCode': response.statusCode,\n          'response': errorData\n        });\n        throw Exception(errorData['error'] ?? errorData['message'] ?? 'Passwort-Zurücksetzung fehlgeschlagen');\n      }\n    } catch (e) {\n      AppLogger.auth.e('❌ Password-Reset fehlgeschlagen', error: e);",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 508,
    "column": 56,
    "original": ", error: e);\n      rethrow;\n    }\n  }\n\n  // Token-Status überprüfen (für Debugging und Monitoring)\n  Future<Map<String, dynamic>> getTokenStatus() async {\n    try {\n      final accessToken = await TokenStorage.getAccessToken();\n      final refreshToken = await TokenStorage.getRefreshToken();\n      \n      if (accessToken == null || refreshToken == null) {\n        return {\n          ",
    "suggested_key": "errorErrorERethrow",
    "context": "throw Exception(errorData['error'] ?? errorData['message'] ?? 'Passwort-Zurücksetzung fehlgeschlagen');\n      }\n    } catch (e) {\n      AppLogger.auth.e('❌ Password-Reset fehlgeschlagen', error: e);\n      rethrow;\n    }\n  }",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 80,
    "column": 28,
    "original": ":\n          return InviteErrorCode.invalidEmail;\n        default:\n          return InviteErrorCode.unknown;\n      }\n    }\n    \n    // Fallback: Text-basierte Erkennung (für Backwards-Kompatibilität)\n    if (message.contains(",
    "suggested_key": "errorReturnInviteerrorcodeinvalidemailDefault",
    "context": "return InviteErrorCode.worldNotFound;\n        case 'WORLD_NOT_OPEN':\n          return InviteErrorCode.worldNotOpen;\n        case 'INVALID_EMAIL':\n          return InviteErrorCode.invalidEmail;\n        default:\n          return InviteErrorCode.unknown;",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 94,
    "column": 33,
    "original": "nicht geöffnet",
    "suggested_key": "errorNichtGeöffnet",
    "context": "return InviteErrorCode.permissionDenied;\n    } else if (message.contains('nicht gefunden')) {\n      return InviteErrorCode.worldNotFound;\n    } else if (message.contains('nicht geöffnet')) {\n      return InviteErrorCode.worldNotOpen;\n    } else if (message.contains('E-Mail')) {\n      return InviteErrorCode.invalidEmail;",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 113,
    "column": 16,
    "original": "Diese Welt ist nicht für Einladungen geöffnet",
    "suggested_key": "errorDieseWeltIst",
    "context": "case InviteErrorCode.worldNotFound:\n        return 'Welt nicht gefunden';\n      case InviteErrorCode.worldNotOpen:\n        return 'Diese Welt ist nicht für Einladungen geöffnet';\n      case InviteErrorCode.invalidEmail:\n        return 'Ungültige E-Mail-Adresse';\n      case InviteErrorCode.networkError:",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 115,
    "column": 16,
    "original": "Ungültige E-Mail-Adresse",
    "suggested_key": "errorUngültigeEmailadresse",
    "context": "case InviteErrorCode.worldNotOpen:\n        return 'Diese Welt ist nicht für Einladungen geöffnet';\n      case InviteErrorCode.invalidEmail:\n        return 'Ungültige E-Mail-Adresse';\n      case InviteErrorCode.networkError:\n        return 'Netzwerkfehler - bitte versuche es erneut';\n      case InviteErrorCode.unknown:",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 142,
    "column": 23,
    "original": "Ungültige Server-Antwort: $e",
    "suggested_key": "errorUngültigeServerantwortE",
    "context": "throw Exception(errorMessage);\n      }\n    } on FormatException catch (e) {\n      throw Exception('Ungültige Server-Antwort: $e');\n    } on SocketException {\n      throw Exception(_getErrorMessage(InviteErrorCode.networkError, null));\n    } on http.ClientException {",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 173,
    "column": 25,
    "original": "Öffentliche Einladung fehlgeschlagen: ${response.statusCode}",
    "suggested_key": "errorÖffentlicheEinladungFehlgeschlagen",
    "context": "final errorMessage = _getErrorMessage(errorCode, errorData['message']);\n        throw Exception(errorMessage);\n      } else {\n        throw Exception('Öffentliche Einladung fehlgeschlagen: ${response.statusCode}');\n      }\n    } on FormatException catch (e) {\n      throw Exception('Ungültige Server-Antwort: $e');",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 176,
    "column": 23,
    "original": "Ungültige Server-Antwort: $e",
    "suggested_key": "errorUngültigeServerantwortE",
    "context": "throw Exception('Öffentliche Einladung fehlgeschlagen: ${response.statusCode}');\n      }\n    } on FormatException catch (e) {\n      throw Exception('Ungültige Server-Antwort: $e');\n    } on SocketException {\n      throw Exception(_getErrorMessage(InviteErrorCode.networkError, null));\n    } on http.ClientException {",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 185,
    "column": 23,
    "original": "Öffentliche Einladung fehlgeschlagen: $e",
    "suggested_key": "errorÖffentlicheEinladungFehlgeschlagen",
    "context": "if (e is Exception) {\n        rethrow;\n      }\n      throw Exception('Öffentliche Einladung fehlgeschlagen: $e');\n    }\n  }",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 200,
    "column": 23,
    "original": "Ungültige Server-Antwort: $e",
    "suggested_key": "errorUngültigeServerantwortE",
    "context": "throw Exception('Einladungen konnten nicht geladen werden: ${response.statusCode}');\n      }\n    } on FormatException catch (e) {\n      throw Exception('Ungültige Server-Antwort: $e');\n    } on SocketException {\n      throw Exception(_getErrorMessage(InviteErrorCode.networkError, null));\n    } on http.ClientException {",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 209,
    "column": 68,
    "original": ");\n    }\n  }\n\n  // Backwards-Kompatibilität: Alte Methode mit Map-Rückgabe\n  Future<List<Map<String, dynamic>>> getInvitesAsMap(int worldId) async {\n    final invites = await getInvites(worldId);\n    return invites.map((invite) => invite.toJson()).toList();\n  }\n\n  Future<bool> deleteInvite(int worldId, int inviteId, {String? token}) async {\n    try {\n      if (token != null) {\n        final data = <String, dynamic>{\n          ",
    "suggested_key": "errorBackwardskompatibilitätAlteMethode",
    "context": "if (e is Exception) {\n        rethrow;\n      }\n      throw Exception('Einladungen konnten nicht geladen werden: $e');\n    }\n  }",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 232,
    "column": 23,
    "original": "Ungültige Server-Antwort: $e",
    "suggested_key": "errorUngültigeServerantwortE",
    "context": "return response.statusCode == 200;\n      }\n    } on FormatException catch (e) {\n      throw Exception('Ungültige Server-Antwort: $e');\n    } on SocketException {\n      throw Exception(_getErrorMessage(InviteErrorCode.networkError, null));\n    } on http.ClientException {",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 241,
    "column": 23,
    "original": "Einladung konnte nicht gelöscht werden: $e",
    "suggested_key": "errorEinladungKonnteNicht",
    "context": "if (e is Exception) {\n        rethrow;\n      }\n      throw Exception('Einladung konnte nicht gelöscht werden: $e');\n    }\n  }\n}",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 84,
    "column": 32,
    "original": ":\n          return WorldErrorCode.notAuthenticated;\n        default:\n          return WorldErrorCode.unknown;\n      }\n    }\n    \n    // Fallback: Text-basierte Erkennung (für Backwards-Kompatibilität)\n    if (message.contains(",
    "suggested_key": "errorReturnWorlderrorcodenotauthenticatedDefault",
    "context": "return WorldErrorCode.alreadyPreRegistered;\n        case 'PRE_REGISTRATION_CLOSED':\n          return WorldErrorCode.preRegistrationClosed;\n        case 'NOT_AUTHENTICATED':\n          return WorldErrorCode.notAuthenticated;\n        default:\n          return WorldErrorCode.unknown;",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 117,
    "column": 16,
    "original": "Du hast keine Berechtigung für diese Aktion",
    "suggested_key": "errorDuHastKeine",
    "context": "case WorldErrorCode.worldNotFound:\n        return 'Welt nicht gefunden';\n      case WorldErrorCode.permissionDenied:\n        return 'Du hast keine Berechtigung für diese Aktion';\n      case WorldErrorCode.worldArchived:\n        return 'Diese Welt ist nicht mehr verfügbar';\n      case WorldErrorCode.alreadyRegistered:",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 119,
    "column": 16,
    "original": "Diese Welt ist nicht mehr verfügbar",
    "suggested_key": "errorDieseWeltIst",
    "context": "case WorldErrorCode.permissionDenied:\n        return 'Du hast keine Berechtigung für diese Aktion';\n      case WorldErrorCode.worldArchived:\n        return 'Diese Welt ist nicht mehr verfügbar';\n      case WorldErrorCode.alreadyRegistered:\n        return 'Du bist bereits Mitglied dieser Welt';\n      case WorldErrorCode.alreadyPreRegistered:",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 123,
    "column": 16,
    "original": "Du bist bereits für diese Welt vorregistriert",
    "suggested_key": "errorDuBistBereits",
    "context": "case WorldErrorCode.alreadyRegistered:\n        return 'Du bist bereits Mitglied dieser Welt';\n      case WorldErrorCode.alreadyPreRegistered:\n        return 'Du bist bereits für diese Welt vorregistriert';\n      case WorldErrorCode.preRegistrationClosed:\n        return 'Vorregistrierung für diese Welt ist nicht möglich';\n      case WorldErrorCode.notAuthenticated:",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 125,
    "column": 16,
    "original": "Vorregistrierung für diese Welt ist nicht möglich",
    "suggested_key": "errorVorregistrierungFürDiese",
    "context": "case WorldErrorCode.alreadyPreRegistered:\n        return 'Du bist bereits für diese Welt vorregistriert';\n      case WorldErrorCode.preRegistrationClosed:\n        return 'Vorregistrierung für diese Welt ist nicht möglich';\n      case WorldErrorCode.notAuthenticated:\n        return 'Du musst angemeldet sein';\n      case WorldErrorCode.networkError:",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 146,
    "column": 23,
    "original": "Ungültige Server-Antwort: $e",
    "suggested_key": "errorUngültigeServerantwortE",
    "context": "throw Exception('Welten konnten nicht geladen werden: ${response.statusCode}');\n      }\n    } on FormatException catch (e) {\n      throw Exception('Ungültige Server-Antwort: $e');\n    } on SocketException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } on http.ClientException {",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 170,
    "column": 23,
    "original": "Ungültige Server-Antwort: $e",
    "suggested_key": "errorUngültigeServerantwortE",
    "context": "throw Exception('Welt konnte nicht geladen werden: ${response.statusCode}');\n      }\n    } on FormatException catch (e) {\n      throw Exception('Ungültige Server-Antwort: $e');\n    } on SocketException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } on http.ClientException {",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 198,
    "column": 23,
    "original": "Ungültige Server-Antwort: $e",
    "suggested_key": "errorUngültigeServerantwortE",
    "context": "throw Exception(errorMessage);\n      }\n    } on FormatException catch (e) {\n      throw Exception('Ungültige Server-Antwort: $e');\n    } on SocketException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } on http.ClientException {",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 233,
    "column": 23,
    "original": "Ungültige Server-Antwort: $e",
    "suggested_key": "errorUngültigeServerantwortE",
    "context": "throw Exception(errorMessage);\n      }\n    } on FormatException catch (e) {\n      throw Exception('Ungültige Server-Antwort: $e');\n    } on SocketException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } on http.ClientException {",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 273,
    "column": 23,
    "original": "Ungültige Server-Antwort: $e",
    "suggested_key": "errorUngültigeServerantwortE",
    "context": "throw Exception(errorMessage);\n      }\n    } on FormatException catch (e) {\n      throw Exception('Ungültige Server-Antwort: $e');\n    } on SocketException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } on http.ClientException {",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 292,
    "column": 23,
    "original": "Ungültige Server-Antwort: $e",
    "suggested_key": "errorUngültigeServerantwortE",
    "context": "return response.statusCode == 200;\n    } on FormatException catch (e) {\n      throw Exception('Ungültige Server-Antwort: $e');\n    } on SocketException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } on http.ClientException {",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 327,
    "column": 23,
    "original": "Ungültige Server-Antwort: $e",
    "suggested_key": "errorUngültigeServerantwortE",
    "context": "return response.statusCode == 200;\n    } on FormatException catch (e) {\n      throw Exception('Ungültige Server-Antwort: $e');\n    } on SocketException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } on http.ClientException {",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 364,
    "column": 13,
    "original": "t log this as an error\n      return PreRegistrationStatus(isPreRegistered: false);\n    }\n  }\n\n  // Backwards-Kompatibilität: Alte Methode mit bool-Rückgabe\n  Future<bool> isPreRegisteredForWorld(int worldId) async {\n    final status = await getPreRegistrationStatus(worldId);\n    return status.isPreRegistered;\n  }\n\n  // Invite-Token Validierung\n  Future<Map<String, dynamic>?> validateInviteToken(String token) async {\n    try {\n      // API-Call ohne Authentifizierung (öffentlicher Endpoint)\n      final response = await _apiService.get(",
    "suggested_key": "errorTLogThis",
    "context": "return PreRegistrationStatus(isPreRegistered: false);\n    } catch (e) {\n      // 404 means user is not pre-registered, which is normal\n      // Don't log this as an error\n      return PreRegistrationStatus(isPreRegistered: false);\n    }\n  }",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 390,
    "column": 108,
    "original": "});\n      // Fallback für bessere UX\n      return null;\n    }\n  }\n\n  // Invite akzeptieren und User der Welt hinzufügen\n  Future<Map<String, dynamic>?> acceptInvite(String token) async {\n    try {\n      AppLogger.app.i(",
    "suggested_key": "errorFallbackFürBessere",
    "context": "return null;\n    } catch (e) {\n      AppLogger.logError('Fehler bei Token-Validierung', e, context: {'token': token.substring(0, 8) + '...'});\n      // Fallback für bessere UX\n      return null;\n    }",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 421,
    "column": 25,
    "original": "Diese Einladung ist nicht für deine E-Mail-Adresse bestimmt",
    "suggested_key": "errorDieseEinladungIst",
    "context": "throw Exception('Invite bereits akzeptiert');\n      } else if (response.statusCode == 403) {\n        AppLogger.app.w('⚠️ E-Mail-Mismatch bei Invite', error: {'token': token.substring(0, 8) + '...'});\n        throw Exception('Diese Einladung ist nicht für deine E-Mail-Adresse bestimmt');\n      } else if (response.statusCode == 410) {\n        AppLogger.app.w('⚠️ Invite-Token abgelaufen', error: {'token': token.substring(0, 8) + '...'});\n        throw Exception('Invite-Token ist abgelaufen');",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\forgot_password_page.dart",
    "line": 24,
    "column": 66,
    "original": ");\n\n  @override\n  void dispose() {\n    _emailController.dispose();\n    super.dispose();\n  }\n\n  Future<void> _requestPasswordReset() async {\n    if (!_formKey.currentState!.validate()) {\n      return;\n    }\n\n    setState(() {\n      _isLoading = true;\n      _errorMessage = null;\n      _isSuccess = false;\n    });\n\n    try {\n      final success = await _authService.requestPasswordReset(\n        _emailController.text.trim(),\n      );\n\n      if (success && mounted) {\n        setState(() {\n          _isSuccess = true;\n        });\n        \n        // Nach 3 Sekunden zurück zum Login\n        Future.delayed(const Duration(seconds: 3), () {\n          if (mounted) {\n            context.goNamed(",
    "suggested_key": "errorOverrideVoidDispose",
    "context": "String? _errorMessage;\n  \n  // E-Mail-Validierung Regex\n  static final RegExp _emailRegex = RegExp(r'^[^@]+@[^@]+\\.[^@]+$');\n\n  @override\n  void dispose() {",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 108,
    "column": 84,
    "original": ": user.username});\n        \n        if (mounted) {\n          // HINZUGEFÜGT: Post-Auth-Redirect prüfen\n          final pendingRedirect = _authService.getPendingRedirect();\n          \n          if (pendingRedirect != null) {\n            AppLogger.app.i(",
    "suggested_key": "errorUserusernameIfMounted",
    "context": ");\n\n      if (user != null) {\n        AppLogger.app.i('✅ Login erfolgreich', error: {'userId': user.id, 'username': user.username});\n        \n        if (mounted) {\n          // HINZUGEFÜGT: Post-Auth-Redirect prüfen",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 115,
    "column": 58,
    "original": ", error: pendingRedirect);\n            _authService.clearPendingRedirect();\n            \n            // Redirect zur ursprünglichen Invite-Seite\n            final routeName = pendingRedirect[",
    "suggested_key": "errorErrorPendingredirect_authserviceclearpendingredirect",
    "context": "final pendingRedirect = _authService.getPendingRedirect();\n          \n          if (pendingRedirect != null) {\n            AppLogger.app.i('🎫 Post-Auth-Redirect erkannt', error: pendingRedirect);\n            _authService.clearPendingRedirect();\n            \n            // Redirect zur ursprünglichen Invite-Seite",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 111,
    "column": 17,
    "original": ": user.email,\n        });\n        \n        if (mounted) {\n          // HINZUGEFÜGT: Post-Auth-Redirect prüfen\n          final pendingRedirect = _authService.getPendingRedirect();\n          \n          if (pendingRedirect != null) {\n            AppLogger.app.i(",
    "suggested_key": "errorUseremailIfMounted",
    "context": "AppLogger.app.i('✅ Registrierung erfolgreich', error: {\n          'userId': user.id,\n          'username': user.username,\n          'email': user.email,\n        });\n        \n        if (mounted) {",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 119,
    "column": 76,
    "original": ", error: pendingRedirect);\n            _authService.clearPendingRedirect();\n            \n            // Redirect zur ursprünglichen Invite-Seite\n            final routeName = pendingRedirect[",
    "suggested_key": "errorErrorPendingredirect_authserviceclearpendingredirect",
    "context": "final pendingRedirect = _authService.getPendingRedirect();\n          \n          if (pendingRedirect != null) {\n            AppLogger.app.i('🎫 Post-Auth-Redirect nach Registration erkannt', error: pendingRedirect);\n            _authService.clearPendingRedirect();\n            \n            // Redirect zur ursprünglichen Invite-Seite",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 99,
    "column": 29,
    "original": "Der Reset-Link ist ungültig oder abgelaufen. Bitte fordere einen neuen Link an.",
    "suggested_key": "errorDerResetlinkIst",
    "context": "setState(() {\n          final error = e.toString().replaceAll('Exception: ', '');\n          if (error.contains('expired') || error.contains('invalid')) {\n            _errorMessage = 'Der Reset-Link ist ungültig oder abgelaufen. Bitte fordere einen neuen Link an.';\n          } else {\n            _errorMessage = error;\n          }",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 217,
    "column": 25,
    "original": "Vorregistrierung konnte nicht zurückgezogen werden",
    "suggested_key": "errorVorregistrierungKonnteNicht",
    "context": "_preRegisteredWorlds[world.id] = false;\n        notifyListeners();\n      } else {\n        throw Exception('Vorregistrierung konnte nicht zurückgezogen werden');\n      }\n    } catch (e) {\n      _error = 'Fehler beim Zurückziehen der Vorregistrierung: $e';",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 220,
    "column": 16,
    "original": "Fehler beim Zurückziehen der Vorregistrierung: $e",
    "suggested_key": "errorFehlerBeimZurückziehen",
    "context": "throw Exception('Vorregistrierung konnte nicht zurückgezogen werden');\n      }\n    } catch (e) {\n      _error = 'Fehler beim Zurückziehen der Vorregistrierung: $e';\n      notifyListeners();\n      rethrow;\n    }",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 103,
    "column": 79,
    "original": ", error: e);\n      _worldService = WorldService();\n      _authService = AuthService();\n      \n      // Auch bei Fallback Authentication-Status prüfen\n      _checkAuthenticationStatus();\n    }\n  }\n\n  void _checkAuthenticationStatus() {\n    try {\n      final currentUser = _authService.currentUser;\n      final wasAuthenticated = _isAuthenticated;\n      _isAuthenticated = currentUser != null;\n      \n      AppLogger.app.i(",
    "suggested_key": "errorErrorE_worldservice",
    "context": "// Authentication-Status prüfen\n      _checkAuthenticationStatus();\n    } catch (e) {\n      AppLogger.app.w('⚠️ ServiceLocator Fehler - nutze direkte Instanziierung', error: e);\n      _worldService = WorldService();\n      _authService = AuthService();",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 170,
    "column": 48,
    "original": ";\n        _isLoading = false;\n      });\n      return;\n    }\n    \n    // World laden\n    _world = await _worldService.getWorld(int.parse(widget.worldId!));\n    \n    // Status prüfen\n    await _checkWorldStatus();\n    \n    // Fertig!\n    setState(() {\n      _isLoading = false;\n    });\n  }\n\n  // **INVITE-FLOW: Komplex mit Auth-Prüfung**\n  Future<void> _handleInviteFlow() async {\n    if (widget.inviteToken == null) {\n      setState(() {\n        _errorMessage = ",
    "suggested_key": "error_isloadingFalseReturn",
    "context": "Future<void> _handleNormalFlow() async {\n    if (widget.worldId == null) {\n      setState(() {\n        _errorMessage = 'Keine Welt-ID gefunden';\n        _isLoading = false;\n      });\n      return;",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 203,
    "column": 25,
    "original": "Ungültiger oder abgelaufener Einladungslink",
    "suggested_key": "errorUngültigerOderAbgelaufener",
    "context": "if (tokenData == null || tokenData['world'] == null) {\n      setState(() {\n        _errorMessage = 'Ungültiger oder abgelaufener Einladungslink';\n        _isLoading = false;\n      });\n      return;",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 370,
    "column": 26,
    "original": "Fehler beim Prüfen des World-Status",
    "suggested_key": "errorFehlerBeimPrüfen",
    "context": "'isPreRegistered': _isPreRegistered\n      });\n    } catch (e) {\n      AppLogger.logError('Fehler beim Prüfen des World-Status', e);\n    }\n  }",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 491,
    "column": 42,
    "original": "nicht für deine E-Mail-Adresse",
    "suggested_key": "errorNichtFürDeine",
    "context": "if (e.toString().contains('bereits akzeptiert')) {\n          _joinError = 'Diese Einladung wurde bereits akzeptiert.';\n          _isJoined = true; // User ist bereits Mitglied\n        } else if (e.toString().contains('nicht für deine E-Mail-Adresse')) {\n          _joinError = 'Diese Einladung ist nicht für deine E-Mail-Adresse bestimmt.';\n        } else if (e.toString().contains('abgelaufen')) {\n          _joinError = 'Diese Einladung ist abgelaufen.';",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 492,
    "column": 24,
    "original": "Diese Einladung ist nicht für deine E-Mail-Adresse bestimmt.",
    "suggested_key": "errorDieseEinladungIst",
    "context": "_joinError = 'Diese Einladung wurde bereits akzeptiert.';\n          _isJoined = true; // User ist bereits Mitglied\n        } else if (e.toString().contains('nicht für deine E-Mail-Adresse')) {\n          _joinError = 'Diese Einladung ist nicht für deine E-Mail-Adresse bestimmt.';\n        } else if (e.toString().contains('abgelaufen')) {\n          _joinError = 'Diese Einladung ist abgelaufen.';\n        } else {",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 575,
    "column": 24,
    "original": "Fehler beim Zurückziehen der Vorregistrierung",
    "suggested_key": "errorFehlerBeimZurückziehen",
    "context": "}\n      } else {\n        setState(() {\n          _joinError = 'Fehler beim Zurückziehen der Vorregistrierung';\n        });\n      }\n    } catch (e) {",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 580,
    "column": 62,
    "original": ");\n      });\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isPreRegistering = false;\n        });\n      }\n    }\n  }\n  \n  Future<void> _leaveWorld() async {\n    final world = _world;\n    if (world == null) return;\n    \n    // Bestätigungsdialog anzeigen\n    final confirmed = await showDialog<bool>(\n      context: context,\n      builder: (context) => AlertDialog(\n        title: const Text(",
    "suggested_key": "errorFinallyIfMounted",
    "context": "}\n    } catch (e) {\n      setState(() {\n        _joinError = e.toString().replaceAll('Exception: ', '');\n      });\n    } finally {\n      if (mounted) {",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 692,
    "column": 86,
    "original": ": email});\n    \n    // FIXED: Invite-Token für Post-Auth-Redirect setzen\n    if (widget.inviteToken != null) {\n      _authService.setPendingInviteRedirect(widget.inviteToken!);\n    }\n    \n    context.goNamed(",
    "suggested_key": "errorEmailFixedInvitetoken",
    "context": "// Navigation zu Registration mit vorausgefüllter E-Mail\n  void _navigateToRegistration(String email) {\n    AppLogger.app.i('🎫 Navigation zur Registration mit Invite-E-Mail', error: {'email': email});\n    \n    // FIXED: Invite-Token für Post-Auth-Redirect setzen\n    if (widget.inviteToken != null) {",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 704,
    "column": 21,
    "original": "🎫 Navigation zum Login für Invite",
    "suggested_key": "errorNavigationZumLogin",
    "context": "// Navigation zu Login \n  void _navigateToLogin(String email) {\n    AppLogger.app.i('🎫 Navigation zum Login für Invite', error: {'email': email});\n    \n    // FIXED: Invite-Token für Post-Auth-Redirect setzen\n    if (widget.inviteToken != null) {",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 704,
    "column": 72,
    "original": ": email});\n    \n    // FIXED: Invite-Token für Post-Auth-Redirect setzen\n    if (widget.inviteToken != null) {\n      _authService.setPendingInviteRedirect(widget.inviteToken!);\n    }\n    \n    context.goNamed(",
    "suggested_key": "errorEmailFixedInvitetoken",
    "context": "// Navigation zu Login \n  void _navigateToLogin(String email) {\n    AppLogger.app.i('🎫 Navigation zum Login für Invite', error: {'email': email});\n    \n    // FIXED: Invite-Token für Post-Auth-Redirect setzen\n    if (widget.inviteToken != null) {",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 717,
    "column": 23,
    "original": "🎫 User logout für Invite-Umleitung",
    "suggested_key": "errorUserLogoutFür",
    "context": "// User abmelden und zur Registration weiterleiten\n  Future<void> _logout() async {\n    try {\n      AppLogger.app.i('🎫 User logout für Invite-Umleitung', error: {'inviteEmail': _inviteEmail});\n      \n      // FIXED: Invite-Token für Post-Auth-Redirect setzen BEVOR logout\n      if (widget.inviteToken != null) {",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 717,
    "column": 81,
    "original": ": _inviteEmail});\n      \n      // FIXED: Invite-Token für Post-Auth-Redirect setzen BEVOR logout\n      if (widget.inviteToken != null) {\n        _authService.setPendingInviteRedirect(widget.inviteToken!);\n      }\n      \n      await _authService.logout();\n      \n      if (mounted && _inviteEmail != null) {\n        // Nach Logout zur Registration mit korrekter E-Mail\n        context.goNamed(",
    "suggested_key": "error_inviteemailFixedInvitetoken",
    "context": "// User abmelden und zur Registration weiterleiten\n  Future<void> _logout() async {\n    try {\n      AppLogger.app.i('🎫 User logout für Invite-Umleitung', error: {'inviteEmail': _inviteEmail});\n      \n      // FIXED: Invite-Token für Post-Auth-Redirect setzen BEVOR logout\n      if (widget.inviteToken != null) {",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 734,
    "column": 26,
    "original": "Logout für Invite fehlgeschlagen",
    "suggested_key": "errorLogoutFürInvite",
    "context": "});\n      }\n    } catch (e) {\n      AppLogger.logError('Logout für Invite fehlgeschlagen', e);\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          const SnackBar(",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 836,
    "column": 61,
    "original": ",\n                        style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                          color: Colors.grey[300],\n                        ),\n                        textAlign: TextAlign.center,\n                      ),\n                      const SizedBox(height: 32),\n                      \n                      // Verschiedene Action-Buttons je nach Szenario\n                      if (_showRegistrationButton && _inviteEmail != null) ...[\n                        // Registration Button für neuen User\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: ElevatedButton.icon(\n                            onPressed: () => _navigateToRegistration(_inviteEmail!),\n                            icon: const Icon(Icons.person_add),\n                            label: const Text(",
    "suggested_key": "errorStyleThemeofcontexttextthemebodylargecopywithColor",
    "context": "),\n                      const SizedBox(height: 16),\n                      Text(\n                        _errorMessage ?? 'Unbekannter Fehler',\n                        style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                          color: Colors.grey[300],\n                        ),",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 82,
    "column": 79,
    "original": ", error: e);\n      _authService = AuthService();\n      _worldService = WorldService();\n      _inviteService = InviteService();\n    }\n  }\n\n  Future<void> _loadWorlds() async {\n    setState(() {\n      _isLoading = true;\n      _error = null;\n    });\n\n    try {\n      final worlds = await _worldService.getWorlds();\n      if (mounted) {\n        setState(() {\n          _worlds = worlds;\n          _isLoading = false;\n        });\n        \n        // Simuliere Spieleranzahl für Demo-Zwecke\n        _generateMockPlayerCounts();\n        \n        // Check player status for each world (silently handle 404s)\n        _checkPlayerStatuses();\n        _checkPreRegistrationStatuses();\n        \n        // Initial filter anwenden\n        _applyFiltersAndSorting();\n      }\n    } catch (e) {\n      if (mounted) {\n        // Only show error for non-401/404 errors\n        if (!e.toString().contains(",
    "suggested_key": "errorErrorE_authservice",
    "context": "_inviteService = InviteService();\n      }\n    } catch (e) {\n      AppLogger.app.w('⚠️ ServiceLocator Fehler - nutze direkte Instanziierung', error: e);\n      _authService = AuthService();\n      _worldService = WorldService();\n      _inviteService = InviteService();",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 366,
    "column": 72,
    "original": ");\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text(errorMessage),\n              backgroundColor: AppTheme.errorColor,\n            ),\n          );\n        }\n      }\n    }\n  }\n\n  Future<void> _leaveWorld(World world) async {\n    // Zeige Bestätigungsdialog\n    final confirmed = await showDialog<bool>(\n      context: context,\n      builder: (context) => AlertDialog(\n        title: const Text(",
    "suggested_key": "errorScaffoldmessengerofcontextshowsnackbarSnackbarContent",
    "context": "context.goNamed('login');\n          }\n        } else {\n          final errorMessage = e.toString().replaceAll('Exception: ', '');\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text(errorMessage),",
    "category": "error",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 387,
    "column": 51,
    "original": "];\n        final currentRefreshToken = await TokenStorage.getRefreshToken();\n        final finalRefreshToken = newRefreshToken ?? currentRefreshToken;\n        \n        // Tokens speichern und API-Service aktualisieren\n        await _saveTokensAndUpdateService(newAccessToken, finalRefreshToken);\n        return true;\n      } else {\n        await logout();\n        return false;\n      }\n    } catch (e) {\n      await logout();\n      return false;\n    } finally {\n      _refreshing = false;\n    }\n  }\n\n  // Optionaler Force-Refresh für manuelle Token-Erneuerung\n  Future<bool> forceRefreshToken() async {\n    final tokenValid = await refreshTokenIfNeeded();\n    if (!tokenValid) {\n      await logout();\n    }\n    return tokenValid;\n  }\n\n  // Fetch current user data with roles from server\n  Future<User?> fetchCurrentUser() async {\n    try {\n      final response = await _apiService.get(",
    "suggested_key": "inviteFinalCurrentrefreshtokenAwait",
    "context": "final newAccessToken = data['accessToken'];\n        \n        // Refresh-Token-Rotation: Neuen Refresh-Token verwenden falls vorhanden\n        final newRefreshToken = data['refreshToken'];\n        final currentRefreshToken = await TokenStorage.getRefreshToken();\n        final finalRefreshToken = newRefreshToken ?? currentRefreshToken;",
    "category": "invite",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 4,
    "column": 25,
    "original": ";\n\n// Invite-Model für bessere Typisierung\nclass Invite {\n  final int id;\n  final String email;\n  final String status;\n  final DateTime? createdAt;\n  final DateTime? expiresAt;\n\n  Invite({\n    required this.id,\n    required this.email,\n    required this.status,\n    this.createdAt,\n    this.expiresAt,\n  });\n\n  factory Invite.fromJson(Map<String, dynamic> json) {\n    return Invite(\n      id: json[",
    "suggested_key": "inviteInvitemodelFürBessere",
    "context": "import 'dart:convert';\nimport 'dart:io';\nimport 'package:http/http.dart' as http;\nimport 'api_service.dart';\n\n// Invite-Model für bessere Typisierung\nclass Invite {",
    "category": "invite",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 128,
    "column": 99,
    "original": "),\n                backgroundColor: Colors.green,\n                duration: Duration(seconds: 2),\n              ),\n            );\n            \n            // Kurze Verzögerung für bessere UX\n            await Future.delayed(const Duration(milliseconds: 500));\n            \n            if (mounted) {\n              if (params != null) {\n                context.goNamed(routeName, pathParameters: params);\n              } else {\n                context.goNamed(routeName);\n              }\n            }\n          } else if (_inviteToken != null) {\n            // Fallback: Wenn Invite-Token in Query-Parametern, direkt zur Invite-Seite\n            AppLogger.app.i(",
    "suggested_key": "inviteBackgroundcolorColorsgreenDuration",
    "context": "ScaffoldMessenger.of(context).showSnackBar(\n              const SnackBar(\n                content: Text('Registrierung erfolgreich! Du wirst zur Einladung weitergeleitet...'),\n                backgroundColor: Colors.green,\n                duration: Duration(seconds: 2),\n              ),",
    "category": "invite",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 150,
    "column": 99,
    "original": "),\n                backgroundColor: Colors.green,\n                duration: Duration(seconds: 2),\n              ),\n            );\n            \n            // Kurze Verzögerung für bessere UX\n            await Future.delayed(const Duration(milliseconds: 500));\n            \n            if (mounted) {\n              context.goNamed(",
    "suggested_key": "inviteBackgroundcolorColorsgreenDuration",
    "context": "ScaffoldMessenger.of(context).showSnackBar(\n              const SnackBar(\n                content: Text('Registrierung erfolgreich! Du wirst zur Einladung weitergeleitet...'),\n                backgroundColor: Colors.green,\n                duration: Duration(seconds: 2),\n              ),",
    "category": "invite",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 277,
    "column": 24,
    "original": "\\n\\n⏰ Gültig bis: $dateStr",
    "suggested_key": "inviteNnGültigBis",
    "context": "} else if (isExpired) {\n        validityText = '\\n\\n❌ Diese Einladung ist am $dateStr abgelaufen.';\n      } else {\n        validityText = '\\n\\n⏰ Gültig bis: $dateStr';\n      }\n    }",
    "category": "invite",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 327,
    "column": 49,
    "original": ";\n    }\n    \n    // Bei ungültigen Invites zusätzliche Info\n    if (!isInviteValid) {\n      infoText += ",
    "suggested_key": "inviteBeiUngültigenInvites",
    "context": "default:\n        AppLogger.app.w('❌ Unbekannter User-Status: $status');\n        actionText = 'Unbekannter Status: $status';\n        infoText = '$baseInfoText\\n\\n$actionText';\n    }\n    \n    // Bei ungültigen Invites zusätzliche Info",
    "category": "invite",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 332,
    "column": 76,
    "original": ";\n    }\n    \n    setState(() {\n      _infoMessage = infoText;\n      _inviteEmail = inviteEmail;\n      \n      // Button-Flags setzen\n      _showLoginButton = showLoginButton;\n      _showRegistrationButton = showRegisterButton; \n      _showLogoutButton = showLogoutButton;\n      _showAcceptInviteButton = showAcceptButton;\n      \n      // WICHTIG: Alte Fehlermeldung zurücksetzen!\n      _errorMessage = null;\n      \n      _isLoading = false;\n    });\n  }\n\n  // Neue Methode: World-Status für normale Navigation prüfen\n  Future<void> _checkWorldStatus() async {\n    if (_world == null) return;\n    \n    try {\n      // Prüfe ob User bereits Mitglied ist\n      _isJoined = await _worldService.isPlayerInWorld(_world!.id);\n      \n      // Prüfe Vorregistrierung\n      final preRegStatus = await _worldService.getPreRegistrationStatus(_world!.id);\n      _isPreRegistered = preRegStatus.isPreRegistered;\n      \n      AppLogger.app.d(",
    "suggested_key": "inviteSetstate_infomessageInfotext",
    "context": "// Bei ungültigen Invites zusätzliche Info\n    if (!isInviteValid) {\n      infoText += '\\n\\n⚠️ Diese Einladung kann nicht mehr verwendet werden.';\n    }\n    \n    setState(() {",
    "category": "invite",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 496,
    "column": 62,
    "original": "),\n              backgroundColor: Colors.green,\n            ),\n          );\n        }\n      } catch (e) {\n        if (mounted) {\n          // Prüfe ob es ein Token-Problem ist\n          if (e.toString().contains(",
    "suggested_key": "inviteBackgroundcolorColorsgreenCatch",
    "context": "if (success && mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            const SnackBar(\n              content: Text('Einladung erfolgreich versendet!'),\n              backgroundColor: Colors.green,\n            ),\n          );",
    "category": "invite",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\models\\world.dart",
    "line": 58,
    "column": 16,
    "original": "Läuft",
    "suggested_key": "worldLäuft",
    "context": "case WorldStatus.open:\n        return 'Offen';\n      case WorldStatus.running:\n        return 'Läuft';\n      case WorldStatus.closed:\n        return 'Geschlossen';\n      case WorldStatus.archived:",
    "category": "world",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 411,
    "column": 36,
    "original": "];\n        }\n      }\n      \n      // Fehlerbehandlung für spezifische HTTP-Status-Codes\n      if (response.statusCode == 409) {\n        AppLogger.app.w(",
    "suggested_key": "worldFehlerbehandlungFürSpezifische",
    "context": "'worldId': responseData['data']['world']?['id'],\n            'worldName': responseData['data']['world']?['name']\n          });\n          return responseData['data'];\n        }\n      }",
    "category": "world",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 262,
    "column": 31,
    "original": "Erstelle dein Konto für Weltenwind",
    "suggested_key": "worldErstelleDeinKonto",
    "context": "),\n                            const SizedBox(height: 8),\n                            Text(\n                              'Erstelle dein Konto für Weltenwind',\n                              style: Theme.of(context).textTheme.bodyMedium?.copyWith(\n                                color: Colors.grey[300],\n                                fontSize: 16,",
    "category": "world",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_card.dart",
    "line": 462,
    "column": 35,
    "original": ",\n      ));\n    }\n    \n    // Wenn keine Buttons verfügbar sind\n    if (buttons.isEmpty) {\n      return _buildStatusBadge();\n    }\n    \n    return Wrap(\n      spacing: 8,\n      runSpacing: 4,\n      children: buttons,\n    );\n  }\n  \n  Widget _buildButton({\n    required VoidCallback? onPressed,\n    required IconData icon,\n    required String? label,\n    required Color? color,\n    bool iconOnly = false,\n    String? tooltip,\n  }) {\n    if (onPressed == null) return const SizedBox.shrink();\n    \n    final button = iconOnly\n        ? ElevatedButton(\n            onPressed: onPressed,\n            style: ElevatedButton.styleFrom(\n              backgroundColor: color,\n              foregroundColor: Colors.white,\n              padding: const EdgeInsets.all(8),\n              shape: RoundedRectangleBorder(\n                borderRadius: BorderRadius.circular(8),\n              ),\n            ),\n            child: Icon(icon, size: 16),\n          )\n        : ElevatedButton.icon(\n            onPressed: onPressed,\n            icon: Icon(icon, size: 16),\n            label: Text(label ?? ",
    "suggested_key": "worldWennKeineButtons",
    "context": "label: null,\n        color: Colors.purple[600],\n        iconOnly: true,\n        tooltip: 'Spieler einladen',\n      ));\n    }",
    "category": "world",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_filters.dart",
    "line": 306,
    "column": 16,
    "original": "Läuft",
    "suggested_key": "worldLäuft",
    "context": "case WorldStatus.open:\n        return 'Offen';\n      case WorldStatus.running:\n        return 'Läuft';\n      case WorldStatus.closed:\n        return 'Geschlossen';\n      case WorldStatus.archived:",
    "category": "world",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_list_header.dart",
    "line": 53,
    "column": 11,
    "original": "Wähle deine Welt",
    "suggested_key": "worldWähleDeineWelt",
    "context": "// Subtitle\n        Text(\n          'Wähle deine Welt',\n          style: Theme.of(context).textTheme.titleMedium?.copyWith(\n            color: Colors.grey[300],\n            fontSize: 18,",
    "category": "world",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_list_states.dart",
    "line": 55,
    "column": 19,
    "original": "Noch keine Welten verfügbar",
    "suggested_key": "worldNochKeineWelten",
    "context": "Text(\n            hasActiveFilters\n                ? 'Keine Welten gefunden'\n                : 'Noch keine Welten verfügbar',\n            style: TextStyle(\n              fontSize: 18,\n              fontWeight: FontWeight.bold,",
    "category": "world",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_list_states.dart",
    "line": 66,
    "column": 19,
    "original": "Versuche die Filter anzupassen oder zurückzusetzen.",
    "suggested_key": "worldVersucheDieFilter",
    "context": "const SizedBox(height: 8),\n          Text(\n            hasActiveFilters\n                ? 'Versuche die Filter anzupassen oder zurückzusetzen.'\n                : 'Schaue später noch einmal vorbei oder erstelle eine neue Welt.',\n            style: TextStyle(\n              fontSize: 14,",
    "category": "world",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_list_states.dart",
    "line": 67,
    "column": 19,
    "original": "Schaue später noch einmal vorbei oder erstelle eine neue Welt.",
    "suggested_key": "worldSchaueSpäterNoch",
    "context": "Text(\n            hasActiveFilters\n                ? 'Versuche die Filter anzupassen oder zurückzusetzen.'\n                : 'Schaue später noch einmal vorbei oder erstelle eine neue Welt.',\n            style: TextStyle(\n              fontSize: 14,\n              color: Colors.grey[500],",
    "category": "world",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 439,
    "column": 25,
    "original": "🎫 Versuche Invite-Akzeptierung für World-Join",
    "suggested_key": "worldVersucheInviteakzeptierungFür",
    "context": "// **INVITE-TOKEN FLOW: Invite akzeptieren**\n      if (widget.inviteToken != null) {\n        AppLogger.app.i('🎫 Versuche Invite-Akzeptierung für World-Join');\n        final inviteResult = await _worldService.acceptInvite(widget.inviteToken!);\n        \n        if (inviteResult != null) {",
    "category": "world",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 483,
    "column": 21,
    "original": ": widget.inviteToken?.substring(0, 8)\n      });\n      \n      setState(() {\n        // Bessere Fehlermeldungen für verschiedene Szenarien\n        if (e.toString().contains(",
    "suggested_key": "worldWidgetinvitetokensubstring08Setstate",
    "context": "'worldId': _world?.id,\n        'worldName': _world?.name,\n        'hasInviteToken': widget.inviteToken != null,\n        'inviteToken': widget.inviteToken?.substring(0, 8)\n      });\n      \n      setState(() {",
    "category": "world",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 526,
    "column": 29,
    "original": "Erfolgreich für ${world.name} vorregistriert!",
    "suggested_key": "worldErfolgreichFürWorldname",
    "context": "if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Erfolgreich für ${world.name} vorregistriert!'),\n              backgroundColor: Colors.green,\n            ),\n          );",
    "category": "world",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 568,
    "column": 29,
    "original": "Vorregistrierung für ${world.name} zurückgezogen.",
    "suggested_key": "worldVorregistrierungFürWorldname",
    "context": "if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Vorregistrierung für ${world.name} zurückgezogen.'),\n              backgroundColor: Colors.orange,\n            ),\n          );",
    "category": "world",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 661,
    "column": 41,
    "original": ";\n    return world.statusText;\n  }\n\n  // Welt-Status-Farbe\n  Color _getWorldStatusColor() {\n    final world = _world;\n    if (world == null) return Colors.grey;\n    \n    switch (world.status) {\n      case WorldStatus.upcoming:\n        return Colors.orange;\n      case WorldStatus.open:\n        return Colors.green;\n      case WorldStatus.running:\n        return Colors.blue;\n      case WorldStatus.closed:\n        return Colors.red;\n      case WorldStatus.archived:\n        return Colors.grey;\n    }\n  }\n\n  // Kann der Benutzer beitreten?\n  // Retry-Funktion\n  Future<void> _retry() async {\n    await _loadWorldData();\n  }\n\n  // Navigation zu Registration mit vorausgefüllter E-Mail\n  void _navigateToRegistration(String email) {\n    AppLogger.app.i(",
    "suggested_key": "worldReturnWorldstatustextWeltstatusfarbe",
    "context": "// Welt-Status bestimmen\n  String _getWorldStatusText() {\n    final world = _world;\n    if (world == null) return 'Unbekannt';\n    return world.statusText;\n  }",
    "category": "world",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1092,
    "column": 25,
    "original": "Die angeforderte Welt existiert nicht oder ist nicht verfügbar.",
    "suggested_key": "worldDieAngeforderteWelt",
    "context": "),\n                      const SizedBox(height: 16),\n                      Text(\n                        'Die angeforderte Welt existiert nicht oder ist nicht verfügbar.',\n                        style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                          color: Colors.grey[300],\n                        ),",
    "category": "world",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1339,
    "column": 17,
    "original": "Über diese Welt",
    "suggested_key": "worldÜberDieseWelt",
    "context": "Icon(Icons.info_outline, color: AppTheme.primaryColor, size: 24),\n              SizedBox(width: 8),\n              Text(\n                'Über diese Welt',\n                style: TextStyle(\n                  color: Colors.white,\n                  fontSize: 18,",
    "category": "world",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1351,
    "column": 13,
    "original": "Erkunde unbekannte Gebiete, schließe Allianzen und werde zur Legende!",
    "suggested_key": "worldErkundeUnbekannteGebiete",
    "context": "const SizedBox(height: 16),\n          Text(\n            'Dies ist eine spannende Welt voller Abenteuer und Herausforderungen. '\n            'Erkunde unbekannte Gebiete, schließe Allianzen und werde zur Legende!',\n            style: TextStyle(color: Colors.grey[300], height: 1.5),\n          ),\n          const SizedBox(height: 24),",
    "category": "world",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 47,
    "column": 64,
    "original": "\n  bool _sortAscending = true;\n  \n  // Spieleranzahl (Simulation - später vom Backend)\n  final Map<int, int> _playerCounts = {};\n\n  @override\n  void initState() {\n    super.initState();\n    \n    // DI-ready: ServiceLocator verwenden mit robuster Fehlerbehandlung\n    _initializeServices();\n    _loadWorlds();\n  }\n\n  void _initializeServices() {\n    try {\n      if (ServiceLocator.has<AuthService>()) {\n        _authService = ServiceLocator.get<AuthService>();\n      } else {\n        _authService = AuthService();\n      }\n      \n      if (ServiceLocator.has<WorldService>()) {\n        _worldService = ServiceLocator.get<WorldService>();\n      } else {\n        _worldService = WorldService();\n      }\n      \n      if (ServiceLocator.has<InviteService>()) {\n        _inviteService = ServiceLocator.get<InviteService>();\n      } else {\n        _inviteService = InviteService();\n      }\n    } catch (e) {\n      AppLogger.app.w(",
    "suggested_key": "worldBool_sortascendingTrue",
    "context": "// Filter und Sortierung\n  WorldStatus? _statusFilter;\n  WorldCategory? _categoryFilter;\n  String _sortBy = 'startDate'; // 'startDate', 'name', 'status'\n  bool _sortAscending = true;\n  \n  // Spieleranzahl (Simulation - später vom Backend)",
    "category": "world",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 315,
    "column": 64,
    "original": ": world.id.toString()});\n      }\n    } catch (e) {\n      if (mounted) {\n        // Prüfe ob es ein Token-Problem ist\n        if (e.toString().contains(",
    "suggested_key": "worldWorldidtostringCatchE",
    "context": "),\n        );\n        // Navigate to world dashboard\n        context.goNamed('world-dashboard', pathParameters: {'id': world.id.toString()});\n      }\n    } catch (e) {\n      if (mounted) {",
    "category": "world",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 350,
    "column": 27,
    "original": "Erfolgreich für ${world.name} vorregistriert!",
    "suggested_key": "worldErfolgreichFürWorldname",
    "context": "ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text('Erfolgreich für ${world.name} vorregistriert!'),\n            backgroundColor: Colors.green,\n          ),\n        );",
    "category": "world",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 417,
    "column": 60,
    "original": "),\n            backgroundColor: Colors.orange,\n          ),\n        );\n      }\n    } catch (e) {\n      if (mounted) {\n        // Prüfe ob es ein Token-Problem ist\n        if (e.toString().contains(",
    "suggested_key": "worldBackgroundcolorColorsorangeCatch",
    "context": "ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text('Du hast ${world.name} verlassen.'),\n            backgroundColor: Colors.orange,\n          ),\n        );",
    "category": "world",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 456,
    "column": 27,
    "original": "Vorregistrierung für ${world.name} zurückgezogen.",
    "suggested_key": "worldVorregistrierungFürWorldname",
    "context": "ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text('Vorregistrierung für ${world.name} zurückgezogen.'),\n            backgroundColor: Colors.orange,\n          ),\n        );",
    "category": "world",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 609,
    "column": 33,
    "original": "Wähle deine Welt aus",
    "suggested_key": "worldWähleDeineWelt",
    "context": "// Subtitle\n                              Text(\n                                'Wähle deine Welt aus',\n                                style: Theme.of(context).textTheme.headlineMedium?.copyWith(\n                                  color: Colors.grey[300],\n                                ),",
    "category": "world",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\pre_register_dialog.dart",
    "line": 90,
    "column": 15,
    "original": "Geben Sie Ihre E-Mail-Adresse ein, um sich für diese Welt vorzuregistrieren:",
    "suggested_key": "worldGebenSieIhre",
    "context": "mainAxisSize: MainAxisSize.min,\n          children: [\n            Text(\n              'Geben Sie Ihre E-Mail-Adresse ein, um sich für diese Welt vorzuregistrieren:',\n              style: TextStyle(\n                color: Colors.grey[300],\n              ),",
    "category": "world",
    "confidence": 0.8999999999999999,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\main.dart",
    "line": 48,
    "column": 30,
    "original": ": details.informationCollector?.toString(),\n      },\n    );\n    \n    // In Debug Mode auch zur Console\n    if (kDebugMode) {\n      FlutterError.presentError(details);\n    }\n  };\n\n  // Dart Error Handling (für unhandled exceptions)\n  WidgetsBinding.instance.platformDispatcher.onError = (error, stack) {\n    AppLogger.logError(\n      ",
    "suggested_key": "formDetailsinformationcollectortostringInDebug",
    "context": "context: {\n        'library': details.library,\n        'context': details.context?.toString(),\n        'informationCollector': details.informationCollector?.toString(),\n      },\n    );",
    "category": "form",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 53,
    "column": 17,
    "original": ",\n      ],\n      appName: Env.appName,\n      child: MaterialApp.router(\n        title: Env.appName,\n        \n        // Internationalization mit dynamischer Locale\n        locale: _localeProvider.currentLocale,\n        localizationsDelegates: const [\n          AppLocalizations.delegate,\n          GlobalMaterialLocalizations.delegate,\n          GlobalWidgetsLocalizations.delegate,\n          GlobalCupertinoLocalizations.delegate,\n        ],\n        supportedLocales: const [\n          Locale(",
    "suggested_key": "navigationAppnameEnvappnameChild",
    "context": "'Lade Konfiguration...',\n        'Starte Services...',\n        'Prüfe Authentifizierung...',\n        'Bereit!',\n      ],\n      appName: Env.appName,\n      child: MaterialApp.router(",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 7,
    "column": 38,
    "original": ";\n\nclass ApiService {\n  static final ApiService _instance = ApiService._internal();\n  factory ApiService() => _instance;\n  ApiService._internal();\n\n  String? _token;\n  late final AuthService _authService;\n  String? _deviceFingerprint;\n  bool _initialized = false;\n  bool _isValidatingToken = false; // Verhindert rekursive Token-Validierung\n  \n  // Erweiterte Request-Kontext-Verwaltung für parallele Requests\n  final Map<String, Map<String, dynamic>> _requestBodies = {};\n\n  // Dependency Injection für bessere Testbarkeit\n  ApiService.withAuth(AuthService authService) : _authService = authService;\n\n  // Initialisierung beim ersten Zugriff\n  Future<void> _ensureInitialized() async {\n    if (!_initialized) {\n      _authService = AuthService(); // Fallback für Singleton-Pattern\n      try {\n        final accessToken = await _authService.getCurrentAccessToken();\n        if (accessToken != null) {\n          _token = accessToken;\n        }\n      } catch (e) {\n        // Error loading token\n      }\n      _initialized = true;\n    }\n  }\n\n  void setToken(String token) {\n    _token = token;\n  }\n\n  void clearToken() {\n    _token = null;\n  }\n\n  // Einfacher Device-Fingerprint\n  String get deviceFingerprint {\n    final currentFingerprint = _deviceFingerprint;\n    if (currentFingerprint != null) {\n      return currentFingerprint;\n    }\n    final fingerprint = kIsWeb \n        ? ",
    "suggested_key": "navigationClassApiserviceStatic",
    "context": "import '../../config/env.dart';\nimport '../../config/logger.dart';\nimport 'auth_service.dart';\nimport '../../routing/app_router.dart';\n\nclass ApiService {\n  static final ApiService _instance = ApiService._internal();",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 7,
    "column": 38,
    "original": ";\n\nclass ApiService {\n  static final ApiService _instance = ApiService._internal();\n  factory ApiService() => _instance;\n  ApiService._internal();\n\n  String? _token;\n  late final AuthService _authService;\n  String? _deviceFingerprint;\n  bool _initialized = false;\n  bool _isValidatingToken = false; // Verhindert rekursive Token-Validierung\n  \n  // Erweiterte Request-Kontext-Verwaltung für parallele Requests\n  final Map<String, Map<String, dynamic>> _requestBodies = {};\n\n  // Dependency Injection für bessere Testbarkeit\n  ApiService.withAuth(AuthService authService) : _authService = authService;\n\n  // Initialisierung beim ersten Zugriff\n  Future<void> _ensureInitialized() async {\n    if (!_initialized) {\n      _authService = AuthService(); // Fallback für Singleton-Pattern\n      try {\n        final accessToken = await _authService.getCurrentAccessToken();\n        if (accessToken != null) {\n          _token = accessToken;\n        }\n      } catch (e) {\n        // Error loading token\n      }\n      _initialized = true;\n    }\n  }\n\n  void setToken(String token) {\n    _token = token;\n  }\n\n  void clearToken() {\n    _token = null;\n  }\n\n  // Einfacher Device-Fingerprint\n  String get deviceFingerprint {\n    final currentFingerprint = _deviceFingerprint;\n    if (currentFingerprint != null) {\n      return currentFingerprint;\n    }\n    final fingerprint = kIsWeb \n        ? ",
    "suggested_key": "navigationClassApiserviceStatic",
    "context": "import '../../config/env.dart';\nimport '../../config/logger.dart';\nimport 'auth_service.dart';\nimport '../../routing/app_router.dart';\n\nclass ApiService {\n  static final ApiService _instance = ApiService._internal();",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\dashboard\\dashboard_page.dart",
    "line": 3,
    "column": 8,
    "original": "../../theme/background_widget.dart",
    "suggested_key": "navigationThemebackground_widgetdart",
    "context": "import 'package:flutter/material.dart';\nimport '../../theme/app_theme.dart';\nimport '../../theme/background_widget.dart';\nimport '../../shared/widgets/user_info_widget.dart';\nimport '../../shared/widgets/navigation_widget.dart';",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\dashboard\\dashboard_page.dart",
    "line": 5,
    "column": 52,
    "original": ";\n\nclass DashboardPage extends StatelessWidget {\n  final String worldId;\n  \n  const DashboardPage({super.key, required this.worldId});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: BackgroundWidget(\n        child: Stack(\n          children: [\n            // Main content\n            Center(\n              child: Padding(\n                padding: const EdgeInsets.all(24.0),\n                child: ConstrainedBox(\n                  constraints: const BoxConstraints(maxWidth: 600),\n                  child: Card(\n                    elevation: 12,\n                    color: const Color(0xFF1A1A1A), // Dunkle Karte\n                    shape: RoundedRectangleBorder(\n                      borderRadius: BorderRadius.circular(20),\n                      side: BorderSide(\n                        color: AppTheme.primaryColor.withOpacity(0.3),\n                        width: 1,\n                      ),\n                    ),\n                    child: Container(\n                      decoration: BoxDecoration(\n                        borderRadius: BorderRadius.circular(20),\n                        gradient: const LinearGradient(\n                          begin: Alignment.topLeft,\n                          end: Alignment.bottomRight,\n                          colors: [\n                            Color(0xFF1A1A1A),\n                            Color(0xFF2A2A2A),\n                          ],\n                        ),\n                      ),\n                      child: Padding(\n                        padding: const EdgeInsets.all(32.0),\n                        child: Column(\n                          mainAxisSize: MainAxisSize.min,\n                          children: [\n                            // Icon\n                            Container(\n                              width: 80,\n                              height: 80,\n                              decoration: BoxDecoration(\n                                color: AppTheme.primaryColor.withOpacity(0.2),\n                                shape: BoxShape.circle,\n                                border: Border.all(\n                                  color: AppTheme.primaryColor.withOpacity(0.5),\n                                  width: 2,\n                                ),\n                              ),\n                              child: const Icon(\n                                Icons.rocket_launch,\n                                size: 40,\n                                color: AppTheme.primaryColor,\n                              ),\n                            ),\n                            const SizedBox(height: 24),\n                            \n                            // Title\n                            Text(\n                              ",
    "suggested_key": "navigationClassDashboardpageExtends",
    "context": "import '../../theme/app_theme.dart';\nimport '../../theme/background_widget.dart';\nimport '../../shared/widgets/user_info_widget.dart';\nimport '../../shared/widgets/navigation_widget.dart';\n\nclass DashboardPage extends StatelessWidget {\n  final String worldId;",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\dashboard\\dashboard_page.dart",
    "line": 134,
    "column": 29,
    "original": "world-dashboard",
    "suggested_key": "navigationWorlddashboard",
    "context": "// Navigation widget in top-right corner\n            NavigationWidget(\n              currentRoute: 'world-dashboard',\n              routeParams: {'id': worldId},\n              isJoinedWorld: true, // User muss in der Welt sein um das Dashboard zu sehen\n            ),",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 4,
    "column": 8,
    "original": "../../theme/background_widget.dart",
    "suggested_key": "navigationThemebackground_widgetdart",
    "context": "import 'package:flutter/material.dart';\nimport 'package:go_router/go_router.dart';\nimport '../../theme/app_theme.dart';\nimport '../../theme/background_widget.dart';\nimport 'dart:math' as math;\n\nclass LandingPage extends StatefulWidget {",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 5,
    "column": 18,
    "original": " as math;\n\nclass LandingPage extends StatefulWidget {\n  const LandingPage({super.key});\n\n  @override\n  State<LandingPage> createState() => _LandingPageState();\n}\n\nclass _LandingPageState extends State<LandingPage> with TickerProviderStateMixin {\n  late AnimationController _fadeController;\n  late AnimationController _slideController;\n  late AnimationController _pulseController;\n  late AnimationController _featureController;\n  late Animation<double> _fadeAnimation;\n  late Animation<Offset> _slideAnimation;\n  late Animation<double> _pulseAnimation;\n  late Animation<double> _featureAnimation;\n  \n  final ScrollController _scrollController = ScrollController();\n  bool _showFeatures = false;\n\n  @override\n  void initState() {\n    super.initState();\n    \n    // Main animations\n    _fadeController = AnimationController(\n      duration: const Duration(milliseconds: 1500),\n      vsync: this,\n    );\n    \n    _slideController = AnimationController(\n      duration: const Duration(milliseconds: 1200),\n      vsync: this,\n    );\n    \n    // Logo pulse animation\n    _pulseController = AnimationController(\n      duration: const Duration(seconds: 2),\n      vsync: this,\n    )..repeat(reverse: true);\n    \n    // Feature animation\n    _featureController = AnimationController(\n      duration: const Duration(milliseconds: 800),\n      vsync: this,\n    );\n    \n    _fadeAnimation = Tween<double>(\n      begin: 0.0,\n      end: 1.0,\n    ).animate(CurvedAnimation(\n      parent: _fadeController,\n      curve: Curves.easeInOut,\n    ));\n    \n    _slideAnimation = Tween<Offset>(\n      begin: const Offset(0, 0.3),\n      end: Offset.zero,\n    ).animate(CurvedAnimation(\n      parent: _slideController,\n      curve: Curves.easeOutCubic,\n    ));\n    \n    _pulseAnimation = Tween<double>(\n      begin: 0.95,\n      end: 1.05,\n    ).animate(CurvedAnimation(\n      parent: _pulseController,\n      curve: Curves.easeInOut,\n    ));\n    \n    _featureAnimation = Tween<double>(\n      begin: 0.0,\n      end: 1.0,\n    ).animate(CurvedAnimation(\n      parent: _featureController,\n      curve: Curves.easeOutBack,\n    ));\n    \n    // Start animations\n    _fadeController.forward();\n    Future.delayed(const Duration(milliseconds: 300), () {\n      _slideController.forward();\n    });\n    \n    // Show features after main animation\n    Future.delayed(const Duration(milliseconds: 1800), () {\n      if (mounted) {\n        setState(() {\n          _showFeatures = true;\n        });\n        _featureController.forward();\n      }\n    });\n  }\n\n  @override\n  void dispose() {\n    _fadeController.dispose();\n    _slideController.dispose();\n    _pulseController.dispose();\n    _featureController.dispose();\n    _scrollController.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    \n    return Scaffold(\n      body: BackgroundWidget(\n        child: SafeArea(\n          child: SingleChildScrollView(\n            controller: _scrollController,\n            physics: const BouncingScrollPhysics(),\n            child: Column(\n              children: [\n                // Hero Section\n                Container(\n                  constraints: BoxConstraints(\n                    minHeight: MediaQuery.of(context).size.height - MediaQuery.of(context).padding.top,\n                  ),\n                  child: Center(\n                    child: FadeTransition(\n                      opacity: _fadeAnimation,\n                      child: SlideTransition(\n                        position: _slideAnimation,\n                        child: Padding(\n                          padding: const EdgeInsets.all(24.0),\n                          child: Center(\n                            child: ConstrainedBox(\n                              constraints: const BoxConstraints(maxWidth: 600),\n                              child: Card(\n                                elevation: 16,\n                                color: const Color(0xFF1A1A1A),\n                                shape: RoundedRectangleBorder(\n                                  borderRadius: BorderRadius.circular(24),\n                                  side: BorderSide(\n                                    color: AppTheme.primaryColor.withOpacity(0.3),\n                                    width: 1,\n                                  ),\n                                ),\n                                child: Container(\n                                  decoration: BoxDecoration(\n                                    borderRadius: BorderRadius.circular(24),\n                                    gradient: const LinearGradient(\n                                      begin: Alignment.topLeft,\n                                      end: Alignment.bottomRight,\n                                      colors: [\n                                        Color(0xFF1A1A1A),\n                                        Color(0xFF2A2A2A),\n                                      ],\n                                    ),\n                                  ),\n                                  child: Padding(\n                                    padding: const EdgeInsets.symmetric(horizontal: 40.0, vertical: 48.0),\n                                    child: Column(\n                                      mainAxisSize: MainAxisSize.min,\n                                      children: [\n                                        // Animated Logo\n                                        AnimatedBuilder(\n                                          animation: _pulseAnimation,\n                                          builder: (context, child) {\n                                            return Transform.scale(\n                                              scale: _pulseAnimation.value,\n                                              child: Container(\n                                                width: 140,\n                                                height: 140,\n                                                decoration: BoxDecoration(\n                                                  color: AppTheme.primaryColor.withOpacity(0.15),\n                                                  borderRadius: BorderRadius.circular(35),\n                                                  border: Border.all(\n                                                    color: AppTheme.primaryColor.withOpacity(0.4),\n                                                    width: 2,\n                                                  ),\n                                                  boxShadow: [\n                                                    BoxShadow(\n                                                      color: AppTheme.primaryColor.withOpacity(0.4),\n                                                      blurRadius: 30,\n                                                      spreadRadius: 10,\n                                                    ),\n                                                  ],\n                                                ),\n                                                child: Stack(\n                                                  alignment: Alignment.center,\n                                                  children: [\n                                                    const Icon(\n                                                      Icons.public,\n                                                      size: 70,\n                                                      color: AppTheme.primaryColor,\n                                                    ),\n                                                    // Orbit animation\n                                                    ...List.generate(3, (index) {\n                                                      return TweenAnimationBuilder<double>(\n                                                        tween: Tween(begin: 0, end: 2 * math.pi),\n                                                        duration: Duration(seconds: 10 + index * 2),\n                                                        builder: (context, value, child) {\n                                                          return Transform.translate(\n                                                            offset: Offset(\n                                                              math.cos(value + (index * 2 * math.pi / 3)) * 50,\n                                                              math.sin(value + (index * 2 * math.pi / 3)) * 50,\n                                                            ),\n                                                            child: Container(\n                                                              width: 8,\n                                                              height: 8,\n                                                              decoration: BoxDecoration(\n                                                                color: AppTheme.primaryColor.withOpacity(0.8),\n                                                                shape: BoxShape.circle,\n                                                                boxShadow: const [\n                                                                  BoxShadow(\n                                                                    color: AppTheme.primaryColor,\n                                                                    blurRadius: 4,\n                                                                  ),\n                                                                ],\n                                                              ),\n                                                            ),\n                                                          );\n                                                        },\n                                                      );\n                                                    }),\n                                                  ],\n                                                ),\n                                              ),\n                                            );\n                                          },\n                                        ),\n                                        \n                                        const SizedBox(height: 40),\n                                        \n                                        // Title with enhanced gradient\n                                        ShaderMask(\n                                          shaderCallback: (bounds) => LinearGradient(\n                                            colors: [\n                                              AppTheme.primaryColor,\n                                              AppTheme.primaryColor.withBlue(255),\n                                              AppTheme.primaryColor,\n                                            ],\n                                            stops: const [0.0, 0.5, 1.0],\n                                          ).createShader(bounds),\n                                          child: Text(\n                                            ",
    "suggested_key": "navigationAsMathClass",
    "context": "import 'package:go_router/go_router.dart';\nimport '../../theme/app_theme.dart';\nimport '../../theme/background_widget.dart';\nimport 'dart:math' as math;\n\nclass LandingPage extends StatefulWidget {\n  const LandingPage({super.key});",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 5,
    "column": 8,
    "original": "../features/auth/register_page.dart",
    "suggested_key": "navigationFeaturesauthregister_pagedart",
    "context": "import 'package:go_router/go_router.dart';\nimport '../config/logger.dart';\nimport '../features/auth/login_page.dart';\nimport '../features/auth/register_page.dart';\nimport '../features/auth/forgot_password_page.dart';\nimport '../features/auth/reset_password_page.dart';\nimport '../features/world/world_list_page.dart';",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 14,
    "column": 21,
    "original": ";\n\n// Custom Navigation Observer für Logging\nclass AppNavigationObserver extends NavigatorObserver {\n  @override\n  void didReplace({Route<dynamic>? newRoute, Route<dynamic>? oldRoute}) {\n    super.didReplace(newRoute: newRoute, oldRoute: oldRoute);\n    _logNavigation(oldRoute?.settings.name, newRoute?.settings.name, ",
    "suggested_key": "navigationCustomNavigationObserver",
    "context": "import '../features/landing/landing_page.dart';\nimport '../core/services/auth_service.dart';\nimport '../theme/app_theme.dart';\nimport '../main.dart';\n\n// Custom Navigation Observer für Logging\nclass AppNavigationObserver extends NavigatorObserver {",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 40,
    "column": 60,
    "original": ");\n    }\n  }\n}\n\nclass AppRouter {\n  // Named Routes für bessere Navigation\n  static const String landingRoute = ",
    "suggested_key": "navigationClassApprouterNamed",
    "context": "if (from != null && to != null) {\n      AppLogger.logNavigation(from, to, params: {'action': action});\n    } else if (to != null) {\n      AppLogger.navigation.i('🧭 Navigation: → $to ($action)');\n    }\n  }\n}",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 48,
    "column": 42,
    "original": ";\n  static const String registerRoute = ",
    "suggested_key": "navigationStaticConstString",
    "context": "class AppRouter {\n  // Named Routes für bessere Navigation\n  static const String landingRoute = 'landing';\n  static const String loginRoute = 'login';\n  static const String registerRoute = 'register';\n  static const String forgotPasswordRoute = 'forgot-password';\n  static const String resetPasswordRoute = 'reset-password';",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 51,
    "column": 59,
    "original": ";\n  static const String worldListRoute = ",
    "suggested_key": "navigationStaticConstString",
    "context": "static const String loginRoute = 'login';\n  static const String registerRoute = 'register';\n  static const String forgotPasswordRoute = 'forgot-password';\n  static const String resetPasswordRoute = 'reset-password';\n  static const String worldListRoute = 'world-list';\n  static const String worldDashboardRoute = 'world-dashboard';\n  static const String worldJoinRoute = 'world-join';",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 88,
    "column": 32,
    "original": ",\n          navigatorKey: _rootNavigatorKey,\n          \n          // Navigation Observer für User Journey Tracking\n          observers: [\n            AppNavigationObserver(),\n          ],\n          \n          // Redirect aktiviert - Services werden jetzt korrekt initialisiert\n          redirect: (context, state) async {\n        try {\n          final authService = _getAuthService();\n          if (authService == null) {\n            // Services noch nicht verfügbar, zur Landing Page\n            return ",
    "suggested_key": "navigationNavigatorkey_rootnavigatorkeyNavigation",
    "context": "AppLogger.navigation.i('🚀 Router wird initialisiert...');\n      try {\n        _routerInstance = GoRouter(\n          initialLocation: '/go',\n          navigatorKey: _rootNavigatorKey,\n          \n          // Navigation Observer für User Journey Tracking",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 108,
    "column": 82,
    "original": "); // Invite-Routen sind öffentlich\n          final isProtectedRoute = (state.matchedLocation.startsWith(",
    "suggested_key": "navigationInviteroutenSindÖffentlich",
    "context": "final isLoggedIn = await authService.isLoggedIn();\n\n          final isAuthRoute = state.matchedLocation.startsWith('/go/auth');\n          final isInviteRoute = state.matchedLocation.startsWith('/go/world-join/'); // Invite-Routen sind öffentlich\n          final isProtectedRoute = (state.matchedLocation.startsWith('/go/worlds') ||\n                                  state.matchedLocation.startsWith('/go/dashboard')) &&\n                                  !isInviteRoute; // Invite-Routen ausschließen",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 110,
    "column": 68,
    "original": "/go/dashboard",
    "suggested_key": "navigationGodashboard",
    "context": "final isAuthRoute = state.matchedLocation.startsWith('/go/auth');\n          final isInviteRoute = state.matchedLocation.startsWith('/go/world-join/'); // Invite-Routen sind öffentlich\n          final isProtectedRoute = (state.matchedLocation.startsWith('/go/worlds') ||\n                                  state.matchedLocation.startsWith('/go/dashboard')) &&\n                                  !isInviteRoute; // Invite-Routen ausschließen\n\n          if (!isLoggedIn && isProtectedRoute) {",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 139,
    "column": 19,
    "original": ",\n        name: landingRoute,\n        pageBuilder: (context, state) => CustomTransitionPage(\n          child: const LandingPage(),\n          transitionsBuilder: (context, animation, secondaryAnimation, child) =>\n            FadeTransition(opacity: animation, child: child),\n        ),\n      ),\n\n      // Auth routes\n      GoRoute(\n        path: ",
    "suggested_key": "navigationNameLandingroutePagebuilder",
    "context": "routes: [\n      // Landing page\n      GoRoute(\n        path: '/go',\n        name: landingRoute,\n        pageBuilder: (context, state) => CustomTransitionPage(\n          child: const LandingPage(),",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 150,
    "column": 30,
    "original": ",\n        name: loginRoute,\n        pageBuilder: (context, state) => CustomTransitionPage(\n          child: const LoginPage(),\n          transitionsBuilder: (context, animation, secondaryAnimation, child) =>\n            FadeTransition(opacity: animation, child: child),\n        ),\n      ),\n      GoRoute(\n        path: ",
    "suggested_key": "navigationNameLoginroutePagebuilder",
    "context": "// Auth routes\n      GoRoute(\n        path: '/go/auth/login',\n        name: loginRoute,\n        pageBuilder: (context, state) => CustomTransitionPage(\n          child: const LoginPage(),",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: child property",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 159,
    "column": 33,
    "original": ",\n        name: registerRoute,\n        pageBuilder: (context, state) => CustomTransitionPage(\n          child: const RegisterPage(),\n          transitionsBuilder: (context, animation, secondaryAnimation, child) =>\n            FadeTransition(opacity: animation, child: child),\n        ),\n      ),\n      GoRoute(\n        path: ",
    "suggested_key": "navigationNameRegisterroutePagebuilder",
    "context": "),\n      ),\n      GoRoute(\n        path: '/go/auth/register',\n        name: registerRoute,\n        pageBuilder: (context, state) => CustomTransitionPage(\n          child: const RegisterPage(),",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: child property",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 168,
    "column": 40,
    "original": ",\n        name: forgotPasswordRoute,\n        pageBuilder: (context, state) => CustomTransitionPage(\n          child: const ForgotPasswordPage(),\n          transitionsBuilder: (context, animation, secondaryAnimation, child) =>\n            FadeTransition(opacity: animation, child: child),\n        ),\n      ),\n      GoRoute(\n        path: ",
    "suggested_key": "navigationNameForgotpasswordroutePagebuilder",
    "context": "),\n      ),\n      GoRoute(\n        path: '/go/auth/forgot-password',\n        name: forgotPasswordRoute,\n        pageBuilder: (context, state) => CustomTransitionPage(\n          child: const ForgotPasswordPage(),",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: child property",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 177,
    "column": 39,
    "original": ",\n        name: resetPasswordRoute,\n        pageBuilder: (context, state) {\n          // Token aus Query-Parametern holen\n          final token = state.uri.queryParameters[",
    "suggested_key": "navigationNameResetpasswordroutePagebuilder",
    "context": "),\n      ),\n      GoRoute(\n        path: '/go/auth/reset-password',\n        name: resetPasswordRoute,\n        pageBuilder: (context, state) {\n          // Token aus Query-Parametern holen",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: child property",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 181,
    "column": 57,
    "original": "];\n          if (token == null || token.isEmpty) {\n            // Ohne Token zur Passwort-vergessen Seite weiterleiten\n            return CustomTransitionPage(\n              child: const ForgotPasswordPage(),\n              transitionsBuilder: (context, animation, secondaryAnimation, child) =>\n                FadeTransition(opacity: animation, child: child),\n            );\n          }\n          return CustomTransitionPage(\n            child: ResetPasswordPage(token: token),\n            transitionsBuilder: (context, animation, secondaryAnimation, child) =>\n              FadeTransition(opacity: animation, child: child),\n          );\n        },\n      ),\n\n      // World routes - NORMALE NAVIGATION\n      GoRoute(\n        path: ",
    "suggested_key": "navigationIfTokenNull",
    "context": "name: resetPasswordRoute,\n        pageBuilder: (context, state) {\n          // Token aus Query-Parametern holen\n          final token = state.uri.queryParameters['token'];\n          if (token == null || token.isEmpty) {\n            // Ohne Token zur Passwort-vergessen Seite weiterleiten\n            return CustomTransitionPage(",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: child property",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 200,
    "column": 26,
    "original": ",\n        name: worldListRoute,\n        pageBuilder: (context, state) => CustomTransitionPage(\n          child: const WorldListPage(),\n          transitionsBuilder: (context, animation, secondaryAnimation, child) =>\n            FadeTransition(opacity: animation, child: child),\n        ),\n      ),\n      GoRoute(\n        path: ",
    "suggested_key": "navigationNameWorldlistroutePagebuilder",
    "context": "// World routes - NORMALE NAVIGATION\n      GoRoute(\n        path: '/go/worlds',\n        name: worldListRoute,\n        pageBuilder: (context, state) => CustomTransitionPage(\n          child: const WorldListPage(),",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: child property",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 209,
    "column": 30,
    "original": ",\n        name: worldDashboardRoute,\n        pageBuilder: (context, state) {\n          final worldId = state.pathParameters[",
    "suggested_key": "navigationNameWorlddashboardroutePagebuilder",
    "context": "),\n      ),\n      GoRoute(\n        path: '/go/worlds/:id',\n        name: worldDashboardRoute,\n        pageBuilder: (context, state) {\n          final worldId = state.pathParameters['id'];",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: child property",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 247,
    "column": 35,
    "original": ",\n        name: worldJoinRoute,\n        pageBuilder: (context, state) {\n          final worldId = state.pathParameters[",
    "suggested_key": "navigationNameWorldjoinroutePagebuilder",
    "context": "),\n      // NORMALE WORLD-JOIN Route (über interne Navigation)\n      GoRoute(\n        path: '/go/worlds/:id/join',\n        name: worldJoinRoute,\n        pageBuilder: (context, state) {\n          final worldId = state.pathParameters['id'];",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: child property",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 289,
    "column": 35,
    "original": ",\n        pageBuilder: (context, state) {\n          final token = state.pathParameters[",
    "suggested_key": "navigationPagebuilderContextState",
    "context": "// INVITE-FLOW Route (externe Links)\n      GoRoute(\n        path: '/go/world-join/:token',\n        name: 'world-join-by-token',\n        pageBuilder: (context, state) {\n          final token = state.pathParameters['token'];\n          if (token == null || token.isEmpty) {",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: child property",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 387,
    "column": 68,
    "original": ");\n  }\n}\n\n// Verbesserte Fehlerseiten\nclass ErrorPage extends StatelessWidget {\n  const ErrorPage({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Container(\n        decoration: BoxDecoration(\n          gradient: LinearGradient(\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n            colors: [\n              AppTheme.primaryColor.withOpacity(0.1),\n              AppTheme.surfaceColor,\n            ],\n          ),\n        ),\n        child: Center(\n          child: Card(\n            elevation: 8,\n            shape: RoundedRectangleBorder(\n              borderRadius: BorderRadius.circular(16),\n            ),\n            child: Padding(\n              padding: const EdgeInsets.all(32.0),\n              child: Column(\n                mainAxisSize: MainAxisSize.min,\n                children: [\n                  const Icon(\n                    Icons.error_outline,\n                    size: 64,\n                    color: AppTheme.errorColor,\n                  ),\n                  const SizedBox(height: 24),\n                  Text(\n                    ",
    "suggested_key": "navigationVerbesserteFehlerseitenClass",
    "context": "// Cache beim App-Start invalidieren\n  static void invalidateCacheOnStart() {\n    // Caching entfernt, daher keine Cache-Invalidierung mehr nötig\n    AppLogger.navigation.i('🔄 Auth-Cache beim App-Start invalidiert');\n  }\n}",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 177,
    "column": 39,
    "original": ",\n        name: resetPasswordRoute,\n        pageBuilder: (context, state) {\n          // Token aus Query-Parametern holen\n          final token = state.uri.queryParameters[",
    "suggested_key": "navigationNameResetpasswordroutePagebuilder",
    "context": "),\n      ),\n      GoRoute(\n        path: '/go/auth/reset-password',\n        name: resetPasswordRoute,\n        pageBuilder: (context, state) {\n          // Token aus Query-Parametern holen",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: child property",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 181,
    "column": 57,
    "original": "];\n          if (token == null || token.isEmpty) {\n            // Ohne Token zur Passwort-vergessen Seite weiterleiten\n            return CustomTransitionPage(\n              child: const ForgotPasswordPage(),\n              transitionsBuilder: (context, animation, secondaryAnimation, child) =>\n                FadeTransition(opacity: animation, child: child),\n            );\n          }\n          return CustomTransitionPage(\n            child: ResetPasswordPage(token: token),\n            transitionsBuilder: (context, animation, secondaryAnimation, child) =>\n              FadeTransition(opacity: animation, child: child),\n          );\n        },\n      ),\n\n      // World routes - NORMALE NAVIGATION\n      GoRoute(\n        path: ",
    "suggested_key": "navigationIfTokenNull",
    "context": "name: resetPasswordRoute,\n        pageBuilder: (context, state) {\n          // Token aus Query-Parametern holen\n          final token = state.uri.queryParameters['token'];\n          if (token == null || token.isEmpty) {\n            // Ohne Token zur Passwort-vergessen Seite weiterleiten\n            return CustomTransitionPage(",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: child property",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 288,
    "column": 15,
    "original": "/go/world-join/:token",
    "suggested_key": "navigationGoworldjointoken",
    "context": "),\n      // INVITE-FLOW Route (externe Links)\n      GoRoute(\n        path: '/go/world-join/:token',\n        name: 'world-join-by-token',\n        pageBuilder: (context, state) {\n          final token = state.pathParameters['token'];",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: child property",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 289,
    "column": 15,
    "original": "world-join-by-token",
    "suggested_key": "navigationWorldjoinbytoken",
    "context": "// INVITE-FLOW Route (externe Links)\n      GoRoute(\n        path: '/go/world-join/:token',\n        name: 'world-join-by-token',\n        pageBuilder: (context, state) {\n          final token = state.pathParameters['token'];\n          if (token == null || token.isEmpty) {",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: child property",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 387,
    "column": 68,
    "original": ");\n  }\n}\n\n// Verbesserte Fehlerseiten\nclass ErrorPage extends StatelessWidget {\n  const ErrorPage({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Container(\n        decoration: BoxDecoration(\n          gradient: LinearGradient(\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n            colors: [\n              AppTheme.primaryColor.withOpacity(0.1),\n              AppTheme.surfaceColor,\n            ],\n          ),\n        ),\n        child: Center(\n          child: Card(\n            elevation: 8,\n            shape: RoundedRectangleBorder(\n              borderRadius: BorderRadius.circular(16),\n            ),\n            child: Padding(\n              padding: const EdgeInsets.all(32.0),\n              child: Column(\n                mainAxisSize: MainAxisSize.min,\n                children: [\n                  const Icon(\n                    Icons.error_outline,\n                    size: 64,\n                    color: AppTheme.errorColor,\n                  ),\n                  const SizedBox(height: 24),\n                  Text(\n                    ",
    "suggested_key": "navigationVerbesserteFehlerseitenClass",
    "context": "// Cache beim App-Start invalidieren\n  static void invalidateCacheOnStart() {\n    // Caching entfernt, daher keine Cache-Invalidierung mehr nötig\n    AppLogger.navigation.i('🔄 Auth-Cache beim App-Start invalidiert');\n  }\n}",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 3,
    "column": 35,
    "original": ";\n\nclass NavigationWidget extends StatefulWidget {\n  final String? currentRoute;\n  final Map<String, dynamic>? routeParams;\n  final bool? isJoinedWorld; // Ob der User in der aktuellen Welt registriert ist\n  \n  const NavigationWidget({\n    super.key,\n    this.currentRoute,\n    this.routeParams,\n    this.isJoinedWorld,\n  });\n\n  @override\n  State<NavigationWidget> createState() => _NavigationWidgetState();\n}\n\nclass _NavigationWidgetState extends State<NavigationWidget> with SingleTickerProviderStateMixin {\n  late AnimationController _animationController;\n  late Animation<double> _fadeAnimation;\n  bool _isExpanded = false;\n  \n  @override\n  void initState() {\n    super.initState();\n    \n    _animationController = AnimationController(\n      duration: const Duration(milliseconds: 300),\n      vsync: this,\n    );\n    \n    _fadeAnimation = Tween<double>(\n      begin: 0.0,\n      end: 1.0,\n    ).animate(CurvedAnimation(\n      parent: _animationController,\n      curve: Curves.easeInOut,\n    ));\n    \n    _animationController.forward();\n  }\n  \n  @override\n  void dispose() {\n    _animationController.dispose();\n    super.dispose();\n  }\n  \n  void _toggleExpanded() {\n    setState(() {\n      _isExpanded = !_isExpanded;\n    });\n  }\n  \n  void _showJoinRequiredMessage() {\n    ScaffoldMessenger.of(context).showSnackBar(\n      SnackBar(\n        content: const Text(",
    "suggested_key": "navigationClassNavigationwidgetExtends",
    "context": "import 'package:flutter/material.dart';\nimport 'package:go_router/go_router.dart';\nimport '../../theme/app_theme.dart';\n\nclass NavigationWidget extends StatefulWidget {\n  final String? currentRoute;",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 75,
    "column": 16,
    "original": "Zurück",
    "suggested_key": "navigationZurück",
    "context": "if (widget.currentRoute != 'world-list') {\n      items.add(NavigationItem(\n        icon: Icons.arrow_back,\n        label: 'Zurück',\n        onTap: () => Navigator.of(context).canPop() \n          ? Navigator.of(context).pop()\n          : context.goNamed('world-list'),",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 78,
    "column": 29,
    "original": "world-list",
    "suggested_key": "navigationWorldlist",
    "context": "label: 'Zurück',\n        onTap: () => Navigator.of(context).canPop() \n          ? Navigator.of(context).pop()\n          : context.goNamed('world-list'),\n      ));\n      \n      items.add(NavigationItem(",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 83,
    "column": 17,
    "original": ",\n        onTap: () {},\n        isDivider: true,\n      ));\n    }\n    \n    // Immer zur Welten-Liste\n    items.add(NavigationItem(\n      icon: Icons.public,\n      label: ",
    "suggested_key": "navigationOntapIsdividerTrue",
    "context": "items.add(NavigationItem(\n        icon: Icons.remove,\n        label: '',\n        onTap: () {},\n        isDivider: true,\n      ));",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 93,
    "column": 36,
    "original": "world-list",
    "suggested_key": "navigationWorldlist",
    "context": "items.add(NavigationItem(\n      icon: Icons.public,\n      label: 'Welten-Übersicht',\n      onTap: () => context.goNamed('world-list'),\n      isActive: widget.currentRoute == 'world-list',\n    ));",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 94,
    "column": 40,
    "original": "world-list",
    "suggested_key": "navigationWorldlist",
    "context": "icon: Icons.public,\n      label: 'Welten-Übersicht',\n      onTap: () => context.goNamed('world-list'),\n      isActive: widget.currentRoute == 'world-list',\n    ));\n    \n    // Welt-Details anzeigen (von Dashboard oder wenn auf Join-Page)",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 98,
    "column": 33,
    "original": "world-dashboard",
    "suggested_key": "navigationWorlddashboard",
    "context": "));\n    \n    // Welt-Details anzeigen (von Dashboard oder wenn auf Join-Page)\n    if ((widget.currentRoute == 'world-dashboard' || widget.currentRoute == 'world-join') \n        && widget.routeParams?['id'] != null) {\n      final worldIdParam = widget.routeParams?['id'];\n      if (worldIdParam != null) {",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 108,
    "column": 55,
    "original": ",\n        ));\n      }\n    }\n    \n    // Dashboard Link - nur aktiv wenn User in der Welt ist\n    if ((widget.currentRoute == ",
    "suggested_key": "navigationDashboardLinkNur",
    "context": "onTap: () => context.goNamed('world-join', \n            pathParameters: {'id': worldIdParam.toString()}\n          ),\n          isActive: widget.currentRoute == 'world-join',\n        ));\n      }\n    }",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 114,
    "column": 72,
    "original": "world-dashboard",
    "suggested_key": "navigationWorlddashboard",
    "context": "}\n    \n    // Dashboard Link - nur aktiv wenn User in der Welt ist\n    if ((widget.currentRoute == 'world-join' || widget.currentRoute == 'world-dashboard') \n        && widget.routeParams?['id'] != null) {\n      final worldIdParam = widget.routeParams?['id'];\n      if (worldIdParam != null) {",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 116,
    "column": 51,
    "original": "];\n      if (worldIdParam != null) {\n        final worldId = worldIdParam.toString();\n        final isJoined = widget.isJoinedWorld ?? false;\n        \n        items.add(NavigationItem(\n          icon: Icons.dashboard,\n          label: isJoined ? ",
    "suggested_key": "navigationIfWorldidparamNull",
    "context": "// Dashboard Link - nur aktiv wenn User in der Welt ist\n    if ((widget.currentRoute == 'world-join' || widget.currentRoute == 'world-dashboard') \n        && widget.routeParams?['id'] != null) {\n      final worldIdParam = widget.routeParams?['id'];\n      if (worldIdParam != null) {\n        final worldId = worldIdParam.toString();\n        final isJoined = widget.isJoinedWorld ?? false;",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 123,
    "column": 47,
    "original": "Dashboard (Beitreten erforderlich)",
    "suggested_key": "navigationDashboardBeitretenErforderlich",
    "context": "items.add(NavigationItem(\n          icon: Icons.dashboard,\n          label: isJoined ? 'Zum Dashboard' : 'Dashboard (Beitreten erforderlich)',\n          onTap: isJoined \n            ? () => context.goNamed('world-dashboard', pathParameters: {'id': worldId})\n            : () => _showJoinRequiredMessage(),",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 125,
    "column": 37,
    "original": "world-dashboard",
    "suggested_key": "navigationWorlddashboard",
    "context": "icon: Icons.dashboard,\n          label: isJoined ? 'Zum Dashboard' : 'Dashboard (Beitreten erforderlich)',\n          onTap: isJoined \n            ? () => context.goNamed('world-dashboard', pathParameters: {'id': worldId})\n            : () => _showJoinRequiredMessage(),\n          isActive: widget.currentRoute == 'world-dashboard',\n          isDisabled: !isJoined,",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 127,
    "column": 44,
    "original": "world-dashboard",
    "suggested_key": "navigationWorlddashboard",
    "context": "onTap: isJoined \n            ? () => context.goNamed('world-dashboard', pathParameters: {'id': worldId})\n            : () => _showJoinRequiredMessage(),\n          isActive: widget.currentRoute == 'world-dashboard',\n          isDisabled: !isJoined,\n        ));\n      }",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 262,
    "column": 30,
    "original": ",\n                  style: TextStyle(\n                    color: Colors.white,\n                    fontSize: 16,\n                    fontWeight: FontWeight.bold,\n                  ),\n                ),\n                const SizedBox(width: 40),\n                Icon(\n                  Icons.keyboard_arrow_up,\n                  color: Colors.grey[400],\n                  size: 24,\n                ),\n              ],\n            ),\n          ),\n        ),\n        \n        const Divider(color: Colors.grey, height: 1),\n        \n        // Navigation Items\n        ...items.map((item) => _buildNavigationItem(item)),\n      ],\n    );\n  }\n  \n  Widget _buildNavigationItem(NavigationItem item) {\n    if (item.isDivider) {\n      return const Padding(\n        padding: EdgeInsets.symmetric(vertical: 4),\n        child: Divider(color: Colors.grey, height: 1),\n      );\n    }\n    \n    final isActive = item.isActive;\n    final isDisabled = item.isDisabled;\n    \n    final widget = InkWell(\n      onTap: isDisabled ? null : () {\n        item.onTap();\n        if (!isDisabled) _toggleExpanded();\n      },\n      child: Container(\n        width: 220,\n        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),\n        decoration: BoxDecoration(\n          color: isActive ? AppTheme.primaryColor.withOpacity(0.1) : Colors.transparent,\n          border: Border(\n            left: BorderSide(\n              color: isActive ? AppTheme.primaryColor : Colors.transparent,\n              width: 3,\n            ),\n          ),\n        ),\n        child: Row(\n          children: [\n            Icon(\n              item.icon,\n              color: isDisabled \n                ? Colors.grey[600] \n                : (isActive ? AppTheme.primaryColor : Colors.grey[400]),\n              size: 20,\n            ),\n            const SizedBox(width: 12),\n            Expanded(\n              child: Text(\n                item.label,\n                style: TextStyle(\n                  color: isDisabled \n                    ? Colors.grey[600] \n                    : (isActive ? AppTheme.primaryColor : Colors.white),\n                  fontSize: 14,\n                  fontWeight: isActive ? FontWeight.w600 : FontWeight.normal,\n                  decoration: isDisabled ? TextDecoration.lineThrough : null,\n                ),\n              ),\n            ),\n            if (isActive && !isDisabled)\n              const Icon(\n                Icons.check_circle,\n                color: AppTheme.primaryColor,\n                size: 16,\n              ),\n            if (isDisabled)\n              Icon(\n                Icons.lock,\n                color: Colors.grey[600],\n                size: 16,\n              ),\n          ],\n        ),\n      ),\n    );\n    \n    // Tooltip hinzufügen wenn disabled\n    if (isDisabled && item.label.contains(",
    "suggested_key": "navigationStyleTextstyleColor",
    "context": "),\n                const SizedBox(width: 12),\n                const Text(\n                  'Navigation',\n                  style: TextStyle(\n                    color: Colors.white,\n                    fontSize: 16,",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 75,
    "column": 16,
    "original": "Zurück",
    "suggested_key": "navigationZurück",
    "context": "if (widget.currentRoute != 'world-list') {\n      items.add(NavigationItem(\n        icon: Icons.arrow_back,\n        label: 'Zurück',\n        onTap: () => Navigator.of(context).canPop() \n          ? Navigator.of(context).pop()\n          : context.goNamed('world-list'),",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 127,
    "column": 60,
    "original": ",\n          isDisabled: !isJoined,\n        ));\n      }\n    }\n    \n    // Weitere Navigation Items können hier hinzugefügt werden\n    // z.B. Settings, Profile, etc.\n    \n    return items;\n  }\n  \n  @override\n  Widget build(BuildContext context) {\n    final navItems = _getNavigationItems();\n    \n    return Positioned(\n      top: 16,\n      right: 16,\n      child: FadeTransition(\n        opacity: _fadeAnimation,\n        child: AnimatedContainer(\n          duration: const Duration(milliseconds: 300),\n          decoration: BoxDecoration(\n            color: const Color(0xFF1A1A1A).withOpacity(0.95),\n            borderRadius: BorderRadius.circular(16),\n            border: Border.all(\n              color: AppTheme.primaryColor.withOpacity(0.3),\n              width: 1,\n            ),\n            boxShadow: [\n              BoxShadow(\n                color: Colors.black.withOpacity(0.3),\n                blurRadius: 12,\n                offset: const Offset(0, 4),\n              ),\n            ],\n          ),\n          child: Material(\n            color: Colors.transparent,\n            child: _isExpanded ? _buildExpandedView(navItems) : _buildCompactView(),\n          ),\n        ),\n      ),\n    );\n  }\n  \n  Widget _buildCompactView() {\n    return InkWell(\n      onTap: _toggleExpanded,\n      borderRadius: BorderRadius.circular(16),\n      child: Padding(\n        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),\n        child: Row(\n          mainAxisSize: MainAxisSize.min,\n          children: [\n            Container(\n              width: 36,\n              height: 36,\n              decoration: BoxDecoration(\n                color: AppTheme.primaryColor.withOpacity(0.2),\n                shape: BoxShape.circle,\n              ),\n              child: const Icon(\n                Icons.explore,\n                color: AppTheme.primaryColor,\n                size: 20,\n              ),\n            ),\n            const SizedBox(width: 12),\n            Column(\n              crossAxisAlignment: CrossAxisAlignment.start,\n              mainAxisSize: MainAxisSize.min,\n              children: [\n                const Text(\n                  ",
    "suggested_key": "navigationIsdisabledIsjoinedWeitere",
    "context": "onTap: isJoined \n            ? () => context.goNamed('world-dashboard', pathParameters: {'id': worldId})\n            : () => _showJoinRequiredMessage(),\n          isActive: widget.currentRoute == 'world-dashboard',\n          isDisabled: !isJoined,\n        ));\n      }",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\user_info_widget.dart",
    "line": 5,
    "column": 24,
    "original": ";\n\nclass UserInfoWidget extends StatefulWidget {\n  const UserInfoWidget({super.key});\n\n  @override\n  State<UserInfoWidget> createState() => _UserInfoWidgetState();\n}\n\nclass _UserInfoWidgetState extends State<UserInfoWidget> with SingleTickerProviderStateMixin {\n  late final AuthService _authService;\n  late AnimationController _animationController;\n  late Animation<double> _fadeAnimation;\n  bool _isExpanded = false;\n  \n  @override\n  void initState() {\n    super.initState();\n    _authService = ServiceLocator.get<AuthService>();\n    \n    _animationController = AnimationController(\n      duration: const Duration(milliseconds: 300),\n      vsync: this,\n    );\n    \n    _fadeAnimation = Tween<double>(\n      begin: 0.0,\n      end: 1.0,\n    ).animate(CurvedAnimation(\n      parent: _animationController,\n      curve: Curves.easeInOut,\n    ));\n    \n    _animationController.forward();\n    \n    // Fetch current user data to ensure we have roles\n    _fetchUserData();\n  }\n  \n  Future<void> _fetchUserData() async {\n    final user = await _authService.fetchCurrentUser();\n    if (user != null && mounted) {\n      setState(() {});\n    }\n  }\n  \n  @override\n  void dispose() {\n    _animationController.dispose();\n    super.dispose();\n  }\n  \n  void _toggleExpanded() {\n    setState(() {\n      _isExpanded = !_isExpanded;\n    });\n  }\n  \n  Color _getRoleColor(String roleName) {\n    switch (roleName.toLowerCase()) {\n      case ",
    "suggested_key": "navigationClassUserinfowidgetExtends",
    "context": "import 'package:go_router/go_router.dart';\nimport '../../core/services/auth_service.dart';\nimport '../../theme/app_theme.dart';\nimport '../../main.dart';\n\nclass UserInfoWidget extends StatefulWidget {\n  const UserInfoWidget({super.key});",
    "category": "navigation",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 391,
    "column": 51,
    "original": "Bereits Mitglied? Anmelden",
    "suggested_key": "uiBereitsMitgliedAnmelden",
    "context": "color: AppTheme.primaryColor,\n                                                ),\n                                                label: const Text(\n                                                  'Bereits Mitglied? Anmelden',\n                                                  style: TextStyle(\n                                                    color: AppTheme.primaryColor,\n                                                    fontSize: 16,",
    "category": "ui",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 601,
    "column": 39,
    "original": "Kostenlos registrieren →",
    "suggested_key": "uiKostenlosRegistrieren",
    "context": "),\n                                    ),\n                                    child: const Text(\n                                      'Kostenlos registrieren →',\n                                      style: TextStyle(\n                                        fontSize: 18,\n                                        fontWeight: FontWeight.bold,",
    "category": "ui",
    "confidence": 0.8500000000000001,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 355,
    "column": 46,
    "original": "Bitte bestätige dein neues Passwort",
    "suggested_key": "formBitteBestätigeDein",
    "context": "),\n                                  validator: (value) {\n                                    if (value == null || value.isEmpty) {\n                                      return 'Bitte bestätige dein neues Passwort';\n                                    }\n                                    if (value != _passwordController.text) {\n                                      return 'Die Passwörter stimmen nicht überein';",
    "category": "form",
    "confidence": 0.85,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 358,
    "column": 46,
    "original": "Die Passwörter stimmen nicht überein",
    "suggested_key": "formDiePasswörterStimmen",
    "context": "return 'Bitte bestätige dein neues Passwort';\n                                    }\n                                    if (value != _passwordController.text) {\n                                      return 'Die Passwörter stimmen nicht überein';\n                                    }\n                                    return null;\n                                  },",
    "category": "form",
    "confidence": 0.85,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 390,
    "column": 57,
    "original": "Passwörter stimmen überein",
    "suggested_key": "formPasswörterStimmenÜberein",
    "context": "_passwordController.text.length >= 6),\n                                      _buildRequirement('Keine Leerzeichen', \n                                        !_passwordController.text.contains(' ')),\n                                      _buildRequirement('Passwörter stimmen überein', \n                                        _passwordController.text.isNotEmpty && \n                                        _passwordController.text == _confirmPasswordController.text),\n                                    ],",
    "category": "form",
    "confidence": 0.85,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1007,
    "column": 41,
    "original": "Keine Information verfügbar",
    "suggested_key": "formKeineInformationVerfügbar",
    "context": "),\n                      const SizedBox(height: 16),\n                      Text(\n                        _infoMessage ?? 'Keine Information verfügbar',\n                        style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                          color: Colors.grey[300],\n                        ),",
    "category": "form",
    "confidence": 0.85,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 5,
    "column": 43,
    "original": ";\n\nclass ResetPasswordPage extends StatefulWidget {\n  final String token;\n  \n  const ResetPasswordPage({\n    super.key,\n    required this.token,\n  });\n\n  @override\n  State<ResetPasswordPage> createState() => _ResetPasswordPageState();\n}\n\nclass _ResetPasswordPageState extends State<ResetPasswordPage> with SingleTickerProviderStateMixin {\n  final _formKey = GlobalKey<FormState>();\n  final _passwordController = TextEditingController();\n  final _confirmPasswordController = TextEditingController();\n  final AuthService _authService = AuthService();\n  \n  late AnimationController _animationController;\n  late Animation<double> _fadeAnimation;\n  \n  bool _isLoading = false;\n  bool _isSuccess = false;\n  String? _errorMessage;\n  bool _obscurePassword = true;\n  bool _obscureConfirmPassword = true;\n  \n  // Für bessere Validierung\n  bool _hasInteractedWithPassword = false;\n  bool _hasInteractedWithConfirmPassword = false;\n\n  @override\n  void initState() {\n    super.initState();\n    \n    // Animation Setup\n    _animationController = AnimationController(\n      duration: const Duration(milliseconds: 800),\n      vsync: this,\n    );\n    _fadeAnimation = Tween<double>(\n      begin: 0.0,\n      end: 1.0,\n    ).animate(CurvedAnimation(\n      parent: _animationController,\n      curve: Curves.easeIn,\n    ));\n    \n    _animationController.forward();\n  }\n\n  @override\n  void dispose() {\n    _animationController.dispose();\n    _passwordController.dispose();\n    _confirmPasswordController.dispose();\n    super.dispose();\n  }\n\n  Future<void> _resetPassword() async {\n    if (!_formKey.currentState!.validate()) {\n      return;\n    }\n\n    setState(() {\n      _isLoading = true;\n      _errorMessage = null;\n      _isSuccess = false;\n    });\n\n    try {\n      final success = await _authService.resetPassword(\n        widget.token,\n        _passwordController.text,\n      );\n\n      if (success && mounted) {\n        setState(() {\n          _isSuccess = true;\n        });\n        \n        // Erfolgsmeldung zeigen und nach 3 Sekunden zum Login\n        await Future.delayed(const Duration(seconds: 3));\n        if (mounted) {\n          context.goNamed(",
    "suggested_key": "navigationClassResetpasswordpageExtends",
    "context": "import 'package:go_router/go_router.dart';\nimport '../../core/services/auth_service.dart';\nimport '../../theme/app_theme.dart';\nimport '../../theme/background_widget.dart';\n\nclass ResetPasswordPage extends StatefulWidget {\n  final String token;",
    "category": "navigation",
    "confidence": 0.85,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 12,
    "column": 52,
    "original": ";\n\n// ServiceLocator Import für DI\nimport ",
    "suggested_key": "navigationServicelocatorImportFür",
    "context": "import '../../theme/app_theme.dart';\nimport '../../theme/background_widget.dart';\nimport '../../shared/widgets/user_info_widget.dart';\nimport '../../shared/widgets/navigation_widget.dart';\n\n// ServiceLocator Import für DI\nimport '../../main.dart';",
    "category": "navigation",
    "confidence": 0.85,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 15,
    "column": 24,
    "original": ";\n\n// Flow-Type-Enum für klare Trennung der beiden User-Journeys\nenum WorldJoinFlowType {\n  normal,   // Normale Navigation: User kommt von World-List\n  invite,   // Invite-Flow: User kommt über externen Link\n}\n\nclass WorldJoinPage extends StatefulWidget {\n  final String? worldId;\n  final String? inviteToken;\n  final WorldJoinFlowType flowType;\n  \n  const WorldJoinPage({\n    super.key, \n    this.worldId, \n    this.inviteToken,\n    required this.flowType,\n  });\n\n  @override\n  State<WorldJoinPage> createState() => _WorldJoinPageState();\n}\n\nclass _WorldJoinPageState extends State<WorldJoinPage> with SingleTickerProviderStateMixin {\n  // DI-ready: ServiceLocator verwenden\n  late final WorldService _worldService;\n  late final AuthService _authService;\n  \n  // Tab Controller\n  late TabController _tabController;\n  \n  bool _isLoading = false;\n  bool _isJoining = false;\n  bool _isPreRegistering = false;\n  bool _isAuthenticated = false;\n  bool _isJoined = false;\n  bool _isPreRegistered = false;\n  World? _world;\n  String? _errorMessage;\n  String? _infoMessage;\n  String? _joinError;\n  bool _showRegistrationButton = false;\n  bool _showLogoutButton = false;\n  String? _inviteEmail;\n  bool _showLoginButton = false;\n  bool _showAcceptInviteButton = false;\n  bool isInviteValid = true; // Neue Variable für Gültigkeit der Einladung\n\n  @override\n  void initState() {\n    super.initState();\n    \n    _tabController = TabController(length: 1, vsync: this);\n    _initializeServices();\n    _loadWorldData();\n  }\n  \n  @override\n  void dispose() {\n    _tabController.dispose();\n    super.dispose();\n  }\n\n  @override\n  void didChangeDependencies() {\n    super.didChangeDependencies();\n    // Authentication-Status bei Kontext-Änderungen prüfen\n    _checkAuthenticationStatus();\n  }\n\n  void _initializeServices() {\n    try {\n      if (ServiceLocator.has<WorldService>()) {\n        _worldService = ServiceLocator.get<WorldService>();\n      } else {\n        _worldService = WorldService();\n      }\n      \n      if (ServiceLocator.has<AuthService>()) {\n        _authService = ServiceLocator.get<AuthService>();\n      } else {\n        _authService = AuthService();\n      }\n      \n      // Authentication-Status prüfen\n      _checkAuthenticationStatus();\n    } catch (e) {\n      AppLogger.app.w(",
    "suggested_key": "navigationFlowtypeenumFürKlare",
    "context": "import '../../shared/widgets/navigation_widget.dart';\n\n// ServiceLocator Import für DI\nimport '../../main.dart';\n\n// Flow-Type-Enum für klare Trennung der beiden User-Journeys\nenum WorldJoinFlowType {",
    "category": "navigation",
    "confidence": 0.85,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 17,
    "column": 37,
    "original": ";\n\n// ServiceLocator Import für DI\nimport ",
    "suggested_key": "navigationServicelocatorImportFür",
    "context": "import '../../shared/widgets/user_info_widget.dart';\nimport '../../shared/widgets/navigation_widget.dart';\nimport './widgets/world_card.dart';\nimport './widgets/world_filters.dart';\n\n// ServiceLocator Import für DI\nimport '../../main.dart';",
    "category": "navigation",
    "confidence": 0.85,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\config\\logger.dart",
    "line": 23,
    "column": 45,
    "original": "),\n      level: kDebugMode ? Level.debug : Level.info,\n      output: _getLogOutput(),\n    );\n\n    _authLogger = Logger(\n      printer: _getLogPrinter(prefix: ",
    "suggested_key": "uiLevelKdebugmodeLeveldebug",
    "context": "// Spezielle Logger für verschiedene Bereiche\n    _apiLogger = Logger(\n      printer: _getLogPrinter(prefix: '[API]'),\n      level: kDebugMode ? Level.debug : Level.info,\n      output: _getLogOutput(),\n    );",
    "category": "ui",
    "confidence": 0.85,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 175,
    "column": 17,
    "original": ":\n        final cachedBody = _requestBodies[endpoint];\n        if (cachedBody != null) {\n          return await http.post(\n            Uri.parse(",
    "suggested_key": "uiFinalCachedbody_requestbodiesendpoint",
    "context": "Uri.parse('${Env.apiUrl}${Env.apiBasePath}$endpoint'),\n          headers: _headers,\n        );\n      case 'POST':\n        final cachedBody = _requestBodies[endpoint];\n        if (cachedBody != null) {\n          return await http.post(",
    "category": "ui",
    "confidence": 0.85,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 185,
    "column": 16,
    "original": ":\n        final cachedBody = _requestBodies[endpoint];\n        if (cachedBody != null) {\n          return await http.put(\n            Uri.parse(",
    "suggested_key": "uiFinalCachedbody_requestbodiesendpoint",
    "context": ");\n        }\n        break;\n      case 'PUT':\n        final cachedBody = _requestBodies[endpoint];\n        if (cachedBody != null) {\n          return await http.put(",
    "category": "ui",
    "confidence": 0.85,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 201,
    "column": 26,
    "original": "Request retry failed",
    "suggested_key": "uiRequestRetryFailed",
    "context": "headers: _headers,\n        );\n    }\n    return http.Response('Request retry failed', 500);\n  }\n\n  Future<http.Response> deleteWithBody(String endpoint, Map<String, dynamic> data) async {",
    "category": "ui",
    "confidence": 0.85,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 255,
    "column": 63,
    "original": " : body;\n    }\n    return body;\n  }\n\n\n  Future<http.Response> get(String endpoint) async {\n    await _ensureInitialized();\n    \n    // Log API Request\n    AppLogger.logApiRequest(",
    "suggested_key": "uiBodyReturnBody",
    "context": "}\n    } catch (e) {\n      // If JSON parsing fails, return truncated body\n      return body.length > 100 ? '${body.substring(0, 100)}...' : body;\n    }\n    return body;\n  }",
    "category": "ui",
    "confidence": 0.85,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 289,
    "column": 45,
    "original": "🎮 Spiele • 🌍 Erkunde • 🤝 Verbinde",
    "suggested_key": "uiSpieleErkundeVerbinde",
    "context": "borderRadius: BorderRadius.circular(20),\n                                          ),\n                                          child: Text(\n                                            '🎮 Spiele • 🌍 Erkunde • 🤝 Verbinde',\n                                            style: TextStyle(\n                                              color: AppTheme.primaryColor.withOpacity(0.9),\n                                              fontSize: 14,",
    "category": "ui",
    "confidence": 0.85,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 348,
    "column": 61,
    "original": "Jetzt kostenlos starten",
    "suggested_key": "uiJetztKostenlosStarten",
    "context": "mainAxisAlignment: MainAxisAlignment.center,\n                                                        children: [\n                                                          const Text(\n                                                            'Jetzt kostenlos starten',\n                                                            style: TextStyle(\n                                                              color: Colors.white,\n                                                              fontSize: 18,",
    "category": "ui",
    "confidence": 0.85,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 489,
    "column": 29,
    "original": "Erlebe Gaming auf einem neuen Level",
    "suggested_key": "uiErlebeGamingAuf",
    "context": "),\n                          const SizedBox(height: 16),\n                          Text(\n                            'Erlebe Gaming auf einem neuen Level',\n                            style: TextStyle(\n                              fontSize: 18,\n                              color: Colors.grey[300],",
    "category": "ui",
    "confidence": 0.85,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 526,
    "column": 50,
    "original": "Modernste Sicherheit und faire Spielregeln für alle",
    "suggested_key": "uiModernsteSicherheitUnd",
    "context": "_buildFeatureCard(\n                                    icon: Icons.security,\n                                    title: 'Sicher & Fair',\n                                    description: 'Modernste Sicherheit und faire Spielregeln für alle',\n                                    color: Colors.orange,\n                                  ),\n                                  _buildFeatureCard(",
    "category": "ui",
    "confidence": 0.85,
    "widget_context": "Widget: Card",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 537,
    "column": 44,
    "original": "Überall spielen",
    "suggested_key": "uiÜberallSpielen",
    "context": "),\n                                  _buildFeatureCard(\n                                    icon: Icons.devices,\n                                    title: 'Überall spielen',\n                                    description: 'Auf PC, Tablet oder Smartphone - immer dabei',\n                                    color: Colors.red,\n                                  ),",
    "category": "ui",
    "confidence": 0.85,
    "widget_context": "Widget: Card",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1616,
    "column": 24,
    "original": ",\n              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),\n            ),\n          ),\n        ),\n      );\n    }\n\n    // **REGISTRATION BUTTON**\n    if (_showRegistrationButton && _inviteEmail != null) {\n      buttons.add(\n        Container(\n          width: double.infinity,\n          margin: const EdgeInsets.only(bottom: 12.0),\n          child: ElevatedButton(\n            onPressed: () {\n              // Redirect auf Register-Seite mit E-Mail vorausgefüllt\n              final registerRoute = ",
    "suggested_key": "uiStyleTextstylefontsize16",
    "context": "),\n            ),\n            child: const Text(\n              'Anmelden',\n              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),\n            ),\n          ),",
    "category": "ui",
    "confidence": 0.85,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1714,
    "column": 24,
    "original": ",\n              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),\n            ),\n          ),\n        ),\n      );\n    }\n\n    // FALLBACK: Normale World-Join-Buttons wenn keine spezifischen Buttons\n    if (buttons.isEmpty) {\n      // **NORMALE WORLD-JOIN LOGIC** (wenn kein Invite-Token)\n      if (widget.inviteToken == null && _world != null) {\n        final world = _world!;\n        \n        // **STATUS-BASIERTE INTELLIGENTE BUTTON-LOGIK**\n        switch (world.status) {\n          case WorldStatus.upcoming:\n            // Vorregistrierung oder Zurückziehen\n            if (_isPreRegistered) {\n              buttons.add(\n                Container(\n                  width: double.infinity,\n                  margin: const EdgeInsets.only(bottom: 12.0),\n                  child: ElevatedButton.icon(\n                    onPressed: (_isPreRegistering || _isJoining) ? null : _cancelPreRegistration,\n                    icon: const Icon(Icons.cancel),\n                    label: Text(_isPreRegistering ? ",
    "suggested_key": "uiStyleTextstylefontsize16",
    "context": "),\n            ),\n            child: const Text(\n              'Abmelden',\n              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),\n            ),\n          ),",
    "category": "ui",
    "confidence": 0.85,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 599,
    "column": 43,
    "original": "),\n        content: Text(",
    "suggested_key": "buttonContentText",
    "context": "final confirmed = await showDialog<bool>(\n      context: context,\n      builder: (context) => AlertDialog(\n        title: const Text('Welt verlassen?'),\n        content: Text('Möchtest du die Welt \"${world.name}\" wirklich verlassen?'),\n        actions: [\n          TextButton(",
    "category": "button",
    "confidence": 0.8,
    "widget_context": "Widget: AlertDialog",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 600,
    "column": 80,
    "original": "),\n        actions: [\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(false),\n            child: const Text(",
    "suggested_key": "buttonActionsTextbuttonOnpressed",
    "context": "context: context,\n      builder: (context) => AlertDialog(\n        title: const Text('Welt verlassen?'),\n        content: Text('Möchtest du die Welt \"${world.name}\" wirklich verlassen?'),\n        actions: [\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(false),",
    "category": "button",
    "confidence": 0.8,
    "widget_context": "Widget: AlertDialog",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 604,
    "column": 41,
    "original": "),\n          ),\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(true),\n            style: TextButton.styleFrom(\n              foregroundColor: Colors.red,\n            ),\n            child: const Text(",
    "suggested_key": "buttonTextbuttonOnpressedNavigatorofcontextpoptrue",
    "context": "actions: [\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(false),\n            child: const Text('Abbrechen'),\n          ),\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(true),",
    "category": "button",
    "confidence": 0.8,
    "widget_context": "Widget: AlertDialog",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 383,
    "column": 43,
    "original": "),\n        content: Text(",
    "suggested_key": "buttonContentText",
    "context": "final confirmed = await showDialog<bool>(\n      context: context,\n      builder: (context) => AlertDialog(\n        title: const Text('Welt verlassen?'),\n        content: Text('Möchtest du die Welt \"${world.name}\" wirklich verlassen?'),\n        actions: [\n          TextButton(",
    "category": "button",
    "confidence": 0.8,
    "widget_context": "Widget: AlertDialog",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 384,
    "column": 80,
    "original": "),\n        actions: [\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(false),\n            child: const Text(",
    "suggested_key": "buttonActionsTextbuttonOnpressed",
    "context": "context: context,\n      builder: (context) => AlertDialog(\n        title: const Text('Welt verlassen?'),\n        content: Text('Möchtest du die Welt \"${world.name}\" wirklich verlassen?'),\n        actions: [\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(false),",
    "category": "button",
    "confidence": 0.8,
    "widget_context": "Widget: AlertDialog",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 388,
    "column": 41,
    "original": "),\n          ),\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(true),\n            style: TextButton.styleFrom(\n              foregroundColor: Colors.red,\n            ),\n            child: const Text(",
    "suggested_key": "buttonTextbuttonOnpressedNavigatorofcontextpoptrue",
    "context": "actions: [\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(false),\n            child: const Text('Abbrechen'),\n          ),\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(true),",
    "category": "button",
    "confidence": 0.8,
    "widget_context": "Widget: AlertDialog",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 398,
    "column": 55,
    "original": " ist KEIN Fehler!\n      if (e.toString().contains('Invite bereits akzeptiert')) {\n        setState(() {\n          _isJoined = true;\n          _infoMessage = 'Du bist bereits Mitglied dieser Welt ",
    "suggested_key": "errorIstKeinFehler",
    "context": "}\n      }\n    } catch (e) {\n      // SPEZIALBEHANDLUNG: \"Invite bereits akzeptiert\" ist KEIN Fehler!\n      if (e.toString().contains('Invite bereits akzeptiert')) {\n        setState(() {\n          _isJoined = true;",
    "category": "error",
    "confidence": 0.8,
    "widget_context": "Widget: Scaffold",
    "quote_type": "\""
  },
  {
    "file": "lib\\app.dart",
    "line": 89,
    "column": 49,
    "original": ");\n    \n    // 2. Services initialisieren (jetzt sicher, da App bereits läuft)\n    try {\n      final authService = AuthService();\n      final apiService = ApiService.withAuth(authService);\n      final worldService = WorldService();\n      final inviteService = InviteService();\n\n      ServiceLocator.register<AuthService>(authService);\n      ServiceLocator.register<ApiService>(apiService);\n      ServiceLocator.register<WorldService>(worldService);\n      ServiceLocator.register<InviteService>(inviteService);\n      \n      AppLogger.app.i(",
    "suggested_key": "ui2ServicesInitialisieren",
    "context": "// 1. Environment initialisieren\n    await Env.initialize();\n    \n    AppLogger.app.i('🌍 Environment initialisiert');\n    \n    // 2. Services initialisieren (jetzt sicher, da App bereits läuft)\n    try {",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\models\\user.dart",
    "line": 21,
    "column": 31,
    "original": "] as List)\n              .map((p) => RolePermission.fromJson(p))\n              .toList()\n          : null,\n    );\n  }\n}\n\n// UserRole model\nclass UserRole {\n  final int id;\n  final int userId;\n  final int roleId;\n  final String scopeType;\n  final String scopeObjectId;\n  final String? condition;\n  final Role role;\n\n  UserRole({\n    required this.id,\n    required this.userId,\n    required this.roleId,\n    required this.scopeType,\n    required this.scopeObjectId,\n    this.condition,\n    required this.role,\n  });\n\n  factory UserRole.fromJson(Map<String, dynamic> json) {\n    return UserRole(\n      id: json[",
    "suggested_key": "uiAsListMapp",
    "context": "name: json['name'],\n      description: json['description'],\n      permissions: json['permissions'] != null\n          ? (json['permissions'] as List)\n              .map((p) => RolePermission.fromJson(p))\n              .toList()\n          : null,",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\models\\user.dart",
    "line": 96,
    "column": 55,
    "original": "]),\n    );\n  }\n}\n\nclass User {\n  final String id;\n  final String username;\n  final String email;\n  final DateTime createdAt;\n  final DateTime? lastLoginAt;\n  final bool? isLocked;\n  final List<UserRole>? roles;\n\n  User({\n    required this.id,\n    required this.username,\n    required this.email,\n    required this.createdAt,\n    this.lastLoginAt,\n    this.isLocked,\n    this.roles,\n  });\n\n  factory User.fromJson(Map<String, dynamic> json) {\n    return User(\n      id: json[",
    "suggested_key": "uiClassUserFinal",
    "context": "factory RolePermission.fromJson(Map<String, dynamic> json) {\n    return RolePermission(\n      id: json['id'],\n      permission: Permission.fromJson(json['permission']),\n    );\n  }\n}",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\models\\user.dart",
    "line": 131,
    "column": 25,
    "original": "] as List)\n              .map((r) => UserRole.fromJson(r))\n              .toList()\n          : null,\n    );\n  }\n\n  static DateTime _parseDateTime(dynamic dateValue) {\n    if (dateValue is String) {\n      try {\n        return DateTime.parse(dateValue);\n      } catch (e) {\n        // Try different date formats\n        try {\n          return DateTime.parse(",
    "suggested_key": "uiAsListMapr",
    "context": ": null,\n      isLocked: json['isLocked'],\n      roles: json['roles'] != null\n          ? (json['roles'] as List)\n              .map((r) => UserRole.fromJson(r))\n              .toList()\n          : null,",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\providers\\locale_provider.dart",
    "line": 1,
    "column": 38,
    "original": ";\n\nclass LocaleProvider extends ChangeNotifier {\n  static final LocaleProvider _instance = LocaleProvider._internal();\n  factory LocaleProvider() => _instance;\n  LocaleProvider._internal();\n\n  // Standardsprache ist Deutsch\n  Locale _currentLocale = const Locale(",
    "suggested_key": "uiClassLocaleproviderExtends",
    "context": "import 'package:flutter/material.dart';\n\nclass LocaleProvider extends ChangeNotifier {\n  static final LocaleProvider _instance = LocaleProvider._internal();",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\providers\\locale_provider.dart",
    "line": 9,
    "column": 43,
    "original": ");\n  \n  Locale get currentLocale => _currentLocale;\n  \n  void setLocale(Locale locale) {\n    if (_currentLocale != locale) {\n      _currentLocale = locale;\n      notifyListeners();\n    }\n  }\n  \n  void switchLanguage() {\n    final newLocale = _currentLocale.languageCode == ",
    "suggested_key": "uiLocaleGetCurrentlocale",
    "context": "LocaleProvider._internal();\n\n  // Standardsprache ist Deutsch\n  Locale _currentLocale = const Locale('de');\n  \n  Locale get currentLocale => _currentLocale;",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 2,
    "column": 8,
    "original": "package:flutter/foundation.dart",
    "suggested_key": "uiPackageflutterfoundationdart",
    "context": "import 'dart:convert';\nimport 'package:flutter/foundation.dart';\nimport 'package:http/http.dart' as http;\nimport '../../config/env.dart';\nimport '../../config/logger.dart';",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 58,
    "column": 64,
    "original": ";\n    _deviceFingerprint = fingerprint;\n    return fingerprint;\n  }\n\n  Map<String, String> get _headers {\n    final headers = <String, String>{\n      ",
    "suggested_key": "ui_devicefingerprintFingerprintReturn",
    "context": "}\n    final fingerprint = kIsWeb \n        ? 'web_browser_${DateTime.now().millisecondsSinceEpoch}'\n        : 'flutter_app_${DateTime.now().millisecondsSinceEpoch}';\n    _deviceFingerprint = fingerprint;\n    return fingerprint;\n  }",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 172,
    "column": 62,
    "original": "),\n          headers: _headers,\n        );\n      case ",
    "suggested_key": "uiHeaders_headersCase",
    "context": "switch (method) {\n      case 'GET':\n        return await http.get(\n          Uri.parse('${Env.apiUrl}${Env.apiBasePath}$endpoint'),\n          headers: _headers,\n        );\n      case 'POST':",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 175,
    "column": 17,
    "original": ":\n        final cachedBody = _requestBodies[endpoint];\n        if (cachedBody != null) {\n          return await http.post(\n            Uri.parse(",
    "suggested_key": "uiFinalCachedbody_requestbodiesendpoint",
    "context": "Uri.parse('${Env.apiUrl}${Env.apiBasePath}$endpoint'),\n          headers: _headers,\n        );\n      case 'POST':\n        final cachedBody = _requestBodies[endpoint];\n        if (cachedBody != null) {\n          return await http.post(",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 179,
    "column": 64,
    "original": "),\n            headers: _headers,\n            body: jsonEncode(cachedBody),\n          );\n        }\n        break;\n      case ",
    "suggested_key": "uiHeaders_headersBody",
    "context": "final cachedBody = _requestBodies[endpoint];\n        if (cachedBody != null) {\n          return await http.post(\n            Uri.parse('${Env.apiUrl}${Env.apiBasePath}$endpoint'),\n            headers: _headers,\n            body: jsonEncode(cachedBody),\n          );",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 185,
    "column": 16,
    "original": ":\n        final cachedBody = _requestBodies[endpoint];\n        if (cachedBody != null) {\n          return await http.put(\n            Uri.parse(",
    "suggested_key": "uiFinalCachedbody_requestbodiesendpoint",
    "context": ");\n        }\n        break;\n      case 'PUT':\n        final cachedBody = _requestBodies[endpoint];\n        if (cachedBody != null) {\n          return await http.put(",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 189,
    "column": 64,
    "original": "),\n            headers: _headers,\n            body: jsonEncode(cachedBody),\n          );\n        }\n        break;\n      case ",
    "suggested_key": "uiHeaders_headersBody",
    "context": "final cachedBody = _requestBodies[endpoint];\n        if (cachedBody != null) {\n          return await http.put(\n            Uri.parse('${Env.apiUrl}${Env.apiBasePath}$endpoint'),\n            headers: _headers,\n            body: jsonEncode(cachedBody),\n          );",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 197,
    "column": 62,
    "original": "),\n          headers: _headers,\n        );\n    }\n    return http.Response(",
    "suggested_key": "uiHeaders_headersReturn",
    "context": "break;\n      case 'DELETE':\n        return await http.delete(\n          Uri.parse('${Env.apiUrl}${Env.apiBasePath}$endpoint'),\n          headers: _headers,\n        );\n    }",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 201,
    "column": 47,
    "original": ", 500);\n  }\n\n  Future<http.Response> deleteWithBody(String endpoint, Map<String, dynamic> data) async {\n    await _ensureInitialized();\n    \n    // Erweiterte Request-Kontext-Verwaltung für parallele Requests\n    _requestBodies[endpoint] = data;\n    \n    // Automatische Token-Validierung für geschützte Endpoints\n    if (!endpoint.startsWith(",
    "suggested_key": "ui500FuturehttpresponseDeletewithbodystring",
    "context": "headers: _headers,\n        );\n    }\n    return http.Response('Request retry failed', 500);\n  }\n\n  Future<http.Response> deleteWithBody(String endpoint, Map<String, dynamic> data) async {",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 255,
    "column": 63,
    "original": " : body;\n    }\n    return body;\n  }\n\n\n  Future<http.Response> get(String endpoint) async {\n    await _ensureInitialized();\n    \n    // Log API Request\n    AppLogger.logApiRequest(",
    "suggested_key": "uiBodyReturnBody",
    "context": "}\n    } catch (e) {\n      // If JSON parsing fails, return truncated body\n      return body.length > 100 ? '${body.substring(0, 100)}...' : body;\n    }\n    return body;\n  }",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 274,
    "column": 60,
    "original": "),\n        headers: _headers,\n      );\n      \n      // Log API Response\n      AppLogger.logApiResponse(",
    "suggested_key": "uiHeaders_headersLog",
    "context": "try {\n      final response = await http.get(\n        Uri.parse('${Env.apiUrl}${Env.apiBasePath}$endpoint'),\n        headers: _headers,\n      );",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 312,
    "column": 60,
    "original": "),\n        headers: _headers,\n        body: jsonEncode(data),\n      );\n      \n      // Log API Response (ohne sensitive Response-Daten)\n      final logResponseBody = endpoint.startsWith(",
    "suggested_key": "uiHeaders_headersBody",
    "context": "try {\n      final response = await http.post(\n        Uri.parse('${Env.apiUrl}${Env.apiBasePath}$endpoint'),\n        headers: _headers,\n        body: jsonEncode(data),\n      );",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 345,
    "column": 60,
    "original": "),\n        headers: _headers,\n        body: jsonEncode(data),\n      );\n      \n      // Log API Response\n      AppLogger.logApiResponse(",
    "suggested_key": "uiHeaders_headersBody",
    "context": "try {\n      final response = await http.put(\n        Uri.parse('${Env.apiUrl}${Env.apiBasePath}$endpoint'),\n        headers: _headers,\n        body: jsonEncode(data),\n      );",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 374,
    "column": 60,
    "original": "),\n        headers: _headers,\n      );\n      \n      // Log API Response\n      AppLogger.logApiResponse(",
    "suggested_key": "uiHeaders_headersLog",
    "context": "try {\n      final response = await http.delete(\n        Uri.parse('${Env.apiUrl}${Env.apiBasePath}$endpoint'),\n        headers: _headers,\n      );",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 201,
    "column": 47,
    "original": ", 500);\n  }\n\n  Future<http.Response> deleteWithBody(String endpoint, Map<String, dynamic> data) async {\n    await _ensureInitialized();\n    \n    // Erweiterte Request-Kontext-Verwaltung für parallele Requests\n    _requestBodies[endpoint] = data;\n    \n    // Automatische Token-Validierung für geschützte Endpoints\n    if (!endpoint.startsWith(",
    "suggested_key": "ui500FuturehttpresponseDeletewithbodystring",
    "context": "headers: _headers,\n        );\n    }\n    return http.Response('Request retry failed', 500);\n  }\n\n  Future<http.Response> deleteWithBody(String endpoint, Map<String, dynamic> data) async {",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\token_storage.dart",
    "line": 1,
    "column": 8,
    "original": "package:flutter/foundation.dart",
    "suggested_key": "uiPackageflutterfoundationdart",
    "context": "import 'package:flutter/foundation.dart' show kIsWeb;\nimport 'package:flutter_secure_storage/flutter_secure_storage.dart';\nimport 'package:shared_preferences/shared_preferences.dart';",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 289,
    "column": 45,
    "original": "🎮 Spiele • 🌍 Erkunde • 🤝 Verbinde",
    "suggested_key": "uiSpieleErkundeVerbinde",
    "context": "borderRadius: BorderRadius.circular(20),\n                                          ),\n                                          child: Text(\n                                            '🎮 Spiele • 🌍 Erkunde • 🤝 Verbinde',\n                                            style: TextStyle(\n                                              color: AppTheme.primaryColor.withOpacity(0.9),\n                                              fontSize: 14,",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 356,
    "column": 61,
    "original": "Keine Kreditkarte erforderlich",
    "suggested_key": "uiKeineKreditkarteErforderlich",
    "context": "),\n                                                          ),\n                                                          Text(\n                                                            'Keine Kreditkarte erforderlich',\n                                                            style: TextStyle(\n                                                              color: Colors.white.withOpacity(0.8),\n                                                              fontSize: 12,",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 428,
    "column": 75,
    "original": "),\n                                          ],\n                                        ),\n                                      ],\n                                    ),\n                                  ),\n                                ),\n                              ),\n                            ),\n                          ),\n                        ),\n                      ),\n                    ),\n                  ),\n                ),\n                \n                // Scroll indicator\n                if (_showFeatures)\n                  FadeTransition(\n                    opacity: _featureAnimation,\n                    child: Container(\n                      padding: const EdgeInsets.only(bottom: 20),\n                      child: Column(\n                        children: [\n                          Text(\n                            ",
    "suggested_key": "uiScrollIndicatorIf",
    "context": "width: 1,\n                                              color: Colors.grey[700],\n                                            ),\n                                            _buildStatItem('24/7', 'Online'),\n                                          ],\n                                        ),\n                                      ],",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 453,
    "column": 43,
    "original": ",\n                            style: TextStyle(\n                              color: Colors.grey[400],\n                              fontSize: 14,\n                            ),\n                          ),\n                          const SizedBox(height: 8),\n                          const Icon(\n                            Icons.expand_more,\n                            color: AppTheme.primaryColor,\n                            size: 30,\n                          ),\n                        ],\n                      ),\n                    ),\n                  ),\n                \n                // Features Section\n                if (_showFeatures)\n                  FadeTransition(\n                    opacity: _featureAnimation,\n                    child: Container(\n                      padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 60),\n                      child: Column(\n                        children: [\n                          const Text(\n                            ",
    "suggested_key": "uiStyleTextstyleColor",
    "context": "child: Column(\n                        children: [\n                          Text(\n                            'Entdecke mehr',\n                            style: TextStyle(\n                              color: Colors.grey[400],\n                              fontSize: 14,",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 489,
    "column": 29,
    "original": "Erlebe Gaming auf einem neuen Level",
    "suggested_key": "uiErlebeGamingAuf",
    "context": "),\n                          const SizedBox(height: 16),\n                          Text(\n                            'Erlebe Gaming auf einem neuen Level',\n                            style: TextStyle(\n                              fontSize: 18,\n                              color: Colors.grey[300],",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 526,
    "column": 50,
    "original": "Modernste Sicherheit und faire Spielregeln für alle",
    "suggested_key": "uiModernsteSicherheitUnd",
    "context": "_buildFeatureCard(\n                                    icon: Icons.security,\n                                    title: 'Sicher & Fair',\n                                    description: 'Modernste Sicherheit und faire Spielregeln für alle',\n                                    color: Colors.orange,\n                                  ),\n                                  _buildFeatureCard(",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: Card",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 532,
    "column": 50,
    "original": "Optimierte Server für minimale Latenz",
    "suggested_key": "uiOptimierteServerFür",
    "context": "_buildFeatureCard(\n                                    icon: Icons.speed,\n                                    title: 'Blitzschnell',\n                                    description: 'Optimierte Server für minimale Latenz',\n                                    color: Colors.purple,\n                                  ),\n                                  _buildFeatureCard(",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: Card",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 538,
    "column": 50,
    "original": "Auf PC, Tablet oder Smartphone - immer dabei",
    "suggested_key": "uiAufPcTablet",
    "context": "_buildFeatureCard(\n                                    icon: Icons.devices,\n                                    title: 'Überall spielen',\n                                    description: 'Auf PC, Tablet oder Smartphone - immer dabei',\n                                    color: Colors.red,\n                                  ),\n                                  _buildFeatureCard(",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: Card",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 544,
    "column": 50,
    "original": "Sammle Erfolge und exklusive Belohnungen",
    "suggested_key": "uiSammleErfolgeUnd",
    "context": "_buildFeatureCard(\n                                    icon: Icons.star,\n                                    title: 'Belohnungen',\n                                    description: 'Sammle Erfolge und exklusive Belohnungen',\n                                    color: Colors.amber,\n                                  ),\n                                ],",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: Card",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 572,
    "column": 35,
    "original": "Bereit für dein Abenteuer?",
    "suggested_key": "uiBereitFürDein",
    "context": "child: Column(\n                              children: [\n                                const Text(\n                                  'Bereit für dein Abenteuer?',\n                                  style: TextStyle(\n                                    fontSize: 28,\n                                    fontWeight: FontWeight.bold,",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 544,
    "column": 50,
    "original": "Sammle Erfolge und exklusive Belohnungen",
    "suggested_key": "uiSammleErfolgeUnd",
    "context": "_buildFeatureCard(\n                                    icon: Icons.star,\n                                    title: 'Belohnungen',\n                                    description: 'Sammle Erfolge und exklusive Belohnungen',\n                                    color: Colors.amber,\n                                  ),\n                                ],",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: Card",
    "quote_type": "'"
  },
  {
    "file": "lib\\main.dart",
    "line": 3,
    "column": 8,
    "original": "package:flutter/foundation.dart",
    "suggested_key": "uiPackageflutterfoundationdart",
    "context": "import 'package:flutter/material.dart';\nimport 'package:flutter/services.dart';\nimport 'package:flutter/foundation.dart';\nimport 'app.dart';\nimport 'config/logger.dart';",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\main.dart",
    "line": 5,
    "column": 27,
    "original": ";\n\n// Service-Container für Dependency Injection\nclass ServiceLocator {\n  static final Map<Type, dynamic> _services = {};\n\n  static void register<T>(T service) {\n    _services[T] = service;\n  }\n\n  static T get<T>() {\n    final service = _services[T];\n    if (service == null) {\n      throw Exception(",
    "suggested_key": "uiServicecontainerFürDependency",
    "context": "import 'package:flutter/services.dart';\nimport 'package:flutter/foundation.dart';\nimport 'app.dart';\nimport 'config/logger.dart';\n\n// Service-Container für Dependency Injection\nclass ServiceLocator {",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 435,
    "column": 21,
    "original": "Die angeforderte Seite existiert nicht oder wurde verschoben.",
    "suggested_key": "uiDieAngeforderteSeite",
    "context": "),\n                  const SizedBox(height: 16),\n                  Text(\n                    'Die angeforderte Seite existiert nicht oder wurde verschoben.',\n                    style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                      color: AppTheme.textSecondary,\n                    ),",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 518,
    "column": 21,
    "original": "Du musst dich anmelden, um auf diese Seite zuzugreifen.",
    "suggested_key": "uiDuMusstDich",
    "context": "),\n                  const SizedBox(height: 16),\n                  Text(\n                    'Du musst dich anmelden, um auf diese Seite zuzugreifen.',\n                    style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                      color: AppTheme.textSecondary,\n                    ),",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 210,
    "column": 31,
    "original": ",\n                  style: TextStyle(\n                    color: Colors.grey[400],\n                    fontSize: 12,\n                  ),\n                ),\n              ],\n            ),\n            const SizedBox(width: 12),\n            Icon(\n              Icons.keyboard_arrow_down,\n              color: Colors.grey[400],\n              size: 24,\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n  \n  Widget _buildExpandedView(List<NavigationItem> items) {\n    return Column(\n      mainAxisSize: MainAxisSize.min,\n      crossAxisAlignment: CrossAxisAlignment.start,\n      children: [\n        // Header\n        InkWell(\n          onTap: _toggleExpanded,\n          borderRadius: const BorderRadius.only(\n            topLeft: Radius.circular(16),\n            topRight: Radius.circular(16),\n          ),\n          child: Padding(\n            padding: const EdgeInsets.all(12.0),\n            child: Row(\n              mainAxisSize: MainAxisSize.min,\n              children: [\n                Container(\n                  width: 36,\n                  height: 36,\n                  decoration: BoxDecoration(\n                    color: AppTheme.primaryColor.withOpacity(0.2),\n                    shape: BoxShape.circle,\n                  ),\n                  child: const Icon(\n                    Icons.explore,\n                    color: AppTheme.primaryColor,\n                    size: 20,\n                  ),\n                ),\n                const SizedBox(width: 12),\n                const Text(\n                  ",
    "suggested_key": "uiStyleTextstyleColor",
    "context": "),\n                ),\n                Text(\n                  'Menü öffnen',\n                  style: TextStyle(\n                    color: Colors.grey[400],\n                    fontSize: 12,",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\splash_screen.dart",
    "line": 2,
    "column": 33,
    "original": ";\n\nclass SplashScreen extends StatefulWidget {\n  final Future<void> Function() initializationFunction;\n  final Widget child;\n  final String? loadingText;\n  final Duration? timeout;\n  final VoidCallback? onTimeout;\n  final List<String>? initSteps;\n  final String? appName;\n  final Widget? logo;\n\n  const SplashScreen({\n    super.key,\n    required this.initializationFunction,\n    required this.child,\n    this.loadingText,\n    this.timeout,\n    this.onTimeout,\n    this.initSteps,\n    this.appName = ",
    "suggested_key": "uiClassSplashscreenExtends",
    "context": "import 'package:flutter/material.dart';\nimport '../../config/logger.dart';\n\nclass SplashScreen extends StatefulWidget {\n  final Future<void> Function() initializationFunction;",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\splash_screen.dart",
    "line": 65,
    "column": 31,
    "original": ") {\n          _timedOut = true;\n          final onTimeout = widget.onTimeout;\n          if (onTimeout != null) {\n            onTimeout();\n          }\n        }\n      } else {\n        await _runInitializationWithSteps();\n      }\n      \n      if (mounted) {\n        setState(() {\n          _isInitialized = true;\n        });\n        \n        // Kurze Verzögerung für smooth Transition\n        await Future.delayed(const Duration(milliseconds: 500));\n        \n        // KEIN reverse() mehr - das hat die App ausgeblendet!\n        // _animationController.reverse(); // ENTFERNT\n      }\n    } catch (e) {\n      AppLogger.logError(",
    "suggested_key": "ui_timedoutTrueFinal",
    "context": "}),\n        ]);\n        \n        if (result == 'timeout') {\n          _timedOut = true;\n          final onTimeout = widget.onTimeout;\n          if (onTimeout != null) {",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\splash_screen.dart",
    "line": 174,
    "column": 37,
    "original": ",\n              style: const TextStyle(\n                fontSize: 32,\n                fontWeight: FontWeight.bold,\n                color: Colors.white,\n              ),\n            ),\n            \n            const SizedBox(height: 20),\n            \n            // Progress Indicator mit Steps\n            if (initSteps != null && initSteps.isNotEmpty) ...[\n              // Progress Bar\n              Container(\n                width: 200,\n                height: 4,\n                decoration: BoxDecoration(\n                  color: Colors.white.withOpacity(0.3),\n                  borderRadius: BorderRadius.circular(2),\n                ),\n                child: FractionallySizedBox(\n                  alignment: Alignment.centerLeft,\n                  widthFactor: (_currentStepIndex + 1) / initSteps.length,\n                  child: Container(\n                    decoration: BoxDecoration(\n                      color: Colors.white,\n                      borderRadius: BorderRadius.circular(2),\n                    ),\n                  ),\n                ),\n              ),\n              \n              const SizedBox(height: 10),\n              \n              // Current Step Text\n              if (_currentStepName != null)\n                Text(\n                  _currentStepName ?? ",
    "suggested_key": "uiStyleConstTextstyle",
    "context": "// App Name\n            Text(\n              widget.appName ?? 'App',\n              style: const TextStyle(\n                fontSize: 32,\n                fontWeight: FontWeight.bold,",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\splash_screen.dart",
    "line": 211,
    "column": 56,
    "original": ",\n                  style: const TextStyle(\n                    fontSize: 14,\n                    color: Colors.white70,\n                  ),\n                ),\n              \n              const SizedBox(height: 20),\n            ] else ...[\n              // Standard Loading Indicator\n              const CircularProgressIndicator(\n                valueColor: AlwaysStoppedAnimation<Color>(Colors.white),\n              ),\n            ],\n            \n            if (loadingText != null) ...[\n              const SizedBox(height: 20),\n              Text(\n                loadingText,\n                style: const TextStyle(\n                  fontSize: 16,\n                  color: Colors.white70,\n                ),\n              ),\n            ],\n            \n            // Timeout Warning\n            if (_timedOut) ...[\n              const SizedBox(height: 20),\n              Container(\n                padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),\n                decoration: BoxDecoration(\n                  color: Colors.orange.withOpacity(0.2),\n                  borderRadius: BorderRadius.circular(20),\n                  border: Border.all(color: Colors.orange.withOpacity(0.5)),\n                ),\n                child: const Text(\n                  ",
    "suggested_key": "uiStyleConstTextstyle",
    "context": "// Current Step Text\n              if (_currentStepName != null)\n                Text(\n                  _currentStepName ?? 'Initialisiere...',\n                  style: const TextStyle(\n                    fontSize: 14,\n                    color: Colors.white70,",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\splash_screen.dart",
    "line": 248,
    "column": 65,
    "original": ",\n                  style: TextStyle(\n                    fontSize: 12,\n                    color: Colors.orange,\n                  ),\n                ),\n              ),\n            ],\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildErrorScreen() {\n    return Scaffold(\n      backgroundColor: Colors.red.shade50,\n      body: Center(\n        child: Padding(\n          padding: const EdgeInsets.all(20),\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: [\n              Icon(\n                Icons.error_outline,\n                size: 80,\n                color: Colors.red.shade400,\n              ),\n              \n              const SizedBox(height: 20),\n              \n              const Text(\n                ",
    "suggested_key": "uiStyleTextstyleFontsize",
    "context": "border: Border.all(color: Colors.orange.withOpacity(0.5)),\n                ),\n                child: const Text(\n                  'Initialisierung dauert länger als erwartet...',\n                  style: TextStyle(\n                    fontSize: 12,\n                    color: Colors.orange,",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\user_info_widget.dart",
    "line": 179,
    "column": 57,
    "original": ",\n                                    style: TextStyle(\n                                      color: Colors.grey[400],\n                                      fontSize: 12,\n                                    ),\n                                  ),\n                              ],\n                            ),\n                          ),\n                          // Expand/Collapse Icon\n                          Icon(\n                            _isExpanded ? Icons.expand_less : Icons.expand_more,\n                            color: Colors.grey[400],\n                            size: 20,\n                          ),\n                        ],\n                      ),\n                      \n                      // Erweiterte Details\n                      if (_isExpanded) ...[\n                        const SizedBox(height: 12),\n                        const Divider(color: Colors.grey, height: 1),\n                        const SizedBox(height: 12),\n                        \n                        // Email\n                        Row(\n                          children: [\n                            Icon(Icons.email_outlined, size: 16, color: Colors.grey[400]),\n                            const SizedBox(width: 8),\n                            Expanded(\n                              child: Text(\n                                user.email,\n                                style: TextStyle(\n                                  color: Colors.grey[300],\n                                  fontSize: 14,\n                                ),\n                                overflow: TextOverflow.ellipsis,\n                              ),\n                            ),\n                          ],\n                        ),\n                        \n                        const SizedBox(height: 8),\n                        \n                                            // Rollen\n                    if (user.roles != null && user.roles!.isNotEmpty) ...[\n                      Row(\n                        children: [\n                          Icon(Icons.security, size: 16, color: Colors.grey[400]),\n                          const SizedBox(width: 8),\n                          Text(\n                            ",
    "suggested_key": "uiStyleTextstyleColor",
    "context": "),\n                                if (!_isExpanded)\n                                  Text(\n                                    'Klicken für Details',\n                                    style: TextStyle(\n                                      color: Colors.grey[400],\n                                      fontSize: 12,",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\user_info_widget.dart",
    "line": 230,
    "column": 37,
    "original": ",\n                            style: TextStyle(\n                              color: Colors.grey[400],\n                              fontSize: 14,\n                            ),\n                          ),\n                        ],\n                      ),\n                      const SizedBox(height: 6),\n                      Wrap(\n                        spacing: 6,\n                        runSpacing: 6,\n                        children: (user.roles ?? []).map((userRole) {\n                              final roleName = userRole.role.name;\n                              final scopeInfo = userRole.scopeType == ",
    "suggested_key": "uiStyleTextstyleColor",
    "context": "Icon(Icons.security, size: 16, color: Colors.grey[400]),\n                          const SizedBox(width: 8),\n                          Text(\n                            'Rollen:',\n                            style: TextStyle(\n                              color: Colors.grey[400],\n                              fontSize: 14,",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\user_info_widget.dart",
    "line": 246,
    "column": 62,
    "original": ";\n                              \n                              return Container(\n                                padding: const EdgeInsets.symmetric(\n                                  horizontal: 8,\n                                  vertical: 4,\n                                ),\n                                decoration: BoxDecoration(\n                                  color: _getRoleColor(roleName).withOpacity(0.2),\n                                  borderRadius: BorderRadius.circular(12),\n                                  border: Border.all(\n                                    color: _getRoleColor(roleName).withOpacity(0.5),\n                                    width: 1,\n                                  ),\n                                ),\n                                child: Row(\n                                  mainAxisSize: MainAxisSize.min,\n                                  children: [\n                                    Icon(\n                                      Icons.badge,\n                                      size: 12,\n                                      color: _getRoleColor(roleName),\n                                    ),\n                                    const SizedBox(width: 4),\n                                    Text(\n                                      ",
    "suggested_key": "uiReturnContainerPadding",
    "context": "final roleName = userRole.role.name;\n                              final scopeInfo = userRole.scopeType == 'global' \n                                  ? '' \n                                  : ' (${userRole.scopeType})';\n                              \n                              return Container(\n                                padding: const EdgeInsets.symmetric(",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\user_info_widget.dart",
    "line": 271,
    "column": 59,
    "original": ",\n                                      style: TextStyle(\n                                        color: _getRoleColor(roleName),\n                                        fontSize: 12,\n                                        fontWeight: FontWeight.w500,\n                                      ),\n                                    ),\n                                  ],\n                                ),\n                              );\n                            }).toList(),\n                          ),\n                        ],\n                        \n                        const SizedBox(height: 12),\n                        const Divider(color: Colors.grey, height: 1),\n                        const SizedBox(height: 8),\n                        \n                        // Logout Button\n                        SizedBox(\n                          width: double.infinity,\n                          child: TextButton.icon(\n                            onPressed: () async {\n                              await _authService.logout();\n                              if (context.mounted) {\n                                context.goNamed(",
    "suggested_key": "uiStyleTextstyleColor",
    "context": "),\n                                    const SizedBox(width: 4),\n                                    Text(\n                                      '$roleName$scopeInfo',\n                                      style: TextStyle(\n                                        color: _getRoleColor(roleName),\n                                        fontSize: 12,",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\user_info_widget.dart",
    "line": 179,
    "column": 57,
    "original": ",\n                                    style: TextStyle(\n                                      color: Colors.grey[400],\n                                      fontSize: 12,\n                                    ),\n                                  ),\n                              ],\n                            ),\n                          ),\n                          // Expand/Collapse Icon\n                          Icon(\n                            _isExpanded ? Icons.expand_less : Icons.expand_more,\n                            color: Colors.grey[400],\n                            size: 20,\n                          ),\n                        ],\n                      ),\n                      \n                      // Erweiterte Details\n                      if (_isExpanded) ...[\n                        const SizedBox(height: 12),\n                        const Divider(color: Colors.grey, height: 1),\n                        const SizedBox(height: 12),\n                        \n                        // Email\n                        Row(\n                          children: [\n                            Icon(Icons.email_outlined, size: 16, color: Colors.grey[400]),\n                            const SizedBox(width: 8),\n                            Expanded(\n                              child: Text(\n                                user.email,\n                                style: TextStyle(\n                                  color: Colors.grey[300],\n                                  fontSize: 14,\n                                ),\n                                overflow: TextOverflow.ellipsis,\n                              ),\n                            ),\n                          ],\n                        ),\n                        \n                        const SizedBox(height: 8),\n                        \n                                            // Rollen\n                    if (user.roles != null && user.roles!.isNotEmpty) ...[\n                      Row(\n                        children: [\n                          Icon(Icons.security, size: 16, color: Colors.grey[400]),\n                          const SizedBox(width: 8),\n                          Text(\n                            ",
    "suggested_key": "uiStyleTextstyleColor",
    "context": "),\n                                if (!_isExpanded)\n                                  Text(\n                                    'Klicken für Details',\n                                    style: TextStyle(\n                                      color: Colors.grey[400],\n                                      fontSize: 12,",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\theme\\background_widget.dart",
    "line": 2,
    "column": 23,
    "original": ";\n\nclass BackgroundWidget extends StatelessWidget {\n  final Widget child;\n  final bool showOverlay;\n\n  const BackgroundWidget({\n    super.key,\n    required this.child,\n    this.showOverlay = false, // Changed default to false\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      decoration: const BoxDecoration(\n        image: DecorationImage(\n          image: AssetImage(",
    "suggested_key": "uiClassBackgroundwidgetExtends",
    "context": "import 'package:flutter/material.dart';\nimport 'app_theme.dart';\n\nclass BackgroundWidget extends StatelessWidget {\n  final Widget child;",
    "category": "ui",
    "confidence": 0.8,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 281,
    "column": 87,
    "original": " $actionTypeText.$validityText';\n    \n    // Je nach Status unterschiedliche Logik\n    switch (status) {\n      case 'not_logged_in':\n        if (requiresAction == 'register') {\n          // Mail ist unbekannt -> nur Register\n          actionText = 'Du musst dich mit der E-Mail-Adresse $inviteEmail registrieren.';\n          infoText = '$baseInfoText\\n\\n$actionText';\n          showRegisterButton = isInviteValid; // Nur bei gültigen Invites\n        }\n        break;\n        \n      case 'user_exists_not_logged_in':\n        if (requiresAction == 'login') {\n          // Mail ist bekannt, User nicht angemeldet -> nur Login\n          actionText = 'Dein Account mit $inviteEmail ist bereits registriert. Bitte melde dich an.';\n          infoText = '$baseInfoText\\n\\n$actionText';\n          showLoginButton = isInviteValid; // Nur bei gültigen Invites\n        }\n        break;\n        \n      case 'wrong_email':\n        if (requiresAction == 'logout_and_register') {\n          final currentUserEmail = userStatusData['currentUser']?['email'];\n          // User mit falscher Mail angemeldet -> Logout + Register\n          actionText = 'Diese Einladung ist für $inviteEmail bestimmt, aber du bist als $currentUserEmail angemeldet.';\n          infoText = '$baseInfoText\\n\\n$actionText\\n\\nBitte melde dich ab und registriere dich mit der richtigen E-Mail-Adresse.';\n          showLogoutButton = isInviteValid; // Nur bei gültigen Invites\n        }\n        break;\n        \n      case 'correct_email':\n        if (requiresAction == 'join_world') {\n          // User richtig angemeldet -> nur Accept Button (KEIN Auto-Accept!)\n          actionText = 'Du bist mit der richtigen E-Mail-Adresse angemeldet und kannst die Einladung jetzt annehmen.';\n          infoText = '$baseInfoText\\n\\n$actionText';\n          showAcceptButton = isInviteValid; // Nur bei gültigen Invites\n          \n          // Auto-Accept entfernt: User soll bewusst entscheiden!\n        }\n        break;\n        \n      default:\n        AppLogger.app.w('❌ Unbekannter User-Status: $status');\n        actionText = 'Unbekannter Status: $status';\n        infoText = '$baseInfoText\\n\\n$actionText';\n    }\n    \n    // Bei ungültigen Invites zusätzliche Info\n    if (!isInviteValid) {\n      infoText += '\\n\\n⚠️ Diese Einladung kann nicht mehr verwendet werden.';\n    }\n    \n    setState(() {\n      _infoMessage = infoText;\n      _inviteEmail = inviteEmail;\n      \n      // Button-Flags setzen\n      _showLoginButton = showLoginButton;\n      _showRegistrationButton = showRegisterButton; \n      _showLogoutButton = showLogoutButton;\n      _showAcceptInviteButton = showAcceptButton;\n      \n      // WICHTIG: Alte Fehlermeldung zurücksetzen!\n      _errorMessage = null;\n      \n      _isLoading = false;\n    });\n  }\n\n  // Neue Methode: World-Status für normale Navigation prüfen\n  Future<void> _checkWorldStatus() async {\n    if (_world == null) return;\n    \n    try {\n      // Prüfe ob User bereits Mitglied ist\n      _isJoined = await _worldService.isPlayerInWorld(_world!.id);\n      \n      // Prüfe Vorregistrierung\n      final preRegStatus = await _worldService.getPreRegistrationStatus(_world!.id);\n      _isPreRegistered = preRegStatus.isPreRegistered;\n      \n      AppLogger.app.d('✅ World-Status geprüft', error: {\n        'worldName': _world!.name,\n        'isJoined': _isJoined,\n        'isPreRegistered': _isPreRegistered\n      });\n    } catch (e) {\n      AppLogger.logError('Fehler beim Prüfen des World-Status', e);\n    }\n  }\n\n  // Neue Methode: Automatische Invite-Akzeptierung\n  Future<void> _autoAcceptInvite() async {\n    if (widget.inviteToken == null) return;\n    \n    try {\n      final result = await _worldService.acceptInvite(widget.inviteToken!);\n      \n      if (result != null) {\n        setState(() {\n          _isJoined = true;\n          _infoMessage = 'Willkommen in der Welt ",
    "suggested_key": "worldActiontypetextvaliditytextJeNach",
    "context": "}\n    }\n    \n    final baseInfoText = 'Du wurdest von $inviterText eingeladen, der Welt \"$worldName\" $actionTypeText.$validityText';\n    \n    // Je nach Status unterschiedliche Logik\n    switch (status) {",
    "category": "world",
    "confidence": 0.8,
    "widget_context": "Widget: Text",
    "quote_type": "\""
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 384,
    "column": 66,
    "original": "! Das Invite wurde automatisch akzeptiert.';\n        });\n        \n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Erfolgreich der Welt ",
    "suggested_key": "worldDasInviteWurde",
    "context": "if (result != null) {\n        setState(() {\n          _isJoined = true;\n          _infoMessage = 'Willkommen in der Welt \"${_world?.name}\"! Das Invite wurde automatisch akzeptiert.';\n        });\n        \n        if (mounted) {",
    "category": "world",
    "confidence": 0.8,
    "widget_context": "Widget: unknown",
    "quote_type": "\""
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 390,
    "column": 67,
    "original": " beigetreten!'),\n              backgroundColor: Colors.green,\n              duration: const Duration(seconds: 3),\n            ),\n          );\n        }\n      }\n    } catch (e) {\n      // SPEZIALBEHANDLUNG: ",
    "suggested_key": "worldBeigetretenBackgroundcolorColorsgreen",
    "context": "if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Erfolgreich der Welt \"${_world!.name}\" beigetreten!'),\n              backgroundColor: Colors.green,\n              duration: const Duration(seconds: 3),\n            ),",
    "category": "world",
    "confidence": 0.8,
    "widget_context": "Widget: Scaffold",
    "quote_type": "\""
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 402,
    "column": 80,
    "original": "!';\n        });\n        \n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Du bist bereits Mitglied der Welt ",
    "suggested_key": "worldIfMountedScaffoldmessengerofcontextshowsnackbar",
    "context": "if (e.toString().contains('Invite bereits akzeptiert')) {\n        setState(() {\n          _isJoined = true;\n          _infoMessage = 'Du bist bereits Mitglied dieser Welt \"${_world?.name}\"!';\n        });\n        \n        if (mounted) {",
    "category": "world",
    "confidence": 0.8,
    "widget_context": "Widget: unknown",
    "quote_type": "\""
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 408,
    "column": 80,
    "original": "!'),\n              backgroundColor: Colors.orange,\n              duration: const Duration(seconds: 3),\n            ),\n          );\n        }\n        return; // Erfolgreicher Exit\n      }\n      \n      // Andere Fehler normal behandeln\n      AppLogger.logError('Automatische Invite-Akzeptierung fehlgeschlagen', e);\n      // Fehler nicht als kritisch behandeln - User kann manuell beitreten\n      setState(() {\n        _infoMessage = 'Du kannst nun der Welt beitreten.';\n      });\n    }\n  }\n\n  Future<void> _joinWorld() async {\n    if (_world == null) return;\n\n    setState(() {\n      _isJoining = true;\n      _joinError = null;\n    });\n\n    try {\n      bool success = false;\n      \n      // **INVITE-TOKEN FLOW: Invite akzeptieren**\n      if (widget.inviteToken != null) {\n        AppLogger.app.i('🎫 Versuche Invite-Akzeptierung für World-Join');\n        final inviteResult = await _worldService.acceptInvite(widget.inviteToken!);\n        \n        if (inviteResult != null) {\n          success = true;\n          AppLogger.app.i('✅ Invite erfolgreich akzeptiert', error: {\n            'worldId': _world!.id,\n            'worldName': _world!.name\n          });\n        }\n      } else {\n        // **NORMALE NAVIGATION: Standard World-Join**\n        AppLogger.app.i('🌍 Versuche normalen World-Join');\n        success = await _worldService.joinWorld(_world!.id);\n      }\n      \n      if (success) {\n        setState(() {\n          _isJoined = true;\n        });\n        \n        if (mounted) {\n          final message = widget.inviteToken != null \n            ? 'Einladung akzeptiert! Willkommen in der Welt ",
    "suggested_key": "worldBackgroundcolorColorsorangeDuration",
    "context": "if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Du bist bereits Mitglied der Welt \"${_world?.name}\"!'),\n              backgroundColor: Colors.orange,\n              duration: const Duration(seconds: 3),\n            ),",
    "category": "world",
    "confidence": 0.8,
    "widget_context": "Widget: Scaffold",
    "quote_type": "\""
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 462,
    "column": 77,
    "original": "!'\n            : 'Erfolgreich der Welt ",
    "suggested_key": "worldErfolgreichDerWelt",
    "context": "if (mounted) {\n          final message = widget.inviteToken != null \n            ? 'Einladung akzeptiert! Willkommen in der Welt \"${_world!.name}\"!'\n            : 'Erfolgreich der Welt \"${_world!.name}\" beigetreten!';\n            \n          ScaffoldMessenger.of(context).showSnackBar(",
    "category": "world",
    "confidence": 0.8,
    "widget_context": "Widget: unknown",
    "quote_type": "\""
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 463,
    "column": 53,
    "original": " beigetreten!';\n            \n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text(message),\n              backgroundColor: Colors.green,\n              duration: const Duration(seconds: 3),\n            ),\n          );\n        }\n      } else {\n        setState(() {\n          _joinError = 'Beitritt fehlgeschlagen. Versuche es erneut.';\n        });\n      }\n    } catch (e) {\n      AppLogger.logError('World Join fehlgeschlagen', e, context: {\n        'worldId': _world?.id,\n        'worldName': _world?.name,\n        'hasInviteToken': widget.inviteToken != null,\n        'inviteToken': widget.inviteToken?.substring(0, 8)\n      });\n      \n      setState(() {\n        // Bessere Fehlermeldungen für verschiedene Szenarien\n        if (e.toString().contains('bereits akzeptiert')) {\n          _joinError = 'Diese Einladung wurde bereits akzeptiert.';\n          _isJoined = true; // User ist bereits Mitglied\n        } else if (e.toString().contains('nicht für deine E-Mail-Adresse')) {\n          _joinError = 'Diese Einladung ist nicht für deine E-Mail-Adresse bestimmt.';\n        } else if (e.toString().contains('abgelaufen')) {\n          _joinError = 'Diese Einladung ist abgelaufen.';\n        } else {\n          _joinError = 'Ein Fehler ist aufgetreten: ${e.toString().replaceAll('Exception: ', '')}';\n        }\n      });\n    } finally {\n      setState(() {\n        _isJoining = false;\n      });\n    }\n  }\n  \n  Future<void> _preRegisterWorld() async {\n    final world = _world;\n    if (world == null) return;\n\n    setState(() {\n      _isPreRegistering = true;\n      _joinError = null;\n    });\n\n    try {\n      final success = await _worldService.preRegisterWorldAuthenticated(world.id);\n      \n      if (success) {\n        setState(() {\n          _isPreRegistered = true;\n        });\n        \n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Erfolgreich für ${world.name} vorregistriert!'),\n              backgroundColor: Colors.green,\n            ),\n          );\n        }\n      } else {\n        setState(() {\n          _joinError = 'Fehler bei der Vorregistrierung';\n        });\n      }\n    } catch (e) {\n      setState(() {\n        _joinError = e.toString().replaceAll('Exception: ', '');\n      });\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isPreRegistering = false;\n        });\n      }\n    }\n  }\n  \n  Future<void> _cancelPreRegistration() async {\n    final world = _world;\n    if (world == null) return;\n\n    setState(() {\n      _isPreRegistering = true;\n      _joinError = null;\n    });\n\n    try {\n      final success = await _worldService.cancelPreRegistrationAuthenticated(world.id);\n      if (success) {\n        setState(() {\n          _isPreRegistered = false;\n        });\n        \n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Vorregistrierung für ${world.name} zurückgezogen.'),\n              backgroundColor: Colors.orange,\n            ),\n          );\n        }\n      } else {\n        setState(() {\n          _joinError = 'Fehler beim Zurückziehen der Vorregistrierung';\n        });\n      }\n    } catch (e) {\n      setState(() {\n        _joinError = e.toString().replaceAll('Exception: ', '');\n      });\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isPreRegistering = false;\n        });\n      }\n    }\n  }\n  \n  Future<void> _leaveWorld() async {\n    final world = _world;\n    if (world == null) return;\n    \n    // Bestätigungsdialog anzeigen\n    final confirmed = await showDialog<bool>(\n      context: context,\n      builder: (context) => AlertDialog(\n        title: const Text('Welt verlassen?'),\n        content: Text('Möchtest du die Welt ",
    "suggested_key": "worldBeigetretenScaffoldmessengerofcontextshowsnackbarSnackbar",
    "context": "if (mounted) {\n          final message = widget.inviteToken != null \n            ? 'Einladung akzeptiert! Willkommen in der Welt \"${_world!.name}\"!'\n            : 'Erfolgreich der Welt \"${_world!.name}\" beigetreten!';\n            \n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(",
    "category": "world",
    "confidence": 0.8,
    "widget_context": "Widget: unknown",
    "quote_type": "\""
  },
  {
    "file": "lib\\shared\\widgets\\invite_dialog.dart",
    "line": 58,
    "column": 43,
    "original": ",\n        style: const TextStyle(\n          color: Colors.white,\n          fontWeight: FontWeight.bold,\n        ),\n      ),\n      content: Form(\n        key: _formKey,\n        child: Column(\n          mainAxisSize: MainAxisSize.min,\n          children: [\n            Text(\n              ",
    "suggested_key": "worldStyleConstTextstyle",
    "context": "),\n      ),\n      title: Text(\n        'Einladung für ${widget.worldName}',\n        style: const TextStyle(\n          color: Colors.white,\n          fontWeight: FontWeight.bold,",
    "category": "world",
    "confidence": 0.8,
    "widget_context": "Widget: AlertDialog",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\pre_register_dialog.dart",
    "line": 78,
    "column": 50,
    "original": ",\n        style: const TextStyle(\n          color: Colors.white,\n          fontWeight: FontWeight.bold,\n        ),\n      ),\n      content: Form(\n        key: _formKey,\n        child: Column(\n          mainAxisSize: MainAxisSize.min,\n          children: [\n            Text(\n              ",
    "suggested_key": "worldStyleConstTextstyle",
    "context": "),\n      ),\n      title: Text(\n        'Vorregistrierung für ${widget.worldName}',\n        style: const TextStyle(\n          color: Colors.white,\n          fontWeight: FontWeight.bold,",
    "category": "world",
    "confidence": 0.8,
    "widget_context": "Widget: AlertDialog",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 52,
    "column": 9,
    "original": "Prüfe Authentifizierung...",
    "suggested_key": "authPrüfeAuthentifizierung",
    "context": "'Initialisiere App...',\n        'Lade Konfiguration...',\n        'Starte Services...',\n        'Prüfe Authentifizierung...',\n        'Bereit!',\n      ],\n      appName: Env.appName,",
    "category": "auth",
    "confidence": 0.7999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 112,
    "column": 27,
    "original": "⚠️ Tokens ungültig - logout",
    "suggested_key": "authTokensUngültigLogout",
    "context": "AppLogger.app.i('🔑 Tokens valid: $isValid');\n        \n        if (!isValid) {\n          AppLogger.app.w('⚠️ Tokens ungültig - logout');\n          await authService.logout();\n        }\n      } catch (e) {",
    "category": "auth",
    "confidence": 0.7999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 72,
    "column": 49,
    "original": ";\n    }\n    \n    return headers;\n  }\n\n  // Vollständige Token-Validierung mit JWT-Decoding (mit Rekursionsschutz)\n  Future<void> _ensureValidToken() async {\n    if (_token != null && !_isValidatingToken) {\n      _isValidatingToken = true;\n      try {\n        final token = _token;\n        if (token == null) return;\n        final parts = token.split(",
    "suggested_key": "authReturnHeadersVollständige",
    "context": "};\n    \n    if (_token != null) {\n      headers['Authorization'] = 'Bearer $_token';\n    }\n    \n    return headers;",
    "category": "auth",
    "confidence": 0.7999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 123,
    "column": 27,
    "original": "🔄 Proaktive Token-Erneuerung - läuft ab in ${expiresIn}s",
    "suggested_key": "authProaktiveTokenerneuerungLäuft",
    "context": "final expiresIn = int.tryParse(response.headers['x-token-expires-in'] ?? '0');\n      if (expiresIn != null && expiresIn < 60) {\n        try {\n          AppLogger.api.i('🔄 Proaktive Token-Erneuerung - läuft ab in ${expiresIn}s');\n          \n          final refreshed = await _authService.refreshTokenIfNeeded();\n          if (refreshed) {",
    "category": "auth",
    "confidence": 0.7999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 230,
    "column": 36,
    "original": ";\n      } else {\n        sanitized[entry.key] = entry.value;\n      }\n    }\n    return sanitized;\n  }\n\n  // Helper für das Sanitieren von sensiblen Daten aus der Response-Body\n  String _sanitizeAuthResponse(String body) {\n    try {\n      final decodedBody = jsonDecode(body);\n      if (decodedBody is Map<String, dynamic>) {\n        final sanitized = <String, dynamic>{};\n        for (final entry in decodedBody.entries) {\n          if (entry.key.contains(",
    "suggested_key": "authElseSanitizedentrykeyEntryvalue",
    "context": "final sanitized = <String, dynamic>{};\n    for (final entry in data.entries) {\n      if (entry.key == 'password' || entry.key == 'token') {\n        sanitized[entry.key] = '***';\n      } else {\n        sanitized[entry.key] = entry.value;\n      }",
    "category": "auth",
    "confidence": 0.7999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 265,
    "column": 33,
    "original": ", endpoint, headers: _headers);\n    \n    // Automatische Token-Validierung für geschützte Endpoints\n    if (!endpoint.startsWith(",
    "suggested_key": "authEndpointHeaders_headers",
    "context": "await _ensureInitialized();\n    \n    // Log API Request\n    AppLogger.logApiRequest('GET', endpoint, headers: _headers);\n    \n    // Automatische Token-Validierung für geschützte Endpoints\n    if (!endpoint.startsWith('/auth/')) {",
    "category": "auth",
    "confidence": 0.7999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 303,
    "column": 34,
    "original": ", endpoint, headers: _headers, body: logBody);\n    \n    // Automatische Token-Validierung für geschützte Endpoints\n    if (!endpoint.startsWith(",
    "suggested_key": "authEndpointHeaders_headers",
    "context": "// Log API Request (ohne sensitive Daten für Auth-Endpoints)\n    final logBody = endpoint.startsWith('/auth/') ? _sanitizeAuthData(data) : data;\n    AppLogger.logApiRequest('POST', endpoint, headers: _headers, body: logBody);\n    \n    // Automatische Token-Validierung für geschützte Endpoints\n    if (!endpoint.startsWith('/auth/')) {",
    "category": "auth",
    "confidence": 0.7999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 336,
    "column": 33,
    "original": ", endpoint, headers: _headers, body: data);\n    \n    // Automatische Token-Validierung für geschützte Endpoints\n    if (!endpoint.startsWith(",
    "suggested_key": "authEndpointHeaders_headers",
    "context": "_requestBodies[endpoint] = data;\n    \n    // Log API Request\n    AppLogger.logApiRequest('PUT', endpoint, headers: _headers, body: data);\n    \n    // Automatische Token-Validierung für geschützte Endpoints\n    if (!endpoint.startsWith('/auth/')) {",
    "category": "auth",
    "confidence": 0.7999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 365,
    "column": 36,
    "original": ", endpoint, headers: _headers);\n    \n    // Automatische Token-Validierung für geschützte Endpoints\n    if (!endpoint.startsWith(",
    "suggested_key": "authEndpointHeaders_headers",
    "context": "await _ensureInitialized();\n    \n    // Log API Request\n    AppLogger.logApiRequest('DELETE', endpoint, headers: _headers);\n    \n    // Automatische Token-Validierung für geschützte Endpoints\n    if (!endpoint.startsWith('/auth/')) {",
    "category": "auth",
    "confidence": 0.7999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\pre_register_dialog.dart",
    "line": 128,
    "column": 26,
    "original": "Bitte geben Sie eine gültige E-Mail-Adresse ein",
    "suggested_key": "dialogBitteGebenSie",
    "context": "return 'E-Mail-Adresse ist erforderlich';\n                }\n                if (!RegExp(r'^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$').hasMatch(value)) {\n                  return 'Bitte geben Sie eine gültige E-Mail-Adresse ein';\n                }\n                return null;\n              },",
    "category": "dialog",
    "confidence": 0.7999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 116,
    "column": 60,
    "original": ", error: e);\n        // Bei Token-Validierungsfehlern einfach ausloggen\n        await authService.logout();\n      }\n      \n      // 4. Gespeicherte User-Daten laden (nur wenn Tokens gültig)\n      if (isValid) {\n        try {\n          final user = await authService.loadStoredUser();\n          if (user != null) {\n            authService.isAuthenticated.value = true;\n            AppLogger.app.i(",
    "suggested_key": "errorErrorEBei",
    "context": "await authService.logout();\n        }\n      } catch (e) {\n        AppLogger.app.e('❌ Token-Validierung fehlgeschlagen', error: e);\n        // Bei Token-Validierungsfehlern einfach ausloggen\n        await authService.logout();\n      }",
    "category": "error",
    "confidence": 0.7999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 135,
    "column": 25,
    "original": "👤 Keine gültigen Tokens - User-Load übersprungen",
    "suggested_key": "errorKeineGültigenTokens",
    "context": "AppLogger.app.e('❌ User-Load fehlgeschlagen', error: e);\n        }\n      } else {\n        AppLogger.app.i('👤 Keine gültigen Tokens - User-Load übersprungen');\n      }\n      \n      // Auth-Cache beim App-Start invalidieren",
    "category": "error",
    "confidence": 0.7999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 143,
    "column": 64,
    "original": ", error: e);\n      // Bei Auth-Service-Fehlern einfach weitermachen\n      // Die App kann auch ohne gültige Tokens funktionieren\n    }\n  }\n  \n  // Timeout-Callback für SplashScreen\n  void _onTimeout() {\n    AppLogger.app.w(",
    "suggested_key": "errorErrorEBei",
    "context": "AppLogger.app.i('✅ Initialisierung abgeschlossen');\n    } catch (e) {\n      AppLogger.app.e('❌ Service-Initialisierung fehlgeschlagen', error: e);\n      // Bei Auth-Service-Fehlern einfach weitermachen\n      // Die App kann auch ohne gültige Tokens funktionieren\n    }",
    "category": "error",
    "confidence": 0.7999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 108,
    "column": 61,
    "original": ", error: e);\n        await _authService.refreshTokenIfNeeded();\n      } finally {\n        _isValidatingToken = false;\n      }\n    }\n  }\n\n  // Response-Interceptor mit Header-Parsing für proaktive Token-Erneuerung\n  Future<http.Response> _handleResponse(http.Response response, String endpoint) async {\n    // Proaktive Token-Erneuerung basierend auf Response-Headers\n    if (response.headers[",
    "suggested_key": "errorErrorEAwait",
    "context": "}\n      } catch (e) {\n        // Token validation error\n        AppLogger.api.w('⚠️ Token-Validierung fehlgeschlagen', error: e);\n        await _authService.refreshTokenIfNeeded();\n      } finally {\n        _isValidatingToken = false;",
    "category": "error",
    "confidence": 0.7999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 157,
    "column": 56,
    "original": ", error: e);\n        // Bei Token-Refresh-Fehlern automatisch ausloggen\n        await _authService.logout();\n        // Cache invalidieren nach Logout\n        AppRouter.invalidateAuthCache();\n      }\n    }\n    return response;\n  }\n\n  // Vollständige Request-Wiederholung für alle HTTP-Methoden mit erweiterter Kontext-Verwaltung\n  Future<http.Response> _retryRequest(String endpoint, String method) async {\n    switch (method) {\n      case ",
    "suggested_key": "errorErrorEBei",
    "context": "}\n        }\n      } catch (e) {\n        AppLogger.api.e('❌ Token-Refresh fehlgeschlagen', error: e);\n        // Bei Token-Refresh-Fehlern automatisch ausloggen\n        await _authService.logout();\n        // Cache invalidieren nach Logout",
    "category": "error",
    "confidence": 0.7999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 290,
    "column": 33,
    "original": ", endpoint, error, stackTrace: stackTrace);\n      rethrow;\n    }\n  }\n\n  Future<http.Response> post(String endpoint, Map<String, dynamic> data) async {\n    await _ensureInitialized();\n    \n    // Erweiterte Request-Kontext-Verwaltung für parallele Requests\n    _requestBodies[endpoint] = data;\n    \n    // Log API Request (ohne sensitive Daten für Auth-Endpoints)\n    final logBody = endpoint.startsWith(",
    "suggested_key": "errorEndpointErrorStacktrace",
    "context": "return await _handleResponse(response, endpoint);\n    } catch (error, stackTrace) {\n      // Log API Error\n      AppLogger.logApiError('GET', endpoint, error, stackTrace: stackTrace);\n      rethrow;\n    }\n  }",
    "category": "error",
    "confidence": 0.7999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 324,
    "column": 34,
    "original": ", endpoint, error, stackTrace: stackTrace);\n      rethrow;\n    }\n  }\n\n  Future<http.Response> put(String endpoint, Map<String, dynamic> data) async {\n    await _ensureInitialized();\n    \n    // Erweiterte Request-Kontext-Verwaltung für parallele Requests\n    _requestBodies[endpoint] = data;\n    \n    // Log API Request\n    AppLogger.logApiRequest(",
    "suggested_key": "errorEndpointErrorStacktrace",
    "context": "return await _handleResponse(response, endpoint);\n    } catch (error, stackTrace) {\n      // Log API Error\n      AppLogger.logApiError('POST', endpoint, error, stackTrace: stackTrace);\n      rethrow;\n    }\n  }",
    "category": "error",
    "confidence": 0.7999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 55,
    "column": 42,
    "original": ";\n\n  // NavigatorKey für zukünftige Shell-Integration (z.B. BottomNav)\n  static final GlobalKey<NavigatorState> _rootNavigatorKey = GlobalKey<NavigatorState>();\n\n  static GoRouter? _routerInstance;\n  static bool _isInitialized = false;\n  \n  // Helper method to safely get AuthService - komplett unabhängig von ServiceLocator\n  static AuthService? _getAuthService() {\n    try {\n      if (ServiceLocator.has<AuthService>()) {\n        return ServiceLocator.get<AuthService>();\n      }\n    } catch (e) {\n      AppLogger.navigation.w(",
    "suggested_key": "errorNavigatorkeyFürZukünftige",
    "context": "static const String worldListRoute = 'world-list';\n  static const String worldDashboardRoute = 'world-dashboard';\n  static const String worldJoinRoute = 'world-join';\n  static const String errorRoute = 'error';\n\n  // NavigatorKey für zukünftige Shell-Integration (z.B. BottomNav)\n  static final GlobalKey<NavigatorState> _rootNavigatorKey = GlobalKey<NavigatorState>();",
    "category": "error",
    "confidence": 0.7999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 70,
    "column": 55,
    "original": ", error: e);\n    }\n    // Kein Fallback - Services sind nicht verfügbar\n    return null;\n  }\n  \n  static GoRouter get router {\n    AppLogger.navigation.d(",
    "suggested_key": "errorErrorEKein",
    "context": "return ServiceLocator.get<AuthService>();\n      }\n    } catch (e) {\n      AppLogger.navigation.w('⚠️ ServiceLocator Fehler', error: e);\n    }\n    // Kein Fallback - Services sind nicht verfügbar\n    return null;",
    "category": "error",
    "confidence": 0.7999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 212,
    "column": 51,
    "original": "];\n          if (worldId == null) {\n            return CustomTransitionPage(\n              child: const ErrorPage(),\n              transitionsBuilder: (context, animation, secondaryAnimation, child) =>\n                SlideTransition(\n                  position: Tween<Offset>(\n                    begin: const Offset(0.0, 1.0),\n                    end: Offset.zero,\n                  ).animate(CurvedAnimation(\n                    parent: animation,\n                    curve: Curves.easeInOut,\n                  )),\n                  child: child,\n                ),\n            );\n          }\n          return CustomTransitionPage(\n            child: DashboardPage(worldId: worldId),\n            transitionsBuilder: (context, animation, secondaryAnimation, child) =>\n              SlideTransition(\n                position: Tween<Offset>(\n                  begin: const Offset(0.0, 1.0),\n                  end: Offset.zero,\n                ).animate(CurvedAnimation(\n                  parent: animation,\n                  curve: Curves.easeInOut,\n                )),\n                child: child,\n              ),\n          );\n        },\n      ),\n      // NORMALE WORLD-JOIN Route (über interne Navigation)\n      GoRoute(\n        path: ",
    "suggested_key": "errorIfWorldidNull",
    "context": "path: '/go/worlds/:id',\n        name: worldDashboardRoute,\n        pageBuilder: (context, state) {\n          final worldId = state.pathParameters['id'];\n          if (worldId == null) {\n            return CustomTransitionPage(\n              child: const ErrorPage(),",
    "category": "error",
    "confidence": 0.7999999999999999,
    "widget_context": "Widget: child property",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 345,
    "column": 53,
    "original": "))) {\n          return const WorldNotFoundPage();\n        }\n      }\n      \n      // Standard 404-Fehlerseite\n      return const ErrorPage();\n    },\n  );\n        \n        _isInitialized = true;\n      } catch (e) {\n        // Bei Fehler während der Initialisierung\n        AppLogger.navigation.e(",
    "suggested_key": "errorReturnConstWorldnotfoundpage",
    "context": "// Welt nicht gefunden - robuste Erkennung\n        if (goException.message.contains('404') && \n            (state.matchedLocation.contains('/worlds/') || \n             state.uri.pathSegments.contains('worlds'))) {\n          return const WorldNotFoundPage();\n        }\n      }",
    "category": "error",
    "confidence": 0.7999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 364,
    "column": 25,
    "original": ",\n              builder: (context, state) => const ErrorPage(),\n            ),\n          ],\n        );\n        _isInitialized = true;\n      }\n    }\n    return _routerInstance!;\n  }\n\n  // Getter für NavigatorKey (für zukünftige Shell-Integration)\n  static GlobalKey<NavigatorState> get rootNavigatorKey => _rootNavigatorKey;\n  \n  // Public Methoden für Cache-Management\n  static void invalidateAuthCache() {\n    // Caching entfernt, daher keine Cache-Invalidierung mehr nötig\n  }\n  static bool? get cachedLoginState => null; // Caching entfernt\n  \n  // Cache beim App-Start invalidieren\n  static void invalidateCacheOnStart() {\n    // Caching entfernt, daher keine Cache-Invalidierung mehr nötig\n    AppLogger.navigation.i(",
    "suggested_key": "errorBuilderContextState",
    "context": "initialLocation: '/go',\n          routes: [\n            GoRoute(\n              path: '/go',\n              builder: (context, state) => const ErrorPage(),\n            ),\n          ],",
    "category": "error",
    "confidence": 0.7999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\splash_screen.dart",
    "line": 88,
    "column": 70,
    "original": ", e);\n      \n      if (mounted) {\n        setState(() {\n          _error = e.toString();\n        });\n      }\n    }\n  }\n\n  Future<void> _runInitializationWithSteps() async {\n    final initSteps = widget.initSteps;\n    if (initSteps != null && initSteps.isNotEmpty) {\n      for (int i = 0; i < initSteps.length; i++) {\n        if (mounted) {\n          setState(() {\n            _currentStepIndex = i;\n            _currentStepName = initSteps[i];\n          });\n        }\n        \n        // Simuliere Schritt-für-Schritt Initialisierung\n        await Future.delayed(const Duration(milliseconds: 300));\n      }\n    }\n    \n    // Führe die eigentliche Initialisierung aus\n    await widget.initializationFunction();\n  }\n\n  @override\n  void dispose() {\n    _animationController.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    if (_error != null) {\n      return _buildErrorScreen();\n    }\n    \n    if (_isInitialized) {\n      // Direkt das Child anzeigen ohne FadeTransition die ausblendet\n      return widget.child;\n    }\n    \n    return _buildSplashScreen();\n  }\n\n  Widget _buildSplashScreen() {\n    final initSteps = widget.initSteps;\n    final loadingText = widget.loadingText;\n    \n    return Scaffold(\n      backgroundColor: Theme.of(context).primaryColor,\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            // App Logo/Icon\n            widget.logo ?? Container(\n              width: 120,\n              height: 120,\n              decoration: BoxDecoration(\n                color: Colors.white,\n                borderRadius: BorderRadius.circular(20),\n                boxShadow: [\n                  BoxShadow(\n                    color: Colors.black.withOpacity(0.1),\n                    blurRadius: 10,\n                    offset: const Offset(0, 5),\n                  ),\n                ],\n              ),\n              child: const Icon(\n                Icons.public,\n                size: 60,\n                color: Colors.blue,\n              ),\n            ),\n            \n            const SizedBox(height: 40),\n            \n            // App Name\n            Text(\n              widget.appName ?? ",
    "suggested_key": "errorEIfMounted",
    "context": "// _animationController.reverse(); // ENTFERNT\n      }\n    } catch (e) {\n      AppLogger.logError('SplashScreen Initialisierung fehlgeschlagen', e);\n      \n      if (mounted) {\n        setState(() {",
    "category": "error",
    "confidence": 0.7999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 88,
    "column": 35,
    "original": "] as int;\n          final now = DateTime.now().millisecondsSinceEpoch ~/ 1000;\n          \n          // Token erneuern wenn weniger als 60 Sekunden gültig\n          if (exp - now < 60) {\n            // Log Token-Refresh\n            AppLogger.api.i(",
    "suggested_key": "inviteAsIntFinal",
    "context": "final parts = token.split('.');\n        if (parts.length == 3) {\n          final payload = jsonDecode(utf8.decode(base64Url.decode(base64Url.normalize(parts[1]))));\n          final exp = payload['exp'] as int;\n          final now = DateTime.now().millisecondsSinceEpoch ~/ 1000;\n          \n          // Token erneuern wenn weniger als 60 Sekunden gültig",
    "category": "invite",
    "confidence": 0.7999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 215,
    "column": 95,
    "original": "));\n    request.headers.addAll(_headers);\n    request.body = jsonEncode(data);\n    \n    final streamedResponse = await request.send();\n    final response = await http.Response.fromStream(streamedResponse);\n    \n    return await _handleResponse(response, endpoint);\n  }\n\n  // Helper für das Sanitieren von sensiblen Daten aus dem Request-Body\n  Map<String, dynamic> _sanitizeAuthData(Map<String, dynamic> data) {\n    final sanitized = <String, dynamic>{};\n    for (final entry in data.entries) {\n      if (entry.key == ",
    "suggested_key": "inviteRequestheadersaddall_headersRequestbodyJsonencodedata",
    "context": "await _ensureValidToken();\n    }\n    \n    final request = http.Request('DELETE', Uri.parse('${Env.apiUrl}${Env.apiBasePath}$endpoint'));\n    request.headers.addAll(_headers);\n    request.body = jsonEncode(data);",
    "category": "invite",
    "confidence": 0.7999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\invite_dialog.dart",
    "line": 109,
    "column": 26,
    "original": "Bitte geben Sie eine gültige E-Mail-Adresse ein",
    "suggested_key": "inviteBitteGebenSie",
    "context": "return 'E-Mail-Adresse ist erforderlich';\n                }\n                if (!RegExp(r'^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$').hasMatch(value)) {\n                  return 'Bitte geben Sie eine gültige E-Mail-Adresse ein';\n                }\n                return null;\n              },",
    "category": "invite",
    "confidence": 0.7999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\forgot_password_page.dart",
    "line": 145,
    "column": 31,
    "original": "Passwort zurücksetzen",
    "suggested_key": "uiPasswortZurücksetzen",
    "context": "const SizedBox(height: 20),\n                            \n                            Text(\n                              'Passwort zurücksetzen',\n                              style: Theme.of(context).textTheme.headlineMedium?.copyWith(\n                                color: Colors.white,\n                                fontWeight: FontWeight.bold,",
    "category": "ui",
    "confidence": 0.7999999999999999,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\forgot_password_page.dart",
    "line": 155,
    "column": 31,
    "original": "Gib deine E-Mail-Adresse ein und wir senden dir einen Link zum Zurücksetzen deines Passworts.",
    "suggested_key": "uiGibDeineEmailadresse",
    "context": "const SizedBox(height: 8),\n                            \n                            Text(\n                              'Gib deine E-Mail-Adresse ein und wir senden dir einen Link zum Zurücksetzen deines Passworts.',\n                              style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                                color: Colors.grey[300],\n                                fontSize: 14,",
    "category": "ui",
    "confidence": 0.7999999999999999,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\forgot_password_page.dart",
    "line": 181,
    "column": 41,
    "original": "E-Mail gesendet! Bitte überprüfe deinen Posteingang.",
    "suggested_key": "uiEmailGesendetBitte",
    "context": "const SizedBox(width: 8),\n                                    Expanded(\n                                      child: Text(\n                                        'E-Mail gesendet! Bitte überprüfe deinen Posteingang.',\n                                        style: TextStyle(color: Colors.green[200], fontSize: 14),\n                                      ),\n                                    ),",
    "category": "ui",
    "confidence": 0.7999999999999999,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 597,
    "column": 25,
    "original": "Anmeldung läuft...",
    "suggested_key": "uiAnmeldungLäuft",
    "context": "),\n                      SizedBox(height: 16),\n                      Text(\n                        'Anmeldung läuft...',\n                        style: TextStyle(\n                          color: Colors.white,\n                          fontSize: 16,",
    "category": "ui",
    "confidence": 0.7999999999999999,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 191,
    "column": 46,
    "original": "Passwort erfolgreich geändert!",
    "suggested_key": "uiPasswortErfolgreichGeändert",
    "context": "const SizedBox(height: 20),\n                              \n                              Text(\n                                _isSuccess ? 'Passwort erfolgreich geändert!' : 'Neues Passwort festlegen',\n                                style: Theme.of(context).textTheme.headlineMedium?.copyWith(\n                                  color: Colors.white,\n                                  fontWeight: FontWeight.bold,",
    "category": "ui",
    "confidence": 0.7999999999999999,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 450,
    "column": 45,
    "original": "Passwort zurücksetzen",
    "suggested_key": "uiPasswortZurücksetzen",
    "context": "),\n                                          )\n                                        : const Text(\n                                            'Passwort zurücksetzen',\n                                            style: TextStyle(\n                                              fontSize: 16,\n                                              fontWeight: FontWeight.bold,",
    "category": "ui",
    "confidence": 0.7999999999999999,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_card.dart",
    "line": 368,
    "column": 79,
    "original": ",\n                        style: TextStyle(\n                          color: Colors.grey[400],\n                          fontSize: 14,\n                        ),\n                      ),\n                    ],\n                  ),\n                ],\n              );\n            }\n          ),\n        ],\n      ],\n    );\n  }\n\n  Widget _buildActionButtons() {\n    final List<Widget> buttons = [];\n    \n    // Status-basierte Button-Logik\n    switch (world.status) {\n      case WorldStatus.upcoming:\n        // Vorregistrierung oder Zurückziehen\n        if (isPreRegistered) {\n          if (onCancelPreRegistration != null) {\n            buttons.add(_buildButton(\n              onPressed: onCancelPreRegistration,\n              icon: Icons.cancel,\n              label: ",
    "suggested_key": "uiStyleTextstyleColor",
    "context": "),\n                      const SizedBox(width: 4),\n                      Text(\n                        'Ende: ${endDate.day}.${endDate.month}.${endDate.year}',\n                        style: TextStyle(\n                          color: Colors.grey[400],\n                          fontSize: 14,",
    "category": "ui",
    "confidence": 0.7999999999999999,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 264,
    "column": 21,
    "original": ";\n    \n    // Gültigkeitstext erstellen\n    String validityText = ",
    "suggested_key": "uiGültigkeitstextErstellenString",
    "context": "final actionTypeText = isUpcoming \n      ? 'dich vorab zu registrieren für' \n      : 'beizutreten';\n    \n    // Gültigkeitstext erstellen\n    String validityText = '';",
    "category": "ui",
    "confidence": 0.7999999999999999,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1261,
    "column": 41,
    "original": ",\n                    ),\n                  ],\n                ),\n              ),\n              \n              // Tab Content\n              SizedBox(\n                height: 300, // Feste Höhe für Tab-Content\n                child: TabBarView(\n                  controller: _tabController,\n                  children: [\n                    _buildDescriptionTab(),\n                    _buildRulesTab(),\n                    _buildStatisticsTab(),\n                  ],\n                ),\n              ),\n              \n              // Action Buttons\n              Container(\n                padding: const EdgeInsets.all(24),\n                decoration: const BoxDecoration(\n                  color: Color(0xFF1A1A1A),\n                  borderRadius: BorderRadius.only(\n                    bottomLeft: Radius.circular(24),\n                    bottomRight: Radius.circular(24),\n                  ),\n                ),\n                child: Column(\n                  children: [\n                    _buildActionButtons(),\n                    \n                    // Join-Fehler anzeigen\n                    if (_joinError != null) ...[\n                      const SizedBox(height: 16),\n                      Container(\n                        padding: const EdgeInsets.all(12),\n                        decoration: BoxDecoration(\n                          color: Colors.red.withOpacity(0.1),\n                          borderRadius: BorderRadius.circular(8),\n                          border: Border.all(color: Colors.red.withOpacity(0.3)),\n                        ),\n                        child: Row(\n                          children: [\n                            Icon(Icons.error_outline, color: Colors.red[400], size: 20),\n                            const SizedBox(width: 8),\n                            Expanded(\n                              child: Text(\n                                _joinError ?? ",
    "suggested_key": "uiTabContentSizedbox",
    "context": "),\n                    Tab(\n                      icon: Icon(Icons.analytics_outlined),\n                      text: 'Statistiken',\n                    ),\n                  ],\n                ),",
    "category": "ui",
    "confidence": 0.7999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1568,
    "column": 23,
    "original": ",\n              style: Theme.of(context).textTheme.bodySmall?.copyWith(\n                color: Colors.grey[400],\n                fontWeight: FontWeight.w500,\n              ),\n            ),\n          ),\n          Expanded(\n            child: Text(\n              value,\n              style: Theme.of(context).textTheme.bodySmall?.copyWith(\n                color: Colors.white,\n              ),\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n  \n  Widget _buildActionButtons() {\n    List<Widget> buttons = [];\n\n    // **LOGIN BUTTON (wenn User existiert aber nicht angemeldet)**\n    if (_showLoginButton && _inviteEmail != null) {\n      buttons.add(\n        Container(\n          width: double.infinity,\n          margin: const EdgeInsets.only(bottom: 12.0),\n          child: ElevatedButton(\n            onPressed: () {\n              // Redirect auf Login-Seite mit E-Mail vorausgefüllt\n              final loginRoute = ",
    "suggested_key": "uiStyleThemeofcontexttextthemebodysmallcopywithColor",
    "context": "SizedBox(\n            width: 80,\n            child: Text(\n              '$label:',\n              style: Theme.of(context).textTheme.bodySmall?.copyWith(\n                color: Colors.grey[400],\n                fontWeight: FontWeight.w500,",
    "category": "ui",
    "confidence": 0.7999999999999999,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\invite_dialog.dart",
    "line": 70,
    "column": 15,
    "original": "Geben Sie die E-Mail-Adresse der Person ein, die Sie einladen möchten:",
    "suggested_key": "uiGebenSieDie",
    "context": "mainAxisSize: MainAxisSize.min,\n          children: [\n            Text(\n              'Geben Sie die E-Mail-Adresse der Person ein, die Sie einladen möchten:',\n              style: TextStyle(\n                color: Colors.grey[300],\n              ),",
    "category": "ui",
    "confidence": 0.7999999999999999,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 13,
    "column": 36,
    "original": ";\n\nclass WeltenwindApp extends StatefulWidget {\n  const WeltenwindApp({super.key});\n\n  @override\n  State<WeltenwindApp> createState() => _WeltenwindAppState();\n}\n\nclass _WeltenwindAppState extends State<WeltenwindApp> {\n  final LocaleProvider _localeProvider = LocaleProvider();\n  \n  @override\n  void initState() {\n    super.initState();\n    // Listener für Locale-Änderungen\n    _localeProvider.addListener(() {\n      setState(() {});\n    });\n  }\n  \n  @override\n  void dispose() {\n    _localeProvider.removeListener(() {});\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    AppLogger.app.d(",
    "suggested_key": "worldClassWeltenwindappExtends",
    "context": "import 'core/services/world_service.dart';\nimport 'core/services/invite_service.dart';\nimport 'core/providers/locale_provider.dart';\nimport 'l10n/app_localizations.dart';\n\nclass WeltenwindApp extends StatefulWidget {\n  const WeltenwindApp({super.key});",
    "category": "world",
    "confidence": 0.7999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\config\\logger.dart",
    "line": 2,
    "column": 40,
    "original": ";\n\n/// Zentrale Logger-Konfiguration für Weltenwind Flutter Client\nclass AppLogger {\n  static late Logger _logger;\n  static late Logger _apiLogger;\n  static late Logger _authLogger;\n  static late Logger _navigationLogger;\n  static late Logger _errorLogger;\n\n  /// Initialisiere alle Logger\n  static void initialize() {\n    // Base Logger mit Custom Printer\n    _logger = Logger(\n      printer: _getLogPrinter(),\n      level: kDebugMode ? Level.debug : Level.info,\n      output: _getLogOutput(),\n    );\n\n    // Spezielle Logger für verschiedene Bereiche\n    _apiLogger = Logger(\n      printer: _getLogPrinter(prefix: ",
    "suggested_key": "worldZentraleLoggerkonfigurationFür",
    "context": "import 'package:logger/logger.dart';\nimport 'package:flutter/foundation.dart';\n\n/// Zentrale Logger-Konfiguration für Weltenwind Flutter Client\nclass AppLogger {",
    "category": "world",
    "confidence": 0.7999999999999999,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 581,
    "column": 35,
    "original": "Schließe dich tausenden Spielern an und starte noch heute!",
    "suggested_key": "worldSchließeDichTausenden",
    "context": "),\n                                const SizedBox(height: 16),\n                                Text(\n                                  'Schließe dich tausenden Spielern an und starte noch heute!',\n                                  style: TextStyle(\n                                    fontSize: 16,\n                                    color: Colors.grey[300],",
    "category": "world",
    "confidence": 0.7999999999999999,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 61,
    "column": 29,
    "original": "Sie müssen erst der Welt beitreten, um das Dashboard zu sehen",
    "suggested_key": "worldSieMüssenErst",
    "context": "void _showJoinRequiredMessage() {\n    ScaffoldMessenger.of(context).showSnackBar(\n      SnackBar(\n        content: const Text('Sie müssen erst der Welt beitreten, um das Dashboard zu sehen'),\n        backgroundColor: Colors.orange[700],\n        duration: const Duration(seconds: 3),\n      ),",
    "category": "world",
    "confidence": 0.7999999999999999,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 359,
    "column": 18,
    "original": "Sie müssen der Welt beitreten, um das Dashboard zu sehen",
    "suggested_key": "worldSieMüssenDer",
    "context": "// Tooltip hinzufügen wenn disabled\n    if (isDisabled && item.label.contains('Dashboard')) {\n      return Tooltip(\n        message: 'Sie müssen der Welt beitreten, um das Dashboard zu sehen',\n        child: widget,\n      );\n    }",
    "category": "world",
    "confidence": 0.7999999999999999,
    "widget_context": "Widget: Tooltip",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\splash_screen.dart",
    "line": 22,
    "column": 31,
    "original": ",\n    this.logo,\n  });\n\n  @override\n  State<SplashScreen> createState() => _SplashScreenState();\n}\n\nclass _SplashScreenState extends State<SplashScreen> with TickerProviderStateMixin {\n  late AnimationController _animationController;\n  bool _isInitialized = false;\n  String? _error;\n  bool _timedOut = false;\n  int _currentStepIndex = 0;\n  String? _currentStepName;\n\n  @override\n  void initState() {\n    super.initState();\n    \n    _animationController = AnimationController(\n      duration: const Duration(milliseconds: 1500),\n      vsync: this,\n    );\n    \n    _initialize();\n  }\n\n  Future<void> _initialize() async {\n    try {\n      _animationController.forward();\n      \n      // Timeout für Initialisierung\n      final timeout = widget.timeout;\n      if (timeout != null) {\n        final result = await Future.any([\n          _runInitializationWithSteps().then((_) => ",
    "suggested_key": "worldThislogoOverrideStatesplashscreen",
    "context": "this.timeout,\n    this.onTimeout,\n    this.initSteps,\n    this.appName = 'Weltenwind',\n    this.logo,\n  });",
    "category": "world",
    "confidence": 0.7999999999999999,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\forgot_password_page.dart",
    "line": 302,
    "column": 70,
    "original": "),\n                              child: Text(\n                                _isSuccess ? ",
    "suggested_key": "buttonChildText_issuccess",
    "context": "// Back to login link\n                            TextButton(\n                              onPressed: () => context.goNamed('login'),\n                              child: Text(\n                                _isSuccess ? 'Zurück zum Login' : 'Abbrechen',\n                                style: const TextStyle(",
    "category": "button",
    "confidence": 0.75,
    "widget_context": "Widget: TextButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 404,
    "column": 90,
    "original": "),\n                                        child: const Text(\n                                          ",
    "suggested_key": "buttonChildConstText",
    "context": "// Forgot Password Link\n                                      TextButton(\n                                        onPressed: () => context.goNamed('forgot-password'),\n                                        child: const Text(\n                                          'Passwort vergessen?',\n                                          style: TextStyle(",
    "category": "button",
    "confidence": 0.75,
    "widget_context": "Widget: TextButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 406,
    "column": 63,
    "original": ",\n                                          style: TextStyle(\n                                            color: AppTheme.primaryColor,\n                                            fontSize: 14,\n                                          ),\n                                        ),\n                                      ),\n                                    ],\n                                  ),\n                                  const SizedBox(height: 12),\n                                  \n                                  // Error message with animation\n                                  AnimatedContainer(\n                                    duration: const Duration(milliseconds: 300),\n                                    height: _loginError != null ? null : 0,\n                                    child: _loginError != null\n                                      ? Container(\n                                          width: double.infinity,\n                                          padding: const EdgeInsets.all(12),\n                                          margin: const EdgeInsets.only(bottom: 16),\n                                          decoration: BoxDecoration(\n                                            color: Colors.red[900]!.withOpacity(0.3),\n                                            borderRadius: BorderRadius.circular(8),\n                                            border: Border.all(color: Colors.red[400]!.withOpacity(0.5)),\n                                          ),\n                                          child: Row(\n                                            children: [\n                                              Icon(Icons.error_outline, color: Colors.red[400], size: 20),\n                                              const SizedBox(width: 8),\n                                              Expanded(\n                                                child: Text(\n                                                  _loginError!,\n                                                  style: TextStyle(color: Colors.red[200], fontSize: 14),\n                                                ),\n                                              ),\n                                            ],\n                                          ),\n                                        )\n                                      : const SizedBox.shrink(),\n                                  ),\n                                  \n                                  // Login button with hover effect\n                                  SizedBox(\n                                    width: double.infinity,\n                                    height: 56,\n                                    child: AnimatedContainer(\n                                      duration: const Duration(milliseconds: 200),\n                                      child: ElevatedButton(\n                                        onPressed: _isLoading ? null : _login,\n                                        style: ElevatedButton.styleFrom(\n                                          backgroundColor: AppTheme.primaryColor,\n                                          foregroundColor: Colors.white,\n                                          shape: RoundedRectangleBorder(\n                                            borderRadius: BorderRadius.circular(12),\n                                          ),\n                                          elevation: 8,\n                                          shadowColor: AppTheme.primaryColor.withOpacity(0.5),\n                                        ),\n                                        child: _isLoading\n                                            ? const SizedBox(\n                                                height: 20,\n                                                width: 20,\n                                                child: CircularProgressIndicator(\n                                                  strokeWidth: 2,\n                                                  valueColor: AlwaysStoppedAnimation<Color>(Colors.white),\n                                                ),\n                                              )\n                                            : const Text(\n                                                ",
    "suggested_key": "buttonStyleTextstyleColor",
    "context": "TextButton(\n                                        onPressed: () => context.goNamed('forgot-password'),\n                                        child: const Text(\n                                          'Passwort vergessen?',\n                                          style: TextStyle(\n                                            color: AppTheme.primaryColor,\n                                            fontSize: 14,",
    "category": "button",
    "confidence": 0.75,
    "widget_context": "Widget: TextButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 464,
    "column": 74,
    "original": "),\n                                  child: const Text(\n                                    ",
    "suggested_key": "buttonChildConstText",
    "context": "// Back to login link\n                              if (!_isSuccess)\n                                TextButton(\n                                  onPressed: () => context.goNamed('login'),\n                                  child: const Text(\n                                    'Zurück zur Anmeldung',\n                                    style: TextStyle(",
    "category": "button",
    "confidence": 0.75,
    "widget_context": "Widget: TextButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_filters.dart",
    "line": 289,
    "column": 31,
    "original": "Alle zurücksetzen",
    "suggested_key": "buttonAlleZurücksetzen",
    "context": "TextButton.icon(\n            onPressed: onResetFilters,\n            icon: const Icon(Icons.clear_all, size: 16),\n            label: const Text('Alle zurücksetzen'),\n            style: TextButton.styleFrom(\n              foregroundColor: Colors.grey[400],\n            ),",
    "category": "button",
    "confidence": 0.75,
    "widget_context": "Widget: TextButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_list_header.dart",
    "line": 76,
    "column": 43,
    "original": "),\n          style: ElevatedButton.styleFrom(\n            backgroundColor: AppTheme.primaryColor,\n            foregroundColor: Colors.white,\n            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 10),\n            shape: RoundedRectangleBorder(\n              borderRadius: BorderRadius.circular(8),\n            ),\n          ),\n        ),\n      );\n    }\n\n    if (hasCreatePermission && onCreateWorld != null) {\n      buttons.add(\n        ElevatedButton.icon(\n          onPressed: onCreateWorld,\n          icon: const Icon(Icons.add, size: 18),\n          label: const Text(",
    "suggested_key": "buttonStyleElevatedbuttonstylefromBackgroundcolor",
    "context": "ElevatedButton.icon(\n          onPressed: onRefresh,\n          icon: const Icon(Icons.refresh, size: 18),\n          label: const Text('Aktualisieren'),\n          style: ElevatedButton.styleFrom(\n            backgroundColor: AppTheme.primaryColor,\n            foregroundColor: Colors.white,",
    "category": "button",
    "confidence": 0.75,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 611,
    "column": 41,
    "original": "),\n          ),\n        ],\n      ),\n    );\n    \n    if (confirmed != true) return;\n\n    setState(() {\n      _isJoining = true;\n      _joinError = null;\n    });\n\n    try {\n      await _worldService.leaveWorld(world.id);\n      setState(() {\n        _isJoined = false;\n      });\n      \n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text(",
    "suggested_key": "buttonIfConfirmedTrue",
    "context": "style: TextButton.styleFrom(\n              foregroundColor: Colors.red,\n            ),\n            child: const Text('Verlassen'),\n          ),\n        ],\n      ),",
    "category": "button",
    "confidence": 0.75,
    "widget_context": "Widget: TextButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 853,
    "column": 66,
    "original": "),\n                            style: ElevatedButton.styleFrom(\n                              backgroundColor: AppTheme.primaryColor,\n                              foregroundColor: Colors.white,\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                        const SizedBox(height: 12),\n                        // Login Button als Alternative\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: OutlinedButton.icon(\n                            onPressed: () => _navigateToLogin(_inviteEmail!),\n                            icon: const Icon(Icons.login),\n                            label: const Text(",
    "suggested_key": "buttonStyleElevatedbuttonstylefromBackgroundcolor",
    "context": "child: ElevatedButton.icon(\n                            onPressed: () => _navigateToRegistration(_inviteEmail!),\n                            icon: const Icon(Icons.person_add),\n                            label: const Text('Jetzt registrieren'),\n                            style: ElevatedButton.styleFrom(\n                              backgroundColor: AppTheme.primaryColor,\n                              foregroundColor: Colors.white,",
    "category": "button",
    "confidence": 0.75,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 871,
    "column": 77,
    "original": "),\n                            style: OutlinedButton.styleFrom(\n                              foregroundColor: AppTheme.primaryColor,\n                              side: BorderSide(color: AppTheme.primaryColor),\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                      ] else if (_showLogoutButton && _inviteEmail != null) ...[\n                        // Logout Button für falschen User\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: ElevatedButton.icon(\n                            onPressed: _logout,\n                            icon: const Icon(Icons.logout),\n                            label: const Text(",
    "suggested_key": "buttonStyleOutlinedbuttonstylefromForegroundcolor",
    "context": "child: OutlinedButton.icon(\n                            onPressed: () => _navigateToLogin(_inviteEmail!),\n                            icon: const Icon(Icons.login),\n                            label: const Text('Bereits registriert? Anmelden'),\n                            style: OutlinedButton.styleFrom(\n                              foregroundColor: AppTheme.primaryColor,\n                              side: BorderSide(color: AppTheme.primaryColor),",
    "category": "button",
    "confidence": 0.75,
    "widget_context": "Widget: OutlinedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 889,
    "column": 75,
    "original": "),\n                            style: ElevatedButton.styleFrom(\n                              backgroundColor: Colors.orange,\n                              foregroundColor: Colors.white,\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                        const SizedBox(height: 12),\n                        // Abbrechen Button\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: OutlinedButton.icon(\n                            onPressed: () => context.goNamed(",
    "suggested_key": "buttonStyleElevatedbuttonstylefromBackgroundcolor",
    "context": "child: ElevatedButton.icon(\n                            onPressed: _logout,\n                            icon: const Icon(Icons.logout),\n                            label: const Text('Abmelden & neu registrieren'),\n                            style: ElevatedButton.styleFrom(\n                              backgroundColor: Colors.orange,\n                              foregroundColor: Colors.white,",
    "category": "button",
    "confidence": 0.75,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 905,
    "column": 70,
    "original": "),\n                            icon: const Icon(Icons.arrow_back),\n                            label: const Text(",
    "suggested_key": "buttonIconConstIconiconsarrow_back",
    "context": "width: double.infinity,\n                          height: 48,\n                          child: OutlinedButton.icon(\n                            onPressed: () => context.goNamed('landing'),\n                            icon: const Icon(Icons.arrow_back),\n                            label: const Text('Zurück zur Startseite'),\n                            style: OutlinedButton.styleFrom(",
    "category": "button",
    "confidence": 0.75,
    "widget_context": "Widget: OutlinedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 907,
    "column": 69,
    "original": "),\n                            style: OutlinedButton.styleFrom(\n                              foregroundColor: Colors.grey,\n                              side: BorderSide(color: Colors.grey),\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                      ] else ...[\n                        // Standard Retry Button\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: ElevatedButton.icon(\n                            onPressed: _retry,\n                            icon: const Icon(Icons.refresh),\n                            label: const Text(",
    "suggested_key": "buttonStyleOutlinedbuttonstylefromForegroundcolor",
    "context": "child: OutlinedButton.icon(\n                            onPressed: () => context.goNamed('landing'),\n                            icon: const Icon(Icons.arrow_back),\n                            label: const Text('Zurück zur Startseite'),\n                            style: OutlinedButton.styleFrom(\n                              foregroundColor: Colors.grey,\n                              side: BorderSide(color: Colors.grey),",
    "category": "button",
    "confidence": 0.75,
    "widget_context": "Widget: OutlinedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 925,
    "column": 64,
    "original": "),\n                            style: ElevatedButton.styleFrom(\n                              backgroundColor: AppTheme.primaryColor,\n                              foregroundColor: Colors.white,\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                          ),\n                        ),\n                      ],\n                      const SizedBox(height: 16),\n                      TextButton(\n                        onPressed: () => context.goNamed(",
    "suggested_key": "buttonStyleElevatedbuttonstylefromBackgroundcolor",
    "context": "child: ElevatedButton.icon(\n                            onPressed: _retry,\n                            icon: const Icon(Icons.refresh),\n                            label: const Text('Erneut versuchen'),\n                            style: ElevatedButton.styleFrom(\n                              backgroundColor: AppTheme.primaryColor,\n                              foregroundColor: Colors.white,",
    "category": "button",
    "confidence": 0.75,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 938,
    "column": 69,
    "original": "),\n                        child: const Text(\n                          ",
    "suggested_key": "buttonChildConstText",
    "context": "],\n                      const SizedBox(height: 16),\n                      TextButton(\n                        onPressed: () => context.goNamed('world-list'),\n                        child: const Text(\n                          'Zurück zu den Welten',\n                          style: TextStyle(",
    "category": "button",
    "confidence": 0.75,
    "widget_context": "Widget: TextButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 940,
    "column": 48,
    "original": ",\n                          style: TextStyle(\n                            color: AppTheme.primaryColor,\n                            fontWeight: FontWeight.bold,\n                          ),\n                        ),\n                      ),\n                    ],\n                  ),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n\n  Widget _buildInfoState() {\n    return Center(\n      child: Padding(\n        padding: const EdgeInsets.all(24.0),\n        child: Center(\n          child: ConstrainedBox(\n            constraints: const BoxConstraints(maxWidth: 500),\n            child: Card(\n              elevation: 12,\n              color: const Color(0xFF1A1A1A), // Dunkle Karte\n              shape: RoundedRectangleBorder(\n                borderRadius: BorderRadius.circular(20),\n                side: BorderSide(\n                  color: AppTheme.primaryColor.withOpacity(0.3),\n                  width: 1,\n                ),\n              ),\n              child: Container(\n                decoration: BoxDecoration(\n                  borderRadius: BorderRadius.circular(20),\n                  gradient: const LinearGradient(\n                    begin: Alignment.topLeft,\n                    end: Alignment.bottomRight,\n                    colors: [\n                      Color(0xFF1A1A1A),\n                      Color(0xFF2A2A2A),\n                    ],\n                  ),\n                ),\n                child: Padding(\n                  padding: const EdgeInsets.all(32.0),\n                  child: Column(\n                    mainAxisSize: MainAxisSize.min,\n                    children: [\n                      Icon(\n                        Icons.info_outline,\n                        size: 80,\n                        color: Colors.blue[400],\n                      ),\n                      const SizedBox(height: 24),\n                      Text(\n                        ",
    "suggested_key": "buttonStyleTextstyleColor",
    "context": "TextButton(\n                        onPressed: () => context.goNamed('world-list'),\n                        child: const Text(\n                          'Zurück zu den Welten',\n                          style: TextStyle(\n                            color: AppTheme.primaryColor,\n                            fontWeight: FontWeight.bold,",
    "category": "button",
    "confidence": 0.75,
    "widget_context": "Widget: TextButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1022,
    "column": 71,
    "original": "),\n                          child: const Text(\n                            ",
    "suggested_key": "buttonChildConstText",
    "context": "if (widget.inviteToken == null) ...[\n                        const SizedBox(height: 16),\n                        TextButton(\n                          onPressed: () => context.goNamed('world-list'),\n                          child: const Text(\n                            'Zurück zu den Welten',\n                            style: TextStyle(",
    "category": "button",
    "confidence": 0.75,
    "widget_context": "Widget: TextButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1024,
    "column": 50,
    "original": ",\n                            style: TextStyle(\n                              color: AppTheme.primaryColor,\n                              fontWeight: FontWeight.bold,\n                            ),\n                          ),\n                        ),\n                      ],\n                    ],\n                  ),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n\n  Widget _buildNotFoundState() {\n    return Center(\n      child: Padding(\n        padding: const EdgeInsets.all(24.0),\n        child: Center(\n          child: ConstrainedBox(\n            constraints: const BoxConstraints(maxWidth: 500),\n            child: Card(\n              elevation: 12,\n              color: const Color(0xFF1A1A1A), // Dunkle Karte\n              shape: RoundedRectangleBorder(\n                borderRadius: BorderRadius.circular(20),\n                side: BorderSide(\n                  color: AppTheme.primaryColor.withOpacity(0.3),\n                  width: 1,\n                ),\n              ),\n              child: Container(\n                decoration: BoxDecoration(\n                  borderRadius: BorderRadius.circular(20),\n                  gradient: const LinearGradient(\n                    begin: Alignment.topLeft,\n                    end: Alignment.bottomRight,\n                    colors: [\n                      Color(0xFF1A1A1A),\n                      Color(0xFF2A2A2A),\n                    ],\n                  ),\n                ),\n                child: Padding(\n                  padding: const EdgeInsets.all(32.0),\n                  child: Column(\n                    mainAxisSize: MainAxisSize.min,\n                    children: [\n                      Icon(\n                        Icons.public_off,\n                        size: 80,\n                        color: Colors.orange[400],\n                      ),\n                      const SizedBox(height: 24),\n                      Text(\n                        ",
    "suggested_key": "buttonStyleTextstyleColor",
    "context": "TextButton(\n                          onPressed: () => context.goNamed('world-list'),\n                          child: const Text(\n                            'Zurück zu den Welten',\n                            style: TextStyle(\n                              color: AppTheme.primaryColor,\n                              fontWeight: FontWeight.bold,",
    "category": "button",
    "confidence": 0.75,
    "widget_context": "Widget: TextButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1600,
    "column": 93,
    "original": ";\n              \n              // Pending Redirect setzen für Post-Auth-Redirect\n              _authService.setPendingInviteRedirect(widget.inviteToken!);\n              \n              context.go(loginRoute);\n            },\n            style: ElevatedButton.styleFrom(\n              backgroundColor: AppTheme.primaryColor,\n              foregroundColor: Colors.white,\n              padding: const EdgeInsets.symmetric(vertical: 16),\n              shape: RoundedRectangleBorder(\n                borderRadius: BorderRadius.circular(12),\n              ),\n            ),\n            child: const Text(\n              ",
    "suggested_key": "buttonPendingRedirectSetzen",
    "context": "child: ElevatedButton(\n            onPressed: () {\n              // Redirect auf Login-Seite mit E-Mail vorausgefüllt\n              final loginRoute = '/go/auth/login?email=${Uri.encodeComponent(_inviteEmail!)}';\n              \n              // Pending Redirect setzen für Post-Auth-Redirect\n              _authService.setPendingInviteRedirect(widget.inviteToken!);",
    "category": "button",
    "confidence": 0.75,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1633,
    "column": 99,
    "original": ";\n              \n              // Pending Redirect setzen für Post-Auth-Redirect\n              _authService.setPendingInviteRedirect(widget.inviteToken!);\n              \n              context.go(registerRoute);\n            },\n            style: ElevatedButton.styleFrom(\n              backgroundColor: AppTheme.secondaryColor,\n              foregroundColor: Colors.white,\n              padding: const EdgeInsets.symmetric(vertical: 16),\n              shape: RoundedRectangleBorder(\n                borderRadius: BorderRadius.circular(12),\n              ),\n            ),\n            child: const Text(\n              ",
    "suggested_key": "buttonPendingRedirectSetzen",
    "context": "child: ElevatedButton(\n            onPressed: () {\n              // Redirect auf Register-Seite mit E-Mail vorausgefüllt\n              final registerRoute = '/go/auth/register?email=${Uri.encodeComponent(_inviteEmail!)}';\n              \n              // Pending Redirect setzen für Post-Auth-Redirect\n              _authService.setPendingInviteRedirect(widget.inviteToken!);",
    "category": "button",
    "confidence": 0.75,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1702,
    "column": 40,
    "original": ");\n              }\n            },\n            style: ElevatedButton.styleFrom(\n              backgroundColor: Colors.red[600],\n              foregroundColor: Colors.white,\n              padding: const EdgeInsets.symmetric(vertical: 16),\n              shape: RoundedRectangleBorder(\n                borderRadius: BorderRadius.circular(12),\n              ),\n            ),\n            child: const Text(\n              ",
    "suggested_key": "buttonStyleElevatedbuttonstylefromBackgroundcolor",
    "context": "await _authService.logout();\n              // Nach Logout zur Landing-Page\n              if (mounted) {\n                context.go('/go/landing');\n              }\n            },\n            style: ElevatedButton.styleFrom(",
    "category": "button",
    "confidence": 0.75,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1740,
    "column": 79,
    "original": "Vorregistrierung zurückziehen",
    "suggested_key": "buttonVorregistrierungZurückziehen",
    "context": "child: ElevatedButton.icon(\n                    onPressed: (_isPreRegistering || _isJoining) ? null : _cancelPreRegistration,\n                    icon: const Icon(Icons.cancel),\n                    label: Text(_isPreRegistering ? 'Wird zurückgezogen...' : 'Vorregistrierung zurückziehen'),\n                    style: ElevatedButton.styleFrom(\n                      backgroundColor: Colors.red[600],\n                      foregroundColor: Colors.white,",
    "category": "button",
    "confidence": 0.75,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1760,
    "column": 53,
    "original": "Wird registriert...",
    "suggested_key": "buttonWirdRegistriert",
    "context": "child: ElevatedButton.icon(\n                    onPressed: (_isPreRegistering || _isJoining) ? null : _preRegisterWorld,\n                    icon: const Icon(Icons.how_to_reg),\n                    label: Text(_isPreRegistering ? 'Wird registriert...' : 'Vorregistrieren'),\n                    style: ElevatedButton.styleFrom(\n                      backgroundColor: Colors.orange[600],\n                      foregroundColor: Colors.white,",
    "category": "button",
    "confidence": 0.75,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1808,
    "column": 46,
    "original": "Wird verlassen...",
    "suggested_key": "buttonWirdVerlassen",
    "context": "child: ElevatedButton.icon(\n                    onPressed: _isJoining ? null : _leaveWorld,\n                    icon: const Icon(Icons.exit_to_app),\n                    label: Text(_isJoining ? 'Wird verlassen...' : 'Welt verlassen'),\n                    style: ElevatedButton.styleFrom(\n                      backgroundColor: Colors.red[600],\n                      foregroundColor: Colors.white,",
    "category": "button",
    "confidence": 0.75,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1808,
    "column": 68,
    "original": "Welt verlassen",
    "suggested_key": "buttonWeltVerlassen",
    "context": "child: ElevatedButton.icon(\n                    onPressed: _isJoining ? null : _leaveWorld,\n                    icon: const Icon(Icons.exit_to_app),\n                    label: Text(_isJoining ? 'Wird verlassen...' : 'Welt verlassen'),\n                    style: ElevatedButton.styleFrom(\n                      backgroundColor: Colors.red[600],\n                      foregroundColor: Colors.white,",
    "category": "button",
    "confidence": 0.75,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1829,
    "column": 46,
    "original": "Wird beigetreten...",
    "suggested_key": "buttonWirdBeigetreten",
    "context": "child: ElevatedButton.icon(\n                    onPressed: _isJoining ? null : _joinWorld,\n                    icon: const Icon(Icons.play_arrow),\n                    label: Text(_isJoining ? 'Wird beigetreten...' : 'Jetzt beitreten'),\n                    style: ElevatedButton.styleFrom(\n                      backgroundColor: AppTheme.primaryColor,\n                      foregroundColor: Colors.white,",
    "category": "button",
    "confidence": 0.75,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1829,
    "column": 70,
    "original": "Jetzt beitreten",
    "suggested_key": "buttonJetztBeitreten",
    "context": "child: ElevatedButton.icon(\n                    onPressed: _isJoining ? null : _joinWorld,\n                    icon: const Icon(Icons.play_arrow),\n                    label: Text(_isJoining ? 'Wird beigetreten...' : 'Jetzt beitreten'),\n                    style: ElevatedButton.styleFrom(\n                      backgroundColor: AppTheme.primaryColor,\n                      foregroundColor: Colors.white,",
    "category": "button",
    "confidence": 0.75,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 395,
    "column": 41,
    "original": "),\n          ),\n        ],\n      ),\n    );\n\n    if (confirmed != true) return;\n\n    try {\n      final success = await _worldService.leaveWorld(world.id);\n      if (success && mounted) {\n        setState(() {\n          _joinedWorlds[world.id] = false;\n          // Update player count\n          final currentCount = _playerCounts[world.id] ?? 0;\n          if (currentCount > 0) {\n            _playerCounts[world.id] = currentCount - 1;\n          }\n        });\n        \n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text(",
    "suggested_key": "buttonIfConfirmedTrue",
    "context": "style: TextButton.styleFrom(\n              foregroundColor: Colors.red,\n            ),\n            child: const Text('Verlassen'),\n          ),\n        ],\n      ),",
    "category": "button",
    "confidence": 0.75,
    "widget_context": "Widget: TextButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 782,
    "column": 71,
    "original": "),\n                                      style: ElevatedButton.styleFrom(\n                                        backgroundColor: AppTheme.primaryColor,\n                                        foregroundColor: Colors.white,\n                                        padding: const EdgeInsets.symmetric(\n                                          horizontal: 24,\n                                          vertical: 12,\n                                        ),\n                                        shape: RoundedRectangleBorder(\n                                          borderRadius: BorderRadius.circular(12),\n                                        ),\n                                      ),\n                                    ),\n                                  ),\n                                ],\n                              ),\n                            ],\n                          ),\n                        ),\n                      ),\n                    ),\n                  ),\n                ),\n              ),\n            ),\n            \n            // User info widget in top-left corner\n            const UserInfoWidget(),\n            \n            // Navigation widget in top-right corner\n            const NavigationWidget(currentRoute: ",
    "suggested_key": "buttonStyleElevatedbuttonstylefromBackgroundcolor",
    "context": "child: ElevatedButton.icon(\n                                      onPressed: _loadWorlds,\n                                      icon: const Icon(Icons.refresh),\n                                      label: const Text('Aktualisieren'),\n                                      style: ElevatedButton.styleFrom(\n                                        backgroundColor: AppTheme.primaryColor,\n                                        foregroundColor: Colors.white,",
    "category": "button",
    "confidence": 0.75,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\main.dart",
    "line": 48,
    "column": 30,
    "original": ": details.informationCollector?.toString(),\n      },\n    );\n    \n    // In Debug Mode auch zur Console\n    if (kDebugMode) {\n      FlutterError.presentError(details);\n    }\n  };\n\n  // Dart Error Handling (für unhandled exceptions)\n  WidgetsBinding.instance.platformDispatcher.onError = (error, stack) {\n    AppLogger.logError(\n      ",
    "suggested_key": "formDetailsinformationcollectortostringInDebug",
    "context": "context: {\n        'library': details.library,\n        'context': details.context?.toString(),\n        'informationCollector': details.informationCollector?.toString(),\n      },\n    );",
    "category": "form",
    "confidence": 0.75,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 7,
    "column": 38,
    "original": ";\n\nclass ApiService {\n  static final ApiService _instance = ApiService._internal();\n  factory ApiService() => _instance;\n  ApiService._internal();\n\n  String? _token;\n  late final AuthService _authService;\n  String? _deviceFingerprint;\n  bool _initialized = false;\n  bool _isValidatingToken = false; // Verhindert rekursive Token-Validierung\n  \n  // Erweiterte Request-Kontext-Verwaltung für parallele Requests\n  final Map<String, Map<String, dynamic>> _requestBodies = {};\n\n  // Dependency Injection für bessere Testbarkeit\n  ApiService.withAuth(AuthService authService) : _authService = authService;\n\n  // Initialisierung beim ersten Zugriff\n  Future<void> _ensureInitialized() async {\n    if (!_initialized) {\n      _authService = AuthService(); // Fallback für Singleton-Pattern\n      try {\n        final accessToken = await _authService.getCurrentAccessToken();\n        if (accessToken != null) {\n          _token = accessToken;\n        }\n      } catch (e) {\n        // Error loading token\n      }\n      _initialized = true;\n    }\n  }\n\n  void setToken(String token) {\n    _token = token;\n  }\n\n  void clearToken() {\n    _token = null;\n  }\n\n  // Einfacher Device-Fingerprint\n  String get deviceFingerprint {\n    final currentFingerprint = _deviceFingerprint;\n    if (currentFingerprint != null) {\n      return currentFingerprint;\n    }\n    final fingerprint = kIsWeb \n        ? ",
    "suggested_key": "navigationClassApiserviceStatic",
    "context": "import '../../config/env.dart';\nimport '../../config/logger.dart';\nimport 'auth_service.dart';\nimport '../../routing/app_router.dart';\n\nclass ApiService {\n  static final ApiService _instance = ApiService._internal();",
    "category": "navigation",
    "confidence": 0.75,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 14,
    "column": 21,
    "original": ";\n\n// Custom Navigation Observer für Logging\nclass AppNavigationObserver extends NavigatorObserver {\n  @override\n  void didReplace({Route<dynamic>? newRoute, Route<dynamic>? oldRoute}) {\n    super.didReplace(newRoute: newRoute, oldRoute: oldRoute);\n    _logNavigation(oldRoute?.settings.name, newRoute?.settings.name, ",
    "suggested_key": "navigationCustomNavigationObserver",
    "context": "import '../features/landing/landing_page.dart';\nimport '../core/services/auth_service.dart';\nimport '../theme/app_theme.dart';\nimport '../main.dart';\n\n// Custom Navigation Observer für Logging\nclass AppNavigationObserver extends NavigatorObserver {",
    "category": "navigation",
    "confidence": 0.75,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 40,
    "column": 60,
    "original": ");\n    }\n  }\n}\n\nclass AppRouter {\n  // Named Routes für bessere Navigation\n  static const String landingRoute = ",
    "suggested_key": "navigationClassApprouterNamed",
    "context": "if (from != null && to != null) {\n      AppLogger.logNavigation(from, to, params: {'action': action});\n    } else if (to != null) {\n      AppLogger.navigation.i('🧭 Navigation: → $to ($action)');\n    }\n  }\n}",
    "category": "navigation",
    "confidence": 0.75,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 88,
    "column": 32,
    "original": ",\n          navigatorKey: _rootNavigatorKey,\n          \n          // Navigation Observer für User Journey Tracking\n          observers: [\n            AppNavigationObserver(),\n          ],\n          \n          // Redirect aktiviert - Services werden jetzt korrekt initialisiert\n          redirect: (context, state) async {\n        try {\n          final authService = _getAuthService();\n          if (authService == null) {\n            // Services noch nicht verfügbar, zur Landing Page\n            return ",
    "suggested_key": "navigationNavigatorkey_rootnavigatorkeyNavigation",
    "context": "AppLogger.navigation.i('🚀 Router wird initialisiert...');\n      try {\n        _routerInstance = GoRouter(\n          initialLocation: '/go',\n          navigatorKey: _rootNavigatorKey,\n          \n          // Navigation Observer für User Journey Tracking",
    "category": "navigation",
    "confidence": 0.75,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 108,
    "column": 82,
    "original": "); // Invite-Routen sind öffentlich\n          final isProtectedRoute = (state.matchedLocation.startsWith(",
    "suggested_key": "navigationInviteroutenSindÖffentlich",
    "context": "final isLoggedIn = await authService.isLoggedIn();\n\n          final isAuthRoute = state.matchedLocation.startsWith('/go/auth');\n          final isInviteRoute = state.matchedLocation.startsWith('/go/world-join/'); // Invite-Routen sind öffentlich\n          final isProtectedRoute = (state.matchedLocation.startsWith('/go/worlds') ||\n                                  state.matchedLocation.startsWith('/go/dashboard')) &&\n                                  !isInviteRoute; // Invite-Routen ausschließen",
    "category": "navigation",
    "confidence": 0.75,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 110,
    "column": 82,
    "original": ")) &&\n                                  !isInviteRoute; // Invite-Routen ausschließen\n\n          if (!isLoggedIn && isProtectedRoute) {\n            AppLogger.navigation.i(",
    "suggested_key": "navigationIsinviterouteInviteroutenAusschließen",
    "context": "final isAuthRoute = state.matchedLocation.startsWith('/go/auth');\n          final isInviteRoute = state.matchedLocation.startsWith('/go/world-join/'); // Invite-Routen sind öffentlich\n          final isProtectedRoute = (state.matchedLocation.startsWith('/go/worlds') ||\n                                  state.matchedLocation.startsWith('/go/dashboard')) &&\n                                  !isInviteRoute; // Invite-Routen ausschließen\n\n          if (!isLoggedIn && isProtectedRoute) {",
    "category": "navigation",
    "confidence": 0.75,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 75,
    "column": 16,
    "original": "Zurück",
    "suggested_key": "navigationZurück",
    "context": "if (widget.currentRoute != 'world-list') {\n      items.add(NavigationItem(\n        icon: Icons.arrow_back,\n        label: 'Zurück',\n        onTap: () => Navigator.of(context).canPop() \n          ? Navigator.of(context).pop()\n          : context.goNamed('world-list'),",
    "category": "navigation",
    "confidence": 0.75,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 92,
    "column": 14,
    "original": "Welten-Übersicht",
    "suggested_key": "navigationWeltenübersicht",
    "context": "// Immer zur Welten-Liste\n    items.add(NavigationItem(\n      icon: Icons.public,\n      label: 'Welten-Übersicht',\n      onTap: () => context.goNamed('world-list'),\n      isActive: widget.currentRoute == 'world-list',\n    ));",
    "category": "navigation",
    "confidence": 0.75,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 127,
    "column": 60,
    "original": ",\n          isDisabled: !isJoined,\n        ));\n      }\n    }\n    \n    // Weitere Navigation Items können hier hinzugefügt werden\n    // z.B. Settings, Profile, etc.\n    \n    return items;\n  }\n  \n  @override\n  Widget build(BuildContext context) {\n    final navItems = _getNavigationItems();\n    \n    return Positioned(\n      top: 16,\n      right: 16,\n      child: FadeTransition(\n        opacity: _fadeAnimation,\n        child: AnimatedContainer(\n          duration: const Duration(milliseconds: 300),\n          decoration: BoxDecoration(\n            color: const Color(0xFF1A1A1A).withOpacity(0.95),\n            borderRadius: BorderRadius.circular(16),\n            border: Border.all(\n              color: AppTheme.primaryColor.withOpacity(0.3),\n              width: 1,\n            ),\n            boxShadow: [\n              BoxShadow(\n                color: Colors.black.withOpacity(0.3),\n                blurRadius: 12,\n                offset: const Offset(0, 4),\n              ),\n            ],\n          ),\n          child: Material(\n            color: Colors.transparent,\n            child: _isExpanded ? _buildExpandedView(navItems) : _buildCompactView(),\n          ),\n        ),\n      ),\n    );\n  }\n  \n  Widget _buildCompactView() {\n    return InkWell(\n      onTap: _toggleExpanded,\n      borderRadius: BorderRadius.circular(16),\n      child: Padding(\n        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),\n        child: Row(\n          mainAxisSize: MainAxisSize.min,\n          children: [\n            Container(\n              width: 36,\n              height: 36,\n              decoration: BoxDecoration(\n                color: AppTheme.primaryColor.withOpacity(0.2),\n                shape: BoxShape.circle,\n              ),\n              child: const Icon(\n                Icons.explore,\n                color: AppTheme.primaryColor,\n                size: 20,\n              ),\n            ),\n            const SizedBox(width: 12),\n            Column(\n              crossAxisAlignment: CrossAxisAlignment.start,\n              mainAxisSize: MainAxisSize.min,\n              children: [\n                const Text(\n                  ",
    "suggested_key": "navigationIsdisabledIsjoinedWeitere",
    "context": "onTap: isJoined \n            ? () => context.goNamed('world-dashboard', pathParameters: {'id': worldId})\n            : () => _showJoinRequiredMessage(),\n          isActive: widget.currentRoute == 'world-dashboard',\n          isDisabled: !isJoined,\n        ));\n      }",
    "category": "navigation",
    "confidence": 0.75,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 262,
    "column": 30,
    "original": ",\n                  style: TextStyle(\n                    color: Colors.white,\n                    fontSize: 16,\n                    fontWeight: FontWeight.bold,\n                  ),\n                ),\n                const SizedBox(width: 40),\n                Icon(\n                  Icons.keyboard_arrow_up,\n                  color: Colors.grey[400],\n                  size: 24,\n                ),\n              ],\n            ),\n          ),\n        ),\n        \n        const Divider(color: Colors.grey, height: 1),\n        \n        // Navigation Items\n        ...items.map((item) => _buildNavigationItem(item)),\n      ],\n    );\n  }\n  \n  Widget _buildNavigationItem(NavigationItem item) {\n    if (item.isDivider) {\n      return const Padding(\n        padding: EdgeInsets.symmetric(vertical: 4),\n        child: Divider(color: Colors.grey, height: 1),\n      );\n    }\n    \n    final isActive = item.isActive;\n    final isDisabled = item.isDisabled;\n    \n    final widget = InkWell(\n      onTap: isDisabled ? null : () {\n        item.onTap();\n        if (!isDisabled) _toggleExpanded();\n      },\n      child: Container(\n        width: 220,\n        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),\n        decoration: BoxDecoration(\n          color: isActive ? AppTheme.primaryColor.withOpacity(0.1) : Colors.transparent,\n          border: Border(\n            left: BorderSide(\n              color: isActive ? AppTheme.primaryColor : Colors.transparent,\n              width: 3,\n            ),\n          ),\n        ),\n        child: Row(\n          children: [\n            Icon(\n              item.icon,\n              color: isDisabled \n                ? Colors.grey[600] \n                : (isActive ? AppTheme.primaryColor : Colors.grey[400]),\n              size: 20,\n            ),\n            const SizedBox(width: 12),\n            Expanded(\n              child: Text(\n                item.label,\n                style: TextStyle(\n                  color: isDisabled \n                    ? Colors.grey[600] \n                    : (isActive ? AppTheme.primaryColor : Colors.white),\n                  fontSize: 14,\n                  fontWeight: isActive ? FontWeight.w600 : FontWeight.normal,\n                  decoration: isDisabled ? TextDecoration.lineThrough : null,\n                ),\n              ),\n            ),\n            if (isActive && !isDisabled)\n              const Icon(\n                Icons.check_circle,\n                color: AppTheme.primaryColor,\n                size: 16,\n              ),\n            if (isDisabled)\n              Icon(\n                Icons.lock,\n                color: Colors.grey[600],\n                size: 16,\n              ),\n          ],\n        ),\n      ),\n    );\n    \n    // Tooltip hinzufügen wenn disabled\n    if (isDisabled && item.label.contains(",
    "suggested_key": "navigationStyleTextstyleColor",
    "context": "),\n                const SizedBox(width: 12),\n                const Text(\n                  'Navigation',\n                  style: TextStyle(\n                    color: Colors.white,\n                    fontSize: 16,",
    "category": "navigation",
    "confidence": 0.75,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1111,
    "column": 66,
    "original": "),\n                        ),\n                      ),\n                    ],\n                  ),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n\n  Widget _buildWorldContent() {\n    return Center(\n      child: Container(\n        constraints: const BoxConstraints(maxWidth: 900),\n        margin: const EdgeInsets.all(24),\n        child: Card(\n          elevation: 16,\n          color: const Color(0xFF1A1A1A),\n          shape: RoundedRectangleBorder(\n            borderRadius: BorderRadius.circular(24),\n            side: BorderSide(\n              color: AppTheme.primaryColor.withOpacity(0.3),\n              width: 1,\n            ),\n          ),\n          child: Column(\n            mainAxisSize: MainAxisSize.min,\n            children: [\n              // Header mit Welt-Name und Status\n              Container(\n                decoration: BoxDecoration(\n                  borderRadius: const BorderRadius.only(\n                    topLeft: Radius.circular(24),\n                    topRight: Radius.circular(24),\n                  ),\n                  gradient: LinearGradient(\n                    begin: Alignment.topLeft,\n                    end: Alignment.bottomRight,\n                    colors: [\n                      AppTheme.primaryColor.withOpacity(0.1),\n                      AppTheme.primaryColor.withOpacity(0.05),\n                    ],\n                  ),\n                ),\n                padding: const EdgeInsets.all(24),\n                child: Column(\n                  children: [\n                    // Welt-Name und Status\n                    Row(\n                      children: [\n                        Expanded(\n                          child: Column(\n                            crossAxisAlignment: CrossAxisAlignment.start,\n                            children: [\n                              Text(\n                                _world?.name ?? ",
    "suggested_key": "worldWidget_buildworldcontentReturn",
    "context": "borderRadius: BorderRadius.circular(12),\n                            ),\n                          ),\n                          child: const Text('Zurück zu den Welten'),\n                        ),\n                      ),\n                    ],",
    "category": "world",
    "confidence": 0.75,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 599,
    "column": 27,
    "original": "Welt verlassen?",
    "suggested_key": "buttonWeltVerlassen",
    "context": "final confirmed = await showDialog<bool>(\n      context: context,\n      builder: (context) => AlertDialog(\n        title: const Text('Welt verlassen?'),\n        content: Text('Möchtest du die Welt \"${world.name}\" wirklich verlassen?'),\n        actions: [\n          TextButton(",
    "category": "button",
    "confidence": 0.7000000000000001,
    "widget_context": "Widget: AlertDialog",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 600,
    "column": 23,
    "original": "Möchtest du die Welt \"${world.name}\" wirklich verlassen?",
    "suggested_key": "buttonMöchtestDuDie",
    "context": "context: context,\n      builder: (context) => AlertDialog(\n        title: const Text('Welt verlassen?'),\n        content: Text('Möchtest du die Welt \"${world.name}\" wirklich verlassen?'),\n        actions: [\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(false),",
    "category": "button",
    "confidence": 0.7000000000000001,
    "widget_context": "Widget: AlertDialog",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 383,
    "column": 27,
    "original": "Welt verlassen?",
    "suggested_key": "buttonWeltVerlassen",
    "context": "final confirmed = await showDialog<bool>(\n      context: context,\n      builder: (context) => AlertDialog(\n        title: const Text('Welt verlassen?'),\n        content: Text('Möchtest du die Welt \"${world.name}\" wirklich verlassen?'),\n        actions: [\n          TextButton(",
    "category": "button",
    "confidence": 0.7000000000000001,
    "widget_context": "Widget: AlertDialog",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 384,
    "column": 23,
    "original": "Möchtest du die Welt \"${world.name}\" wirklich verlassen?",
    "suggested_key": "buttonMöchtestDuDie",
    "context": "context: context,\n      builder: (context) => AlertDialog(\n        title: const Text('Welt verlassen?'),\n        content: Text('Möchtest du die Welt \"${world.name}\" wirklich verlassen?'),\n        actions: [\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(false),",
    "category": "button",
    "confidence": 0.7000000000000001,
    "widget_context": "Widget: AlertDialog",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 72,
    "column": 55,
    "original": ");\n        isAuthenticated.value = false;\n        return false;\n      }\n\n      _apiService.setToken(accessToken);\n      final response = await _apiService.get(",
    "suggested_key": "authIsauthenticatedvalueFalseReturn",
    "context": "});\n      \n      if (accessToken == null || accessToken.isEmpty) {\n        AppLogger.auth.i('❌ Kein Access-Token gefunden');\n        isAuthenticated.value = false;\n        return false;\n      }",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 78,
    "column": 55,
    "original": ");\n      \n      if (response.statusCode == 200) {\n        final userData = jsonDecode(response.body);\n        _currentUser = User.fromJson(userData);\n        isAuthenticated.value = true;\n        AppLogger.logAuthEvent(",
    "suggested_key": "authIfResponsestatuscode200",
    "context": "}\n\n      _apiService.setToken(accessToken);\n      final response = await _apiService.get('/auth/me');\n      \n      if (response.statusCode == 200) {\n        final userData = jsonDecode(response.body);",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 84,
    "column": 51,
    "original": ", username: _currentUser?.username);\n        return true;\n      } else if (response.statusCode == 401) {\n        AppLogger.auth.w(",
    "suggested_key": "authUsername_currentuserusernameReturn",
    "context": "final userData = jsonDecode(response.body);\n        _currentUser = User.fromJson(userData);\n        isAuthenticated.value = true;\n        AppLogger.logAuthEvent('user_authenticated', username: _currentUser?.username);\n        return true;\n      } else if (response.statusCode == 401) {\n        AppLogger.auth.w('⚠️ Token abgelaufen - versuche Refresh');",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 87,
    "column": 65,
    "original": ");\n        // Token abgelaufen, versuche Refresh\n        final refreshed = await refreshTokenIfNeeded();\n        isAuthenticated.value = refreshed;\n        return refreshed;\n      }\n      \n      AppLogger.auth.w(",
    "suggested_key": "authTokenAbgelaufenVersuche",
    "context": "AppLogger.logAuthEvent('user_authenticated', username: _currentUser?.username);\n        return true;\n      } else if (response.statusCode == 401) {\n        AppLogger.auth.w('⚠️ Token abgelaufen - versuche Refresh');\n        // Token abgelaufen, versuche Refresh\n        final refreshed = await refreshTokenIfNeeded();\n        isAuthenticated.value = refreshed;",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 94,
    "column": 71,
    "original": ");\n      isAuthenticated.value = false;\n      return false;\n    } catch (e) {\n      AppLogger.auth.e(",
    "suggested_key": "authIsauthenticatedvalueFalseReturn",
    "context": "return refreshed;\n      }\n      \n      AppLogger.auth.w('❌ Auth fehlgeschlagen (${response.statusCode})');\n      isAuthenticated.value = false;\n      return false;\n    } catch (e) {",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 174,
    "column": 42,
    "original": ", username: username);\n    \n    try {\n      final response = await _apiService.post(",
    "suggested_key": "authUsernameUsernameTry",
    "context": "}\n\n  Future<User?> login(String username, String password) async {\n    AppLogger.logAuthEvent('login_attempt', username: username);\n    \n    try {\n      final response = await _apiService.post('/auth/login', {",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 179,
    "column": 18,
    "original": ": password,\n      });\n\n      if (response.statusCode == 200) {\n        final data = jsonDecode(response.body);\n        final accessToken = data[",
    "suggested_key": "authPasswordIfResponsestatuscode",
    "context": "try {\n      final response = await _apiService.post('/auth/login', {\n        'username': username,\n        'password': password,\n      });\n\n      if (response.statusCode == 200) {",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 199,
    "column": 46,
    "original": ", username: username, metadata: {\n          ",
    "suggested_key": "authUsernameUsernameMetadata",
    "context": "// Fetch complete user data with roles\n        await fetchCurrentUser();\n        \n        AppLogger.logAuthEvent('login_success', username: username, metadata: {\n          'userId': _currentUser?.id,\n          'roles': _currentUser?.roles?.map((r) => r.role.name).toList(),\n        });",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 200,
    "column": 18,
    "original": ": _currentUser?.id,\n          ",
    "suggested_key": "auth_currentuserid",
    "context": "await fetchCurrentUser();\n        \n        AppLogger.logAuthEvent('login_success', username: username, metadata: {\n          'userId': _currentUser?.id,\n          'roles': _currentUser?.roles?.map((r) => r.role.name).toList(),\n        });",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 201,
    "column": 17,
    "original": ": _currentUser?.roles?.map((r) => r.role.name).toList(),\n        });\n        \n        return _currentUser;\n      } else if (response.statusCode == 401) {\n        AppLogger.logAuthEvent(",
    "suggested_key": "auth_currentuserrolesmaprRrolenametolistReturn",
    "context": "AppLogger.logAuthEvent('login_success', username: username, metadata: {\n          'userId': _currentUser?.id,\n          'roles': _currentUser?.roles?.map((r) => r.role.name).toList(),\n        });\n        \n        return _currentUser;",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 206,
    "column": 45,
    "original": ", username: username, metadata: {\n          ",
    "suggested_key": "authUsernameUsernameMetadata",
    "context": "return _currentUser;\n      } else if (response.statusCode == 401) {\n        AppLogger.logAuthEvent('login_failed', username: username, metadata: {\n          'reason': 'invalid_credentials',\n          'statusCode': response.statusCode,\n        });",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 230,
    "column": 13,
    "original": ": email,\n    });\n    \n    try {\n      final response = await _apiService.post(",
    "suggested_key": "authEmailTryFinal",
    "context": "Future<User?> register(String username, String email, String password) async {\n    AppLogger.logAuthEvent('register_attempt', username: username, metadata: {\n      'email': email,\n    });\n    \n    try {",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 237,
    "column": 18,
    "original": ": password,\n      });\n\n      if (response.statusCode == 201) {\n        final data = jsonDecode(response.body);\n        \n        // Token aus der Response extrahieren\n        final accessToken = data[",
    "suggested_key": "authPasswordIfResponsestatuscode",
    "context": "final response = await _apiService.post('/auth/register', {\n        'username': username,\n        'email': email,\n        'password': password,\n      });\n\n      if (response.statusCode == 201) {",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 273,
    "column": 49,
    "original": ", username: username, metadata: {\n          ",
    "suggested_key": "authUsernameUsernameMetadata",
    "context": "// Fetch complete user data with roles\n        await fetchCurrentUser();\n        \n        AppLogger.logAuthEvent('register_success', username: username, metadata: {\n          'userId': _currentUser?.id,\n          'email': email,\n          'roles': _currentUser?.roles?.map((r) => r.role.name).toList(),",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 274,
    "column": 18,
    "original": ": _currentUser?.id,\n          ",
    "suggested_key": "auth_currentuserid",
    "context": "await fetchCurrentUser();\n        \n        AppLogger.logAuthEvent('register_success', username: username, metadata: {\n          'userId': _currentUser?.id,\n          'email': email,\n          'roles': _currentUser?.roles?.map((r) => r.role.name).toList(),\n        });",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 317,
    "column": 56,
    "original": ";\n    AppLogger.logAuthEvent(",
    "suggested_key": "authApploggerlogauthevent",
    "context": "// Erweitertes Logout mit Server-Call und vollständigem Cleanup\n  Future<void> logout() async {\n    final username = _currentUser?.username ?? 'unknown';\n    AppLogger.logAuthEvent('logout_attempt', username: username);\n    \n    try {",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 318,
    "column": 43,
    "original": ", username: username);\n    \n    try {\n      // Versuche Server-seitiges Logout\n      final accessToken = await TokenStorage.getAccessToken();\n      if (accessToken != null) {\n        _apiService.setToken(accessToken);\n        try {\n          await _apiService.post(",
    "suggested_key": "authUsernameUsernameTry",
    "context": "// Erweitertes Logout mit Server-Call und vollständigem Cleanup\n  Future<void> logout() async {\n    final username = _currentUser?.username ?? 'unknown';\n    AppLogger.logAuthEvent('logout_attempt', username: username);\n    \n    try {\n      // Versuche Server-seitiges Logout",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 326,
    "column": 47,
    "original": ", {});\n          AppLogger.logAuthEvent(",
    "suggested_key": "authApploggerlogauthevent",
    "context": "if (accessToken != null) {\n        _apiService.setToken(accessToken);\n        try {\n          await _apiService.post('/auth/logout', {});\n          AppLogger.logAuthEvent('server_logout_success', username: username);\n        } catch (e) {\n          // Server-Logout fehlgeschlagen, trotzdem lokal ausloggen",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 327,
    "column": 56,
    "original": ", username: username);\n        } catch (e) {\n          // Server-Logout fehlgeschlagen, trotzdem lokal ausloggen\n          AppLogger.logAuthEvent(",
    "suggested_key": "authUsernameUsernameCatch",
    "context": "_apiService.setToken(accessToken);\n        try {\n          await _apiService.post('/auth/logout', {});\n          AppLogger.logAuthEvent('server_logout_success', username: username);\n        } catch (e) {\n          // Server-Logout fehlgeschlagen, trotzdem lokal ausloggen\n          AppLogger.logAuthEvent('server_logout_failed', username: username, metadata: {",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 380,
    "column": 61,
    "original": ", {});\n      \n      if (response.statusCode == 200) {\n        final data = jsonDecode(response.body);\n        final newAccessToken = data[",
    "suggested_key": "authIfResponsestatuscode200",
    "context": "}\n\n      _apiService.setToken(refreshToken);\n      final response = await _apiService.post('/auth/refresh', {});\n      \n      if (response.statusCode == 200) {\n        final data = jsonDecode(response.body);",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 418,
    "column": 55,
    "original": ");\n      \n      if (response.statusCode == 200) {\n        final userData = jsonDecode(response.body);\n        _currentUser = User.fromJson(userData);\n        await TokenStorage.saveUserData(jsonEncode(userData));\n        return _currentUser;\n      } else if (response.statusCode == 401) {\n        // Token invalid, clear auth\n        await logout();\n        return null;\n      } else {\n        throw Exception(",
    "suggested_key": "authIfResponsestatuscode200",
    "context": "// Fetch current user data with roles from server\n  Future<User?> fetchCurrentUser() async {\n    try {\n      final response = await _apiService.get('/auth/me');\n      \n      if (response.statusCode == 200) {\n        final userData = jsonDecode(response.body);",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 470,
    "column": 15,
    "original": ": email,\n      });\n\n      if (response.statusCode == 200) {\n        AppLogger.auth.i(",
    "suggested_key": "authEmailIfResponsestatuscode",
    "context": "Future<bool> requestPasswordReset(String email) async {\n    try {\n      final response = await _apiService.post('/auth/request-reset', {\n        'email': email,\n      });\n\n      if (response.statusCode == 200) {",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 493,
    "column": 18,
    "original": ": newPassword, // Backend erwartet ",
    "suggested_key": "authNewpasswordBackendErwartet",
    "context": "final response = await _apiService.post('/auth/reset-password', {\n        'token': token,\n        'password': newPassword, // Backend erwartet 'password', nicht 'newPassword'\n      });\n\n      if (response.statusCode == 200) {",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 493,
    "column": 84,
    "original": "\n      });\n\n      if (response.statusCode == 200) {\n        AppLogger.auth.i(",
    "suggested_key": "authIfResponsestatuscode200",
    "context": "final response = await _apiService.post('/auth/reset-password', {\n        'token': token,\n        'password': newPassword, // Backend erwartet 'password', nicht 'newPassword'\n      });\n\n      if (response.statusCode == 200) {",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 26,
    "column": 27,
    "original": "] as String,\n      createdAt: json[",
    "suggested_key": "authAsStringCreatedat",
    "context": "return Invite(\n      id: json['id'] as int,\n      email: json['email'] as String,\n      status: json['status'] as String,\n      createdAt: json['createdAt'] != null \n          ? DateTime.parse(json['createdAt'] as String) \n          : null,",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 27,
    "column": 33,
    "original": "] != null \n          ? DateTime.parse(json[",
    "suggested_key": "authNullDatetimeparsejson",
    "context": "id: json['id'] as int,\n      email: json['email'] as String,\n      status: json['status'] as String,\n      createdAt: json['createdAt'] != null \n          ? DateTime.parse(json['createdAt'] as String) \n          : null,\n      expiresAt: json['expiresAt'] != null",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 28,
    "column": 43,
    "original": "] as String) \n          : null,\n      expiresAt: json[",
    "suggested_key": "authAsStringNull",
    "context": "email: json['email'] as String,\n      status: json['status'] as String,\n      createdAt: json['createdAt'] != null \n          ? DateTime.parse(json['createdAt'] as String) \n          : null,\n      expiresAt: json['expiresAt'] != null \n          ? DateTime.parse(json['expiresAt'] as String)",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 126,
    "column": 15,
    "original": ": email,\n      };\n\n      final response = await _apiService.post(",
    "suggested_key": "authEmailFinalResponse",
    "context": "Future<bool> createInvite(int worldId, String email) async {\n    try {\n      final data = <String, dynamic>{\n        'email': email,\n      };\n\n      final response = await _apiService.post('/worlds/$worldId/invites', data);",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 129,
    "column": 72,
    "original": ", data);\n      \n      if (response.statusCode == 200) {\n        final responseData = jsonDecode(response.body);\n        return responseData[",
    "suggested_key": "authDataIfResponsestatuscode",
    "context": "'email': email,\n      };\n\n      final response = await _apiService.post('/worlds/$worldId/invites', data);\n      \n      if (response.statusCode == 200) {\n        final responseData = jsonDecode(response.body);",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 159,
    "column": 15,
    "original": ": email,\n      };\n\n      final response = await _apiService.post(",
    "suggested_key": "authEmailFinalResponse",
    "context": "Future<bool> createPublicInvite(int worldId, String email) async {\n    try {\n      final data = <String, dynamic>{\n        'email': email,\n      };\n\n      final response = await _apiService.post('/worlds/$worldId/invites/public', data);",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 162,
    "column": 79,
    "original": ", data);\n      \n      if (response.statusCode == 200) {\n        return true;\n      } else if (response.statusCode == 400) {\n        // Konsistente Fehlerbehandlung wie createInvite\n        final errorData = jsonDecode(response.body);\n        final errorCode = _parseErrorCode(errorData);\n        final errorMessage = _getErrorMessage(errorCode, errorData[",
    "suggested_key": "authDataIfResponsestatuscode",
    "context": "'email': email,\n      };\n\n      final response = await _apiService.post('/worlds/$worldId/invites/public', data);\n      \n      if (response.statusCode == 200) {\n        return true;",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 7,
    "column": 8,
    "original": "../../config/logger.dart",
    "suggested_key": "authConfigloggerdart",
    "context": "import '../models/world.dart';\nimport 'api_service.dart';\nimport 'auth_service.dart';\nimport '../../config/logger.dart';\n\n// PreRegistrationStatus-Model für bessere Typisierung\nclass PreRegistrationStatus {",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 29,
    "column": 27,
    "original": "] as String?,\n      config: json[",
    "suggested_key": "authAsStringConfig",
    "context": "registeredAt: json['registeredAt'] != null\n          ? DateTime.parse(json['registeredAt'] as String)\n          : null,\n      status: json['status'] as String?,\n      config: json['config'] as Map<String, dynamic>?,\n    );\n  }",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 214,
    "column": 15,
    "original": ": email,\n      };\n      if (config != null) {\n        data[",
    "suggested_key": "authEmailIfConfig",
    "context": "Future<bool> preRegisterWorld(int worldId, String email, {Map<String, dynamic>? config}) async {\n    try {\n      final data = <String, dynamic>{\n        'email': email,\n      };\n      if (config != null) {\n        data['config'] = config;",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 217,
    "column": 21,
    "original": "] = config;\n      }\n\n      final response = await _apiService.post(",
    "suggested_key": "authConfigFinalResponse",
    "context": "'email': email,\n      };\n      if (config != null) {\n        data['config'] = config;\n      }\n\n      final response = await _apiService.post('/worlds/$worldId/pre-register', data);",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 220,
    "column": 77,
    "original": ", data);\n      \n      if (response.statusCode == 200) {\n        final responseData = jsonDecode(response.body);\n        return responseData[",
    "suggested_key": "authDataIfResponsestatuscode",
    "context": "data['config'] = config;\n      }\n\n      final response = await _apiService.post('/worlds/$worldId/pre-register', data);\n      \n      if (response.statusCode == 200) {\n        final responseData = jsonDecode(response.body);",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 254,
    "column": 15,
    "original": ": currentUser.email,\n      };\n      if (config != null) {\n        data[",
    "suggested_key": "authCurrentuseremailIfConfig",
    "context": "}\n\n      final data = <String, dynamic>{\n        'email': currentUser.email,\n      };\n      if (config != null) {\n        data['config'] = config;",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 257,
    "column": 21,
    "original": "] = config;\n      }\n\n      final response = await _apiService.post(",
    "suggested_key": "authConfigFinalResponse",
    "context": "'email': currentUser.email,\n      };\n      if (config != null) {\n        data['config'] = config;\n      }\n\n      final response = await _apiService.post('/worlds/$worldId/pre-register', data);",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 260,
    "column": 77,
    "original": ", data);\n      \n      if (response.statusCode == 200) {\n        final responseData = jsonDecode(response.body);\n        return responseData[",
    "suggested_key": "authDataIfResponsestatuscode",
    "context": "data['config'] = config;\n      }\n\n      final response = await _apiService.post('/worlds/$worldId/pre-register', data);\n      \n      if (response.statusCode == 200) {\n        final responseData = jsonDecode(response.body);",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 355,
    "column": 46,
    "original": "/worlds/$worldId/pre-register/me",
    "suggested_key": "authWorldsworldidpreregisterme",
    "context": "// Neue typsichere Methode mit PreRegistrationStatus-Model\n  Future<PreRegistrationStatus> getPreRegistrationStatus(int worldId) async {\n    try {\n      final response = await _apiService.get('/worlds/$worldId/pre-register/me');\n      \n      if (response.statusCode == 200) {\n        final responseData = jsonDecode(response.body);",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 379,
    "column": 71,
    "original": ");\n      \n      if (response.statusCode == 200) {\n        final responseData = jsonDecode(response.body);\n        if (responseData[",
    "suggested_key": "authIfResponsestatuscode200",
    "context": "Future<Map<String, dynamic>?> validateInviteToken(String token) async {\n    try {\n      // API-Call ohne Authentifizierung (öffentlicher Endpoint)\n      final response = await _apiService.get('/invites/validate/$token');\n      \n      if (response.statusCode == 200) {\n        final responseData = jsonDecode(response.body);",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\forgot_password_page.dart",
    "line": 56,
    "column": 35,
    "original": ");\n          }\n        });\n      }\n    } catch (e) {\n      if (mounted) {\n        setState(() {\n          _errorMessage = e.toString().replaceAll(",
    "suggested_key": "authCatchEIf",
    "context": "// Nach 3 Sekunden zurück zum Login\n        Future.delayed(const Duration(seconds: 3), () {\n          if (mounted) {\n            context.goNamed('login');\n          }\n        });\n      }",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\forgot_password_page.dart",
    "line": 230,
    "column": 44,
    "original": "Bitte gib eine gültige E-Mail-Adresse ein",
    "suggested_key": "authBitteGibEine",
    "context": "return 'Bitte gib deine E-Mail-Adresse ein';\n                                  }\n                                  if (!_emailRegex.hasMatch(value.trim())) {\n                                    return 'Bitte gib eine gültige E-Mail-Adresse ein';\n                                  }\n                                  return null;\n                                },",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 6,
    "column": 43,
    "original": ";\n\n// ServiceLocator Import für DI\nimport ",
    "suggested_key": "authServicelocatorImportFür",
    "context": "import '../../config/logger.dart';\nimport '../../core/services/auth_service.dart';\nimport '../../theme/app_theme.dart';\nimport '../../theme/background_widget.dart';\n\n// ServiceLocator Import für DI\nimport '../../main.dart';",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 9,
    "column": 24,
    "original": ";\n\nclass LoginPage extends StatefulWidget {\n  const LoginPage({super.key});\n\n  @override\n  State<LoginPage> createState() => _LoginPageState();\n}\n\nclass _LoginPageState extends State<LoginPage> with SingleTickerProviderStateMixin {\n  final _formKey = GlobalKey<FormState>();\n  final _usernameController = TextEditingController();\n  final _passwordController = TextEditingController();\n  \n  late final AuthService _authService;\n  late AnimationController _animationController;\n  late Animation<double> _fadeAnimation;\n  \n  bool _isLoading = false;\n  bool _obscurePassword = true;\n  String? _loginError;\n  bool _rememberMe = false;\n  \n  // Invite-Parameter\n  String? _inviteToken;\n  \n  // Für bessere Validierung\n  bool _hasInteractedWithUsername = false;\n  bool _hasInteractedWithPassword = false;\n\n  @override\n  void initState() {\n    super.initState();\n    _initializeServices();\n    _loadQueryParameters();\n    \n    // Animation Setup\n    _animationController = AnimationController(\n      duration: const Duration(milliseconds: 800),\n      vsync: this,\n    );\n    _fadeAnimation = Tween<double>(\n      begin: 0.0,\n      end: 1.0,\n    ).animate(CurvedAnimation(\n      parent: _animationController,\n      curve: Curves.easeIn,\n    ));\n    \n    _animationController.forward();\n  }\n\n  @override\n  void dispose() {\n    _animationController.dispose();\n    _usernameController.dispose();\n    _passwordController.dispose();\n    super.dispose();\n  }\n\n  void _initializeServices() {\n    try {\n      if (ServiceLocator.has<AuthService>()) {\n        _authService = ServiceLocator.get<AuthService>();\n      } else {\n        _authService = AuthService();\n      }\n    } catch (e) {\n      AppLogger.app.w(",
    "suggested_key": "authClassLoginpageExtends",
    "context": "import '../../theme/background_widget.dart';\n\n// ServiceLocator Import für DI\nimport '../../main.dart';\n\nclass LoginPage extends StatefulWidget {\n  const LoginPage({super.key});",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 353,
    "column": 93,
    "original": ";\n                                      }\n                                      return null;\n                                    },\n                                  ),\n                                  const SizedBox(height: 12),\n                                  \n                                  // Remember Me & Forgot Password Row\n                                  Row(\n                                    mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                                    children: [\n                                      // Remember Me Checkbox\n                                      Row(\n                                        children: [\n                                          Transform.scale(\n                                            scale: 1.2,\n                                            child: Checkbox(\n                                              value: _rememberMe,\n                                              onChanged: (value) {\n                                                setState(() {\n                                                  _rememberMe = value ?? false;\n                                                });\n                                              },\n                                              fillColor: WidgetStateProperty.resolveWith<Color>((states) {\n                                                if (states.contains(WidgetState.selected)) {\n                                                  return AppTheme.primaryColor;\n                                                }\n                                                return Colors.grey[600]!;\n                                              }),\n                                              side: BorderSide(color: Colors.grey[600]!, width: 2),\n                                            ),\n                                          ),\n                                          GestureDetector(\n                                            onTap: () {\n                                              setState(() {\n                                                _rememberMe = !_rememberMe;\n                                              });\n                                            },\n                                            child: Text(\n                                              ",
    "suggested_key": "authReturnNullConst",
    "context": "return 'Bitte gib dein Passwort ein';\n                                      }\n                                      if (_hasInteractedWithPassword && value.length < 6) {\n                                        return 'Passwort muss mindestens 6 Zeichen lang sein';\n                                      }\n                                      return null;\n                                    },",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 528,
    "column": 55,
    "original": ",\n                                      ),\n                                      const SizedBox(width: 16),\n                                      // GitHub Login\n                                      _buildSocialLoginButton(\n                                        onPressed: () {\n                                          ScaffoldMessenger.of(context).showSnackBar(\n                                            const SnackBar(\n                                              content: Text(",
    "suggested_key": "authConstSizedboxwidth16",
    "context": ");\n                                        },\n                                        icon: Icons.g_mobiledata,\n                                        label: 'Google',\n                                      ),\n                                      const SizedBox(width: 16),\n                                      // GitHub Login",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 7,
    "column": 43,
    "original": ";\n\n// ServiceLocator Import für DI\nimport ",
    "suggested_key": "authServicelocatorImportFür",
    "context": "import '../../core/services/auth_service.dart';\nimport '../../core/services/world_service.dart';\nimport '../../theme/app_theme.dart';\nimport '../../theme/background_widget.dart';\n\n// ServiceLocator Import für DI\nimport '../../main.dart';",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 10,
    "column": 24,
    "original": ";\n\nclass RegisterPage extends StatefulWidget {\n  const RegisterPage({super.key});\n\n  @override\n  State<RegisterPage> createState() => _RegisterPageState();\n}\n\nclass _RegisterPageState extends State<RegisterPage> {\n  final _formKey = GlobalKey<FormState>();\n  final _usernameController = TextEditingController();\n  final _emailController = TextEditingController();\n  final _passwordController = TextEditingController();\n  \n  // DI-ready: ServiceLocator verwenden statt Singleton\n  late final AuthService _authService;\n  \n  bool _isLoading = false;\n  bool _obscurePassword = true;\n  String? _registerError;\n  \n  // Invite-Parameter\n  String? _inviteToken;\n  String? _prefilledEmail;\n\n  // E-Mail-Validierung Regex\n  static final RegExp _emailRegex = RegExp(r",
    "suggested_key": "authClassRegisterpageExtends",
    "context": "import '../../theme/background_widget.dart';\n\n// ServiceLocator Import für DI\nimport '../../main.dart';\n\nclass RegisterPage extends StatefulWidget {\n  const RegisterPage({super.key});",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 37,
    "column": 66,
    "original": ");\n\n  @override\n  void initState() {\n    super.initState();\n    // DI-ready: ServiceLocator verwenden mit robuster Fehlerbehandlung\n    _initializeServices();\n    _loadQueryParameters();\n  }\n\n  void _initializeServices() {\n    try {\n      if (ServiceLocator.has<AuthService>()) {\n        _authService = ServiceLocator.get<AuthService>();\n      } else {\n        _authService = AuthService();\n      }\n      \n    } catch (e) {\n      AppLogger.app.w(",
    "suggested_key": "authOverrideVoidInitstate",
    "context": "String? _prefilledEmail;\n\n  // E-Mail-Validierung Regex\n  static final RegExp _emailRegex = RegExp(r'^[^@]+@[^@]+\\.[^@]+$');\n\n  @override\n  void initState() {",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 71,
    "column": 13,
    "original": ": _prefilledEmail\n    });\n    \n    // E-Mail vorbefüllen wenn vorhanden\n    if (_prefilledEmail != null && _prefilledEmail!.isNotEmpty) {\n      _emailController.text = _prefilledEmail!;\n      AppLogger.app.i(",
    "suggested_key": "auth_prefilledemailEmailVorbefüllen",
    "context": "'hasInviteToken': _inviteToken != null,\n      'hasPrefilledEmail': _prefilledEmail != null,\n      'inviteToken': _inviteToken?.substring(0, 8),\n      'email': _prefilledEmail\n    });\n    \n    // E-Mail vorbefüllen wenn vorhanden",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 354,
    "column": 42,
    "original": "Bitte gib eine gültige E-Mail-Adresse ein",
    "suggested_key": "authBitteGibEine",
    "context": "return 'E-Mail ist erforderlich';\n                                }\n                                if (!_emailRegex.hasMatch(value)) {\n                                  return 'Bitte gib eine gültige E-Mail-Adresse ein';\n                                }\n                                return null;\n                              },",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 91,
    "column": 33,
    "original": ");\n        }\n      }\n    } catch (e) {\n      if (mounted) {\n        setState(() {\n          final error = e.toString().replaceAll(",
    "suggested_key": "authCatchEIf",
    "context": "// Erfolgsmeldung zeigen und nach 3 Sekunden zum Login\n        await Future.delayed(const Duration(seconds: 3));\n        if (mounted) {\n          context.goNamed('login');\n        }\n      }\n    } catch (e) {",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 3,
    "column": 8,
    "original": "../../../config/logger.dart",
    "suggested_key": "authConfigloggerdart",
    "context": "import 'package:flutter/material.dart';\nimport 'package:flutter/foundation.dart';\nimport '../../../config/logger.dart';\nimport '../../../core/models/world.dart';\nimport '../../../core/services/world_service.dart';\nimport '../../../core/services/auth_service.dart';",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 5,
    "column": 8,
    "original": "../../../core/services/world_service.dart",
    "suggested_key": "authCoreservicesworld_servicedart",
    "context": "import 'package:flutter/foundation.dart';\nimport '../../../config/logger.dart';\nimport '../../../core/models/world.dart';\nimport '../../../core/services/world_service.dart';\nimport '../../../core/services/auth_service.dart';\nimport '../../../core/services/invite_service.dart';\nimport '../widgets/world_card.dart';",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 6,
    "column": 8,
    "original": "../../../core/services/auth_service.dart",
    "suggested_key": "authCoreservicesauth_servicedart",
    "context": "import '../../../config/logger.dart';\nimport '../../../core/models/world.dart';\nimport '../../../core/services/world_service.dart';\nimport '../../../core/services/auth_service.dart';\nimport '../../../core/services/invite_service.dart';\nimport '../widgets/world_card.dart';",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 7,
    "column": 8,
    "original": "../../core/services/auth_service.dart",
    "suggested_key": "authCoreservicesauth_servicedart",
    "context": "import '../../config/logger.dart';\nimport '../../core/models/world.dart';\nimport '../../core/services/world_service.dart';\nimport '../../core/services/auth_service.dart';\nimport '../../core/services/api_service.dart';\nimport '../../theme/app_theme.dart';\nimport '../../theme/background_widget.dart';",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 8,
    "column": 8,
    "original": "../../core/services/api_service.dart",
    "suggested_key": "authCoreservicesapi_servicedart",
    "context": "import '../../core/models/world.dart';\nimport '../../core/services/world_service.dart';\nimport '../../core/services/auth_service.dart';\nimport '../../core/services/api_service.dart';\nimport '../../theme/app_theme.dart';\nimport '../../theme/background_widget.dart';\nimport '../../shared/widgets/user_info_widget.dart';",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 122,
    "column": 17,
    "original": ": wasAuthenticated != _isAuthenticated\n      });\n      \n      // UI aktualisieren wenn sich Status geändert hat\n      if (wasAuthenticated != _isAuthenticated && mounted) {\n        setState(() {});\n      }\n    } catch (e) {\n      AppLogger.logError(",
    "suggested_key": "authWasauthenticated_isauthenticatedUi",
    "context": "'isAuthenticated': _isAuthenticated,\n        'userId': currentUser?.id,\n        'username': currentUser?.username,\n        'changed': wasAuthenticated != _isAuthenticated\n      });\n      \n      // UI aktualisieren wenn sich Status geändert hat",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 213,
    "column": 41,
    "original": "];\n    final inviteEmail = inviteData[",
    "suggested_key": "authFinalInviteemailInvitedata",
    "context": "_world = World.fromJson(tokenData['world']);\n    \n    // Invite-Details extrahieren\n    final inviteData = tokenData['invite'];\n    final inviteEmail = inviteData['email'];\n    final invitedByData = inviteData['invitedBy'];\n    final invitedByName = invitedByData?['username'] ?? 'Unbekannt';",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 214,
    "column": 42,
    "original": "];\n    final invitedByData = inviteData[",
    "suggested_key": "authFinalInvitedbydataInvitedata",
    "context": "// Invite-Details extrahieren\n    final inviteData = tokenData['invite'];\n    final inviteEmail = inviteData['email'];\n    final invitedByData = inviteData['invitedBy'];\n    final invitedByName = invitedByData?['username'] ?? 'Unbekannt';",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 215,
    "column": 48,
    "original": "];\n    final invitedByName = invitedByData?[",
    "suggested_key": "authFinalInvitedbynameInvitedbydata",
    "context": "// Invite-Details extrahieren\n    final inviteData = tokenData['invite'];\n    final inviteEmail = inviteData['email'];\n    final invitedByData = inviteData['invitedBy'];\n    final invitedByName = invitedByData?['username'] ?? 'Unbekannt';\n    \n    // Invite-Zeitstempel verarbeiten",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 216,
    "column": 67,
    "original": ";\n    \n    // Invite-Zeitstempel verarbeiten\n    final expiresAtString = inviteData[",
    "suggested_key": "authInvitezeitstempelVerarbeitenFinal",
    "context": "final inviteData = tokenData['invite'];\n    final inviteEmail = inviteData['email'];\n    final invitedByData = inviteData['invitedBy'];\n    final invitedByName = invitedByData?['username'] ?? 'Unbekannt';\n    \n    // Invite-Zeitstempel verarbeiten\n    final expiresAtString = inviteData['expiresAt'];",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 285,
    "column": 26,
    "original": ":\n        if (requiresAction == ",
    "suggested_key": "authIfRequiresaction",
    "context": "// Je nach Status unterschiedliche Logik\n    switch (status) {\n      case 'not_logged_in':\n        if (requiresAction == 'register') {\n          // Mail ist unbekannt -> nur Register\n          actionText = 'Du musst dich mit der E-Mail-Adresse $inviteEmail registrieren.';",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 286,
    "column": 40,
    "original": ") {\n          // Mail ist unbekannt -> nur Register\n          actionText = ",
    "suggested_key": "authMailIstUnbekannt",
    "context": "// Je nach Status unterschiedliche Logik\n    switch (status) {\n      case 'not_logged_in':\n        if (requiresAction == 'register') {\n          // Mail ist unbekannt -> nur Register\n          actionText = 'Du musst dich mit der E-Mail-Adresse $inviteEmail registrieren.';\n          infoText = '$baseInfoText\\n\\n$actionText';",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 294,
    "column": 38,
    "original": ":\n        if (requiresAction == ",
    "suggested_key": "authIfRequiresaction",
    "context": "}\n        break;\n        \n      case 'user_exists_not_logged_in':\n        if (requiresAction == 'login') {\n          // Mail ist bekannt, User nicht angemeldet -> nur Login\n          actionText = 'Dein Account mit $inviteEmail ist bereits registriert. Bitte melde dich an.';",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 295,
    "column": 37,
    "original": ") {\n          // Mail ist bekannt, User nicht angemeldet -> nur Login\n          actionText = ",
    "suggested_key": "authMailIstBekannt",
    "context": "break;\n        \n      case 'user_exists_not_logged_in':\n        if (requiresAction == 'login') {\n          // Mail ist bekannt, User nicht angemeldet -> nur Login\n          actionText = 'Dein Account mit $inviteEmail ist bereits registriert. Bitte melde dich an.';\n          infoText = '$baseInfoText\\n\\n$actionText';",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 303,
    "column": 24,
    "original": ":\n        if (requiresAction == ",
    "suggested_key": "authIfRequiresaction",
    "context": "}\n        break;\n        \n      case 'wrong_email':\n        if (requiresAction == 'logout_and_register') {\n          final currentUserEmail = userStatusData['currentUser']?['email'];\n          // User mit falscher Mail angemeldet -> Logout + Register",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 304,
    "column": 51,
    "original": ") {\n          final currentUserEmail = userStatusData[",
    "suggested_key": "authFinalCurrentuseremailUserstatusdata",
    "context": "break;\n        \n      case 'wrong_email':\n        if (requiresAction == 'logout_and_register') {\n          final currentUserEmail = userStatusData['currentUser']?['email'];\n          // User mit falscher Mail angemeldet -> Logout + Register\n          actionText = 'Diese Einladung ist für $inviteEmail bestimmt, aber du bist als $currentUserEmail angemeldet.';",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 305,
    "column": 73,
    "original": "];\n          // User mit falscher Mail angemeldet -> Logout + Register\n          actionText = ",
    "suggested_key": "authUserMitFalscher",
    "context": "case 'wrong_email':\n        if (requiresAction == 'logout_and_register') {\n          final currentUserEmail = userStatusData['currentUser']?['email'];\n          // User mit falscher Mail angemeldet -> Logout + Register\n          actionText = 'Diese Einladung ist für $inviteEmail bestimmt, aber du bist als $currentUserEmail angemeldet.';\n          infoText = '$baseInfoText\\n\\n$actionText\\n\\nBitte melde dich ab und registriere dich mit der richtigen E-Mail-Adresse.';",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 711,
    "column": 27,
    "original": ", queryParameters: {",
    "suggested_key": "authQueryparameters",
    "context": "_authService.setPendingInviteRedirect(widget.inviteToken!);\n    }\n    \n    context.goNamed('login', queryParameters: {'invite_token': widget.inviteToken});\n  }\n\n  // User abmelden und zur Registration weiterleiten",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 711,
    "column": 61,
    "original": ": widget.inviteToken});\n  }\n\n  // User abmelden und zur Registration weiterleiten\n  Future<void> _logout() async {\n    try {\n      AppLogger.app.i(",
    "suggested_key": "authWidgetinvitetokenUserAbmelden",
    "context": "_authService.setPendingInviteRedirect(widget.inviteToken!);\n    }\n    \n    context.goNamed('login', queryParameters: {'invite_token': widget.inviteToken});\n  }\n\n  // User abmelden und zur Registration weiterleiten",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 728,
    "column": 34,
    "original": ", queryParameters: {\n          ",
    "suggested_key": "authQueryparameters",
    "context": "if (mounted && _inviteEmail != null) {\n        // Nach Logout zur Registration mit korrekter E-Mail\n        context.goNamed('register', queryParameters: {\n          'email': _inviteEmail!,\n          'invite_token': widget.inviteToken ?? ''\n        });",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 729,
    "column": 17,
    "original": ": _inviteEmail!,\n          ",
    "suggested_key": "auth_inviteemail",
    "context": "if (mounted && _inviteEmail != null) {\n        // Nach Logout zur Registration mit korrekter E-Mail\n        context.goNamed('register', queryParameters: {\n          'email': _inviteEmail!,\n          'invite_token': widget.inviteToken ?? ''\n        });\n      }",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 730,
    "column": 24,
    "original": ": widget.inviteToken ?? ",
    "suggested_key": "authWidgetinvitetoken",
    "context": "// Nach Logout zur Registration mit korrekter E-Mail\n        context.goNamed('register', queryParameters: {\n          'email': _inviteEmail!,\n          'invite_token': widget.inviteToken ?? ''\n        });\n      }\n    } catch (e) {",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 730,
    "column": 50,
    "original": "\n        });\n      }\n    } catch (e) {\n      AppLogger.logError(",
    "suggested_key": "authCatchEApploggerlogerror",
    "context": "// Nach Logout zur Registration mit korrekter E-Mail\n        context.goNamed('register', queryParameters: {\n          'email': _inviteEmail!,\n          'invite_token': widget.inviteToken ?? ''\n        });\n      }\n    } catch (e) {",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 7,
    "column": 8,
    "original": "../../core/services/invite_service.dart",
    "suggested_key": "authCoreservicesinvite_servicedart",
    "context": "import '../../config/logger.dart';\nimport '../../core/services/auth_service.dart';\nimport '../../core/services/world_service.dart';\nimport '../../core/services/invite_service.dart';\nimport '../../core/models/world.dart';\nimport '../../theme/app_theme.dart';\nimport '../../theme/background_widget.dart';",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 285,
    "column": 41,
    "original": ")) {\n            if (mounted) {\n              setState(() {\n                _preRegisteredWorlds[world.id] = false;\n              });\n            }\n          } else {\n            // Only log other errors\n            AppLogger.logError(",
    "suggested_key": "authIfMountedSetstate",
    "context": "}\n        } catch (e) {\n          // 404 means user is not pre-registered, which is normal\n          if (e.toString().contains('404')) {\n            if (mounted) {\n              setState(() {\n                _preRegisteredWorlds[world.id] = false;",
    "category": "auth",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\forgot_password_page.dart",
    "line": 118,
    "column": 72,
    "original": "),\n                                icon: const Icon(Icons.arrow_back),\n                                color: Colors.grey[400],\n                              ),\n                            ),\n                            \n                            // Icon\n                            Container(\n                              width: 80,\n                              height: 80,\n                              decoration: BoxDecoration(\n                                color: AppTheme.primaryColor.withOpacity(0.2),\n                                borderRadius: BorderRadius.circular(20),\n                                border: Border.all(\n                                  color: AppTheme.primaryColor.withOpacity(0.5),\n                                  width: 2,\n                                ),\n                              ),\n                              child: const Icon(\n                                Icons.lock_reset,\n                                size: 40,\n                                color: AppTheme.primaryColor,\n                              ),\n                            ),\n                            const SizedBox(height: 20),\n                            \n                            Text(\n                              ",
    "suggested_key": "buttonIconConstIconiconsarrow_back",
    "context": "Align(\n                              alignment: Alignment.centerLeft,\n                              child: IconButton(\n                                onPressed: () => context.goNamed('login'),\n                                icon: const Icon(Icons.arrow_back),\n                                color: Colors.grey[400],\n                              ),",
    "category": "button",
    "confidence": 0.7,
    "widget_context": "Widget: child property",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 311,
    "column": 59,
    "original": ",\n                                      labelStyle: TextStyle(color: Colors.grey[400]),\n                                      prefixIcon: const Icon(Icons.lock, color: AppTheme.primaryColor),\n                                      suffixIcon: IconButton(\n                                        icon: Icon(\n                                          _obscurePassword ? Icons.visibility : Icons.visibility_off,\n                                          color: Colors.grey[400],\n                                        ),\n                                        onPressed: () {\n                                          setState(() {\n                                            _obscurePassword = !_obscurePassword;\n                                          });\n                                        },\n                                      ),\n                                      filled: true,\n                                      fillColor: const Color(0xFF2D2D2D),\n                                      border: OutlineInputBorder(\n                                        borderRadius: BorderRadius.circular(12),\n                                        borderSide: BorderSide(color: Colors.grey[600]!),\n                                      ),\n                                      enabledBorder: OutlineInputBorder(\n                                        borderRadius: BorderRadius.circular(12),\n                                        borderSide: BorderSide(color: Colors.grey[600]!),\n                                      ),\n                                      focusedBorder: OutlineInputBorder(\n                                        borderRadius: BorderRadius.circular(12),\n                                        borderSide: const BorderSide(color: AppTheme.primaryColor, width: 2),\n                                      ),\n                                      errorBorder: OutlineInputBorder(\n                                        borderRadius: BorderRadius.circular(12),\n                                        borderSide: BorderSide(color: Colors.red[400]!),\n                                      ),\n                                      focusedErrorBorder: OutlineInputBorder(\n                                        borderRadius: BorderRadius.circular(12),\n                                        borderSide: BorderSide(color: Colors.red[400]!, width: 2),\n                                      ),\n                                    ),\n                                    validator: (value) {\n                                      if (value == null || value.isEmpty) {\n                                        return ",
    "suggested_key": "buttonLabelstyleTextstylecolorColorsgrey400",
    "context": "}\n                                    },\n                                    decoration: InputDecoration(\n                                      labelText: 'Passwort',\n                                      labelStyle: TextStyle(color: Colors.grey[400]),\n                                      prefixIcon: const Icon(Icons.lock, color: AppTheme.primaryColor),\n                                      suffixIcon: IconButton(",
    "category": "button",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 552,
    "column": 59,
    "original": ",\n                                        style: TextStyle(color: Colors.grey[400]),\n                                      ),\n                                      TextButton(\n                                        onPressed: () => context.goNamed(",
    "suggested_key": "buttonStyleTextstylecolorColorsgrey400",
    "context": "mainAxisAlignment: MainAxisAlignment.center,\n                                    children: [\n                                      Text(\n                                        'Noch kein Konto? ',\n                                        style: TextStyle(color: Colors.grey[400]),\n                                      ),\n                                      TextButton(",
    "category": "button",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 556,
    "column": 83,
    "original": "),\n                                        child: const Text(\n                                          ",
    "suggested_key": "buttonChildConstText",
    "context": "style: TextStyle(color: Colors.grey[400]),\n                                      ),\n                                      TextButton(\n                                        onPressed: () => context.goNamed('register'),\n                                        child: const Text(\n                                          'Registrieren',\n                                          style: TextStyle(",
    "category": "button",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 558,
    "column": 56,
    "original": ",\n                                          style: TextStyle(\n                                            color: AppTheme.primaryColor,\n                                            fontWeight: FontWeight.bold,\n                                            fontSize: 16,\n                                          ),\n                                        ),\n                                      ),\n                                    ],\n                                  ),\n                                ],\n                              ),\n                            ),\n                          ),\n                        ),\n                      ),\n                    ),\n                  ),\n                ),\n              ),\n            ),\n          ),\n          \n          // Loading Overlay\n          if (_isLoading)\n            AnimatedOpacity(\n              opacity: _isLoading ? 1.0 : 0.0,\n              duration: const Duration(milliseconds: 200),\n              child: Container(\n                color: Colors.black.withOpacity(0.7),\n                child: const Center(\n                  child: Column(\n                    mainAxisAlignment: MainAxisAlignment.center,\n                    children: [\n                      CircularProgressIndicator(\n                        valueColor: AlwaysStoppedAnimation<Color>(Colors.white),\n                      ),\n                      SizedBox(height: 16),\n                      Text(\n                        ",
    "suggested_key": "buttonStyleTextstyleColor",
    "context": "TextButton(\n                                        onPressed: () => context.goNamed('register'),\n                                        child: const Text(\n                                          'Registrieren',\n                                          style: TextStyle(\n                                            color: AppTheme.primaryColor,\n                                            fontWeight: FontWeight.bold,",
    "category": "button",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 369,
    "column": 53,
    "original": ",\n                                labelStyle: TextStyle(color: Colors.grey[400]),\n                                prefixIcon: const Icon(Icons.lock, color: AppTheme.primaryColor),\n                                suffixIcon: IconButton(\n                                  icon: Icon(\n                                    _obscurePassword ? Icons.visibility : Icons.visibility_off,\n                                    color: Colors.grey[400],\n                                  ),\n                                  onPressed: () {\n                                    setState(() {\n                                      _obscurePassword = !_obscurePassword;\n                                    });\n                                  },\n                                ),\n                                filled: true,\n                                fillColor: const Color(0xFF2D2D2D),\n                                border: OutlineInputBorder(\n                                  borderRadius: BorderRadius.circular(12),\n                                  borderSide: BorderSide(color: Colors.grey[600]!),\n                                ),\n                                enabledBorder: OutlineInputBorder(\n                                  borderRadius: BorderRadius.circular(12),\n                                  borderSide: BorderSide(color: Colors.grey[600]!),\n                                ),\n                                focusedBorder: OutlineInputBorder(\n                                  borderRadius: BorderRadius.circular(12),\n                                  borderSide: const BorderSide(color: AppTheme.primaryColor, width: 2),\n                                ),\n                                errorBorder: OutlineInputBorder(\n                                  borderRadius: BorderRadius.circular(12),\n                                  borderSide: BorderSide(color: Colors.red[400]!),\n                                ),\n                                focusedErrorBorder: OutlineInputBorder(\n                                  borderRadius: BorderRadius.circular(12),\n                                  borderSide: BorderSide(color: Colors.red[400]!, width: 2),\n                                ),\n                              ),\n                              validator: (value) {\n                                if (value == null || value.isEmpty) {\n                                  return ",
    "suggested_key": "buttonLabelstyleTextstylecolorColorsgrey400",
    "context": "obscureText: _obscurePassword,\n                              style: const TextStyle(color: Colors.white),\n                              decoration: InputDecoration(\n                                labelText: 'Passwort',\n                                labelStyle: TextStyle(color: Colors.grey[400]),\n                                prefixIcon: const Icon(Icons.lock, color: AppTheme.primaryColor),\n                                suffixIcon: IconButton(",
    "category": "button",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 477,
    "column": 55,
    "original": ",\n                                  style: TextStyle(color: Colors.grey[400]),\n                                ),\n                                TextButton(\n                                  onPressed: () => context.goNamed(",
    "suggested_key": "buttonStyleTextstylecolorColorsgrey400",
    "context": "mainAxisAlignment: MainAxisAlignment.center,\n                              children: [\n                                Text(\n                                  'Bereits ein Konto? ',\n                                  style: TextStyle(color: Colors.grey[400]),\n                                ),\n                                TextButton(",
    "category": "button",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 481,
    "column": 74,
    "original": "),\n                                  child: const Text(\n                                    ",
    "suggested_key": "buttonChildConstText",
    "context": "style: TextStyle(color: Colors.grey[400]),\n                                ),\n                                TextButton(\n                                  onPressed: () => context.goNamed('login'),\n                                  child: const Text(\n                                    'Anmelden',\n                                    style: TextStyle(",
    "category": "button",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 247,
    "column": 48,
    "original": "Neues Passwort",
    "suggested_key": "buttonNeuesPasswort",
    "context": "}\n                                  },\n                                  decoration: InputDecoration(\n                                    labelText: 'Neues Passwort',\n                                    labelStyle: TextStyle(color: Colors.grey[400]),\n                                    prefixIcon: const Icon(Icons.lock, color: AppTheme.primaryColor),\n                                    suffixIcon: IconButton(",
    "category": "button",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 316,
    "column": 48,
    "original": "Passwort bestätigen",
    "suggested_key": "buttonPasswortBestätigen",
    "context": "}\n                                  },\n                                  decoration: InputDecoration(\n                                    labelText: 'Passwort bestätigen',\n                                    labelStyle: TextStyle(color: Colors.grey[400]),\n                                    prefixIcon: const Icon(Icons.lock_outline, color: AppTheme.primaryColor),\n                                    suffixIcon: IconButton(",
    "category": "button",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_card.dart",
    "line": 397,
    "column": 35,
    "original": ",\n              color: Colors.red[600],\n            ));\n          }\n        } else {\n          if (onPreRegister != null) {\n            buttons.add(_buildButton(\n              onPressed: onPreRegister,\n              icon: Icons.how_to_reg,\n              label: ",
    "suggested_key": "buttonColorColorsred600Else",
    "context": "buttons.add(_buildButton(\n              onPressed: onCancelPreRegistration,\n              icon: Icons.cancel,\n              label: 'Zurückziehen',\n              color: Colors.red[600],\n            ));\n          }",
    "category": "button",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_card.dart",
    "line": 406,
    "column": 38,
    "original": ",\n              color: Colors.orange[600],\n            ));\n          }\n        }\n        break;\n        \n      case WorldStatus.open:\n      case WorldStatus.running:\n        // Beitreten oder Verlassen\n        if (isJoined) {\n          // Spielen Button immer zuerst anzeigen wenn verfügbar\n          if (onPlay != null) {\n            buttons.add(_buildButton(\n              onPressed: onPlay,\n              icon: Icons.play_circle_filled,\n              label: ",
    "suggested_key": "buttonColorColorsorange600Break",
    "context": "buttons.add(_buildButton(\n              onPressed: onPreRegister,\n              icon: Icons.how_to_reg,\n              label: 'Vorregistrieren',\n              color: Colors.orange[600],\n            ));\n          }",
    "category": "button",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_card.dart",
    "line": 422,
    "column": 30,
    "original": ",\n              color: Colors.green[600],\n            ));\n          }\n          // Verlassen Button als zweite Option\n          if (onLeave != null) {\n            buttons.add(_buildButton(\n              onPressed: onLeave,\n              icon: Icons.exit_to_app,\n              label: ",
    "suggested_key": "buttonColorColorsgreen600Verlassen",
    "context": "buttons.add(_buildButton(\n              onPressed: onPlay,\n              icon: Icons.play_circle_filled,\n              label: 'Spielen',\n              color: Colors.green[600],\n            ));\n          }",
    "category": "button",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_card.dart",
    "line": 431,
    "column": 32,
    "original": ",\n              color: Colors.red[600],\n            ));\n          }\n        } else {\n          if (onJoin != null) {\n            buttons.add(_buildButton(\n              onPressed: onJoin,\n              icon: Icons.play_arrow,\n              label: ",
    "suggested_key": "buttonColorColorsred600Else",
    "context": "buttons.add(_buildButton(\n              onPressed: onLeave,\n              icon: Icons.exit_to_app,\n              label: 'Verlassen',\n              color: Colors.red[600],\n            ));\n          }",
    "category": "button",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_card.dart",
    "line": 440,
    "column": 32,
    "original": ",\n              color: AppTheme.primaryColor,\n            ));\n          }\n        }\n        break;\n        \n      case WorldStatus.closed:\n      case WorldStatus.archived:\n        // Keine Aktions-Buttons bei geschlossenen/archivierten Welten\n        return _buildStatusBadge();\n    }\n    \n    // Invite Button für upcoming, open und running\n    if ([WorldStatus.upcoming, WorldStatus.open, WorldStatus.running].contains(world.status) && \n        onInvite != null) {\n      buttons.add(_buildButton(\n        onPressed: onInvite,\n        icon: Icons.person_add,\n        label: null,\n        color: Colors.purple[600],\n        iconOnly: true,\n        tooltip: ",
    "suggested_key": "buttonColorAppthemeprimarycolorBreak",
    "context": "buttons.add(_buildButton(\n              onPressed: onJoin,\n              icon: Icons.play_arrow,\n              label: 'Beitreten',\n              color: AppTheme.primaryColor,\n            ));\n          }",
    "category": "button",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_list_states.dart",
    "line": 79,
    "column": 33,
    "original": "Erneut versuchen",
    "suggested_key": "buttonErneutVersuchen",
    "context": "ElevatedButton.icon(\n              onPressed: onRefresh,\n              icon: const Icon(Icons.refresh, size: 18),\n              label: const Text('Erneut versuchen'),\n              style: ElevatedButton.styleFrom(\n                backgroundColor: AppTheme.primaryColor,\n                foregroundColor: Colors.white,",
    "category": "button",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_list_states.dart",
    "line": 153,
    "column": 35,
    "original": "Erneut versuchen",
    "suggested_key": "buttonErneutVersuchen",
    "context": "ElevatedButton.icon(\n                onPressed: onRetry,\n                icon: const Icon(Icons.refresh, size: 18),\n                label: const Text('Erneut versuchen'),\n                style: ElevatedButton.styleFrom(\n                  backgroundColor: AppTheme.primaryColor,\n                  foregroundColor: Colors.white,",
    "category": "button",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 248,
    "column": 42,
    "original": "];\n    final requiresAction = userStatusData[",
    "suggested_key": "buttonFinalRequiresactionUserstatusdata",
    "context": "// User-Status analysieren\n    final userStatusData = tokenData['userStatus'];\n    final status = userStatusData['status'];\n    final requiresAction = userStatusData['requiresAction'];\n    \n    // **NEUE INTELLIGENTE BUTTON-LOGIK**",
    "category": "button",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 249,
    "column": 58,
    "original": "];\n    \n    // **NEUE INTELLIGENTE BUTTON-LOGIK**\n    String actionText = ",
    "suggested_key": "buttonNeueIntelligenteButtonlogik",
    "context": "// User-Status analysieren\n    final userStatusData = tokenData['userStatus'];\n    final status = userStatusData['status'];\n    final requiresAction = userStatusData['requiresAction'];\n    \n    // **NEUE INTELLIGENTE BUTTON-LOGIK**\n    String actionText = '';",
    "category": "button",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 252,
    "column": 26,
    "original": ";\n    String infoText = ",
    "suggested_key": "buttonStringInfotext",
    "context": "final requiresAction = userStatusData['requiresAction'];\n    \n    // **NEUE INTELLIGENTE BUTTON-LOGIK**\n    String actionText = '';\n    String infoText = '';\n    bool showLoginButton = false;\n    bool showRegisterButton = false;",
    "category": "button",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 253,
    "column": 24,
    "original": ";\n    bool showLoginButton = false;\n    bool showRegisterButton = false;\n    bool showAcceptButton = false;\n    bool showLogoutButton = false;\n    \n    // Basis-Info-Text mit Einlader, Welt und Gültigkeitsstatus\n    final inviterText = invitedByName;\n    \n    final actionTypeText = isUpcoming \n      ? ",
    "suggested_key": "buttonBoolShowloginbuttonFalse",
    "context": "// **NEUE INTELLIGENTE BUTTON-LOGIK**\n    String actionText = '';\n    String infoText = '';\n    bool showLoginButton = false;\n    bool showRegisterButton = false;\n    bool showAcceptButton = false;",
    "category": "button",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 288,
    "column": 88,
    "original": ";\n          infoText = ",
    "suggested_key": "buttonInfotext",
    "context": "case 'not_logged_in':\n        if (requiresAction == 'register') {\n          // Mail ist unbekannt -> nur Register\n          actionText = 'Du musst dich mit der E-Mail-Adresse $inviteEmail registrieren.';\n          infoText = '$baseInfoText\\n\\n$actionText';\n          showRegisterButton = isInviteValid; // Nur bei gültigen Invites\n        }",
    "category": "button",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 289,
    "column": 51,
    "original": ";\n          showRegisterButton = isInviteValid; // Nur bei gültigen Invites\n        }\n        break;\n        \n      case ",
    "suggested_key": "buttonShowregisterbuttonIsinvitevalidNur",
    "context": "if (requiresAction == 'register') {\n          // Mail ist unbekannt -> nur Register\n          actionText = 'Du musst dich mit der E-Mail-Adresse $inviteEmail registrieren.';\n          infoText = '$baseInfoText\\n\\n$actionText';\n          showRegisterButton = isInviteValid; // Nur bei gültigen Invites\n        }\n        break;",
    "category": "button",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 297,
    "column": 100,
    "original": ";\n          infoText = ",
    "suggested_key": "buttonInfotext",
    "context": "case 'user_exists_not_logged_in':\n        if (requiresAction == 'login') {\n          // Mail ist bekannt, User nicht angemeldet -> nur Login\n          actionText = 'Dein Account mit $inviteEmail ist bereits registriert. Bitte melde dich an.';\n          infoText = '$baseInfoText\\n\\n$actionText';\n          showLoginButton = isInviteValid; // Nur bei gültigen Invites\n        }",
    "category": "button",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 298,
    "column": 51,
    "original": ";\n          showLoginButton = isInviteValid; // Nur bei gültigen Invites\n        }\n        break;\n        \n      case ",
    "suggested_key": "buttonShowloginbuttonIsinvitevalidNur",
    "context": "if (requiresAction == 'login') {\n          // Mail ist bekannt, User nicht angemeldet -> nur Login\n          actionText = 'Dein Account mit $inviteEmail ist bereits registriert. Bitte melde dich an.';\n          infoText = '$baseInfoText\\n\\n$actionText';\n          showLoginButton = isInviteValid; // Nur bei gültigen Invites\n        }\n        break;",
    "category": "button",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 307,
    "column": 118,
    "original": ";\n          infoText = ",
    "suggested_key": "buttonInfotext",
    "context": "if (requiresAction == 'logout_and_register') {\n          final currentUserEmail = userStatusData['currentUser']?['email'];\n          // User mit falscher Mail angemeldet -> Logout + Register\n          actionText = 'Diese Einladung ist für $inviteEmail bestimmt, aber du bist als $currentUserEmail angemeldet.';\n          infoText = '$baseInfoText\\n\\n$actionText\\n\\nBitte melde dich ab und registriere dich mit der richtigen E-Mail-Adresse.';\n          showLogoutButton = isInviteValid; // Nur bei gültigen Invites\n        }",
    "category": "button",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 308,
    "column": 129,
    "original": ";\n          showLogoutButton = isInviteValid; // Nur bei gültigen Invites\n        }\n        break;\n        \n      case ",
    "suggested_key": "buttonShowlogoutbuttonIsinvitevalidNur",
    "context": "final currentUserEmail = userStatusData['currentUser']?['email'];\n          // User mit falscher Mail angemeldet -> Logout + Register\n          actionText = 'Diese Einladung ist für $inviteEmail bestimmt, aber du bist als $currentUserEmail angemeldet.';\n          infoText = '$baseInfoText\\n\\n$actionText\\n\\nBitte melde dich ab und registriere dich mit der richtigen E-Mail-Adresse.';\n          showLogoutButton = isInviteValid; // Nur bei gültigen Invites\n        }\n        break;",
    "category": "button",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 313,
    "column": 26,
    "original": ":\n        if (requiresAction == ",
    "suggested_key": "buttonIfRequiresaction",
    "context": "}\n        break;\n        \n      case 'correct_email':\n        if (requiresAction == 'join_world') {\n          // User richtig angemeldet -> nur Accept Button (KEIN Auto-Accept!)\n          actionText = 'Du bist mit der richtigen E-Mail-Adresse angemeldet und kannst die Einladung jetzt annehmen.';",
    "category": "button",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 314,
    "column": 42,
    "original": ") {\n          // User richtig angemeldet -> nur Accept Button (KEIN Auto-Accept!)\n          actionText = ",
    "suggested_key": "buttonUserRichtigAngemeldet",
    "context": "break;\n        \n      case 'correct_email':\n        if (requiresAction == 'join_world') {\n          // User richtig angemeldet -> nur Accept Button (KEIN Auto-Accept!)\n          actionText = 'Du bist mit der richtigen E-Mail-Adresse angemeldet und kannst die Einladung jetzt annehmen.';\n          infoText = '$baseInfoText\\n\\n$actionText';",
    "category": "button",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 316,
    "column": 117,
    "original": ";\n          infoText = ",
    "suggested_key": "buttonInfotext",
    "context": "case 'correct_email':\n        if (requiresAction == 'join_world') {\n          // User richtig angemeldet -> nur Accept Button (KEIN Auto-Accept!)\n          actionText = 'Du bist mit der richtigen E-Mail-Adresse angemeldet und kannst die Einladung jetzt annehmen.';\n          infoText = '$baseInfoText\\n\\n$actionText';\n          showAcceptButton = isInviteValid; // Nur bei gültigen Invites",
    "category": "button",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 317,
    "column": 51,
    "original": ";\n          showAcceptButton = isInviteValid; // Nur bei gültigen Invites\n          \n          // Auto-Accept entfernt: User soll bewusst entscheiden!\n        }\n        break;\n        \n      default:\n        AppLogger.app.w(",
    "suggested_key": "buttonShowacceptbuttonIsinvitevalidNur",
    "context": "if (requiresAction == 'join_world') {\n          // User richtig angemeldet -> nur Accept Button (KEIN Auto-Accept!)\n          actionText = 'Du bist mit der richtigen E-Mail-Adresse angemeldet und kannst die Einladung jetzt annehmen.';\n          infoText = '$baseInfoText\\n\\n$actionText';\n          showAcceptButton = isInviteValid; // Nur bei gültigen Invites\n          \n          // Auto-Accept entfernt: User soll bewusst entscheiden!",
    "category": "button",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1103,
    "column": 71,
    "original": "),\n                          style: ElevatedButton.styleFrom(\n                            backgroundColor: AppTheme.primaryColor,\n                            foregroundColor: Colors.white,\n                            shape: RoundedRectangleBorder(\n                              borderRadius: BorderRadius.circular(12),\n                            ),\n                          ),\n                          child: const Text(",
    "suggested_key": "buttonStyleElevatedbuttonstylefromBackgroundcolor",
    "context": "width: double.infinity,\n                        height: 48,\n                        child: ElevatedButton(\n                          onPressed: () => context.goNamed('world-list'),\n                          style: ElevatedButton.styleFrom(\n                            backgroundColor: AppTheme.primaryColor,\n                            foregroundColor: Colors.white,",
    "category": "button",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 11,
    "column": 8,
    "original": "../../routing/app_router.dart",
    "suggested_key": "dialogRoutingapp_routerdart",
    "context": "import '../../core/models/world.dart';\nimport '../../theme/app_theme.dart';\nimport '../../theme/background_widget.dart';\nimport '../../routing/app_router.dart';\n// Unused import removed\nimport '../../shared/widgets/invite_dialog.dart';\nimport '../../shared/widgets/user_info_widget.dart';",
    "category": "dialog",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 13,
    "column": 8,
    "original": "../../shared/widgets/invite_dialog.dart",
    "suggested_key": "dialogSharedwidgetsinvite_dialogdart",
    "context": "import '../../theme/background_widget.dart';\nimport '../../routing/app_router.dart';\n// Unused import removed\nimport '../../shared/widgets/invite_dialog.dart';\nimport '../../shared/widgets/user_info_widget.dart';\nimport '../../shared/widgets/navigation_widget.dart';\nimport './widgets/world_card.dart';",
    "category": "dialog",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 14,
    "column": 8,
    "original": "../../shared/widgets/user_info_widget.dart",
    "suggested_key": "dialogSharedwidgetsuser_info_widgetdart",
    "context": "import '../../routing/app_router.dart';\n// Unused import removed\nimport '../../shared/widgets/invite_dialog.dart';\nimport '../../shared/widgets/user_info_widget.dart';\nimport '../../shared/widgets/navigation_widget.dart';\nimport './widgets/world_card.dart';\nimport './widgets/world_filters.dart';",
    "category": "dialog",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 15,
    "column": 8,
    "original": "../../shared/widgets/navigation_widget.dart",
    "suggested_key": "dialogSharedwidgetsnavigation_widgetdart",
    "context": "// Unused import removed\nimport '../../shared/widgets/invite_dialog.dart';\nimport '../../shared/widgets/user_info_widget.dart';\nimport '../../shared/widgets/navigation_widget.dart';\nimport './widgets/world_card.dart';\nimport './widgets/world_filters.dart';",
    "category": "dialog",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\invite_dialog.dart",
    "line": 1,
    "column": 8,
    "original": "package:flutter/material.dart",
    "suggested_key": "dialogPackagefluttermaterialdart",
    "context": "import 'package:flutter/material.dart';\nimport '../../theme/app_theme.dart';\n\nclass InviteDialog extends StatefulWidget {",
    "category": "dialog",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\invite_dialog.dart",
    "line": 2,
    "column": 35,
    "original": ";\n\nclass InviteDialog extends StatefulWidget {\n  final String worldName;\n\n  const InviteDialog({\n    super.key,\n    required this.worldName,\n  });\n\n  @override\n  State<InviteDialog> createState() => _InviteDialogState();\n}\n\nclass _InviteDialogState extends State<InviteDialog> {\n  final _formKey = GlobalKey<FormState>();\n  final _emailController = TextEditingController();\n  bool _isLoading = false;\n\n  @override\n  void dispose() {\n    _emailController.dispose();\n    super.dispose();\n  }\n\n  void _submit() async {\n    final formState = _formKey.currentState;\n    if (formState == null || !formState.validate()) return;\n    \n    setState(() {\n      _isLoading = true;\n    });\n\n    // Simuliere API-Aufruf für E-Mail-Versand\n    await Future.delayed(const Duration(seconds: 1));\n    \n    if (mounted) {\n      setState(() {\n        _isLoading = false;\n      });\n      Navigator.of(context).pop(_emailController.text.trim());\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return AlertDialog(\n      backgroundColor: const Color(0xFF1A1A1A), // Dunkler Hintergrund\n      shape: RoundedRectangleBorder(\n        borderRadius: BorderRadius.circular(20),\n        side: BorderSide(\n          color: AppTheme.primaryColor.withOpacity(0.3),\n          width: 1,\n        ),\n      ),\n      title: Text(\n        ",
    "suggested_key": "dialogClassInvitedialogExtends",
    "context": "import 'package:flutter/material.dart';\nimport '../../theme/app_theme.dart';\n\nclass InviteDialog extends StatefulWidget {\n  final String worldName;",
    "category": "dialog",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\pre_register_dialog.dart",
    "line": 1,
    "column": 8,
    "original": "package:flutter/material.dart",
    "suggested_key": "dialogPackagefluttermaterialdart",
    "context": "import 'package:flutter/material.dart';\nimport '../../theme/app_theme.dart';\n\nclass PreRegisterDialog extends StatefulWidget {",
    "category": "dialog",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\pre_register_dialog.dart",
    "line": 2,
    "column": 35,
    "original": ";\n\nclass PreRegisterDialog extends StatefulWidget {\n  final String worldName;\n  final Function(String email) onPreRegister;\n\n  const PreRegisterDialog({\n    super.key,\n    required this.worldName,\n    required this.onPreRegister,\n  });\n\n  @override\n  State<PreRegisterDialog> createState() => _PreRegisterDialogState();\n}\n\nclass _PreRegisterDialogState extends State<PreRegisterDialog> {\n  final _formKey = GlobalKey<FormState>();\n  final _emailController = TextEditingController();\n  bool _isLoading = false;\n\n  @override\n  void dispose() {\n    _emailController.dispose();\n    super.dispose();\n  }\n\n  Future<void> _submit() async {\n    final formState = _formKey.currentState;\n    if (formState == null || !formState.validate()) return;\n\n    setState(() {\n      _isLoading = true;\n    });\n\n    try {\n      await widget.onPreRegister(_emailController.text.trim());\n      if (mounted) {\n        Navigator.of(context).pop(true);\n        ScaffoldMessenger.of(context).showSnackBar(\n          const SnackBar(\n            content: Text(",
    "suggested_key": "dialogClassPreregisterdialogExtends",
    "context": "import 'package:flutter/material.dart';\nimport '../../theme/app_theme.dart';\n\nclass PreRegisterDialog extends StatefulWidget {\n  final String worldName;",
    "category": "dialog",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 30,
    "column": 29,
    "original": "world-join-by-token",
    "suggested_key": "errorWorldjoinbytoken",
    "context": "// HINZUGEFÜGT: Invite-Redirect Management\n  void setPendingInviteRedirect(String inviteToken) {\n    _pendingInviteToken = inviteToken;\n    _pendingRedirectRoute = 'world-join-by-token';\n    _pendingRouteParams = {'token': inviteToken};\n    AppLogger.auth.i('🎫 Invite-Redirect gesetzt', error: {'token': inviteToken.substring(0, 8) + '...'});\n  }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 32,
    "column": 22,
    "original": "🎫 Invite-Redirect gesetzt",
    "suggested_key": "errorInviteredirectGesetzt",
    "context": "_pendingInviteToken = inviteToken;\n    _pendingRedirectRoute = 'world-join-by-token';\n    _pendingRouteParams = {'token': inviteToken};\n    AppLogger.auth.i('🎫 Invite-Redirect gesetzt', error: {'token': inviteToken.substring(0, 8) + '...'});\n  }\n\n  void setPendingRoute(String routeName, {Map<String, String>? params}) {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 32,
    "column": 102,
    "original": "});\n  }\n\n  void setPendingRoute(String routeName, {Map<String, String>? params}) {\n    _pendingRedirectRoute = routeName;\n    _pendingRouteParams = params;\n    AppLogger.auth.i(",
    "suggested_key": "errorVoidSetpendingroutestringRoutename",
    "context": "_pendingInviteToken = inviteToken;\n    _pendingRedirectRoute = 'world-join-by-token';\n    _pendingRouteParams = {'token': inviteToken};\n    AppLogger.auth.i('🎫 Invite-Redirect gesetzt', error: {'token': inviteToken.substring(0, 8) + '...'});\n  }\n\n  void setPendingRoute(String routeName, {Map<String, String>? params}) {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 38,
    "column": 46,
    "original": ", error: {",
    "suggested_key": "errorError",
    "context": "void setPendingRoute(String routeName, {Map<String, String>? params}) {\n    _pendingRedirectRoute = routeName;\n    _pendingRouteParams = params;\n    AppLogger.auth.i('🧭 Pending-Route gesetzt', error: {'route': routeName, 'params': params});\n  }\n\n  Map<String, dynamic>? getPendingRedirect() {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 38,
    "column": 63,
    "original": ": routeName, ",
    "suggested_key": "errorRoutename",
    "context": "void setPendingRoute(String routeName, {Map<String, String>? params}) {\n    _pendingRedirectRoute = routeName;\n    _pendingRouteParams = params;\n    AppLogger.auth.i('🧭 Pending-Route gesetzt', error: {'route': routeName, 'params': params});\n  }\n\n  Map<String, dynamic>? getPendingRedirect() {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 38,
    "column": 84,
    "original": ": params});\n  }\n\n  Map<String, dynamic>? getPendingRedirect() {\n    if (_pendingRedirectRoute != null) {\n      final redirect = {\n        ",
    "suggested_key": "errorParamsMapstringDynamic",
    "context": "void setPendingRoute(String routeName, {Map<String, String>? params}) {\n    _pendingRedirectRoute = routeName;\n    _pendingRouteParams = params;\n    AppLogger.auth.i('🧭 Pending-Route gesetzt', error: {'route': routeName, 'params': params});\n  }\n\n  Map<String, dynamic>? getPendingRedirect() {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 45,
    "column": 16,
    "original": ": _pendingRouteParams,\n        ",
    "suggested_key": "error_pendingrouteparams",
    "context": "if (_pendingRedirectRoute != null) {\n      final redirect = {\n        'route': _pendingRedirectRoute!,\n        'params': _pendingRouteParams,\n        'inviteToken': _pendingInviteToken,\n      };\n      AppLogger.auth.i('🔍 Pending-Redirect abgerufen', error: redirect);",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 46,
    "column": 21,
    "original": ": _pendingInviteToken,\n      };\n      AppLogger.auth.i(",
    "suggested_key": "error_pendinginvitetokenApploggerauthi",
    "context": "final redirect = {\n        'route': _pendingRedirectRoute!,\n        'params': _pendingRouteParams,\n        'inviteToken': _pendingInviteToken,\n      };\n      AppLogger.auth.i('🔍 Pending-Redirect abgerufen', error: redirect);\n      return redirect;",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 48,
    "column": 53,
    "original": ", error: redirect);\n      return redirect;\n    }\n    return null;\n  }\n\n  void clearPendingRedirect() {\n    AppLogger.auth.i(",
    "suggested_key": "errorErrorRedirectReturn",
    "context": "'params': _pendingRouteParams,\n        'inviteToken': _pendingInviteToken,\n      };\n      AppLogger.auth.i('🔍 Pending-Redirect abgerufen', error: redirect);\n      return redirect;\n    }\n    return null;",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 55,
    "column": 50,
    "original": ", error: {\n      ",
    "suggested_key": "errorError",
    "context": "}\n\n  void clearPendingRedirect() {\n    AppLogger.auth.i('🧹 Pending-Redirect gelöscht', error: {\n      'hadRoute': _pendingRedirectRoute != null,\n      'hadInvite': _pendingInviteToken != null\n    });",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 56,
    "column": 16,
    "original": ": _pendingRedirectRoute != null,\n      ",
    "suggested_key": "error_pendingredirectrouteNull",
    "context": "void clearPendingRedirect() {\n    AppLogger.auth.i('🧹 Pending-Redirect gelöscht', error: {\n      'hadRoute': _pendingRedirectRoute != null,\n      'hadInvite': _pendingInviteToken != null\n    });\n    _pendingInviteToken = null;",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 57,
    "column": 17,
    "original": ": _pendingInviteToken != null\n    });\n    _pendingInviteToken = null;\n    _pendingRedirectRoute = null;\n    _pendingRouteParams = null;\n  }\n\n  Future<bool> isLoggedIn() async {\n    try {\n      final accessToken = await TokenStorage.getAccessToken();\n      AppLogger.auth.d(",
    "suggested_key": "error_pendinginvitetokenNull_pendinginvitetoken",
    "context": "void clearPendingRedirect() {\n    AppLogger.auth.i('🧹 Pending-Redirect gelöscht', error: {\n      'hadRoute': _pendingRedirectRoute != null,\n      'hadInvite': _pendingInviteToken != null\n    });\n    _pendingInviteToken = null;\n    _pendingRedirectRoute = null;",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 67,
    "column": 54,
    "original": ", error: {\n        ",
    "suggested_key": "errorError",
    "context": "Future<bool> isLoggedIn() async {\n    try {\n      final accessToken = await TokenStorage.getAccessToken();\n      AppLogger.auth.d('🔍 Prüfe Authentication Status', error: {\n        'hasToken': accessToken != null,\n      });",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 68,
    "column": 18,
    "original": ": accessToken != null,\n      });\n      \n      if (accessToken == null || accessToken.isEmpty) {\n        AppLogger.auth.i(",
    "suggested_key": "errorAccesstokenNullIf",
    "context": "try {\n      final accessToken = await TokenStorage.getAccessToken();\n      AppLogger.auth.d('🔍 Prüfe Authentication Status', error: {\n        'hasToken': accessToken != null,\n      });\n      \n      if (accessToken == null || accessToken.isEmpty) {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 98,
    "column": 54,
    "original": ", error: e);\n      await logout();\n      return false;\n    }\n  }\n\n  // Vollständige Token-Validierung beim App-Start (ohne API-Calls)\n  Future<bool> validateTokensOnStart() async {\n    try {\n      final accessToken = await TokenStorage.getAccessToken();\n      final refreshToken = await TokenStorage.getRefreshToken();\n      \n      if (accessToken == null || refreshToken == null) {\n        return false;\n      }\n\n      // JWT-Token Format validieren\n      if (!_isValidJWT(accessToken) || !_isValidJWT(refreshToken)) {\n        return false;\n      }\n\n      // Token-Ablauf prüfen (nur lokale Validierung, keine API-Calls)\n      final accessExp = _getTokenExpiration(accessToken);\n      final refreshExp = _getTokenExpiration(refreshToken);\n      \n      if (accessExp == null || refreshExp == null) {\n        return false;\n      }\n\n      final now = DateTime.now();\n      \n      // Refresh-Token ist abgelaufen\n      if (refreshExp.isBefore(now)) {\n        return false;\n      }\n      \n      // Access-Token ist abgelaufen, aber Refresh-Token ist noch gültig\n      if (accessExp.isBefore(now)) {\n        // Token ist abgelaufen, aber wir versuchen nicht zu erneuern\n        // Das wird beim ersten API-Call automatisch gemacht\n        return true; // Erlaube App-Start, Token-Refresh erfolgt bei Bedarf\n      }\n\n      // Beide Token sind gültig\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  // JWT-Token Format validieren\n  bool _isValidJWT(String token) {\n    try {\n      final parts = token.split(",
    "suggested_key": "errorErrorEAwait",
    "context": "isAuthenticated.value = false;\n      return false;\n    } catch (e) {\n      AppLogger.auth.e('❌ isLoggedIn() fehlgeschlagen', error: e);\n      await logout();\n      return false;\n    }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 208,
    "column": 22,
    "original": ": response.statusCode,\n        });\n        throw Exception(",
    "suggested_key": "errorResponsestatuscodeThrowException",
    "context": "} else if (response.statusCode == 401) {\n        AppLogger.logAuthEvent('login_failed', username: username, metadata: {\n          'reason': 'invalid_credentials',\n          'statusCode': response.statusCode,\n        });\n        throw Exception('Benutzername oder Passwort falsch');\n      } else {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 210,
    "column": 59,
    "original": ");\n      } else {\n        final errorData = jsonDecode(response.body);\n        AppLogger.logAuthEvent(",
    "suggested_key": "errorElseFinalErrordata",
    "context": "'reason': 'invalid_credentials',\n          'statusCode': response.statusCode,\n        });\n        throw Exception('Benutzername oder Passwort falsch');\n      } else {\n        final errorData = jsonDecode(response.body);\n        AppLogger.logAuthEvent('login_failed', username: username, metadata: {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 213,
    "column": 45,
    "original": ", username: username, metadata: {\n          ",
    "suggested_key": "errorUsernameUsernameMetadata",
    "context": "throw Exception('Benutzername oder Passwort falsch');\n      } else {\n        final errorData = jsonDecode(response.body);\n        AppLogger.logAuthEvent('login_failed', username: username, metadata: {\n          'reason': 'server_error',\n          'statusCode': response.statusCode,\n          'error': errorData['message'],",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 215,
    "column": 22,
    "original": ": response.statusCode,\n          ",
    "suggested_key": "errorResponsestatuscode",
    "context": "final errorData = jsonDecode(response.body);\n        AppLogger.logAuthEvent('login_failed', username: username, metadata: {\n          'reason': 'server_error',\n          'statusCode': response.statusCode,\n          'error': errorData['message'],\n        });\n        throw Exception(errorData['message'] ?? 'Login fehlgeschlagen');",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 216,
    "column": 17,
    "original": ": errorData[",
    "suggested_key": "errorErrordata",
    "context": "AppLogger.logAuthEvent('login_failed', username: username, metadata: {\n          'reason': 'server_error',\n          'statusCode': response.statusCode,\n          'error': errorData['message'],\n        });\n        throw Exception(errorData['message'] ?? 'Login fehlgeschlagen');\n      }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 216,
    "column": 38,
    "original": "],\n        });\n        throw Exception(errorData[",
    "suggested_key": "errorThrowExceptionerrordata",
    "context": "AppLogger.logAuthEvent('login_failed', username: username, metadata: {\n          'reason': 'server_error',\n          'statusCode': response.statusCode,\n          'error': errorData['message'],\n        });\n        throw Exception(errorData['message'] ?? 'Login fehlgeschlagen');\n      }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 218,
    "column": 49,
    "original": "Login fehlgeschlagen",
    "suggested_key": "errorLoginFehlgeschlagen",
    "context": "'statusCode': response.statusCode,\n          'error': errorData['message'],\n        });\n        throw Exception(errorData['message'] ?? 'Login fehlgeschlagen');\n      }\n    } catch (e) {\n      AppLogger.logAuthEvent('login_error', username: username, metadata: {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 255,
    "column": 29,
    "original": "] != null) {\n          AppLogger.auth.d(",
    "suggested_key": "errorNullApploggerauthd",
    "context": "final userData = data['user'];\n        \n        // Log Registration Debug Info\n        if (userData['_debug'] != null) {\n          AppLogger.auth.d('📝 Registrierung Debug Info', error: {\n            'userId': userData['id'],\n            'username': userData['username'],",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 256,
    "column": 55,
    "original": ", error: {\n            ",
    "suggested_key": "errorError",
    "context": "// Log Registration Debug Info\n        if (userData['_debug'] != null) {\n          AppLogger.auth.d('📝 Registrierung Debug Info', error: {\n            'userId': userData['id'],\n            'username': userData['username'],\n            'rolesCount': userData['_debug']['rolesCount'],",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 257,
    "column": 20,
    "original": ": userData[",
    "suggested_key": "errorUserdata",
    "context": "// Log Registration Debug Info\n        if (userData['_debug'] != null) {\n          AppLogger.auth.d('📝 Registrierung Debug Info', error: {\n            'userId': userData['id'],\n            'username': userData['username'],\n            'rolesCount': userData['_debug']['rolesCount'],\n            'roleDetails': userData['_debug']['roleDetails'],",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 283,
    "column": 22,
    "original": ": response.statusCode,\n          ",
    "suggested_key": "errorResponsestatuscode",
    "context": "} else if (response.statusCode == 409) {\n        AppLogger.logAuthEvent('register_failed', username: username, metadata: {\n          'reason': 'conflict',\n          'statusCode': response.statusCode,\n          'email': email,\n        });\n        throw Exception('Benutzername oder E-Mail bereits vorhanden');",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 286,
    "column": 25,
    "original": "Benutzername oder E-Mail bereits vorhanden",
    "suggested_key": "errorBenutzernameOderEmail",
    "context": "'statusCode': response.statusCode,\n          'email': email,\n        });\n        throw Exception('Benutzername oder E-Mail bereits vorhanden');\n      } else {\n        final errorData = jsonDecode(response.body);\n        AppLogger.logAuthEvent('register_failed', username: username, metadata: {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 291,
    "column": 22,
    "original": ": response.statusCode,\n          ",
    "suggested_key": "errorResponsestatuscode",
    "context": "final errorData = jsonDecode(response.body);\n        AppLogger.logAuthEvent('register_failed', username: username, metadata: {\n          'reason': 'server_error',\n          'statusCode': response.statusCode,\n          'error': errorData['error'] ?? errorData['message'],\n          'details': errorData['details'],\n          'email': email,",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 292,
    "column": 17,
    "original": ": errorData[",
    "suggested_key": "errorErrordata",
    "context": "AppLogger.logAuthEvent('register_failed', username: username, metadata: {\n          'reason': 'server_error',\n          'statusCode': response.statusCode,\n          'error': errorData['error'] ?? errorData['message'],\n          'details': errorData['details'],\n          'email': email,\n        });",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 292,
    "column": 36,
    "original": "] ?? errorData[",
    "suggested_key": "errorErrordata",
    "context": "AppLogger.logAuthEvent('register_failed', username: username, metadata: {\n          'reason': 'server_error',\n          'statusCode': response.statusCode,\n          'error': errorData['error'] ?? errorData['message'],\n          'details': errorData['details'],\n          'email': email,\n        });",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 293,
    "column": 19,
    "original": ": errorData[",
    "suggested_key": "errorErrordata",
    "context": "'reason': 'server_error',\n          'statusCode': response.statusCode,\n          'error': errorData['error'] ?? errorData['message'],\n          'details': errorData['details'],\n          'email': email,\n        });",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 294,
    "column": 17,
    "original": ": email,\n        });\n        \n        // Detailliertere Fehlerbehandlung\n        if (errorData[",
    "suggested_key": "errorEmailDetailliertereFehlerbehandlung",
    "context": "'statusCode': response.statusCode,\n          'error': errorData['error'] ?? errorData['message'],\n          'details': errorData['details'],\n          'email': email,\n        });\n        \n        // Detailliertere Fehlerbehandlung",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 298,
    "column": 31,
    "original": "] != null) {\n          if (errorData[",
    "suggested_key": "errorNullIfErrordata",
    "context": "});\n        \n        // Detailliertere Fehlerbehandlung\n        if (errorData['details'] != null) {\n          if (errorData['details']['hint'] != null) {\n            throw Exception('${errorData['error']} - ${errorData['details']['hint']}');\n          }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 300,
    "column": 29,
    "original": "${errorData[",
    "suggested_key": "errorErrordata",
    "context": "// Detailliertere Fehlerbehandlung\n        if (errorData['details'] != null) {\n          if (errorData['details']['hint'] != null) {\n            throw Exception('${errorData['error']} - ${errorData['details']['hint']}');\n          }\n        }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 300,
    "column": 48,
    "original": "]} - ${errorData[",
    "suggested_key": "errorErrordata",
    "context": "// Detailliertere Fehlerbehandlung\n        if (errorData['details'] != null) {\n          if (errorData['details']['hint'] != null) {\n            throw Exception('${errorData['error']} - ${errorData['details']['hint']}');\n          }\n        }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 300,
    "column": 85,
    "original": ");\n          }\n        }\n        \n        throw Exception(errorData[",
    "suggested_key": "errorThrowExceptionerrordata",
    "context": "// Detailliertere Fehlerbehandlung\n        if (errorData['details'] != null) {\n          if (errorData['details']['hint'] != null) {\n            throw Exception('${errorData['error']} - ${errorData['details']['hint']}');\n          }\n        }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 304,
    "column": 41,
    "original": "] ?? errorData[",
    "suggested_key": "errorErrordata",
    "context": "}\n        }\n        \n        throw Exception(errorData['error'] ?? errorData['message'] ?? 'Registrierung fehlgeschlagen');\n      }\n    } catch (e) {\n      AppLogger.logAuthEvent('register_error', username: username, metadata: {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 304,
    "column": 71,
    "original": "Registrierung fehlgeschlagen",
    "suggested_key": "errorRegistrierungFehlgeschlagen",
    "context": "}\n        }\n        \n        throw Exception(errorData['error'] ?? errorData['message'] ?? 'Registrierung fehlgeschlagen');\n      }\n    } catch (e) {\n      AppLogger.logAuthEvent('register_error', username: username, metadata: {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 309,
    "column": 15,
    "original": ": email,\n      });\n      rethrow;\n    }\n  }\n\n  // Erweitertes Logout mit Server-Call und vollständigem Cleanup\n  Future<void> logout() async {\n    final username = _currentUser?.username ?? ",
    "suggested_key": "errorEmailRethrowErweitertes",
    "context": "} catch (e) {\n      AppLogger.logAuthEvent('register_error', username: username, metadata: {\n        'error': e.toString(),\n        'email': email,\n      });\n      rethrow;\n    }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 330,
    "column": 55,
    "original": ", username: username, metadata: {\n            ",
    "suggested_key": "errorUsernameUsernameMetadata",
    "context": "AppLogger.logAuthEvent('server_logout_success', username: username);\n        } catch (e) {\n          // Server-Logout fehlgeschlagen, trotzdem lokal ausloggen\n          AppLogger.logAuthEvent('server_logout_failed', username: username, metadata: {\n            'error': e.toString(),\n          });\n        }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 331,
    "column": 19,
    "original": ": e.toString(),\n          });\n        }\n      }\n      \n      // Lokales Cleanup\n      await TokenStorage.clearTokens();\n      _currentUser = null;\n      _apiService.clearToken();\n      isAuthenticated.value = false; // Reaktiven Status setzen\n      \n      AppLogger.logAuthEvent(",
    "suggested_key": "errorEtostringLokalesCleanup",
    "context": "} catch (e) {\n          // Server-Logout fehlgeschlagen, trotzdem lokal ausloggen\n          AppLogger.logAuthEvent('server_logout_failed', username: username, metadata: {\n            'error': e.toString(),\n          });\n        }\n      }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 342,
    "column": 45,
    "original": ", username: username);\n    } catch (e) {\n      AppLogger.auth.e(",
    "suggested_key": "errorUsernameUsernameCatch",
    "context": "_apiService.clearToken();\n      isAuthenticated.value = false; // Reaktiven Status setzen\n      \n      AppLogger.logAuthEvent('logout_success', username: username);\n    } catch (e) {\n      AppLogger.auth.e('❌ Logout-Fehler', error: e);\n    }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 344,
    "column": 40,
    "original": ", error: e);\n    }\n  }\n\n  // Rate-Limited Token-Refresh mit parallelem Schutz\n  Future<bool> refreshTokenIfNeeded() async {\n    if (_refreshing) {\n      // Warten bis aktueller Refresh abgeschlossen ist\n      while (_refreshing) {\n        await Future.delayed(const Duration(milliseconds: 100));\n      }\n      return true; // Annahme: Refresh war erfolgreich\n    }\n\n    _refreshing = true;\n    try {\n      final refreshToken = await TokenStorage.getRefreshToken();\n      if (refreshToken == null) {\n        await logout();\n        return false;\n      }\n\n      // Refresh-Token Format validieren\n      if (!_isValidJWT(refreshToken)) {\n        await logout();\n        return false;\n      }\n\n      // Refresh-Token Ablauf prüfen\n      final refreshExp = _getTokenExpiration(refreshToken);\n      if (refreshExp == null || refreshExp.isBefore(DateTime.now())) {\n        await logout();\n        return false;\n      }\n\n      _apiService.setToken(refreshToken);\n      final response = await _apiService.post(",
    "suggested_key": "errorErrorERatelimited",
    "context": "AppLogger.logAuthEvent('logout_success', username: username);\n    } catch (e) {\n      AppLogger.auth.e('❌ Logout-Fehler', error: e);\n    }\n  }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 430,
    "column": 51,
    "original": ");\n      }\n    } catch (e) {\n      AppLogger.auth.e(",
    "suggested_key": "errorCatchEApploggerauthe",
    "context": "await logout();\n        return null;\n      } else {\n        throw Exception('Failed to fetch user data');\n      }\n    } catch (e) {\n      AppLogger.auth.e('❌ Fehler beim Laden des aktuellen Users', error: e);",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 433,
    "column": 64,
    "original": ", error: e);\n      return null;\n    }\n  }\n\n  // Konsistente Token-Speicherung und API-Service-Update\n  Future<void> _saveTokensAndUpdateService(String accessToken, String refreshToken) async {\n    await TokenStorage.saveTokens(accessToken, refreshToken);\n    _apiService.setToken(accessToken);\n  }\n\n  Future<User?> loadStoredUser() async {\n    try {\n      final userDataString = await TokenStorage.getUserData();\n      final accessToken = await TokenStorage.getAccessToken();\n      \n      if (userDataString != null && accessToken != null) {\n        final userData = jsonDecode(userDataString);\n        _currentUser = User.fromJson(userData);\n        _apiService.setToken(accessToken);\n        // isAuthenticated.value wird vom Aufrufer gesetzt, nicht hier\n        return _currentUser;\n      }\n    } catch (e) {\n      AppLogger.auth.e(",
    "suggested_key": "errorErrorEReturn",
    "context": "throw Exception('Failed to fetch user data');\n      }\n    } catch (e) {\n      AppLogger.auth.e('❌ Fehler beim Laden des aktuellen Users', error: e);\n      return null;\n    }\n  }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 457,
    "column": 68,
    "original": ", error: e);\n    }\n    return null;\n  }\n\n  Future<String?> getCurrentAccessToken() async {\n    return await TokenStorage.getAccessToken();\n  }\n\n  // Passwort-Reset anfordern\n  Future<bool> requestPasswordReset(String email) async {\n    try {\n      final response = await _apiService.post(",
    "suggested_key": "errorErrorEReturn",
    "context": "return _currentUser;\n      }\n    } catch (e) {\n      AppLogger.auth.e('❌ Fehler beim Laden des gespeicherten Users', error: e);\n    }\n    return null;\n  }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 474,
    "column": 55,
    "original": ");\n        return true;\n      } else {\n        final errorData = jsonDecode(response.body);\n        throw Exception(errorData[",
    "suggested_key": "errorReturnTrueElse",
    "context": "});\n\n      if (response.statusCode == 200) {\n        AppLogger.auth.i('✅ Password-Reset angefordert');\n        return true;\n      } else {\n        final errorData = jsonDecode(response.body);",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 478,
    "column": 49,
    "original": "Passwort-Reset Anfrage fehlgeschlagen",
    "suggested_key": "errorPasswortresetAnfrageFehlgeschlagen",
    "context": "return true;\n      } else {\n        final errorData = jsonDecode(response.body);\n        throw Exception(errorData['message'] ?? 'Passwort-Reset Anfrage fehlgeschlagen');\n      }\n    } catch (e) {\n      AppLogger.auth.e('❌ Password-Reset Anfrage fehlgeschlagen', error: e);",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 481,
    "column": 24,
    "original": "❌ Password-Reset Anfrage fehlgeschlagen",
    "suggested_key": "errorPasswordresetAnfrageFehlgeschlagen",
    "context": "throw Exception(errorData['message'] ?? 'Passwort-Reset Anfrage fehlgeschlagen');\n      }\n    } catch (e) {\n      AppLogger.auth.e('❌ Password-Reset Anfrage fehlgeschlagen', error: e);\n      rethrow;\n    }\n  }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 489,
    "column": 24,
    "original": "🔄 Password-Reset wird versucht",
    "suggested_key": "errorPasswordresetWirdVersucht",
    "context": "// Passwort zurücksetzen mit Token\n  Future<bool> resetPassword(String token, String newPassword) async {\n    try {\n      AppLogger.auth.i('🔄 Password-Reset wird versucht', error: {'tokenPreview': token.substring(0, 8) + '...'});\n      \n      final response = await _apiService.post('/auth/reset-password', {\n        'token': token,",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 489,
    "column": 110,
    "original": "});\n      \n      final response = await _apiService.post(",
    "suggested_key": "errorFinalResponseAwait",
    "context": "// Passwort zurücksetzen mit Token\n  Future<bool> resetPassword(String token, String newPassword) async {\n    try {\n      AppLogger.auth.i('🔄 Password-Reset wird versucht', error: {'tokenPreview': token.substring(0, 8) + '...'});\n      \n      final response = await _apiService.post('/auth/reset-password', {\n        'token': token,",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 497,
    "column": 63,
    "original": ");\n        return true;\n      } else {\n        final errorData = jsonDecode(response.body);\n        AppLogger.auth.w(",
    "suggested_key": "errorReturnTrueElse",
    "context": "});\n\n      if (response.statusCode == 200) {\n        AppLogger.auth.i('✅ Password erfolgreich zurückgesetzt');\n        return true;\n      } else {\n        final errorData = jsonDecode(response.body);",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 501,
    "column": 54,
    "original": ", error: {\n          ",
    "suggested_key": "errorError",
    "context": "return true;\n      } else {\n        final errorData = jsonDecode(response.body);\n        AppLogger.auth.w('❌ Password-Reset API-Fehler', error: {\n          'statusCode': response.statusCode,\n          'response': errorData\n        });",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 502,
    "column": 22,
    "original": ": response.statusCode,\n          ",
    "suggested_key": "errorResponsestatuscode",
    "context": "} else {\n        final errorData = jsonDecode(response.body);\n        AppLogger.auth.w('❌ Password-Reset API-Fehler', error: {\n          'statusCode': response.statusCode,\n          'response': errorData\n        });\n        throw Exception(errorData['error'] ?? errorData['message'] ?? 'Passwort-Zurücksetzung fehlgeschlagen');",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 503,
    "column": 20,
    "original": ": errorData\n        });\n        throw Exception(errorData[",
    "suggested_key": "errorErrordataThrowExceptionerrordata",
    "context": "final errorData = jsonDecode(response.body);\n        AppLogger.auth.w('❌ Password-Reset API-Fehler', error: {\n          'statusCode': response.statusCode,\n          'response': errorData\n        });\n        throw Exception(errorData['error'] ?? errorData['message'] ?? 'Passwort-Zurücksetzung fehlgeschlagen');\n      }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 505,
    "column": 41,
    "original": "] ?? errorData[",
    "suggested_key": "errorErrordata",
    "context": "'statusCode': response.statusCode,\n          'response': errorData\n        });\n        throw Exception(errorData['error'] ?? errorData['message'] ?? 'Passwort-Zurücksetzung fehlgeschlagen');\n      }\n    } catch (e) {\n      AppLogger.auth.e('❌ Password-Reset fehlgeschlagen', error: e);",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 505,
    "column": 71,
    "original": "Passwort-Zurücksetzung fehlgeschlagen",
    "suggested_key": "errorPasswortzurücksetzungFehlgeschlagen",
    "context": "'statusCode': response.statusCode,\n          'response': errorData\n        });\n        throw Exception(errorData['error'] ?? errorData['message'] ?? 'Passwort-Zurücksetzung fehlgeschlagen');\n      }\n    } catch (e) {\n      AppLogger.auth.e('❌ Password-Reset fehlgeschlagen', error: e);",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 508,
    "column": 24,
    "original": "❌ Password-Reset fehlgeschlagen",
    "suggested_key": "errorPasswordresetFehlgeschlagen",
    "context": "throw Exception(errorData['error'] ?? errorData['message'] ?? 'Passwort-Zurücksetzung fehlgeschlagen');\n      }\n    } catch (e) {\n      AppLogger.auth.e('❌ Password-Reset fehlgeschlagen', error: e);\n      rethrow;\n    }\n  }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 68,
    "column": 57,
    "original": ";\n    \n    if (errorCode != null) {\n      switch (errorCode) {\n        case ",
    "suggested_key": "errorIfErrorcodeNull",
    "context": "// Strukturierte Fehlerbehandlung mit Error-Codes\n  InviteErrorCode _parseErrorCode(Map<String, dynamic> errorData) {\n    final errorCode = errorData['errorCode'] as String?;\n    final message = errorData['message'] as String? ?? '';\n    \n    if (errorCode != null) {\n      switch (errorCode) {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 72,
    "column": 34,
    "original": ":\n          return InviteErrorCode.inviteAlreadySent;\n        case ",
    "suggested_key": "errorReturnInviteerrorcodeinvitealreadysentCase",
    "context": "if (errorCode != null) {\n      switch (errorCode) {\n        case 'INVITE_ALREADY_SENT':\n          return InviteErrorCode.inviteAlreadySent;\n        case 'PERMISSION_DENIED':\n          return InviteErrorCode.permissionDenied;",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 74,
    "column": 32,
    "original": ":\n          return InviteErrorCode.permissionDenied;\n        case ",
    "suggested_key": "errorReturnInviteerrorcodepermissiondeniedCase",
    "context": "switch (errorCode) {\n        case 'INVITE_ALREADY_SENT':\n          return InviteErrorCode.inviteAlreadySent;\n        case 'PERMISSION_DENIED':\n          return InviteErrorCode.permissionDenied;\n        case 'WORLD_NOT_FOUND':\n          return InviteErrorCode.worldNotFound;",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 76,
    "column": 30,
    "original": ":\n          return InviteErrorCode.worldNotFound;\n        case ",
    "suggested_key": "errorReturnInviteerrorcodeworldnotfoundCase",
    "context": "return InviteErrorCode.inviteAlreadySent;\n        case 'PERMISSION_DENIED':\n          return InviteErrorCode.permissionDenied;\n        case 'WORLD_NOT_FOUND':\n          return InviteErrorCode.worldNotFound;\n        case 'WORLD_NOT_OPEN':\n          return InviteErrorCode.worldNotOpen;",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 78,
    "column": 29,
    "original": ":\n          return InviteErrorCode.worldNotOpen;\n        case ",
    "suggested_key": "errorReturnInviteerrorcodeworldnotopenCase",
    "context": "return InviteErrorCode.permissionDenied;\n        case 'WORLD_NOT_FOUND':\n          return InviteErrorCode.worldNotFound;\n        case 'WORLD_NOT_OPEN':\n          return InviteErrorCode.worldNotOpen;\n        case 'INVALID_EMAIL':\n          return InviteErrorCode.invalidEmail;",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 80,
    "column": 28,
    "original": ":\n          return InviteErrorCode.invalidEmail;\n        default:\n          return InviteErrorCode.unknown;\n      }\n    }\n    \n    // Fallback: Text-basierte Erkennung (für Backwards-Kompatibilität)\n    if (message.contains(",
    "suggested_key": "errorReturnInviteerrorcodeinvalidemailDefault",
    "context": "return InviteErrorCode.worldNotFound;\n        case 'WORLD_NOT_OPEN':\n          return InviteErrorCode.worldNotOpen;\n        case 'INVALID_EMAIL':\n          return InviteErrorCode.invalidEmail;\n        default:\n          return InviteErrorCode.unknown;",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 88,
    "column": 49,
    "original": ")) {\n      return InviteErrorCode.inviteAlreadySent;\n    } else if (message.contains(",
    "suggested_key": "errorReturnInviteerrorcodeinvitealreadysentElse",
    "context": "}\n    \n    // Fallback: Text-basierte Erkennung (für Backwards-Kompatibilität)\n    if (message.contains('bereits eine Einladung')) {\n      return InviteErrorCode.inviteAlreadySent;\n    } else if (message.contains('Berechtigung')) {\n      return InviteErrorCode.permissionDenied;",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 90,
    "column": 46,
    "original": ")) {\n      return InviteErrorCode.permissionDenied;\n    } else if (message.contains(",
    "suggested_key": "errorReturnInviteerrorcodepermissiondeniedElse",
    "context": "// Fallback: Text-basierte Erkennung (für Backwards-Kompatibilität)\n    if (message.contains('bereits eine Einladung')) {\n      return InviteErrorCode.inviteAlreadySent;\n    } else if (message.contains('Berechtigung')) {\n      return InviteErrorCode.permissionDenied;\n    } else if (message.contains('nicht gefunden')) {\n      return InviteErrorCode.worldNotFound;",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 92,
    "column": 48,
    "original": ")) {\n      return InviteErrorCode.worldNotFound;\n    } else if (message.contains(",
    "suggested_key": "errorReturnInviteerrorcodeworldnotfoundElse",
    "context": "return InviteErrorCode.inviteAlreadySent;\n    } else if (message.contains('Berechtigung')) {\n      return InviteErrorCode.permissionDenied;\n    } else if (message.contains('nicht gefunden')) {\n      return InviteErrorCode.worldNotFound;\n    } else if (message.contains('nicht geöffnet')) {\n      return InviteErrorCode.worldNotOpen;",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 94,
    "column": 48,
    "original": ")) {\n      return InviteErrorCode.worldNotOpen;\n    } else if (message.contains(",
    "suggested_key": "errorReturnInviteerrorcodeworldnotopenElse",
    "context": "return InviteErrorCode.permissionDenied;\n    } else if (message.contains('nicht gefunden')) {\n      return InviteErrorCode.worldNotFound;\n    } else if (message.contains('nicht geöffnet')) {\n      return InviteErrorCode.worldNotOpen;\n    } else if (message.contains('E-Mail')) {\n      return InviteErrorCode.invalidEmail;",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 96,
    "column": 40,
    "original": ")) {\n      return InviteErrorCode.invalidEmail;\n    }\n    \n    return InviteErrorCode.unknown;\n  }\n\n  // Benutzerfreundliche Fehlermeldungen basierend auf Error-Codes\n  String _getErrorMessage(InviteErrorCode errorCode, String? originalMessage) {\n    switch (errorCode) {\n      case InviteErrorCode.inviteAlreadySent:\n        return ",
    "suggested_key": "errorReturnInviteerrorcodeinvalidemailReturn",
    "context": "return InviteErrorCode.worldNotFound;\n    } else if (message.contains('nicht geöffnet')) {\n      return InviteErrorCode.worldNotOpen;\n    } else if (message.contains('E-Mail')) {\n      return InviteErrorCode.invalidEmail;\n    }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 107,
    "column": 73,
    "original": ";\n      case InviteErrorCode.permissionDenied:\n        return ",
    "suggested_key": "errorCaseInviteerrorcodepermissiondeniedReturn",
    "context": "String _getErrorMessage(InviteErrorCode errorCode, String? originalMessage) {\n    switch (errorCode) {\n      case InviteErrorCode.inviteAlreadySent:\n        return 'Diese E-Mail-Adresse hat bereits eine Einladung erhalten';\n      case InviteErrorCode.permissionDenied:\n        return 'Du hast keine Berechtigung, Einladungen zu versenden';\n      case InviteErrorCode.worldNotFound:",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 109,
    "column": 69,
    "original": ";\n      case InviteErrorCode.worldNotFound:\n        return ",
    "suggested_key": "errorCaseInviteerrorcodeworldnotfoundReturn",
    "context": "case InviteErrorCode.inviteAlreadySent:\n        return 'Diese E-Mail-Adresse hat bereits eine Einladung erhalten';\n      case InviteErrorCode.permissionDenied:\n        return 'Du hast keine Berechtigung, Einladungen zu versenden';\n      case InviteErrorCode.worldNotFound:\n        return 'Welt nicht gefunden';\n      case InviteErrorCode.worldNotOpen:",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 111,
    "column": 36,
    "original": ";\n      case InviteErrorCode.worldNotOpen:\n        return ",
    "suggested_key": "errorCaseInviteerrorcodeworldnotopenReturn",
    "context": "case InviteErrorCode.permissionDenied:\n        return 'Du hast keine Berechtigung, Einladungen zu versenden';\n      case InviteErrorCode.worldNotFound:\n        return 'Welt nicht gefunden';\n      case InviteErrorCode.worldNotOpen:\n        return 'Diese Welt ist nicht für Einladungen geöffnet';\n      case InviteErrorCode.invalidEmail:",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 113,
    "column": 62,
    "original": ";\n      case InviteErrorCode.invalidEmail:\n        return ",
    "suggested_key": "errorCaseInviteerrorcodeinvalidemailReturn",
    "context": "case InviteErrorCode.worldNotFound:\n        return 'Welt nicht gefunden';\n      case InviteErrorCode.worldNotOpen:\n        return 'Diese Welt ist nicht für Einladungen geöffnet';\n      case InviteErrorCode.invalidEmail:\n        return 'Ungültige E-Mail-Adresse';\n      case InviteErrorCode.networkError:",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 115,
    "column": 41,
    "original": ";\n      case InviteErrorCode.networkError:\n        return ",
    "suggested_key": "errorCaseInviteerrorcodenetworkerrorReturn",
    "context": "case InviteErrorCode.worldNotOpen:\n        return 'Diese Welt ist nicht für Einladungen geöffnet';\n      case InviteErrorCode.invalidEmail:\n        return 'Ungültige E-Mail-Adresse';\n      case InviteErrorCode.networkError:\n        return 'Netzwerkfehler - bitte versuche es erneut';\n      case InviteErrorCode.unknown:",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 117,
    "column": 58,
    "original": ";\n      case InviteErrorCode.unknown:\n        return originalMessage ?? ",
    "suggested_key": "errorCaseInviteerrorcodeunknownReturn",
    "context": "case InviteErrorCode.invalidEmail:\n        return 'Ungültige E-Mail-Adresse';\n      case InviteErrorCode.networkError:\n        return 'Netzwerkfehler - bitte versuche es erneut';\n      case InviteErrorCode.unknown:\n        return originalMessage ?? 'Einladung fehlgeschlagen';\n    }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 119,
    "column": 60,
    "original": ";\n    }\n  }\n\n  Future<bool> createInvite(int worldId, String email) async {\n    try {\n      final data = <String, dynamic>{\n        ",
    "suggested_key": "errorFutureboolCreateinviteintWorldid",
    "context": "case InviteErrorCode.networkError:\n        return 'Netzwerkfehler - bitte versuche es erneut';\n      case InviteErrorCode.unknown:\n        return originalMessage ?? 'Einladung fehlgeschlagen';\n    }\n  }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 133,
    "column": 37,
    "original": "] == true;\n      } else {\n        // Strukturierte Fehlerbehandlung\n        final errorData = jsonDecode(response.body);\n        final errorCode = _parseErrorCode(errorData);\n        final errorMessage = _getErrorMessage(errorCode, errorData[",
    "suggested_key": "errorTrueElseStrukturierte",
    "context": "if (response.statusCode == 200) {\n        final responseData = jsonDecode(response.body);\n        return responseData['success'] == true;\n      } else {\n        // Strukturierte Fehlerbehandlung\n        final errorData = jsonDecode(response.body);",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 138,
    "column": 76,
    "original": "]);\n        throw Exception(errorMessage);\n      }\n    } on FormatException catch (e) {\n      throw Exception(",
    "suggested_key": "errorThrowExceptionerrormessageOn",
    "context": "// Strukturierte Fehlerbehandlung\n        final errorData = jsonDecode(response.body);\n        final errorCode = _parseErrorCode(errorData);\n        final errorMessage = _getErrorMessage(errorCode, errorData['message']);\n        throw Exception(errorMessage);\n      }\n    } on FormatException catch (e) {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 142,
    "column": 52,
    "original": ");\n    } on SocketException {\n      throw Exception(_getErrorMessage(InviteErrorCode.networkError, null));\n    } on http.ClientException {\n      throw Exception(_getErrorMessage(InviteErrorCode.networkError, null));\n    } catch (e) {\n      // Fallback für unbekannte Fehler\n      if (e is Exception) {\n        rethrow;\n      }\n      throw Exception(",
    "suggested_key": "errorOnSocketexceptionThrow",
    "context": "throw Exception(errorMessage);\n      }\n    } on FormatException catch (e) {\n      throw Exception('Ungültige Server-Antwort: $e');\n    } on SocketException {\n      throw Exception(_getErrorMessage(InviteErrorCode.networkError, null));\n    } on http.ClientException {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 152,
    "column": 52,
    "original": ");\n    }\n  }\n\n  Future<bool> createPublicInvite(int worldId, String email) async {\n    try {\n      final data = <String, dynamic>{\n        ",
    "suggested_key": "errorFutureboolCreatepublicinviteintWorldid",
    "context": "if (e is Exception) {\n        rethrow;\n      }\n      throw Exception('Einladung fehlgeschlagen: $e');\n    }\n  }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 170,
    "column": 76,
    "original": "]);\n        throw Exception(errorMessage);\n      } else {\n        throw Exception(",
    "suggested_key": "errorThrowExceptionerrormessageElse",
    "context": "// Konsistente Fehlerbehandlung wie createInvite\n        final errorData = jsonDecode(response.body);\n        final errorCode = _parseErrorCode(errorData);\n        final errorMessage = _getErrorMessage(errorCode, errorData['message']);\n        throw Exception(errorMessage);\n      } else {\n        throw Exception('Öffentliche Einladung fehlgeschlagen: ${response.statusCode}');",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 173,
    "column": 86,
    "original": ");\n      }\n    } on FormatException catch (e) {\n      throw Exception(",
    "suggested_key": "errorOnFormatexceptionCatch",
    "context": "final errorMessage = _getErrorMessage(errorCode, errorData['message']);\n        throw Exception(errorMessage);\n      } else {\n        throw Exception('Öffentliche Einladung fehlgeschlagen: ${response.statusCode}');\n      }\n    } on FormatException catch (e) {\n      throw Exception('Ungültige Server-Antwort: $e');",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 176,
    "column": 52,
    "original": ");\n    } on SocketException {\n      throw Exception(_getErrorMessage(InviteErrorCode.networkError, null));\n    } on http.ClientException {\n      throw Exception(_getErrorMessage(InviteErrorCode.networkError, null));\n    } catch (e) {\n      if (e is Exception) {\n        rethrow;\n      }\n      throw Exception(",
    "suggested_key": "errorOnSocketexceptionThrow",
    "context": "throw Exception('Öffentliche Einladung fehlgeschlagen: ${response.statusCode}');\n      }\n    } on FormatException catch (e) {\n      throw Exception('Ungültige Server-Antwort: $e');\n    } on SocketException {\n      throw Exception(_getErrorMessage(InviteErrorCode.networkError, null));\n    } on http.ClientException {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 185,
    "column": 64,
    "original": ");\n    }\n  }\n\n  Future<List<Invite>> getInvites(int worldId) async {\n    try {\n      final response = await _apiService.get(",
    "suggested_key": "errorFuturelistinviteGetinvitesintWorldid",
    "context": "if (e is Exception) {\n        rethrow;\n      }\n      throw Exception('Öffentliche Einladung fehlgeschlagen: $e');\n    }\n  }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 197,
    "column": 90,
    "original": ");\n      }\n    } on FormatException catch (e) {\n      throw Exception(",
    "suggested_key": "errorOnFormatexceptionCatch",
    "context": "final List<dynamic> invitesJson = jsonDecode(response.body);\n        return invitesJson.map((json) => Invite.fromJson(json as Map<String, dynamic>)).toList();\n      } else {\n        throw Exception('Einladungen konnten nicht geladen werden: ${response.statusCode}');\n      }\n    } on FormatException catch (e) {\n      throw Exception('Ungültige Server-Antwort: $e');",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 200,
    "column": 52,
    "original": ");\n    } on SocketException {\n      throw Exception(_getErrorMessage(InviteErrorCode.networkError, null));\n    } on http.ClientException {\n      throw Exception(_getErrorMessage(InviteErrorCode.networkError, null));\n    } catch (e) {\n      if (e is Exception) {\n        rethrow;\n      }\n      throw Exception(",
    "suggested_key": "errorOnSocketexceptionThrow",
    "context": "throw Exception('Einladungen konnten nicht geladen werden: ${response.statusCode}');\n      }\n    } on FormatException catch (e) {\n      throw Exception('Ungültige Server-Antwort: $e');\n    } on SocketException {\n      throw Exception(_getErrorMessage(InviteErrorCode.networkError, null));\n    } on http.ClientException {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 209,
    "column": 68,
    "original": ");\n    }\n  }\n\n  // Backwards-Kompatibilität: Alte Methode mit Map-Rückgabe\n  Future<List<Map<String, dynamic>>> getInvitesAsMap(int worldId) async {\n    final invites = await getInvites(worldId);\n    return invites.map((invite) => invite.toJson()).toList();\n  }\n\n  Future<bool> deleteInvite(int worldId, int inviteId, {String? token}) async {\n    try {\n      if (token != null) {\n        final data = <String, dynamic>{\n          ",
    "suggested_key": "errorBackwardskompatibilitätAlteMethode",
    "context": "if (e is Exception) {\n        rethrow;\n      }\n      throw Exception('Einladungen konnten nicht geladen werden: $e');\n    }\n  }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 228,
    "column": 86,
    "original": ");\n        return response.statusCode == 200;\n      }\n    } on FormatException catch (e) {\n      throw Exception(",
    "suggested_key": "errorReturnResponsestatuscode200",
    "context": "final response = await _apiService.deleteWithBody('/worlds/$worldId/invites/$inviteId', data);\n        return response.statusCode == 200;\n      } else {\n        final response = await _apiService.delete('/worlds/$worldId/invites/$inviteId');\n        return response.statusCode == 200;\n      }\n    } on FormatException catch (e) {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 232,
    "column": 52,
    "original": ");\n    } on SocketException {\n      throw Exception(_getErrorMessage(InviteErrorCode.networkError, null));\n    } on http.ClientException {\n      throw Exception(_getErrorMessage(InviteErrorCode.networkError, null));\n    } catch (e) {\n      if (e is Exception) {\n        rethrow;\n      }\n      throw Exception(",
    "suggested_key": "errorOnSocketexceptionThrow",
    "context": "return response.statusCode == 200;\n      }\n    } on FormatException catch (e) {\n      throw Exception('Ungültige Server-Antwort: $e');\n    } on SocketException {\n      throw Exception(_getErrorMessage(InviteErrorCode.networkError, null));\n    } on http.ClientException {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 68,
    "column": 90,
    "original": ";\n    \n    if (errorCode != null) {\n      switch (errorCode) {\n        case ",
    "suggested_key": "errorIfErrorcodeNull",
    "context": "// Strukturierte Fehlerbehandlung mit Error-Codes\n  WorldErrorCode _parseErrorCode(Map<String, dynamic> errorData) {\n    final errorCode = errorData['errorCode'] as String?;\n    final message = errorData['error'] as String? ?? errorData['message'] as String? ?? '';\n    \n    if (errorCode != null) {\n      switch (errorCode) {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 72,
    "column": 30,
    "original": ":\n          return WorldErrorCode.worldNotFound;\n        case ",
    "suggested_key": "errorReturnWorlderrorcodeworldnotfoundCase",
    "context": "if (errorCode != null) {\n      switch (errorCode) {\n        case 'WORLD_NOT_FOUND':\n          return WorldErrorCode.worldNotFound;\n        case 'PERMISSION_DENIED':\n          return WorldErrorCode.permissionDenied;",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 74,
    "column": 32,
    "original": ":\n          return WorldErrorCode.permissionDenied;\n        case ",
    "suggested_key": "errorReturnWorlderrorcodepermissiondeniedCase",
    "context": "switch (errorCode) {\n        case 'WORLD_NOT_FOUND':\n          return WorldErrorCode.worldNotFound;\n        case 'PERMISSION_DENIED':\n          return WorldErrorCode.permissionDenied;\n        case 'WORLD_ARCHIVED':\n          return WorldErrorCode.worldArchived;",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 76,
    "column": 29,
    "original": ":\n          return WorldErrorCode.worldArchived;\n        case ",
    "suggested_key": "errorReturnWorlderrorcodeworldarchivedCase",
    "context": "return WorldErrorCode.worldNotFound;\n        case 'PERMISSION_DENIED':\n          return WorldErrorCode.permissionDenied;\n        case 'WORLD_ARCHIVED':\n          return WorldErrorCode.worldArchived;\n        case 'ALREADY_REGISTERED':\n          return WorldErrorCode.alreadyRegistered;",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 78,
    "column": 33,
    "original": ":\n          return WorldErrorCode.alreadyRegistered;\n        case ",
    "suggested_key": "errorReturnWorlderrorcodealreadyregisteredCase",
    "context": "return WorldErrorCode.permissionDenied;\n        case 'WORLD_ARCHIVED':\n          return WorldErrorCode.worldArchived;\n        case 'ALREADY_REGISTERED':\n          return WorldErrorCode.alreadyRegistered;\n        case 'ALREADY_PRE_REGISTERED':\n          return WorldErrorCode.alreadyPreRegistered;",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 80,
    "column": 37,
    "original": ":\n          return WorldErrorCode.alreadyPreRegistered;\n        case ",
    "suggested_key": "errorReturnWorlderrorcodealreadypreregisteredCase",
    "context": "return WorldErrorCode.worldArchived;\n        case 'ALREADY_REGISTERED':\n          return WorldErrorCode.alreadyRegistered;\n        case 'ALREADY_PRE_REGISTERED':\n          return WorldErrorCode.alreadyPreRegistered;\n        case 'PRE_REGISTRATION_CLOSED':\n          return WorldErrorCode.preRegistrationClosed;",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 82,
    "column": 38,
    "original": ":\n          return WorldErrorCode.preRegistrationClosed;\n        case ",
    "suggested_key": "errorReturnWorlderrorcodepreregistrationclosedCase",
    "context": "return WorldErrorCode.alreadyRegistered;\n        case 'ALREADY_PRE_REGISTERED':\n          return WorldErrorCode.alreadyPreRegistered;\n        case 'PRE_REGISTRATION_CLOSED':\n          return WorldErrorCode.preRegistrationClosed;\n        case 'NOT_AUTHENTICATED':\n          return WorldErrorCode.notAuthenticated;",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 84,
    "column": 32,
    "original": ":\n          return WorldErrorCode.notAuthenticated;\n        default:\n          return WorldErrorCode.unknown;\n      }\n    }\n    \n    // Fallback: Text-basierte Erkennung (für Backwards-Kompatibilität)\n    if (message.contains(",
    "suggested_key": "errorReturnWorlderrorcodenotauthenticatedDefault",
    "context": "return WorldErrorCode.alreadyPreRegistered;\n        case 'PRE_REGISTRATION_CLOSED':\n          return WorldErrorCode.preRegistrationClosed;\n        case 'NOT_AUTHENTICATED':\n          return WorldErrorCode.notAuthenticated;\n        default:\n          return WorldErrorCode.unknown;",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 92,
    "column": 41,
    "original": ")) {\n      return WorldErrorCode.worldNotFound;\n    } else if (message.contains(",
    "suggested_key": "errorReturnWorlderrorcodeworldnotfoundElse",
    "context": "}\n    \n    // Fallback: Text-basierte Erkennung (für Backwards-Kompatibilität)\n    if (message.contains('nicht gefunden')) {\n      return WorldErrorCode.worldNotFound;\n    } else if (message.contains('Berechtigung')) {\n      return WorldErrorCode.permissionDenied;",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 94,
    "column": 46,
    "original": ")) {\n      return WorldErrorCode.permissionDenied;\n    } else if (message.contains(",
    "suggested_key": "errorReturnWorlderrorcodepermissiondeniedElse",
    "context": "// Fallback: Text-basierte Erkennung (für Backwards-Kompatibilität)\n    if (message.contains('nicht gefunden')) {\n      return WorldErrorCode.worldNotFound;\n    } else if (message.contains('Berechtigung')) {\n      return WorldErrorCode.permissionDenied;\n    } else if (message.contains('archiviert')) {\n      return WorldErrorCode.worldArchived;",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 96,
    "column": 44,
    "original": ")) {\n      return WorldErrorCode.worldArchived;\n    } else if (message.contains(",
    "suggested_key": "errorReturnWorlderrorcodeworldarchivedElse",
    "context": "return WorldErrorCode.worldNotFound;\n    } else if (message.contains('Berechtigung')) {\n      return WorldErrorCode.permissionDenied;\n    } else if (message.contains('archiviert')) {\n      return WorldErrorCode.worldArchived;\n    } else if (message.contains('bereits registriert')) {\n      return WorldErrorCode.alreadyRegistered;",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 98,
    "column": 53,
    "original": ")) {\n      return WorldErrorCode.alreadyRegistered;\n    } else if (message.contains(",
    "suggested_key": "errorReturnWorlderrorcodealreadyregisteredElse",
    "context": "return WorldErrorCode.permissionDenied;\n    } else if (message.contains('archiviert')) {\n      return WorldErrorCode.worldArchived;\n    } else if (message.contains('bereits registriert')) {\n      return WorldErrorCode.alreadyRegistered;\n    } else if (message.contains('bereits vorregistriert')) {\n      return WorldErrorCode.alreadyPreRegistered;",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 100,
    "column": 56,
    "original": ")) {\n      return WorldErrorCode.alreadyPreRegistered;\n    } else if (message.contains(",
    "suggested_key": "errorReturnWorlderrorcodealreadypreregisteredElse",
    "context": "return WorldErrorCode.worldArchived;\n    } else if (message.contains('bereits registriert')) {\n      return WorldErrorCode.alreadyRegistered;\n    } else if (message.contains('bereits vorregistriert')) {\n      return WorldErrorCode.alreadyPreRegistered;\n    } else if (message.contains('geschlossen')) {\n      return WorldErrorCode.preRegistrationClosed;",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 102,
    "column": 45,
    "original": ")) {\n      return WorldErrorCode.preRegistrationClosed;\n    } else if (message.contains(",
    "suggested_key": "errorReturnWorlderrorcodepreregistrationclosedElse",
    "context": "return WorldErrorCode.alreadyRegistered;\n    } else if (message.contains('bereits vorregistriert')) {\n      return WorldErrorCode.alreadyPreRegistered;\n    } else if (message.contains('geschlossen')) {\n      return WorldErrorCode.preRegistrationClosed;\n    } else if (message.contains('angemeldet')) {\n      return WorldErrorCode.notAuthenticated;",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 104,
    "column": 44,
    "original": ")) {\n      return WorldErrorCode.notAuthenticated;\n    }\n    \n    return WorldErrorCode.unknown;\n  }\n\n  // Benutzerfreundliche Fehlermeldungen basierend auf Error-Codes\n  String _getErrorMessage(WorldErrorCode errorCode, String? originalMessage) {\n    switch (errorCode) {\n      case WorldErrorCode.worldNotFound:\n        return ",
    "suggested_key": "errorReturnWorlderrorcodenotauthenticatedReturn",
    "context": "return WorldErrorCode.alreadyPreRegistered;\n    } else if (message.contains('geschlossen')) {\n      return WorldErrorCode.preRegistrationClosed;\n    } else if (message.contains('angemeldet')) {\n      return WorldErrorCode.notAuthenticated;\n    }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 115,
    "column": 36,
    "original": ";\n      case WorldErrorCode.permissionDenied:\n        return ",
    "suggested_key": "errorCaseWorlderrorcodepermissiondeniedReturn",
    "context": "String _getErrorMessage(WorldErrorCode errorCode, String? originalMessage) {\n    switch (errorCode) {\n      case WorldErrorCode.worldNotFound:\n        return 'Welt nicht gefunden';\n      case WorldErrorCode.permissionDenied:\n        return 'Du hast keine Berechtigung für diese Aktion';\n      case WorldErrorCode.worldArchived:",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 117,
    "column": 60,
    "original": ";\n      case WorldErrorCode.worldArchived:\n        return ",
    "suggested_key": "errorCaseWorlderrorcodeworldarchivedReturn",
    "context": "case WorldErrorCode.worldNotFound:\n        return 'Welt nicht gefunden';\n      case WorldErrorCode.permissionDenied:\n        return 'Du hast keine Berechtigung für diese Aktion';\n      case WorldErrorCode.worldArchived:\n        return 'Diese Welt ist nicht mehr verfügbar';\n      case WorldErrorCode.alreadyRegistered:",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 119,
    "column": 52,
    "original": ";\n      case WorldErrorCode.alreadyRegistered:\n        return ",
    "suggested_key": "errorCaseWorlderrorcodealreadyregisteredReturn",
    "context": "case WorldErrorCode.permissionDenied:\n        return 'Du hast keine Berechtigung für diese Aktion';\n      case WorldErrorCode.worldArchived:\n        return 'Diese Welt ist nicht mehr verfügbar';\n      case WorldErrorCode.alreadyRegistered:\n        return 'Du bist bereits Mitglied dieser Welt';\n      case WorldErrorCode.alreadyPreRegistered:",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 121,
    "column": 53,
    "original": ";\n      case WorldErrorCode.alreadyPreRegistered:\n        return ",
    "suggested_key": "errorCaseWorlderrorcodealreadypreregisteredReturn",
    "context": "case WorldErrorCode.worldArchived:\n        return 'Diese Welt ist nicht mehr verfügbar';\n      case WorldErrorCode.alreadyRegistered:\n        return 'Du bist bereits Mitglied dieser Welt';\n      case WorldErrorCode.alreadyPreRegistered:\n        return 'Du bist bereits für diese Welt vorregistriert';\n      case WorldErrorCode.preRegistrationClosed:",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 123,
    "column": 62,
    "original": ";\n      case WorldErrorCode.preRegistrationClosed:\n        return ",
    "suggested_key": "errorCaseWorlderrorcodepreregistrationclosedReturn",
    "context": "case WorldErrorCode.alreadyRegistered:\n        return 'Du bist bereits Mitglied dieser Welt';\n      case WorldErrorCode.alreadyPreRegistered:\n        return 'Du bist bereits für diese Welt vorregistriert';\n      case WorldErrorCode.preRegistrationClosed:\n        return 'Vorregistrierung für diese Welt ist nicht möglich';\n      case WorldErrorCode.notAuthenticated:",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 125,
    "column": 66,
    "original": ";\n      case WorldErrorCode.notAuthenticated:\n        return ",
    "suggested_key": "errorCaseWorlderrorcodenotauthenticatedReturn",
    "context": "case WorldErrorCode.alreadyPreRegistered:\n        return 'Du bist bereits für diese Welt vorregistriert';\n      case WorldErrorCode.preRegistrationClosed:\n        return 'Vorregistrierung für diese Welt ist nicht möglich';\n      case WorldErrorCode.notAuthenticated:\n        return 'Du musst angemeldet sein';\n      case WorldErrorCode.networkError:",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 127,
    "column": 41,
    "original": ";\n      case WorldErrorCode.networkError:\n        return ",
    "suggested_key": "errorCaseWorlderrorcodenetworkerrorReturn",
    "context": "case WorldErrorCode.preRegistrationClosed:\n        return 'Vorregistrierung für diese Welt ist nicht möglich';\n      case WorldErrorCode.notAuthenticated:\n        return 'Du musst angemeldet sein';\n      case WorldErrorCode.networkError:\n        return 'Netzwerkfehler - bitte versuche es erneut';\n      case WorldErrorCode.unknown:",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 129,
    "column": 58,
    "original": ";\n      case WorldErrorCode.unknown:\n        return originalMessage ?? ",
    "suggested_key": "errorCaseWorlderrorcodeunknownReturn",
    "context": "case WorldErrorCode.notAuthenticated:\n        return 'Du musst angemeldet sein';\n      case WorldErrorCode.networkError:\n        return 'Netzwerkfehler - bitte versuche es erneut';\n      case WorldErrorCode.unknown:\n        return originalMessage ?? 'Aktion fehlgeschlagen';\n    }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 131,
    "column": 57,
    "original": ";\n    }\n  }\n\n  Future<List<World>> getWorlds() async {\n    try {\n      final response = await _apiService.get(",
    "suggested_key": "errorFuturelistworldGetworldsAsync",
    "context": "case WorldErrorCode.networkError:\n        return 'Netzwerkfehler - bitte versuche es erneut';\n      case WorldErrorCode.unknown:\n        return originalMessage ?? 'Aktion fehlgeschlagen';\n    }\n  }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 143,
    "column": 85,
    "original": ");\n      }\n    } on FormatException catch (e) {\n      throw Exception(",
    "suggested_key": "errorOnFormatexceptionCatch",
    "context": "final List<dynamic> worldsJson = jsonDecode(response.body);\n        return worldsJson.map((json) => World.fromJson(json)).toList();\n      } else {\n        throw Exception('Welten konnten nicht geladen werden: ${response.statusCode}');\n      }\n    } on FormatException catch (e) {\n      throw Exception('Ungültige Server-Antwort: $e');",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 146,
    "column": 52,
    "original": ");\n    } on SocketException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } on http.ClientException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } catch (e) {\n      if (e is Exception) {\n        rethrow;\n      }\n      throw Exception(",
    "suggested_key": "errorOnSocketexceptionThrow",
    "context": "throw Exception('Welten konnten nicht geladen werden: ${response.statusCode}');\n      }\n    } on FormatException catch (e) {\n      throw Exception('Ungültige Server-Antwort: $e');\n    } on SocketException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } on http.ClientException {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 155,
    "column": 63,
    "original": ");\n    }\n  }\n\n  Future<World> getWorld(int worldId) async {\n    try {\n      final response = await _apiService.get(",
    "suggested_key": "errorFutureworldGetworldintWorldid",
    "context": "if (e is Exception) {\n        rethrow;\n      }\n      throw Exception('Welten konnten nicht geladen werden: $e');\n    }\n  }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 167,
    "column": 82,
    "original": ");\n      }\n    } on FormatException catch (e) {\n      throw Exception(",
    "suggested_key": "errorOnFormatexceptionCatch",
    "context": "final worldJson = jsonDecode(response.body);\n        return World.fromJson(worldJson);\n      } else {\n        throw Exception('Welt konnte nicht geladen werden: ${response.statusCode}');\n      }\n    } on FormatException catch (e) {\n      throw Exception('Ungültige Server-Antwort: $e');",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 170,
    "column": 52,
    "original": ");\n    } on SocketException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } on http.ClientException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } catch (e) {\n      if (e is Exception) {\n        rethrow;\n      }\n      throw Exception(",
    "suggested_key": "errorOnSocketexceptionThrow",
    "context": "throw Exception('Welt konnte nicht geladen werden: ${response.statusCode}');\n      }\n    } on FormatException catch (e) {\n      throw Exception('Ungültige Server-Antwort: $e');\n    } on SocketException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } on http.ClientException {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 179,
    "column": 60,
    "original": ");\n    }\n  }\n\n  Future<bool> joinWorld(int worldId) async {\n    try {\n      final response = await _apiService.post(",
    "suggested_key": "errorFutureboolJoinworldintWorldid",
    "context": "if (e is Exception) {\n        rethrow;\n      }\n      throw Exception('Welt konnte nicht geladen werden: $e');\n    }\n  }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 189,
    "column": 37,
    "original": "] == true;\n      } else {\n        // Strukturierte Fehlerbehandlung\n        final errorData = jsonDecode(response.body);\n        final errorCode = _parseErrorCode(errorData);\n        final errorMessage = _getErrorMessage(errorCode, errorData[",
    "suggested_key": "errorTrueElseStrukturierte",
    "context": "if (response.statusCode == 200) {\n        final responseData = jsonDecode(response.body);\n        return responseData['success'] == true;\n      } else {\n        // Strukturierte Fehlerbehandlung\n        final errorData = jsonDecode(response.body);",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 194,
    "column": 74,
    "original": "]);\n        throw Exception(errorMessage);\n      }\n    } on FormatException catch (e) {\n      throw Exception(",
    "suggested_key": "errorThrowExceptionerrormessageOn",
    "context": "// Strukturierte Fehlerbehandlung\n        final errorData = jsonDecode(response.body);\n        final errorCode = _parseErrorCode(errorData);\n        final errorMessage = _getErrorMessage(errorCode, errorData['error']);\n        throw Exception(errorMessage);\n      }\n    } on FormatException catch (e) {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 198,
    "column": 52,
    "original": ");\n    } on SocketException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } on http.ClientException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } catch (e) {\n      if (e is Exception) {\n        rethrow;\n      }\n      throw Exception(",
    "suggested_key": "errorOnSocketexceptionThrow",
    "context": "throw Exception(errorMessage);\n      }\n    } on FormatException catch (e) {\n      throw Exception('Ungültige Server-Antwort: $e');\n    } on SocketException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } on http.ClientException {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 207,
    "column": 51,
    "original": ");\n    }\n  }\n\n  Future<bool> preRegisterWorld(int worldId, String email, {Map<String, dynamic>? config}) async {\n    try {\n      final data = <String, dynamic>{\n        ",
    "suggested_key": "errorFutureboolPreregisterworldintWorldid",
    "context": "if (e is Exception) {\n        rethrow;\n      }\n      throw Exception('Beitritt fehlgeschlagen: $e');\n    }\n  }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 224,
    "column": 37,
    "original": "] == true;\n      } else {\n        // Strukturierte Fehlerbehandlung\n        final errorData = jsonDecode(response.body);\n        final errorCode = _parseErrorCode(errorData);\n        final errorMessage = _getErrorMessage(errorCode, errorData[",
    "suggested_key": "errorTrueElseStrukturierte",
    "context": "if (response.statusCode == 200) {\n        final responseData = jsonDecode(response.body);\n        return responseData['success'] == true;\n      } else {\n        // Strukturierte Fehlerbehandlung\n        final errorData = jsonDecode(response.body);",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 229,
    "column": 74,
    "original": "]);\n        throw Exception(errorMessage);\n      }\n    } on FormatException catch (e) {\n      throw Exception(",
    "suggested_key": "errorThrowExceptionerrormessageOn",
    "context": "// Strukturierte Fehlerbehandlung\n        final errorData = jsonDecode(response.body);\n        final errorCode = _parseErrorCode(errorData);\n        final errorMessage = _getErrorMessage(errorCode, errorData['error']);\n        throw Exception(errorMessage);\n      }\n    } on FormatException catch (e) {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 233,
    "column": 52,
    "original": ");\n    } on SocketException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } on http.ClientException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } catch (e) {\n      if (e is Exception) {\n        rethrow;\n      }\n      throw Exception(",
    "suggested_key": "errorOnSocketexceptionThrow",
    "context": "throw Exception(errorMessage);\n      }\n    } on FormatException catch (e) {\n      throw Exception('Ungültige Server-Antwort: $e');\n    } on SocketException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } on http.ClientException {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 242,
    "column": 59,
    "original": ");\n    }\n  }\n\n  Future<bool> preRegisterWorldAuthenticated(int worldId, {Map<String, dynamic>? config}) async {\n    try {\n      final currentUser = _authService.currentUser;\n      if (currentUser == null) {\n        throw Exception(_getErrorMessage(WorldErrorCode.notAuthenticated, null));\n      }\n\n      final data = <String, dynamic>{\n        ",
    "suggested_key": "errorFutureboolPreregisterworldauthenticatedintWorldid",
    "context": "if (e is Exception) {\n        rethrow;\n      }\n      throw Exception('Vorregistrierung fehlgeschlagen: $e');\n    }\n  }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 264,
    "column": 37,
    "original": "] == true;\n      } else {\n        // Strukturierte Fehlerbehandlung\n        final errorData = jsonDecode(response.body);\n        final errorCode = _parseErrorCode(errorData);\n        final errorMessage = _getErrorMessage(errorCode, errorData[",
    "suggested_key": "errorTrueElseStrukturierte",
    "context": "if (response.statusCode == 200) {\n        final responseData = jsonDecode(response.body);\n        return responseData['success'] == true;\n      } else {\n        // Strukturierte Fehlerbehandlung\n        final errorData = jsonDecode(response.body);",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 269,
    "column": 74,
    "original": "]);\n        throw Exception(errorMessage);\n      }\n    } on FormatException catch (e) {\n      throw Exception(",
    "suggested_key": "errorThrowExceptionerrormessageOn",
    "context": "// Strukturierte Fehlerbehandlung\n        final errorData = jsonDecode(response.body);\n        final errorCode = _parseErrorCode(errorData);\n        final errorMessage = _getErrorMessage(errorCode, errorData['error']);\n        throw Exception(errorMessage);\n      }\n    } on FormatException catch (e) {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 273,
    "column": 52,
    "original": ");\n    } on SocketException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } on http.ClientException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } catch (e) {\n      if (e is Exception) {\n        rethrow;\n      }\n      throw Exception(",
    "suggested_key": "errorOnSocketexceptionThrow",
    "context": "throw Exception(errorMessage);\n      }\n    } on FormatException catch (e) {\n      throw Exception('Ungültige Server-Antwort: $e');\n    } on SocketException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } on http.ClientException {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 282,
    "column": 59,
    "original": ");\n    }\n  }\n\n  Future<bool> cancelPreRegistration(int worldId, String email) async {\n    try {\n      final response = await _apiService.delete(",
    "suggested_key": "errorFutureboolCancelpreregistrationintWorldid",
    "context": "if (e is Exception) {\n        rethrow;\n      }\n      throw Exception('Vorregistrierung fehlgeschlagen: $e');\n    }\n  }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 288,
    "column": 92,
    "original": ");\n      \n      return response.statusCode == 200;\n    } on FormatException catch (e) {\n      throw Exception(",
    "suggested_key": "errorReturnResponsestatuscode200",
    "context": "Future<bool> cancelPreRegistration(int worldId, String email) async {\n    try {\n      final response = await _apiService.delete('/worlds/$worldId/pre-register?email=$email');\n      \n      return response.statusCode == 200;\n    } on FormatException catch (e) {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 292,
    "column": 52,
    "original": ");\n    } on SocketException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } on http.ClientException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } catch (e) {\n      if (e is Exception) {\n        rethrow;\n      }\n      throw Exception(",
    "suggested_key": "errorOnSocketexceptionThrow",
    "context": "return response.statusCode == 200;\n    } on FormatException catch (e) {\n      throw Exception('Ungültige Server-Antwort: $e');\n    } on SocketException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } on http.ClientException {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 301,
    "column": 74,
    "original": ");\n    }\n  }\n\n  Future<bool> cancelPreRegistrationAuthenticated(int worldId) async {\n    try {\n      final currentUser = _authService.currentUser;\n      if (currentUser == null) {\n        throw Exception(_getErrorMessage(WorldErrorCode.notAuthenticated, null));\n      }\n\n      return await cancelPreRegistration(worldId, currentUser.email);\n    } catch (e) {\n      if (e is Exception) {\n        rethrow;\n      }\n      throw Exception(",
    "suggested_key": "errorFutureboolCancelpreregistrationauthenticatedintWorldid",
    "context": "if (e is Exception) {\n        rethrow;\n      }\n      throw Exception('Vorregistrierung konnte nicht storniert werden: $e');\n    }\n  }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 317,
    "column": 74,
    "original": ");\n    }\n  }\n\n  Future<bool> leaveWorld(int worldId) async {\n    try {\n      final response = await _apiService.delete(",
    "suggested_key": "errorFutureboolLeaveworldintWorldid",
    "context": "if (e is Exception) {\n        rethrow;\n      }\n      throw Exception('Vorregistrierung konnte nicht storniert werden: $e');\n    }\n  }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 323,
    "column": 77,
    "original": ");\n      \n      return response.statusCode == 200;\n    } on FormatException catch (e) {\n      throw Exception(",
    "suggested_key": "errorReturnResponsestatuscode200",
    "context": "Future<bool> leaveWorld(int worldId) async {\n    try {\n      final response = await _apiService.delete('/worlds/$worldId/players/me');\n      \n      return response.statusCode == 200;\n    } on FormatException catch (e) {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 327,
    "column": 52,
    "original": ");\n    } on SocketException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } on http.ClientException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } catch (e) {\n      if (e is Exception) {\n        rethrow;\n      }\n      throw Exception(",
    "suggested_key": "errorOnSocketexceptionThrow",
    "context": "return response.statusCode == 200;\n    } on FormatException catch (e) {\n      throw Exception('Ungültige Server-Antwort: $e');\n    } on SocketException {\n      throw Exception(_getErrorMessage(WorldErrorCode.networkError, null));\n    } on http.ClientException {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 336,
    "column": 62,
    "original": ");\n    }\n  }\n\n  Future<bool> isPlayerInWorld(int worldId) async {\n    try {\n      final response = await _apiService.get(",
    "suggested_key": "errorFutureboolIsplayerinworldintWorldid",
    "context": "if (e is Exception) {\n        rethrow;\n      }\n      throw Exception('Welt konnte nicht verlassen werden: $e');\n    }\n  }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 364,
    "column": 13,
    "original": "t log this as an error\n      return PreRegistrationStatus(isPreRegistered: false);\n    }\n  }\n\n  // Backwards-Kompatibilität: Alte Methode mit bool-Rückgabe\n  Future<bool> isPreRegisteredForWorld(int worldId) async {\n    final status = await getPreRegistrationStatus(worldId);\n    return status.isPreRegistered;\n  }\n\n  // Invite-Token Validierung\n  Future<Map<String, dynamic>?> validateInviteToken(String token) async {\n    try {\n      // API-Call ohne Authentifizierung (öffentlicher Endpoint)\n      final response = await _apiService.get(",
    "suggested_key": "errorTLogThis",
    "context": "return PreRegistrationStatus(isPreRegistered: false);\n    } catch (e) {\n      // 404 means user is not pre-registered, which is normal\n      // Don't log this as an error\n      return PreRegistrationStatus(isPreRegistered: false);\n    }\n  }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 390,
    "column": 55,
    "original": ", e, context: {",
    "suggested_key": "errorEContext",
    "context": "return null;\n    } catch (e) {\n      AppLogger.logError('Fehler bei Token-Validierung', e, context: {'token': token.substring(0, 8) + '...'});\n      // Fallback für bessere UX\n      return null;\n    }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 390,
    "column": 77,
    "original": ": token.substring(0, 8) + ",
    "suggested_key": "errorTokensubstring08",
    "context": "return null;\n    } catch (e) {\n      AppLogger.logError('Fehler bei Token-Validierung', e, context: {'token': token.substring(0, 8) + '...'});\n      // Fallback für bessere UX\n      return null;\n    }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 390,
    "column": 108,
    "original": "});\n      // Fallback für bessere UX\n      return null;\n    }\n  }\n\n  // Invite akzeptieren und User der Welt hinzufügen\n  Future<Map<String, dynamic>?> acceptInvite(String token) async {\n    try {\n      AppLogger.app.i(",
    "suggested_key": "errorFallbackFürBessere",
    "context": "return null;\n    } catch (e) {\n      AppLogger.logError('Fehler bei Token-Validierung', e, context: {'token': token.substring(0, 8) + '...'});\n      // Fallback für bessere UX\n      return null;\n    }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 399,
    "column": 48,
    "original": ", error: {",
    "suggested_key": "errorError",
    "context": "// Invite akzeptieren und User der Welt hinzufügen\n  Future<Map<String, dynamic>?> acceptInvite(String token) async {\n    try {\n      AppLogger.app.i('🎫 Invite wird akzeptiert', error: {'token': token.substring(0, 8) + '...'});\n      \n      // API-Call mit Authentifizierung (da User eingeloggt sein muss)\n      final response = await _apiService.post('/invites/accept/$token', {});",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 399,
    "column": 65,
    "original": ": token.substring(0, 8) + ",
    "suggested_key": "errorTokensubstring08",
    "context": "// Invite akzeptieren und User der Welt hinzufügen\n  Future<Map<String, dynamic>?> acceptInvite(String token) async {\n    try {\n      AppLogger.app.i('🎫 Invite wird akzeptiert', error: {'token': token.substring(0, 8) + '...'});\n      \n      // API-Call mit Authentifizierung (da User eingeloggt sein muss)\n      final response = await _apiService.post('/invites/accept/$token', {});",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 399,
    "column": 96,
    "original": "});\n      \n      // API-Call mit Authentifizierung (da User eingeloggt sein muss)\n      final response = await _apiService.post(",
    "suggested_key": "errorApicallMitAuthentifizierung",
    "context": "// Invite akzeptieren und User der Welt hinzufügen\n  Future<Map<String, dynamic>?> acceptInvite(String token) async {\n    try {\n      AppLogger.app.i('🎫 Invite wird akzeptiert', error: {'token': token.substring(0, 8) + '...'});\n      \n      // API-Call mit Authentifizierung (da User eingeloggt sein muss)\n      final response = await _apiService.post('/invites/accept/$token', {});",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 402,
    "column": 70,
    "original": ", {});\n      \n      if (response.statusCode == 200) {\n        final responseData = jsonDecode(response.body);\n        if (responseData[",
    "suggested_key": "errorIfResponsestatuscode200",
    "context": "AppLogger.app.i('🎫 Invite wird akzeptiert', error: {'token': token.substring(0, 8) + '...'});\n      \n      // API-Call mit Authentifizierung (da User eingeloggt sein muss)\n      final response = await _apiService.post('/invites/accept/$token', {});\n      \n      if (response.statusCode == 200) {\n        final responseData = jsonDecode(response.body);",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 406,
    "column": 34,
    "original": "] == true && responseData[",
    "suggested_key": "errorTrueResponsedata",
    "context": "if (response.statusCode == 200) {\n        final responseData = jsonDecode(response.body);\n        if (responseData['success'] == true && responseData['data'] != null) {\n          AppLogger.app.i('✅ Invite erfolgreich akzeptiert', error: {\n            'worldId': responseData['data']['world']?['id'],\n            'worldName': responseData['data']['world']?['name']",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 406,
    "column": 66,
    "original": "] != null) {\n          AppLogger.app.i(",
    "suggested_key": "errorNullApploggerappi",
    "context": "if (response.statusCode == 200) {\n        final responseData = jsonDecode(response.body);\n        if (responseData['success'] == true && responseData['data'] != null) {\n          AppLogger.app.i('✅ Invite erfolgreich akzeptiert', error: {\n            'worldId': responseData['data']['world']?['id'],\n            'worldName': responseData['data']['world']?['name']",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 407,
    "column": 59,
    "original": ", error: {\n            ",
    "suggested_key": "errorError",
    "context": "if (response.statusCode == 200) {\n        final responseData = jsonDecode(response.body);\n        if (responseData['success'] == true && responseData['data'] != null) {\n          AppLogger.app.i('✅ Invite erfolgreich akzeptiert', error: {\n            'worldId': responseData['data']['world']?['id'],\n            'worldName': responseData['data']['world']?['name']\n          });",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 408,
    "column": 21,
    "original": ": responseData[",
    "suggested_key": "errorResponsedata",
    "context": "final responseData = jsonDecode(response.body);\n        if (responseData['success'] == true && responseData['data'] != null) {\n          AppLogger.app.i('✅ Invite erfolgreich akzeptiert', error: {\n            'worldId': responseData['data']['world']?['id'],\n            'worldName': responseData['data']['world']?['name']\n          });\n          return responseData['data'];",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 409,
    "column": 23,
    "original": ": responseData[",
    "suggested_key": "errorResponsedata",
    "context": "if (responseData['success'] == true && responseData['data'] != null) {\n          AppLogger.app.i('✅ Invite erfolgreich akzeptiert', error: {\n            'worldId': responseData['data']['world']?['id'],\n            'worldName': responseData['data']['world']?['name']\n          });\n          return responseData['data'];\n        }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 409,
    "column": 62,
    "original": "]\n          });\n          return responseData[",
    "suggested_key": "errorReturnResponsedata",
    "context": "if (responseData['success'] == true && responseData['data'] != null) {\n          AppLogger.app.i('✅ Invite erfolgreich akzeptiert', error: {\n            'worldId': responseData['data']['world']?['id'],\n            'worldName': responseData['data']['world']?['name']\n          });\n          return responseData['data'];\n        }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 417,
    "column": 54,
    "original": ", error: {",
    "suggested_key": "errorError",
    "context": "// Fehlerbehandlung für spezifische HTTP-Status-Codes\n      if (response.statusCode == 409) {\n        AppLogger.app.w('⚠️ Invite bereits akzeptiert', error: {'token': token.substring(0, 8) + '...'});\n        throw Exception('Invite bereits akzeptiert');\n      } else if (response.statusCode == 403) {\n        AppLogger.app.w('⚠️ E-Mail-Mismatch bei Invite', error: {'token': token.substring(0, 8) + '...'});",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 417,
    "column": 71,
    "original": ": token.substring(0, 8) + ",
    "suggested_key": "errorTokensubstring08",
    "context": "// Fehlerbehandlung für spezifische HTTP-Status-Codes\n      if (response.statusCode == 409) {\n        AppLogger.app.w('⚠️ Invite bereits akzeptiert', error: {'token': token.substring(0, 8) + '...'});\n        throw Exception('Invite bereits akzeptiert');\n      } else if (response.statusCode == 403) {\n        AppLogger.app.w('⚠️ E-Mail-Mismatch bei Invite', error: {'token': token.substring(0, 8) + '...'});",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 418,
    "column": 25,
    "original": "Invite bereits akzeptiert",
    "suggested_key": "errorInviteBereitsAkzeptiert",
    "context": "// Fehlerbehandlung für spezifische HTTP-Status-Codes\n      if (response.statusCode == 409) {\n        AppLogger.app.w('⚠️ Invite bereits akzeptiert', error: {'token': token.substring(0, 8) + '...'});\n        throw Exception('Invite bereits akzeptiert');\n      } else if (response.statusCode == 403) {\n        AppLogger.app.w('⚠️ E-Mail-Mismatch bei Invite', error: {'token': token.substring(0, 8) + '...'});\n        throw Exception('Diese Einladung ist nicht für deine E-Mail-Adresse bestimmt');",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 420,
    "column": 25,
    "original": "⚠️ E-Mail-Mismatch bei Invite",
    "suggested_key": "errorEmailmismatchBeiInvite",
    "context": "AppLogger.app.w('⚠️ Invite bereits akzeptiert', error: {'token': token.substring(0, 8) + '...'});\n        throw Exception('Invite bereits akzeptiert');\n      } else if (response.statusCode == 403) {\n        AppLogger.app.w('⚠️ E-Mail-Mismatch bei Invite', error: {'token': token.substring(0, 8) + '...'});\n        throw Exception('Diese Einladung ist nicht für deine E-Mail-Adresse bestimmt');\n      } else if (response.statusCode == 410) {\n        AppLogger.app.w('⚠️ Invite-Token abgelaufen', error: {'token': token.substring(0, 8) + '...'});",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 421,
    "column": 25,
    "original": "Diese Einladung ist nicht für deine E-Mail-Adresse bestimmt",
    "suggested_key": "errorDieseEinladungIst",
    "context": "throw Exception('Invite bereits akzeptiert');\n      } else if (response.statusCode == 403) {\n        AppLogger.app.w('⚠️ E-Mail-Mismatch bei Invite', error: {'token': token.substring(0, 8) + '...'});\n        throw Exception('Diese Einladung ist nicht für deine E-Mail-Adresse bestimmt');\n      } else if (response.statusCode == 410) {\n        AppLogger.app.w('⚠️ Invite-Token abgelaufen', error: {'token': token.substring(0, 8) + '...'});\n        throw Exception('Invite-Token ist abgelaufen');",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 423,
    "column": 25,
    "original": "⚠️ Invite-Token abgelaufen",
    "suggested_key": "errorInvitetokenAbgelaufen",
    "context": "AppLogger.app.w('⚠️ E-Mail-Mismatch bei Invite', error: {'token': token.substring(0, 8) + '...'});\n        throw Exception('Diese Einladung ist nicht für deine E-Mail-Adresse bestimmt');\n      } else if (response.statusCode == 410) {\n        AppLogger.app.w('⚠️ Invite-Token abgelaufen', error: {'token': token.substring(0, 8) + '...'});\n        throw Exception('Invite-Token ist abgelaufen');\n      }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 424,
    "column": 25,
    "original": "Invite-Token ist abgelaufen",
    "suggested_key": "errorInvitetokenIstAbgelaufen",
    "context": "throw Exception('Diese Einladung ist nicht für deine E-Mail-Adresse bestimmt');\n      } else if (response.statusCode == 410) {\n        AppLogger.app.w('⚠️ Invite-Token abgelaufen', error: {'token': token.substring(0, 8) + '...'});\n        throw Exception('Invite-Token ist abgelaufen');\n      }\n      \n      return null;",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 429,
    "column": 26,
    "original": "Fehler bei Invite-Akzeptierung",
    "suggested_key": "errorFehlerBeiInviteakzeptierung",
    "context": "return null;\n    } catch (e) {\n      AppLogger.logError('Fehler bei Invite-Akzeptierung', e, context: {'token': token.substring(0, 8) + '...'});\n      rethrow;\n    }\n  }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\forgot_password_page.dart",
    "line": 24,
    "column": 66,
    "original": ");\n\n  @override\n  void dispose() {\n    _emailController.dispose();\n    super.dispose();\n  }\n\n  Future<void> _requestPasswordReset() async {\n    if (!_formKey.currentState!.validate()) {\n      return;\n    }\n\n    setState(() {\n      _isLoading = true;\n      _errorMessage = null;\n      _isSuccess = false;\n    });\n\n    try {\n      final success = await _authService.requestPasswordReset(\n        _emailController.text.trim(),\n      );\n\n      if (success && mounted) {\n        setState(() {\n          _isSuccess = true;\n        });\n        \n        // Nach 3 Sekunden zurück zum Login\n        Future.delayed(const Duration(seconds: 3), () {\n          if (mounted) {\n            context.goNamed(",
    "suggested_key": "errorOverrideVoidDispose",
    "context": "String? _errorMessage;\n  \n  // E-Mail-Validierung Regex\n  static final RegExp _emailRegex = RegExp(r'^[^@]+@[^@]+\\.[^@]+$');\n\n  @override\n  void dispose() {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\forgot_password_page.dart",
    "line": 63,
    "column": 67,
    "original": ");\n        });\n      }\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isLoading = false;\n        });\n      }\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: BackgroundWidget(\n        child: Center(\n          child: SingleChildScrollView(\n            padding: const EdgeInsets.all(24.0),\n            child: Center(\n              child: ConstrainedBox(\n                constraints: const BoxConstraints(maxWidth: 400),\n                child: Card(\n                  elevation: 12,\n                  color: const Color(0xFF1A1A1A),\n                  shape: RoundedRectangleBorder(\n                    borderRadius: BorderRadius.circular(20),\n                    side: BorderSide(\n                      color: AppTheme.primaryColor.withOpacity(0.3),\n                      width: 1,\n                    ),\n                  ),\n                  child: Container(\n                    decoration: BoxDecoration(\n                      borderRadius: BorderRadius.circular(20),\n                      gradient: const LinearGradient(\n                        begin: Alignment.topLeft,\n                        end: Alignment.bottomRight,\n                        colors: [\n                          Color(0xFF1A1A1A),\n                          Color(0xFF2A2A2A),\n                        ],\n                      ),\n                    ),\n                    child: Padding(\n                      padding: const EdgeInsets.all(32.0),\n                      child: Form(\n                        key: _formKey,\n                        child: Column(\n                          mainAxisSize: MainAxisSize.min,\n                          children: [\n                            // Back Button\n                            Align(\n                              alignment: Alignment.centerLeft,\n                              child: IconButton(\n                                onPressed: () => context.goNamed(",
    "suggested_key": "errorFinallyIfMounted",
    "context": "} catch (e) {\n      if (mounted) {\n        setState(() {\n          _errorMessage = e.toString().replaceAll('Exception: ', '');\n        });\n      }\n    } finally {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 77,
    "column": 79,
    "original": ", error: e);\n      _authService = AuthService();\n    }\n  }\n\n  void _loadQueryParameters() {\n    // Query-Parameter aus der URL lesen\n    final routeData = GoRouterState.of(context);\n    _inviteToken = routeData.uri.queryParameters[",
    "suggested_key": "errorErrorE_authservice",
    "context": "_authService = AuthService();\n      }\n    } catch (e) {\n      AppLogger.app.w('⚠️ ServiceLocator Fehler - nutze direkte Instanziierung', error: e);\n      _authService = AuthService();\n    }\n  }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 85,
    "column": 63,
    "original": "];\n    \n    AppLogger.app.i(",
    "suggested_key": "errorApploggerappi",
    "context": "void _loadQueryParameters() {\n    // Query-Parameter aus der URL lesen\n    final routeData = GoRouterState.of(context);\n    _inviteToken = routeData.uri.queryParameters['invite_token'];\n    \n    AppLogger.app.i('🎫 Login Query-Parameter geladen', error: {\n      'hasInviteToken': _inviteToken != null,",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 87,
    "column": 53,
    "original": ", error: {\n      ",
    "suggested_key": "errorError",
    "context": "final routeData = GoRouterState.of(context);\n    _inviteToken = routeData.uri.queryParameters['invite_token'];\n    \n    AppLogger.app.i('🎫 Login Query-Parameter geladen', error: {\n      'hasInviteToken': _inviteToken != null,\n      'inviteToken': _inviteToken?.substring(0, 8)\n    });",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 88,
    "column": 22,
    "original": ": _inviteToken != null,\n      ",
    "suggested_key": "error_invitetokenNull",
    "context": "_inviteToken = routeData.uri.queryParameters['invite_token'];\n    \n    AppLogger.app.i('🎫 Login Query-Parameter geladen', error: {\n      'hasInviteToken': _inviteToken != null,\n      'inviteToken': _inviteToken?.substring(0, 8)\n    });\n  }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 89,
    "column": 19,
    "original": ": _inviteToken?.substring(0, 8)\n    });\n  }\n\n  Future<void> _login() async {\n    if (!_formKey.currentState!.validate()) return;\n\n    setState(() {\n      _isLoading = true;\n      _loginError = null;\n    });\n\n    try {\n      final user = await _authService.login(\n        _usernameController.text.trim(),\n        _passwordController.text,\n      );\n\n      if (user != null) {\n        AppLogger.app.i(",
    "suggested_key": "error_invitetokensubstring08Futurevoid",
    "context": "AppLogger.app.i('🎫 Login Query-Parameter geladen', error: {\n      'hasInviteToken': _inviteToken != null,\n      'inviteToken': _inviteToken?.substring(0, 8)\n    });\n  }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 108,
    "column": 45,
    "original": ", error: {",
    "suggested_key": "errorError",
    "context": ");\n\n      if (user != null) {\n        AppLogger.app.i('✅ Login erfolgreich', error: {'userId': user.id, 'username': user.username});\n        \n        if (mounted) {\n          // HINZUGEFÜGT: Post-Auth-Redirect prüfen",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 108,
    "column": 63,
    "original": ": user.id, ",
    "suggested_key": "errorUserid",
    "context": ");\n\n      if (user != null) {\n        AppLogger.app.i('✅ Login erfolgreich', error: {'userId': user.id, 'username': user.username});\n        \n        if (mounted) {\n          // HINZUGEFÜGT: Post-Auth-Redirect prüfen",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 108,
    "column": 84,
    "original": ": user.username});\n        \n        if (mounted) {\n          // HINZUGEFÜGT: Post-Auth-Redirect prüfen\n          final pendingRedirect = _authService.getPendingRedirect();\n          \n          if (pendingRedirect != null) {\n            AppLogger.app.i(",
    "suggested_key": "errorUserusernameIfMounted",
    "context": ");\n\n      if (user != null) {\n        AppLogger.app.i('✅ Login erfolgreich', error: {'userId': user.id, 'username': user.username});\n        \n        if (mounted) {\n          // HINZUGEFÜGT: Post-Auth-Redirect prüfen",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 115,
    "column": 58,
    "original": ", error: pendingRedirect);\n            _authService.clearPendingRedirect();\n            \n            // Redirect zur ursprünglichen Invite-Seite\n            final routeName = pendingRedirect[",
    "suggested_key": "errorErrorPendingredirect_authserviceclearpendingredirect",
    "context": "final pendingRedirect = _authService.getPendingRedirect();\n          \n          if (pendingRedirect != null) {\n            AppLogger.app.i('🎫 Post-Auth-Redirect erkannt', error: pendingRedirect);\n            _authService.clearPendingRedirect();\n            \n            // Redirect zur ursprünglichen Invite-Seite",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 129,
    "column": 74,
    "original": ", error: {",
    "suggested_key": "errorError",
    "context": "}\n          } else if (_inviteToken != null) {\n            // Fallback: Wenn Invite-Token in Query-Parametern, direkt zur Invite-Seite\n            AppLogger.app.i('🎫 Invite-Token in Query - direkte Navigation', error: {'token': _inviteToken!.substring(0, 8) + '...'});\n            context.goNamed('world-join-by-token', pathParameters: {'token': _inviteToken!});\n          } else {\n            // Standard-Redirect zu Welten-Liste",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 129,
    "column": 91,
    "original": ": _inviteToken!.substring(0, 8) + ",
    "suggested_key": "error_invitetokensubstring08",
    "context": "}\n          } else if (_inviteToken != null) {\n            // Fallback: Wenn Invite-Token in Query-Parametern, direkt zur Invite-Seite\n            AppLogger.app.i('🎫 Invite-Token in Query - direkte Navigation', error: {'token': _inviteToken!.substring(0, 8) + '...'});\n            context.goNamed('world-join-by-token', pathParameters: {'token': _inviteToken!});\n          } else {\n            // Standard-Redirect zu Welten-Liste",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 129,
    "column": 130,
    "original": "});\n            context.goNamed(",
    "suggested_key": "errorContextgonamed",
    "context": "}\n          } else if (_inviteToken != null) {\n            // Fallback: Wenn Invite-Token in Query-Parametern, direkt zur Invite-Seite\n            AppLogger.app.i('🎫 Invite-Token in Query - direkte Navigation', error: {'token': _inviteToken!.substring(0, 8) + '...'});\n            context.goNamed('world-join-by-token', pathParameters: {'token': _inviteToken!});\n          } else {\n            // Standard-Redirect zu Welten-Liste",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 130,
    "column": 49,
    "original": ", pathParameters: {",
    "suggested_key": "errorPathparameters",
    "context": "} else if (_inviteToken != null) {\n            // Fallback: Wenn Invite-Token in Query-Parametern, direkt zur Invite-Seite\n            AppLogger.app.i('🎫 Invite-Token in Query - direkte Navigation', error: {'token': _inviteToken!.substring(0, 8) + '...'});\n            context.goNamed('world-join-by-token', pathParameters: {'token': _inviteToken!});\n          } else {\n            // Standard-Redirect zu Welten-Liste\n            context.goNamed('world-list');",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 130,
    "column": 75,
    "original": ": _inviteToken!});\n          } else {\n            // Standard-Redirect zu Welten-Liste\n            context.goNamed(",
    "suggested_key": "error_invitetokenElseStandardredirect",
    "context": "} else if (_inviteToken != null) {\n            // Fallback: Wenn Invite-Token in Query-Parametern, direkt zur Invite-Seite\n            AppLogger.app.i('🎫 Invite-Token in Query - direkte Navigation', error: {'token': _inviteToken!.substring(0, 8) + '...'});\n            context.goNamed('world-join-by-token', pathParameters: {'token': _inviteToken!});\n          } else {\n            // Standard-Redirect zu Welten-Liste\n            context.goNamed('world-list');",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 138,
    "column": 47,
    "original": ", e);\n      setState(() {\n        _loginError = e.toString().replaceAll(",
    "suggested_key": "errorESetstate_loginerror",
    "context": "}\n      }\n    } catch (e) {\n      AppLogger.logError('Login fehlgeschlagen', e);\n      setState(() {\n        _loginError = e.toString().replaceAll('Exception: ', '');\n      });",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 140,
    "column": 63,
    "original": ");\n      });\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isLoading = false;\n        });\n      }\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Stack(\n        children: [\n          BackgroundWidget(\n            child: Center(\n              child: SingleChildScrollView(\n                padding: const EdgeInsets.all(24.0),\n                child: FadeTransition(\n                  opacity: _fadeAnimation,\n                  child: Center(\n                    child: ConstrainedBox(\n                      constraints: const BoxConstraints(maxWidth: 400),\n                      child: Card(\n                        elevation: 12,\n                        color: const Color(0xFF1A1A1A),\n                        shape: RoundedRectangleBorder(\n                          borderRadius: BorderRadius.circular(20),\n                          side: BorderSide(\n                            color: AppTheme.primaryColor.withOpacity(0.3),\n                            width: 1,\n                          ),\n                        ),\n                        child: Container(\n                          decoration: BoxDecoration(\n                            borderRadius: BorderRadius.circular(20),\n                            gradient: const LinearGradient(\n                              begin: Alignment.topLeft,\n                              end: Alignment.bottomRight,\n                              colors: [\n                                Color(0xFF1A1A1A),\n                                Color(0xFF2A2A2A),\n                              ],\n                            ),\n                          ),\n                          child: Padding(\n                            padding: const EdgeInsets.all(32.0),\n                            child: Form(\n                              key: _formKey,\n                              child: Column(\n                                mainAxisSize: MainAxisSize.min,\n                                children: [\n                                  // Logo/Title with Animation\n                                  TweenAnimationBuilder<double>(\n                                    tween: Tween(begin: 0.8, end: 1.0),\n                                    duration: const Duration(milliseconds: 600),\n                                    curve: Curves.elasticOut,\n                                    builder: (context, value, child) {\n                                      return Transform.scale(\n                                        scale: value,\n                                        child: child,\n                                      );\n                                    },\n                                    child: Container(\n                                      width: 80,\n                                      height: 80,\n                                      decoration: BoxDecoration(\n                                        color: AppTheme.primaryColor.withOpacity(0.2),\n                                        borderRadius: BorderRadius.circular(20),\n                                        border: Border.all(\n                                          color: AppTheme.primaryColor.withOpacity(0.5),\n                                          width: 2,\n                                        ),\n                                      ),\n                                      child: const Icon(\n                                        Icons.public,\n                                        size: 40,\n                                        color: AppTheme.primaryColor,\n                                      ),\n                                    ),\n                                  ),\n                                  const SizedBox(height: 20),\n                                  Text(\n                                    ",
    "suggested_key": "errorFinallyIfMounted",
    "context": "} catch (e) {\n      AppLogger.logError('Login fehlgeschlagen', e);\n      setState(() {\n        _loginError = e.toString().replaceAll('Exception: ', '');\n      });\n    } finally {\n      if (mounted) {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 56,
    "column": 79,
    "original": ", error: e);\n      _authService = AuthService();\n    }\n  }\n\n  void _loadQueryParameters() {\n    // Query-Parameter aus der URL lesen\n    final routeData = GoRouterState.of(context);\n    _inviteToken = routeData.uri.queryParameters[",
    "suggested_key": "errorErrorE_authservice",
    "context": "}\n      \n    } catch (e) {\n      AppLogger.app.w('⚠️ ServiceLocator Fehler - nutze direkte Instanziierung', error: e);\n      _authService = AuthService();\n    }\n  }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 64,
    "column": 63,
    "original": "];\n    _prefilledEmail = routeData.uri.queryParameters[",
    "suggested_key": "error_prefilledemailRoutedatauriqueryparameters",
    "context": "void _loadQueryParameters() {\n    // Query-Parameter aus der URL lesen\n    final routeData = GoRouterState.of(context);\n    _inviteToken = routeData.uri.queryParameters['invite_token'];\n    _prefilledEmail = routeData.uri.queryParameters['email'];\n    \n    AppLogger.app.i('📧 Registration Query-Parameter geladen', error: {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 65,
    "column": 59,
    "original": "];\n    \n    AppLogger.app.i(",
    "suggested_key": "errorApploggerappi",
    "context": "// Query-Parameter aus der URL lesen\n    final routeData = GoRouterState.of(context);\n    _inviteToken = routeData.uri.queryParameters['invite_token'];\n    _prefilledEmail = routeData.uri.queryParameters['email'];\n    \n    AppLogger.app.i('📧 Registration Query-Parameter geladen', error: {\n      'hasInviteToken': _inviteToken != null,",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 67,
    "column": 60,
    "original": ", error: {\n      ",
    "suggested_key": "errorError",
    "context": "_inviteToken = routeData.uri.queryParameters['invite_token'];\n    _prefilledEmail = routeData.uri.queryParameters['email'];\n    \n    AppLogger.app.i('📧 Registration Query-Parameter geladen', error: {\n      'hasInviteToken': _inviteToken != null,\n      'hasPrefilledEmail': _prefilledEmail != null,\n      'inviteToken': _inviteToken?.substring(0, 8),",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 68,
    "column": 22,
    "original": ": _inviteToken != null,\n      ",
    "suggested_key": "error_invitetokenNull",
    "context": "_prefilledEmail = routeData.uri.queryParameters['email'];\n    \n    AppLogger.app.i('📧 Registration Query-Parameter geladen', error: {\n      'hasInviteToken': _inviteToken != null,\n      'hasPrefilledEmail': _prefilledEmail != null,\n      'inviteToken': _inviteToken?.substring(0, 8),\n      'email': _prefilledEmail",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 77,
    "column": 43,
    "original": ", error: {",
    "suggested_key": "errorError",
    "context": "// E-Mail vorbefüllen wenn vorhanden\n    if (_prefilledEmail != null && _prefilledEmail!.isNotEmpty) {\n      _emailController.text = _prefilledEmail!;\n      AppLogger.app.i('📧 E-Mail vorbefüllt', error: {'email': _prefilledEmail});\n    }\n  }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 77,
    "column": 60,
    "original": ": _prefilledEmail});\n    }\n  }\n\n  @override\n  void dispose() {\n    _usernameController.dispose();\n    _emailController.dispose();\n    _passwordController.dispose();\n    super.dispose();\n  }\n\n  Future<void> _register() async {\n    final formState = _formKey.currentState;\n    if (formState == null || !formState.validate()) {\n      return;\n    }\n\n    setState(() {\n      _isLoading = true;\n      _registerError = null;\n    });\n\n    try {\n      final user = await _authService.register(\n        _usernameController.text.trim(),\n        _emailController.text.trim().toLowerCase(),\n        _passwordController.text,\n      );\n\n      if (user != null) {\n        AppLogger.app.i(",
    "suggested_key": "error_prefilledemailOverrideVoid",
    "context": "// E-Mail vorbefüllen wenn vorhanden\n    if (_prefilledEmail != null && _prefilledEmail!.isNotEmpty) {\n      _emailController.text = _prefilledEmail!;\n      AppLogger.app.i('📧 E-Mail vorbefüllt', error: {'email': _prefilledEmail});\n    }\n  }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 108,
    "column": 53,
    "original": ", error: {\n          ",
    "suggested_key": "errorError",
    "context": ");\n\n      if (user != null) {\n        AppLogger.app.i('✅ Registrierung erfolgreich', error: {\n          'userId': user.id,\n          'username': user.username,\n          'email': user.email,",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 109,
    "column": 18,
    "original": ": user.id,\n          ",
    "suggested_key": "errorUserid",
    "context": "if (user != null) {\n        AppLogger.app.i('✅ Registrierung erfolgreich', error: {\n          'userId': user.id,\n          'username': user.username,\n          'email': user.email,\n        });",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 110,
    "column": 20,
    "original": ": user.username,\n          ",
    "suggested_key": "errorUserusername",
    "context": "if (user != null) {\n        AppLogger.app.i('✅ Registrierung erfolgreich', error: {\n          'userId': user.id,\n          'username': user.username,\n          'email': user.email,\n        });",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 111,
    "column": 17,
    "original": ": user.email,\n        });\n        \n        if (mounted) {\n          // HINZUGEFÜGT: Post-Auth-Redirect prüfen\n          final pendingRedirect = _authService.getPendingRedirect();\n          \n          if (pendingRedirect != null) {\n            AppLogger.app.i(",
    "suggested_key": "errorUseremailIfMounted",
    "context": "AppLogger.app.i('✅ Registrierung erfolgreich', error: {\n          'userId': user.id,\n          'username': user.username,\n          'email': user.email,\n        });\n        \n        if (mounted) {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 119,
    "column": 76,
    "original": ", error: pendingRedirect);\n            _authService.clearPendingRedirect();\n            \n            // Redirect zur ursprünglichen Invite-Seite\n            final routeName = pendingRedirect[",
    "suggested_key": "errorErrorPendingredirect_authserviceclearpendingredirect",
    "context": "final pendingRedirect = _authService.getPendingRedirect();\n          \n          if (pendingRedirect != null) {\n            AppLogger.app.i('🎫 Post-Auth-Redirect nach Registration erkannt', error: pendingRedirect);\n            _authService.clearPendingRedirect();\n            \n            // Redirect zur ursprünglichen Invite-Seite",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 146,
    "column": 92,
    "original": ", error: {",
    "suggested_key": "errorError",
    "context": "}\n          } else if (_inviteToken != null) {\n            // Fallback: Wenn Invite-Token in Query-Parametern, direkt zur Invite-Seite\n            AppLogger.app.i('🎫 Invite-Token in Query nach Registration - direkte Navigation', error: {'token': _inviteToken!.substring(0, 8) + '...'});\n            \n            ScaffoldMessenger.of(context).showSnackBar(\n              const SnackBar(",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 146,
    "column": 109,
    "original": ": _inviteToken!.substring(0, 8) + ",
    "suggested_key": "error_invitetokensubstring08",
    "context": "}\n          } else if (_inviteToken != null) {\n            // Fallback: Wenn Invite-Token in Query-Parametern, direkt zur Invite-Seite\n            AppLogger.app.i('🎫 Invite-Token in Query nach Registration - direkte Navigation', error: {'token': _inviteToken!.substring(0, 8) + '...'});\n            \n            ScaffoldMessenger.of(context).showSnackBar(\n              const SnackBar(",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 146,
    "column": 148,
    "original": "});\n            \n            ScaffoldMessenger.of(context).showSnackBar(\n              const SnackBar(\n                content: Text(",
    "suggested_key": "errorScaffoldmessengerofcontextshowsnackbarConstSnackbar",
    "context": "}\n          } else if (_inviteToken != null) {\n            // Fallback: Wenn Invite-Token in Query-Parametern, direkt zur Invite-Seite\n            AppLogger.app.i('🎫 Invite-Token in Query nach Registration - direkte Navigation', error: {'token': _inviteToken!.substring(0, 8) + '...'});\n            \n            ScaffoldMessenger.of(context).showSnackBar(\n              const SnackBar(",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 177,
    "column": 55,
    "original": ", e, context: {\n        ",
    "suggested_key": "errorEContext",
    "context": "}\n      }\n    } catch (e) {\n      AppLogger.logError('Registrierung fehlgeschlagen', e, context: {\n        'username': _usernameController.text.trim(),\n        'email': _emailController.text.trim().toLowerCase(),\n      });",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 178,
    "column": 18,
    "original": ": _usernameController.text.trim(),\n        ",
    "suggested_key": "error_usernamecontrollertexttrim",
    "context": "}\n    } catch (e) {\n      AppLogger.logError('Registrierung fehlgeschlagen', e, context: {\n        'username': _usernameController.text.trim(),\n        'email': _emailController.text.trim().toLowerCase(),\n      });",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 179,
    "column": 15,
    "original": ": _emailController.text.trim().toLowerCase(),\n      });\n      \n      setState(() {\n        _registerError = e.toString().replaceAll(",
    "suggested_key": "error_emailcontrollertexttrimtolowercaseSetstate_registererror",
    "context": "} catch (e) {\n      AppLogger.logError('Registrierung fehlgeschlagen', e, context: {\n        'username': _usernameController.text.trim(),\n        'email': _emailController.text.trim().toLowerCase(),\n      });\n      \n      setState(() {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 183,
    "column": 66,
    "original": ");\n      });\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isLoading = false;\n        });\n      }\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: BackgroundWidget(\n        child: Center(\n          child: SingleChildScrollView(\n            padding: const EdgeInsets.all(24.0),\n            child: Center(\n              child: ConstrainedBox(\n                constraints: const BoxConstraints(maxWidth: 400),\n                child: Card(\n                  elevation: 12,\n                  color: const Color(0xFF1A1A1A), // Dunkle Karte\n                  shape: RoundedRectangleBorder(\n                    borderRadius: BorderRadius.circular(20),\n                    side: BorderSide(\n                      color: AppTheme.primaryColor.withOpacity(0.3),\n                      width: 1,\n                    ),\n                  ),\n                  child: Container(\n                    decoration: BoxDecoration(\n                      borderRadius: BorderRadius.circular(20),\n                      gradient: const LinearGradient(\n                        begin: Alignment.topLeft,\n                        end: Alignment.bottomRight,\n                        colors: [\n                          Color(0xFF1A1A1A),\n                          Color(0xFF2A2A2A),\n                        ],\n                      ),\n                    ),\n                    child: Padding(\n                      padding: const EdgeInsets.all(32.0),\n                      child: Form(\n                        key: _formKey,\n                        child: Column(\n                          mainAxisSize: MainAxisSize.min,\n                          children: [\n                            // Logo/Title\n                            Container(\n                              width: 80,\n                              height: 80,\n                              decoration: BoxDecoration(\n                                color: AppTheme.primaryColor.withOpacity(0.2),\n                                borderRadius: BorderRadius.circular(20),\n                                border: Border.all(\n                                  color: AppTheme.primaryColor.withOpacity(0.5),\n                                  width: 2,\n                                ),\n                              ),\n                              child: const Icon(\n                                Icons.person_add,\n                                size: 40,\n                                color: AppTheme.primaryColor,\n                              ),\n                            ),\n                            const SizedBox(height: 20),\n                            Text(\n                              ",
    "suggested_key": "errorFinallyIfMounted",
    "context": "});\n      \n      setState(() {\n        _registerError = e.toString().replaceAll('Exception: ', '');\n      });\n    } finally {\n      if (mounted) {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 97,
    "column": 65,
    "original": ");\n          if (error.contains(",
    "suggested_key": "errorIfErrorcontains",
    "context": "} catch (e) {\n      if (mounted) {\n        setState(() {\n          final error = e.toString().replaceAll('Exception: ', '');\n          if (error.contains('expired') || error.contains('invalid')) {\n            _errorMessage = 'Der Reset-Link ist ungültig oder abgelaufen. Bitte fordere einen neuen Link an.';\n          } else {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 98,
    "column": 38,
    "original": ") || error.contains(",
    "suggested_key": "errorErrorcontains",
    "context": "if (mounted) {\n        setState(() {\n          final error = e.toString().replaceAll('Exception: ', '');\n          if (error.contains('expired') || error.contains('invalid')) {\n            _errorMessage = 'Der Reset-Link ist ungültig oder abgelaufen. Bitte fordere einen neuen Link an.';\n          } else {\n            _errorMessage = error;",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 98,
    "column": 67,
    "original": ")) {\n            _errorMessage = ",
    "suggested_key": "error_errormessage",
    "context": "if (mounted) {\n        setState(() {\n          final error = e.toString().replaceAll('Exception: ', '');\n          if (error.contains('expired') || error.contains('invalid')) {\n            _errorMessage = 'Der Reset-Link ist ungültig oder abgelaufen. Bitte fordere einen neuen Link an.';\n          } else {\n            _errorMessage = error;",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 99,
    "column": 109,
    "original": ";\n          } else {\n            _errorMessage = error;\n          }\n        });\n      }\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isLoading = false;\n        });\n      }\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: BackgroundWidget(\n        child: Center(\n          child: SingleChildScrollView(\n            padding: const EdgeInsets.all(24.0),\n            child: FadeTransition(\n              opacity: _fadeAnimation,\n              child: Center(\n                child: ConstrainedBox(\n                  constraints: const BoxConstraints(maxWidth: 400),\n                  child: Card(\n                    elevation: 12,\n                    color: const Color(0xFF1A1A1A),\n                    shape: RoundedRectangleBorder(\n                      borderRadius: BorderRadius.circular(20),\n                      side: BorderSide(\n                        color: AppTheme.primaryColor.withOpacity(0.3),\n                        width: 1,\n                      ),\n                    ),\n                    child: Container(\n                      decoration: BoxDecoration(\n                        borderRadius: BorderRadius.circular(20),\n                        gradient: const LinearGradient(\n                          begin: Alignment.topLeft,\n                          end: Alignment.bottomRight,\n                          colors: [\n                            Color(0xFF1A1A1A),\n                            Color(0xFF2A2A2A),\n                          ],\n                        ),\n                      ),\n                      child: Padding(\n                        padding: const EdgeInsets.all(32.0),\n                        child: Form(\n                          key: _formKey,\n                          child: Column(\n                            mainAxisSize: MainAxisSize.min,\n                            children: [\n                              // Icon with Animation\n                              TweenAnimationBuilder<double>(\n                                tween: Tween(begin: 0.8, end: 1.0),\n                                duration: const Duration(milliseconds: 600),\n                                curve: Curves.elasticOut,\n                                builder: (context, value, child) {\n                                  return Transform.scale(\n                                    scale: value,\n                                    child: child,\n                                  );\n                                },\n                                child: Container(\n                                  width: 80,\n                                  height: 80,\n                                  decoration: BoxDecoration(\n                                    color: _isSuccess \n                                      ? Colors.green.withOpacity(0.2)\n                                      : AppTheme.primaryColor.withOpacity(0.2),\n                                    borderRadius: BorderRadius.circular(20),\n                                    border: Border.all(\n                                      color: _isSuccess\n                                        ? Colors.green.withOpacity(0.5)\n                                        : AppTheme.primaryColor.withOpacity(0.5),\n                                      width: 2,\n                                    ),\n                                  ),\n                                  child: Icon(\n                                    _isSuccess ? Icons.check_circle : Icons.lock_reset,\n                                    size: 40,\n                                    color: _isSuccess ? Colors.green : AppTheme.primaryColor,\n                                  ),\n                                ),\n                              ),\n                              const SizedBox(height: 20),\n                              \n                              Text(\n                                _isSuccess ? ",
    "suggested_key": "errorElse_errormessageError",
    "context": "setState(() {\n          final error = e.toString().replaceAll('Exception: ', '');\n          if (error.contains('expired') || error.contains('invalid')) {\n            _errorMessage = 'Der Reset-Link ist ungültig oder abgelaufen. Bitte fordere einen neuen Link an.';\n          } else {\n            _errorMessage = error;\n          }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 58,
    "column": 49,
    "original": ";\n      AppLogger.logError(",
    "suggested_key": "errorApploggerlogerror",
    "context": "await _checkPlayerStatuses();\n      _applyFiltersAndSorting();\n    } catch (e) {\n      _error = 'Fehler beim Laden der Welten: $e';\n      AppLogger.logError('World-Liste laden fehlgeschlagen', e);\n    } finally {\n      _setLoading(false);",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 59,
    "column": 59,
    "original": ", e);\n    } finally {\n      _setLoading(false);\n    }\n  }\n\n  Future<void> _loadPlayerCounts() async {\n    // TODO: Implement actual player count API when available\n    // For now, use mock data\n    for (final world in _worlds) {\n      _playerCounts[world.id] = 0; // Placeholder\n    }\n    notifyListeners();\n  }\n\n  Future<void> _checkPlayerStatuses() async {\n    for (final world in _worlds) {\n      try {\n        // Check if user is in the world\n        final isJoined = await _worldService.isPlayerInWorld(world.id);\n        \n        // Check if user is pre-registered\n        final isPreRegistered = await _worldService.isPreRegisteredForWorld(world.id);\n        \n        _joinedWorlds[world.id] = isJoined;\n        _preRegisteredWorlds[world.id] = isPreRegistered;\n        notifyListeners();\n      } catch (e) {\n        AppLogger.logError(",
    "suggested_key": "errorEFinally_setloadingfalse",
    "context": "_applyFiltersAndSorting();\n    } catch (e) {\n      _error = 'Fehler beim Laden der Welten: $e';\n      AppLogger.logError('World-Liste laden fehlgeschlagen', e);\n    } finally {\n      _setLoading(false);\n    }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 87,
    "column": 63,
    "original": ", e, context: {",
    "suggested_key": "errorEContext",
    "context": "_preRegisteredWorlds[world.id] = isPreRegistered;\n        notifyListeners();\n      } catch (e) {\n        AppLogger.logError('Player-Status Check fehlgeschlagen', e, context: {'worldId': world.id});\n        _joinedWorlds[world.id] = false;\n        _preRegisteredWorlds[world.id] = false;\n      }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 87,
    "column": 87,
    "original": ": world.id});\n        _joinedWorlds[world.id] = false;\n        _preRegisteredWorlds[world.id] = false;\n      }\n    }\n  }\n\n  void setStatusFilter(WorldStatus? status) {\n    _statusFilter = status;\n    _applyFiltersAndSorting();\n  }\n\n  void setCategoryFilter(WorldCategory? category) {\n    _categoryFilter = category;\n    _applyFiltersAndSorting();\n  }\n\n  void setSortBy(String sortBy) {\n    _sortBy = sortBy;\n    _applyFiltersAndSorting();\n  }\n\n  void toggleSortOrder() {\n    _sortAscending = !_sortAscending;\n    _applyFiltersAndSorting();\n  }\n\n  void resetFilters() {\n    _statusFilter = null;\n    _categoryFilter = null;\n    _sortBy = ",
    "suggested_key": "errorWorldid_joinedworldsworldidFalse",
    "context": "_preRegisteredWorlds[world.id] = isPreRegistered;\n        notifyListeners();\n      } catch (e) {\n        AppLogger.logError('Player-Status Check fehlgeschlagen', e, context: {'worldId': world.id});\n        _joinedWorlds[world.id] = false;\n        _preRegisteredWorlds[world.id] = false;\n      }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 190,
    "column": 42,
    "original": ";\n      notifyListeners();\n      rethrow;\n    }\n  }\n\n  Future<void> preRegisterWorld(World world) async {\n    try {\n      // TODO: Implement pre-registration API call\n      await Future.delayed(const Duration(milliseconds: 500)); // Simulated API call\n      \n      _preRegisteredWorlds[world.id] = true;\n      notifyListeners();\n    } catch (e) {\n      _error = ",
    "suggested_key": "errorNotifylistenersRethrowFuturevoid",
    "context": "notifyListeners();\n    } catch (e) {\n      _error = 'Fehler beim Beitreten: $e';\n      notifyListeners();\n      rethrow;\n    }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 204,
    "column": 52,
    "original": ";\n      notifyListeners();\n      rethrow;\n    }\n  }\n  \n  Future<void> cancelPreRegistration(World world) async {\n    try {\n      final success = await _worldService.cancelPreRegistrationAuthenticated(world.id);\n      if (success) {\n        _preRegisteredWorlds[world.id] = false;\n        notifyListeners();\n      } else {\n        throw Exception(",
    "suggested_key": "errorNotifylistenersRethrowFuturevoid",
    "context": "_preRegisteredWorlds[world.id] = true;\n      notifyListeners();\n    } catch (e) {\n      _error = 'Fehler bei der Vorregistrierung: $e';\n      notifyListeners();\n      rethrow;\n    }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 217,
    "column": 76,
    "original": ");\n      }\n    } catch (e) {\n      _error = ",
    "suggested_key": "errorCatchE_error",
    "context": "_preRegisteredWorlds[world.id] = false;\n        notifyListeners();\n      } else {\n        throw Exception('Vorregistrierung konnte nicht zurückgezogen werden');\n      }\n    } catch (e) {\n      _error = 'Fehler beim Zurückziehen der Vorregistrierung: $e';",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 220,
    "column": 66,
    "original": ";\n      notifyListeners();\n      rethrow;\n    }\n  }\n  \n  Future<void> leaveWorld(World world) async {\n    try {\n      await _worldService.leaveWorld(world.id);\n      _joinedWorlds[world.id] = false;\n      \n      // Update player count\n      final currentCount = _playerCounts[world.id] ?? 0;\n      if (currentCount > 0) {\n        _playerCounts[world.id] = currentCount - 1;\n      }\n      \n      notifyListeners();\n    } catch (e) {\n      _error = ",
    "suggested_key": "errorNotifylistenersRethrowFuturevoid",
    "context": "throw Exception('Vorregistrierung konnte nicht zurückgezogen werden');\n      }\n    } catch (e) {\n      _error = 'Fehler beim Zurückziehen der Vorregistrierung: $e';\n      notifyListeners();\n      rethrow;\n    }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 239,
    "column": 51,
    "original": ";\n      notifyListeners();\n      rethrow;\n    }\n  }\n\n  Future<bool> createInvite(World world, String email) async {\n    try {\n      final success = await _inviteService.createInvite(world.id, email);\n      if (!success) {\n        _error = ",
    "suggested_key": "errorNotifylistenersRethrowFuturebool",
    "context": "notifyListeners();\n    } catch (e) {\n      _error = 'Fehler beim Verlassen der Welt: $e';\n      notifyListeners();\n      rethrow;\n    }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 249,
    "column": 57,
    "original": ";\n      }\n      notifyListeners();\n      return success;\n    } catch (e) {\n      _error = ",
    "suggested_key": "errorNotifylistenersReturnSuccess",
    "context": "try {\n      final success = await _inviteService.createInvite(world.id, email);\n      if (!success) {\n        _error = 'Einladung konnte nicht erstellt werden';\n      }\n      notifyListeners();\n      return success;",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_list_states.dart",
    "line": 131,
    "column": 15,
    "original": "Fehler beim Laden",
    "suggested_key": "errorFehlerBeimLaden",
    "context": "),\n            const SizedBox(height: 16),\n            Text(\n              'Fehler beim Laden',\n              style: TextStyle(\n                fontSize: 20,\n                fontWeight: FontWeight.bold,",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 103,
    "column": 79,
    "original": ", error: e);\n      _worldService = WorldService();\n      _authService = AuthService();\n      \n      // Auch bei Fallback Authentication-Status prüfen\n      _checkAuthenticationStatus();\n    }\n  }\n\n  void _checkAuthenticationStatus() {\n    try {\n      final currentUser = _authService.currentUser;\n      final wasAuthenticated = _isAuthenticated;\n      _isAuthenticated = currentUser != null;\n      \n      AppLogger.app.i(",
    "suggested_key": "errorErrorE_worldservice",
    "context": "// Authentication-Status prüfen\n      _checkAuthenticationStatus();\n    } catch (e) {\n      AppLogger.app.w('⚠️ ServiceLocator Fehler - nutze direkte Instanziierung', error: e);\n      _worldService = WorldService();\n      _authService = AuthService();",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 118,
    "column": 55,
    "original": ", error: {\n        ",
    "suggested_key": "errorError",
    "context": "final wasAuthenticated = _isAuthenticated;\n      _isAuthenticated = currentUser != null;\n      \n      AppLogger.app.i('🔒 Authentication Status geprüft', error: {\n        'isAuthenticated': _isAuthenticated,\n        'userId': currentUser?.id,\n        'username': currentUser?.username,",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 119,
    "column": 25,
    "original": ": _isAuthenticated,\n        ",
    "suggested_key": "error_isauthenticated",
    "context": "_isAuthenticated = currentUser != null;\n      \n      AppLogger.app.i('🔒 Authentication Status geprüft', error: {\n        'isAuthenticated': _isAuthenticated,\n        'userId': currentUser?.id,\n        'username': currentUser?.username,\n        'changed': wasAuthenticated != _isAuthenticated",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 120,
    "column": 16,
    "original": ": currentUser?.id,\n        ",
    "suggested_key": "errorCurrentuserid",
    "context": "AppLogger.app.i('🔒 Authentication Status geprüft', error: {\n        'isAuthenticated': _isAuthenticated,\n        'userId': currentUser?.id,\n        'username': currentUser?.username,\n        'changed': wasAuthenticated != _isAuthenticated\n      });",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 121,
    "column": 18,
    "original": ": currentUser?.username,\n        ",
    "suggested_key": "errorCurrentuserusername",
    "context": "AppLogger.app.i('🔒 Authentication Status geprüft', error: {\n        'isAuthenticated': _isAuthenticated,\n        'userId': currentUser?.id,\n        'username': currentUser?.username,\n        'changed': wasAuthenticated != _isAuthenticated\n      });",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 130,
    "column": 71,
    "original": ", e);\n      _isAuthenticated = false;\n    }\n  }\n\n  Future<void> _loadWorldData() async {\n    // FIXED: Robustere Loading-State Verwaltung\n    if (_isLoading) {\n      return;\n    }\n\n    setState(() {\n      _isLoading = true;\n      _errorMessage = null;\n    });\n\n    try {\n      // **KLARE FLOW-TRENNUNG**\n      switch (widget.flowType) {\n        case WorldJoinFlowType.normal:\n          await _handleNormalFlow();\n          break;\n        case WorldJoinFlowType.invite:\n          await _handleInviteFlow();\n          break;\n      }\n      \n    } catch (e) {\n      AppLogger.app.w(",
    "suggested_key": "errorE_isauthenticatedFalse",
    "context": "setState(() {});\n      }\n    } catch (e) {\n      AppLogger.logError('Fehler beim Prüfen des Authentication-Status', e);\n      _isAuthenticated = false;\n    }\n  }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 158,
    "column": 54,
    "original": ");\n      setState(() {\n        _errorMessage = ",
    "suggested_key": "errorSetstate_errormessage",
    "context": "}\n      \n    } catch (e) {\n      AppLogger.app.w('💥 FEHLER in _loadWorldData: $e');\n      setState(() {\n        _errorMessage = 'Fehler beim Laden der Welt-Daten: ${e.toString()}';\n        _isLoading = false;",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 160,
    "column": 75,
    "original": ";\n        _isLoading = false;\n      });\n    }\n  }\n\n  // **NORMALE NAVIGATION: Einfach und direkt**\n  Future<void> _handleNormalFlow() async {\n    if (widget.worldId == null) {\n      setState(() {\n        _errorMessage = ",
    "suggested_key": "error_isloadingFalseNormale",
    "context": "} catch (e) {\n      AppLogger.app.w('💥 FEHLER in _loadWorldData: $e');\n      setState(() {\n        _errorMessage = 'Fehler beim Laden der Welt-Daten: ${e.toString()}';\n        _isLoading = false;\n      });\n    }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 170,
    "column": 48,
    "original": ";\n        _isLoading = false;\n      });\n      return;\n    }\n    \n    // World laden\n    _world = await _worldService.getWorld(int.parse(widget.worldId!));\n    \n    // Status prüfen\n    await _checkWorldStatus();\n    \n    // Fertig!\n    setState(() {\n      _isLoading = false;\n    });\n  }\n\n  // **INVITE-FLOW: Komplex mit Auth-Prüfung**\n  Future<void> _handleInviteFlow() async {\n    if (widget.inviteToken == null) {\n      setState(() {\n        _errorMessage = ",
    "suggested_key": "error_isloadingFalseReturn",
    "context": "Future<void> _handleNormalFlow() async {\n    if (widget.worldId == null) {\n      setState(() {\n        _errorMessage = 'Keine Welt-ID gefunden';\n        _isLoading = false;\n      });\n      return;",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 192,
    "column": 55,
    "original": ";\n        _isLoading = false;\n      });\n      return;\n    }\n    \n    // Token validieren\n    final tokenData = await _worldService.validateInviteToken(widget.inviteToken!);\n    \n    if (tokenData == null || tokenData[",
    "suggested_key": "error_isloadingFalseReturn",
    "context": "Future<void> _handleInviteFlow() async {\n    if (widget.inviteToken == null) {\n      setState(() {\n        _errorMessage = 'Kein Einladungstoken gefunden';\n        _isLoading = false;\n      });\n      return;",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 201,
    "column": 46,
    "original": "] == null) {\n      setState(() {\n        _errorMessage = ",
    "suggested_key": "errorNullSetstate_errormessage",
    "context": "// Token validieren\n    final tokenData = await _worldService.validateInviteToken(widget.inviteToken!);\n    \n    if (tokenData == null || tokenData['world'] == null) {\n      setState(() {\n        _errorMessage = 'Ungültiger oder abgelaufener Einladungslink';\n        _isLoading = false;",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 203,
    "column": 69,
    "original": ";\n        _isLoading = false;\n      });\n      return;\n    }\n    \n    // World aus Token-Daten laden\n    _world = World.fromJson(tokenData[",
    "suggested_key": "error_isloadingFalseReturn",
    "context": "if (tokenData == null || tokenData['world'] == null) {\n      setState(() {\n        _errorMessage = 'Ungültiger oder abgelaufener Einladungslink';\n        _isLoading = false;\n      });\n      return;",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 236,
    "column": 72,
    "original": ");\n    }\n    \n    isInviteValid = !isExpired && !isAccepted;\n    \n    // World-Details\n    final worldName = _world?.name ?? ",
    "suggested_key": "errorIsinvitevalidIsexpiredIsaccepted",
    "context": "isAccepted = true;\n      }\n    } catch (e) {\n      AppLogger.app.w('⚠️ Fehler beim Parsen der Invite-Zeitstempel: $e');\n    }\n    \n    isInviteValid = !isExpired && !isAccepted;",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 364,
    "column": 46,
    "original": ", error: {\n        ",
    "suggested_key": "errorError",
    "context": "final preRegStatus = await _worldService.getPreRegistrationStatus(_world!.id);\n      _isPreRegistered = preRegStatus.isPreRegistered;\n      \n      AppLogger.app.d('✅ World-Status geprüft', error: {\n        'worldName': _world!.name,\n        'isJoined': _isJoined,\n        'isPreRegistered': _isPreRegistered",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 370,
    "column": 26,
    "original": "Fehler beim Prüfen des World-Status",
    "suggested_key": "errorFehlerBeimPrüfen",
    "context": "'isPreRegistered': _isPreRegistered\n      });\n    } catch (e) {\n      AppLogger.logError('Fehler beim Prüfen des World-Status', e);\n    }\n  }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 399,
    "column": 33,
    "original": "Invite bereits akzeptiert",
    "suggested_key": "errorInviteBereitsAkzeptiert",
    "context": "}\n    } catch (e) {\n      // SPEZIALBEHANDLUNG: \"Invite bereits akzeptiert\" ist KEIN Fehler!\n      if (e.toString().contains('Invite bereits akzeptiert')) {\n        setState(() {\n          _isJoined = true;\n          _infoMessage = 'Du bist bereits Mitglied dieser Welt \"${_world?.name}\"!';",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: SnackBar",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 418,
    "column": 26,
    "original": "Automatische Invite-Akzeptierung fehlgeschlagen",
    "suggested_key": "errorAutomatischeInviteakzeptierungFehlgeschlagen",
    "context": "}\n      \n      // Andere Fehler normal behandeln\n      AppLogger.logError('Automatische Invite-Akzeptierung fehlgeschlagen', e);\n      // Fehler nicht als kritisch behandeln - User kann manuell beitreten\n      setState(() {\n        _infoMessage = 'Du kannst nun der Welt beitreten.';",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 421,
    "column": 24,
    "original": "Du kannst nun der Welt beitreten.",
    "suggested_key": "errorDuKannstNun",
    "context": "AppLogger.logError('Automatische Invite-Akzeptierung fehlgeschlagen', e);\n      // Fehler nicht als kritisch behandeln - User kann manuell beitreten\n      setState(() {\n        _infoMessage = 'Du kannst nun der Welt beitreten.';\n      });\n    }\n  }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 444,
    "column": 27,
    "original": "✅ Invite erfolgreich akzeptiert",
    "suggested_key": "errorInviteErfolgreichAkzeptiert",
    "context": "if (inviteResult != null) {\n          success = true;\n          AppLogger.app.i('✅ Invite erfolgreich akzeptiert', error: {\n            'worldId': _world!.id,\n            'worldName': _world!.name\n          });",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 446,
    "column": 23,
    "original": ": _world!.name\n          });\n        }\n      } else {\n        // **NORMALE NAVIGATION: Standard World-Join**\n        AppLogger.app.i(",
    "suggested_key": "error_worldnameElseNormale",
    "context": "success = true;\n          AppLogger.app.i('✅ Invite erfolgreich akzeptiert', error: {\n            'worldId': _world!.id,\n            'worldName': _world!.name\n          });\n        }\n      } else {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 475,
    "column": 24,
    "original": "Beitritt fehlgeschlagen. Versuche es erneut.",
    "suggested_key": "errorBeitrittFehlgeschlagenVersuche",
    "context": "}\n      } else {\n        setState(() {\n          _joinError = 'Beitritt fehlgeschlagen. Versuche es erneut.';\n        });\n      }\n    } catch (e) {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 479,
    "column": 26,
    "original": "World Join fehlgeschlagen",
    "suggested_key": "errorWorldJoinFehlgeschlagen",
    "context": "});\n      }\n    } catch (e) {\n      AppLogger.logError('World Join fehlgeschlagen', e, context: {\n        'worldId': _world?.id,\n        'worldName': _world?.name,\n        'hasInviteToken': widget.inviteToken != null,",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 488,
    "column": 35,
    "original": "bereits akzeptiert",
    "suggested_key": "errorBereitsAkzeptiert",
    "context": "setState(() {\n        // Bessere Fehlermeldungen für verschiedene Szenarien\n        if (e.toString().contains('bereits akzeptiert')) {\n          _joinError = 'Diese Einladung wurde bereits akzeptiert.';\n          _isJoined = true; // User ist bereits Mitglied\n        } else if (e.toString().contains('nicht für deine E-Mail-Adresse')) {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 489,
    "column": 24,
    "original": "Diese Einladung wurde bereits akzeptiert.",
    "suggested_key": "errorDieseEinladungWurde",
    "context": "setState(() {\n        // Bessere Fehlermeldungen für verschiedene Szenarien\n        if (e.toString().contains('bereits akzeptiert')) {\n          _joinError = 'Diese Einladung wurde bereits akzeptiert.';\n          _isJoined = true; // User ist bereits Mitglied\n        } else if (e.toString().contains('nicht für deine E-Mail-Adresse')) {\n          _joinError = 'Diese Einladung ist nicht für deine E-Mail-Adresse bestimmt.';",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 491,
    "column": 42,
    "original": "nicht für deine E-Mail-Adresse",
    "suggested_key": "errorNichtFürDeine",
    "context": "if (e.toString().contains('bereits akzeptiert')) {\n          _joinError = 'Diese Einladung wurde bereits akzeptiert.';\n          _isJoined = true; // User ist bereits Mitglied\n        } else if (e.toString().contains('nicht für deine E-Mail-Adresse')) {\n          _joinError = 'Diese Einladung ist nicht für deine E-Mail-Adresse bestimmt.';\n        } else if (e.toString().contains('abgelaufen')) {\n          _joinError = 'Diese Einladung ist abgelaufen.';",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 492,
    "column": 24,
    "original": "Diese Einladung ist nicht für deine E-Mail-Adresse bestimmt.",
    "suggested_key": "errorDieseEinladungIst",
    "context": "_joinError = 'Diese Einladung wurde bereits akzeptiert.';\n          _isJoined = true; // User ist bereits Mitglied\n        } else if (e.toString().contains('nicht für deine E-Mail-Adresse')) {\n          _joinError = 'Diese Einladung ist nicht für deine E-Mail-Adresse bestimmt.';\n        } else if (e.toString().contains('abgelaufen')) {\n          _joinError = 'Diese Einladung ist abgelaufen.';\n        } else {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 494,
    "column": 24,
    "original": "Diese Einladung ist abgelaufen.",
    "suggested_key": "errorDieseEinladungIst",
    "context": "} else if (e.toString().contains('nicht für deine E-Mail-Adresse')) {\n          _joinError = 'Diese Einladung ist nicht für deine E-Mail-Adresse bestimmt.';\n        } else if (e.toString().contains('abgelaufen')) {\n          _joinError = 'Diese Einladung ist abgelaufen.';\n        } else {\n          _joinError = 'Ein Fehler ist aufgetreten: ${e.toString().replaceAll('Exception: ', '')}';\n        }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 496,
    "column": 24,
    "original": "Ein Fehler ist aufgetreten: ${e.toString().replaceAll(",
    "suggested_key": "errorEinFehlerIst",
    "context": "} else if (e.toString().contains('abgelaufen')) {\n          _joinError = 'Diese Einladung ist abgelaufen.';\n        } else {\n          _joinError = 'Ein Fehler ist aufgetreten: ${e.toString().replaceAll('Exception: ', '')}';\n        }\n      });\n    } finally {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 496,
    "column": 98,
    "original": ";\n        }\n      });\n    } finally {\n      setState(() {\n        _isJoining = false;\n      });\n    }\n  }\n  \n  Future<void> _preRegisterWorld() async {\n    final world = _world;\n    if (world == null) return;\n\n    setState(() {\n      _isPreRegistering = true;\n      _joinError = null;\n    });\n\n    try {\n      final success = await _worldService.preRegisterWorldAuthenticated(world.id);\n      \n      if (success) {\n        setState(() {\n          _isPreRegistered = true;\n        });\n        \n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text(",
    "suggested_key": "errorFinallySetstate_isjoining",
    "context": "} else if (e.toString().contains('abgelaufen')) {\n          _joinError = 'Diese Einladung ist abgelaufen.';\n        } else {\n          _joinError = 'Ein Fehler ist aufgetreten: ${e.toString().replaceAll('Exception: ', '')}';\n        }\n      });\n    } finally {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 533,
    "column": 56,
    "original": ";\n        });\n      }\n    } catch (e) {\n      setState(() {\n        _joinError = e.toString().replaceAll(",
    "suggested_key": "errorCatchESetstate",
    "context": "}\n      } else {\n        setState(() {\n          _joinError = 'Fehler bei der Vorregistrierung';\n        });\n      }\n    } catch (e) {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 538,
    "column": 62,
    "original": ");\n      });\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isPreRegistering = false;\n        });\n      }\n    }\n  }\n  \n  Future<void> _cancelPreRegistration() async {\n    final world = _world;\n    if (world == null) return;\n\n    setState(() {\n      _isPreRegistering = true;\n      _joinError = null;\n    });\n\n    try {\n      final success = await _worldService.cancelPreRegistrationAuthenticated(world.id);\n      if (success) {\n        setState(() {\n          _isPreRegistered = false;\n        });\n        \n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text(",
    "suggested_key": "errorFinallyIfMounted",
    "context": "}\n    } catch (e) {\n      setState(() {\n        _joinError = e.toString().replaceAll('Exception: ', '');\n      });\n    } finally {\n      if (mounted) {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 575,
    "column": 70,
    "original": ";\n        });\n      }\n    } catch (e) {\n      setState(() {\n        _joinError = e.toString().replaceAll(",
    "suggested_key": "errorCatchESetstate",
    "context": "}\n      } else {\n        setState(() {\n          _joinError = 'Fehler beim Zurückziehen der Vorregistrierung';\n        });\n      }\n    } catch (e) {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 580,
    "column": 62,
    "original": ");\n      });\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isPreRegistering = false;\n        });\n      }\n    }\n  }\n  \n  Future<void> _leaveWorld() async {\n    final world = _world;\n    if (world == null) return;\n    \n    // Bestätigungsdialog anzeigen\n    final confirmed = await showDialog<bool>(\n      context: context,\n      builder: (context) => AlertDialog(\n        title: const Text(",
    "suggested_key": "errorFinallyIfMounted",
    "context": "}\n    } catch (e) {\n      setState(() {\n        _joinError = e.toString().replaceAll('Exception: ', '');\n      });\n    } finally {\n      if (mounted) {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 640,
    "column": 62,
    "original": ");\n      });\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isJoining = false;\n        });\n      }\n    }\n  }\n  \n  void _playWorld() {\n    final world = _world;\n    if (world == null) return;\n    // Navigate directly to world dashboard for playing\n    context.goNamed(",
    "suggested_key": "errorFinallyIfMounted",
    "context": "}\n    } catch (e) {\n      setState(() {\n        _joinError = e.toString().replaceAll('Exception: ', '');\n      });\n    } finally {\n      if (mounted) {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 692,
    "column": 69,
    "original": ", error: {",
    "suggested_key": "errorError",
    "context": "// Navigation zu Registration mit vorausgefüllter E-Mail\n  void _navigateToRegistration(String email) {\n    AppLogger.app.i('🎫 Navigation zur Registration mit Invite-E-Mail', error: {'email': email});\n    \n    // FIXED: Invite-Token für Post-Auth-Redirect setzen\n    if (widget.inviteToken != null) {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 692,
    "column": 86,
    "original": ": email});\n    \n    // FIXED: Invite-Token für Post-Auth-Redirect setzen\n    if (widget.inviteToken != null) {\n      _authService.setPendingInviteRedirect(widget.inviteToken!);\n    }\n    \n    context.goNamed(",
    "suggested_key": "errorEmailFixedInvitetoken",
    "context": "// Navigation zu Registration mit vorausgefüllter E-Mail\n  void _navigateToRegistration(String email) {\n    AppLogger.app.i('🎫 Navigation zur Registration mit Invite-E-Mail', error: {'email': email});\n    \n    // FIXED: Invite-Token für Post-Auth-Redirect setzen\n    if (widget.inviteToken != null) {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 704,
    "column": 21,
    "original": "🎫 Navigation zum Login für Invite",
    "suggested_key": "errorNavigationZumLogin",
    "context": "// Navigation zu Login \n  void _navigateToLogin(String email) {\n    AppLogger.app.i('🎫 Navigation zum Login für Invite', error: {'email': email});\n    \n    // FIXED: Invite-Token für Post-Auth-Redirect setzen\n    if (widget.inviteToken != null) {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 704,
    "column": 72,
    "original": ": email});\n    \n    // FIXED: Invite-Token für Post-Auth-Redirect setzen\n    if (widget.inviteToken != null) {\n      _authService.setPendingInviteRedirect(widget.inviteToken!);\n    }\n    \n    context.goNamed(",
    "suggested_key": "errorEmailFixedInvitetoken",
    "context": "// Navigation zu Login \n  void _navigateToLogin(String email) {\n    AppLogger.app.i('🎫 Navigation zum Login für Invite', error: {'email': email});\n    \n    // FIXED: Invite-Token für Post-Auth-Redirect setzen\n    if (widget.inviteToken != null) {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 717,
    "column": 58,
    "original": ", error: {",
    "suggested_key": "errorError",
    "context": "// User abmelden und zur Registration weiterleiten\n  Future<void> _logout() async {\n    try {\n      AppLogger.app.i('🎫 User logout für Invite-Umleitung', error: {'inviteEmail': _inviteEmail});\n      \n      // FIXED: Invite-Token für Post-Auth-Redirect setzen BEVOR logout\n      if (widget.inviteToken != null) {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 717,
    "column": 81,
    "original": ": _inviteEmail});\n      \n      // FIXED: Invite-Token für Post-Auth-Redirect setzen BEVOR logout\n      if (widget.inviteToken != null) {\n        _authService.setPendingInviteRedirect(widget.inviteToken!);\n      }\n      \n      await _authService.logout();\n      \n      if (mounted && _inviteEmail != null) {\n        // Nach Logout zur Registration mit korrekter E-Mail\n        context.goNamed(",
    "suggested_key": "error_inviteemailFixedInvitetoken",
    "context": "// User abmelden und zur Registration weiterleiten\n  Future<void> _logout() async {\n    try {\n      AppLogger.app.i('🎫 User logout für Invite-Umleitung', error: {'inviteEmail': _inviteEmail});\n      \n      // FIXED: Invite-Token für Post-Auth-Redirect setzen BEVOR logout\n      if (widget.inviteToken != null) {",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 734,
    "column": 59,
    "original": ", e);\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          const SnackBar(\n            content: Text(",
    "suggested_key": "errorEIfMounted",
    "context": "});\n      }\n    } catch (e) {\n      AppLogger.logError('Logout für Invite fehlgeschlagen', e);\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          const SnackBar(",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 738,
    "column": 48,
    "original": "),\n            backgroundColor: Colors.red,\n          ),\n        );\n      }\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    \n    return Scaffold(\n      body: BackgroundWidget(\n        child: Stack(\n          children: [\n            // Main content\n            SafeArea(\n              child: _isLoading\n                  ? const Center(\n                      child: CircularProgressIndicator(\n                        valueColor: AlwaysStoppedAnimation<Color>(AppTheme.primaryColor),\n                      ),\n                    )\n                  : _errorMessage != null\n                      ? _buildErrorState()\n                      : _infoMessage != null\n                          ? _buildInfoState()\n                          : _world == null\n                              ? _buildNotFoundState()\n                              : _buildWorldContent(),\n            ),\n            \n            // User info widget (only show when authenticated)\n            if (_isAuthenticated)\n              const UserInfoWidget(),\n            \n            // Navigation widget (only show when authenticated)\n            if (_isAuthenticated)\n              NavigationWidget(\n                currentRoute: ",
    "suggested_key": "errorBackgroundcolorColorsredOverride",
    "context": "if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          const SnackBar(\n            content: Text('Fehler beim Abmelden'),\n            backgroundColor: Colors.red,\n          ),\n        );",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 828,
    "column": 43,
    "original": ",\n                        style: Theme.of(context).textTheme.headlineSmall?.copyWith(\n                          color: Colors.white,\n                          fontWeight: FontWeight.bold,\n                        ),\n                      ),\n                      const SizedBox(height: 16),\n                      Text(\n                        _errorMessage ?? ",
    "suggested_key": "errorStyleThemeofcontexttextthemeheadlinesmallcopywithColor",
    "context": "),\n                      const SizedBox(height: 24),\n                      Text(\n                        'Fehler beim Laden',\n                        style: Theme.of(context).textTheme.headlineSmall?.copyWith(\n                          color: Colors.white,\n                          fontWeight: FontWeight.bold,",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 836,
    "column": 61,
    "original": ",\n                        style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                          color: Colors.grey[300],\n                        ),\n                        textAlign: TextAlign.center,\n                      ),\n                      const SizedBox(height: 32),\n                      \n                      // Verschiedene Action-Buttons je nach Szenario\n                      if (_showRegistrationButton && _inviteEmail != null) ...[\n                        // Registration Button für neuen User\n                        SizedBox(\n                          width: double.infinity,\n                          height: 48,\n                          child: ElevatedButton.icon(\n                            onPressed: () => _navigateToRegistration(_inviteEmail!),\n                            icon: const Icon(Icons.person_add),\n                            label: const Text(",
    "suggested_key": "errorStyleThemeofcontexttextthemebodylargecopywithColor",
    "context": "),\n                      const SizedBox(height: 16),\n                      Text(\n                        _errorMessage ?? 'Unbekannter Fehler',\n                        style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                          color: Colors.grey[300],\n                        ),",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1310,
    "column": 66,
    "original": ",\n                                style: TextStyle(color: Colors.red[400], fontSize: 14),\n                              ),\n                            ),\n                          ],\n                        ),\n                      ),\n                    ],\n                  ],\n                ),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n  \n  Widget _buildDescriptionTab() {\n    return SingleChildScrollView(\n      padding: const EdgeInsets.all(24),\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          const Row(\n            children: [\n              Icon(Icons.info_outline, color: AppTheme.primaryColor, size: 24),\n              SizedBox(width: 8),\n              Text(\n                ",
    "suggested_key": "errorStyleTextstylecolorColorsred400",
    "context": "const SizedBox(width: 8),\n                            Expanded(\n                              child: Text(\n                                _joinError ?? 'Unbekannter Fehler',\n                                style: TextStyle(color: Colors.red[400], fontSize: 14),\n                              ),\n                            ),",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 82,
    "column": 79,
    "original": ", error: e);\n      _authService = AuthService();\n      _worldService = WorldService();\n      _inviteService = InviteService();\n    }\n  }\n\n  Future<void> _loadWorlds() async {\n    setState(() {\n      _isLoading = true;\n      _error = null;\n    });\n\n    try {\n      final worlds = await _worldService.getWorlds();\n      if (mounted) {\n        setState(() {\n          _worlds = worlds;\n          _isLoading = false;\n        });\n        \n        // Simuliere Spieleranzahl für Demo-Zwecke\n        _generateMockPlayerCounts();\n        \n        // Check player status for each world (silently handle 404s)\n        _checkPlayerStatuses();\n        _checkPreRegistrationStatuses();\n        \n        // Initial filter anwenden\n        _applyFiltersAndSorting();\n      }\n    } catch (e) {\n      if (mounted) {\n        // Only show error for non-401/404 errors\n        if (!e.toString().contains(",
    "suggested_key": "errorErrorE_authservice",
    "context": "_inviteService = InviteService();\n      }\n    } catch (e) {\n      AppLogger.app.w('⚠️ ServiceLocator Fehler - nutze direkte Instanziierung', error: e);\n      _authService = AuthService();\n      _worldService = WorldService();\n      _inviteService = InviteService();",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 116,
    "column": 102,
    "original": "Token fehlt",
    "suggested_key": "errorTokenFehlt",
    "context": "} catch (e) {\n      if (mounted) {\n        // Only show error for non-401/404 errors\n        if (!e.toString().contains('401') && !e.toString().contains('404') && !e.toString().contains('Token fehlt')) {\n          setState(() {\n            _error = e.toString();\n            _isLoading = false;",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 124,
    "column": 29,
    "original": "Fehler beim Laden der Welten: ${e.toString()}",
    "suggested_key": "errorFehlerBeimLaden",
    "context": "ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Fehler beim Laden der Welten: ${e.toString()}'),\n              backgroundColor: AppTheme.errorColor,\n            ),\n          );",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 266,
    "column": 65,
    "original": ", e, context: {",
    "suggested_key": "errorEContext",
    "context": "}\n        } else {\n          // Only log other errors\n          AppLogger.logError('Player-Status Check fehlgeschlagen', e, context: {'worldId': world.id});\n        }\n      }\n    }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 266,
    "column": 89,
    "original": ": world.id});\n        }\n      }\n    }\n  }\n\n  Future<void> _checkPreRegistrationStatuses() async {\n    for (final world in _worlds) {\n      // Only check for worlds that support pre-registration\n      if (world.canPreRegister) {\n        try {\n          final isPreRegistered = await _worldService.isPreRegisteredForWorld(world.id);\n          if (mounted) {\n            setState(() {\n              _preRegisteredWorlds[world.id] = isPreRegistered;\n            });\n          }\n        } catch (e) {\n          // 404 means user is not pre-registered, which is normal\n          if (e.toString().contains(",
    "suggested_key": "errorWorldidFuturevoid_checkpreregistrationstatuses",
    "context": "}\n        } else {\n          // Only log other errors\n          AppLogger.logError('Player-Status Check fehlgeschlagen', e, context: {'worldId': world.id});\n        }\n      }\n    }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 293,
    "column": 77,
    "original": ", e, context: {",
    "suggested_key": "errorEContext",
    "context": "}\n          } else {\n            // Only log other errors\n            AppLogger.logError('Pre-Registration Status Check fehlgeschlagen', e, context: {'worldId': world.id});\n          }\n        }\n      }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 293,
    "column": 101,
    "original": ": world.id});\n          }\n        }\n      }\n    }\n  }\n\n  Future<void> _joinWorld(World world) async {\n    try {\n      final success = await _worldService.joinWorld(world.id);\n      if (success && mounted) {\n        setState(() {\n          _joinedWorlds[world.id] = true;\n        });\n        \n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text(",
    "suggested_key": "errorWorldidFuturevoid_joinworldworld",
    "context": "}\n          } else {\n            // Only log other errors\n            AppLogger.logError('Pre-Registration Status Check fehlgeschlagen', e, context: {'worldId': world.id});\n          }\n        }\n      }",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 325,
    "column": 35,
    "original": ");\n          }\n        } else {\n          final errorMessage = e.toString().replaceAll(",
    "suggested_key": "errorElseFinalErrormessage",
    "context": "// Cache invalidieren nach Logout\n          AppRouter.invalidateAuthCache();\n          if (mounted) {\n            context.goNamed('login');\n          }\n        } else {\n          final errorMessage = e.toString().replaceAll('Exception: ', '');",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 328,
    "column": 72,
    "original": ");\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text(errorMessage),\n              backgroundColor: AppTheme.errorColor,\n            ),\n          );\n        }\n      }\n    }\n  }\n\n  Future<void> _preRegisterWorld(World world) async {\n    try {\n      final success = await _worldService.preRegisterWorldAuthenticated(world.id);\n      if (success && mounted) {\n        setState(() {\n          _preRegisteredWorlds[world.id] = true;\n        });\n        \n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text(",
    "suggested_key": "errorScaffoldmessengerofcontextshowsnackbarSnackbarContent",
    "context": "context.goNamed('login');\n          }\n        } else {\n          final errorMessage = e.toString().replaceAll('Exception: ', '');\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text(errorMessage),",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 363,
    "column": 35,
    "original": ");\n          }\n        } else {\n          final errorMessage = e.toString().replaceAll(",
    "suggested_key": "errorElseFinalErrormessage",
    "context": "// Cache invalidieren nach Logout\n          AppRouter.invalidateAuthCache();\n          if (mounted) {\n            context.goNamed('login');\n          }\n        } else {\n          final errorMessage = e.toString().replaceAll('Exception: ', '');",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 366,
    "column": 72,
    "original": ");\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text(errorMessage),\n              backgroundColor: AppTheme.errorColor,\n            ),\n          );\n        }\n      }\n    }\n  }\n\n  Future<void> _leaveWorld(World world) async {\n    // Zeige Bestätigungsdialog\n    final confirmed = await showDialog<bool>(\n      context: context,\n      builder: (context) => AlertDialog(\n        title: const Text(",
    "suggested_key": "errorScaffoldmessengerofcontextshowsnackbarSnackbarContent",
    "context": "context.goNamed('login');\n          }\n        } else {\n          final errorMessage = e.toString().replaceAll('Exception: ', '');\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text(errorMessage),",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 430,
    "column": 35,
    "original": ");\n          }\n        } else {\n          final errorMessage = e.toString().replaceAll(",
    "suggested_key": "errorElseFinalErrormessage",
    "context": "// Cache invalidieren nach Logout\n          AppRouter.invalidateAuthCache();\n          if (mounted) {\n            context.goNamed('login');\n          }\n        } else {\n          final errorMessage = e.toString().replaceAll('Exception: ', '');",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 433,
    "column": 72,
    "original": ");\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text(errorMessage),\n              backgroundColor: AppTheme.errorColor,\n            ),\n          );\n        }\n      }\n    }\n  }\n\n  Future<void> _cancelPreRegistration(World world) async {\n    try {\n      final success = await _worldService.cancelPreRegistrationAuthenticated(world.id);\n      \n      if (success && mounted) {\n        setState(() {\n          _preRegisteredWorlds[world.id] = false;\n        });\n        \n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text(",
    "suggested_key": "errorScaffoldmessengerofcontextshowsnackbarSnackbarContent",
    "context": "context.goNamed('login');\n          }\n        } else {\n          final errorMessage = e.toString().replaceAll('Exception: ', '');\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text(errorMessage),",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 469,
    "column": 35,
    "original": ");\n          }\n        } else {\n          final errorMessage = e.toString().replaceAll(",
    "suggested_key": "errorElseFinalErrormessage",
    "context": "// Cache invalidieren nach Logout\n          AppRouter.invalidateAuthCache();\n          if (mounted) {\n            context.goNamed('login');\n          }\n        } else {\n          final errorMessage = e.toString().replaceAll('Exception: ', '');",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 472,
    "column": 72,
    "original": ");\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text(errorMessage),\n              backgroundColor: AppTheme.errorColor,\n            ),\n          );\n        }\n      }\n    }\n  }\n\n  Future<void> _createInvite(World world) async {\n    final result = await showDialog<String>(\n      context: context,\n      builder: (context) => InviteDialog(worldName: world.name),\n    );\n\n    if (result != null && result.isNotEmpty) {\n      try {\n        final success = await _inviteService.createInvite(world.id, result);\n        if (success && mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            const SnackBar(\n              content: Text(",
    "suggested_key": "errorScaffoldmessengerofcontextshowsnackbarSnackbarContent",
    "context": "context.goNamed('login');\n          }\n        } else {\n          final errorMessage = e.toString().replaceAll('Exception: ', '');\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text(errorMessage),",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 509,
    "column": 37,
    "original": ");\n            }\n          } else {\n            final errorMessage = e.toString().replaceAll(",
    "suggested_key": "errorElseFinalErrormessage",
    "context": "// Cache invalidieren nach Logout\n            AppRouter.invalidateAuthCache();\n            if (mounted) {\n              context.goNamed('login');\n            }\n          } else {\n            final errorMessage = e.toString().replaceAll('Exception: ', '');",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 512,
    "column": 74,
    "original": ");\n            ScaffoldMessenger.of(context).showSnackBar(\n              SnackBar(\n                content: Text(errorMessage),\n                backgroundColor: AppTheme.errorColor,\n              ),\n            );\n          }\n        }\n      }\n    }\n  }\n\n  // Deep-Link zur World-Join-Page\n  void _navigateToWorldJoin(World world) {\n    context.goNamed(",
    "suggested_key": "errorScaffoldmessengerofcontextshowsnackbarSnackbarContent",
    "context": "context.goNamed('login');\n            }\n          } else {\n            final errorMessage = e.toString().replaceAll('Exception: ', '');\n            ScaffoldMessenger.of(context).showSnackBar(\n              SnackBar(\n                content: Text(errorMessage),",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 687,
    "column": 70,
    "original": ",\n                                        style: TextStyle(\n                                          color: Colors.red[200],\n                                          fontWeight: FontWeight.bold,\n                                        ),\n                                      ),\n                                      const SizedBox(height: 8),\n                                      Text(\n                                        _error ?? ",
    "suggested_key": "errorStyleTextstyleColor",
    "context": "),\n                                      const SizedBox(height: 16),\n                                      Text(\n                                        'Fehler beim Laden der Welten',\n                                        style: TextStyle(\n                                          color: Colors.red[200],\n                                          fontWeight: FontWeight.bold,",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 695,
    "column": 70,
    "original": ",\n                                        style: TextStyle(\n                                          color: (Colors.red[200] ?? Colors.red).withOpacity(0.8),\n                                        ),\n                                        textAlign: TextAlign.center,\n                                      ),\n                                    ],\n                                  ),\n                                )\n                              else if (_filteredWorlds.isEmpty)\n                                Container(\n                                  padding: const EdgeInsets.all(16),\n                                  decoration: BoxDecoration(\n                                    color: const Color(0xFF2D2D2D),\n                                    borderRadius: BorderRadius.circular(12),\n                                    border: Border.all(\n                                      color: AppTheme.primaryColor.withOpacity(0.3),\n                                    ),\n                                  ),\n                                  child: Column(\n                                    children: [\n                                      Icon(\n                                        Icons.filter_list,\n                                        size: 48,\n                                        color: AppTheme.primaryColor.withOpacity(0.7),\n                                      ),\n                                      const SizedBox(height: 16),\n                                      Text(\n                                        ",
    "suggested_key": "errorStyleTextstyleColor",
    "context": "),\n                                      const SizedBox(height: 8),\n                                      Text(\n                                        _error ?? 'Unbekannter Fehler',\n                                        style: TextStyle(\n                                          color: (Colors.red[200] ?? Colors.red).withOpacity(0.8),\n                                        ),",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\pre_register_dialog.dart",
    "line": 52,
    "column": 51,
    "original": "),\n            backgroundColor: AppTheme.errorColor,\n          ),\n        );\n      }\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isLoading = false;\n        });\n      }\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return AlertDialog(\n      backgroundColor: const Color(0xFF1A1A1A), // Dunkler Hintergrund\n      shape: RoundedRectangleBorder(\n        borderRadius: BorderRadius.circular(20),\n        side: BorderSide(\n          color: AppTheme.primaryColor.withOpacity(0.3),\n          width: 1,\n        ),\n      ),\n      title: Text(\n        ",
    "suggested_key": "errorBackgroundcolorAppthemeerrorcolorFinally",
    "context": "if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text('Fehler: ${e.toString()}'),\n            backgroundColor: AppTheme.errorColor,\n          ),\n        );",
    "category": "error",
    "confidence": 0.7,
    "widget_context": "Widget: SnackBar",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 3,
    "column": 8,
    "original": "../models/user.dart",
    "suggested_key": "inviteModelsuserdart",
    "context": "import 'dart:convert';\nimport 'package:flutter/foundation.dart';\nimport '../models/user.dart';\nimport '../../config/logger.dart';\nimport 'api_service.dart';\nimport 'token_storage.dart';",
    "category": "invite",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 4,
    "column": 8,
    "original": "../../config/logger.dart",
    "suggested_key": "inviteConfigloggerdart",
    "context": "import 'dart:convert';\nimport 'package:flutter/foundation.dart';\nimport '../models/user.dart';\nimport '../../config/logger.dart';\nimport 'api_service.dart';\nimport 'token_storage.dart';",
    "category": "invite",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 161,
    "column": 35,
    "original": ");\n      if (parts.length != 3) return null;\n      \n      final payload = jsonDecode(utf8.decode(base64Url.decode(base64Url.normalize(parts[1]))));\n      final exp = payload[",
    "suggested_key": "inviteIfPartslength3",
    "context": "// Token-Ablaufzeit extrahieren\n  DateTime? _getTokenExpiration(String token) {\n    try {\n      final parts = token.split('.');\n      if (parts.length != 3) return null;\n      \n      final payload = jsonDecode(utf8.decode(base64Url.decode(base64Url.normalize(parts[1]))));",
    "category": "invite",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 184,
    "column": 46,
    "original": "];\n        final refreshToken = data[",
    "suggested_key": "inviteFinalRefreshtokenData",
    "context": "if (response.statusCode == 200) {\n        final data = jsonDecode(response.body);\n        final accessToken = data['accessToken'];\n        final refreshToken = data['refreshToken'];\n        final userData = data['user'];",
    "category": "invite",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 185,
    "column": 48,
    "original": "];\n        final userData = data[",
    "suggested_key": "inviteFinalUserdataData",
    "context": "if (response.statusCode == 200) {\n        final data = jsonDecode(response.body);\n        final accessToken = data['accessToken'];\n        final refreshToken = data['refreshToken'];\n        final userData = data['user'];\n\n        // Tokens speichern und API-Service aktualisieren",
    "category": "invite",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 186,
    "column": 36,
    "original": "];\n\n        // Tokens speichern und API-Service aktualisieren\n        await _saveTokensAndUpdateService(accessToken, refreshToken);\n        await TokenStorage.saveUserData(jsonEncode(userData));\n\n        // User-Objekt erstellen\n        _currentUser = User.fromJson(userData);\n        isAuthenticated.value = true; // Reaktiven Status setzen\n        \n        // Fetch complete user data with roles\n        await fetchCurrentUser();\n        \n        AppLogger.logAuthEvent(",
    "suggested_key": "inviteTokensSpeichernUnd",
    "context": "final data = jsonDecode(response.body);\n        final accessToken = data['accessToken'];\n        final refreshToken = data['refreshToken'];\n        final userData = data['user'];\n\n        // Tokens speichern und API-Service aktualisieren\n        await _saveTokensAndUpdateService(accessToken, refreshToken);",
    "category": "invite",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 244,
    "column": 46,
    "original": "];\n        final refreshToken = data[",
    "suggested_key": "inviteFinalRefreshtokenData",
    "context": "final data = jsonDecode(response.body);\n        \n        // Token aus der Response extrahieren\n        final accessToken = data['accessToken'];\n        final refreshToken = data['refreshToken'];\n        \n        if (accessToken != null && refreshToken != null) {",
    "category": "invite",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 245,
    "column": 48,
    "original": "];\n        \n        if (accessToken != null && refreshToken != null) {\n          // Tokens speichern und API-Service aktualisieren\n          await _saveTokensAndUpdateService(accessToken, refreshToken);\n        }\n        \n        final userData = data[",
    "suggested_key": "inviteIfAccesstokenNull",
    "context": "// Token aus der Response extrahieren\n        final accessToken = data['accessToken'];\n        final refreshToken = data['refreshToken'];\n        \n        if (accessToken != null && refreshToken != null) {\n          // Tokens speichern und API-Service aktualisieren",
    "category": "invite",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 252,
    "column": 36,
    "original": "];\n        \n        // Log Registration Debug Info\n        if (userData[",
    "suggested_key": "inviteLogRegistrationDebug",
    "context": "await _saveTokensAndUpdateService(accessToken, refreshToken);\n        }\n        \n        final userData = data['user'];\n        \n        // Log Registration Debug Info\n        if (userData['_debug'] != null) {",
    "category": "invite",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 384,
    "column": 49,
    "original": "];\n        \n        // Refresh-Token-Rotation: Neuen Refresh-Token verwenden falls vorhanden\n        final newRefreshToken = data[",
    "suggested_key": "inviteRefreshtokenrotationNeuenRefreshtoken",
    "context": "if (response.statusCode == 200) {\n        final data = jsonDecode(response.body);\n        final newAccessToken = data['accessToken'];\n        \n        // Refresh-Token-Rotation: Neuen Refresh-Token verwenden falls vorhanden\n        final newRefreshToken = data['refreshToken'];",
    "category": "invite",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 387,
    "column": 51,
    "original": "];\n        final currentRefreshToken = await TokenStorage.getRefreshToken();\n        final finalRefreshToken = newRefreshToken ?? currentRefreshToken;\n        \n        // Tokens speichern und API-Service aktualisieren\n        await _saveTokensAndUpdateService(newAccessToken, finalRefreshToken);\n        return true;\n      } else {\n        await logout();\n        return false;\n      }\n    } catch (e) {\n      await logout();\n      return false;\n    } finally {\n      _refreshing = false;\n    }\n  }\n\n  // Optionaler Force-Refresh für manuelle Token-Erneuerung\n  Future<bool> forceRefreshToken() async {\n    final tokenValid = await refreshTokenIfNeeded();\n    if (!tokenValid) {\n      await logout();\n    }\n    return tokenValid;\n  }\n\n  // Fetch current user data with roles from server\n  Future<User?> fetchCurrentUser() async {\n    try {\n      final response = await _apiService.get(",
    "suggested_key": "inviteFinalCurrentrefreshtokenAwait",
    "context": "final newAccessToken = data['accessToken'];\n        \n        // Refresh-Token-Rotation: Neuen Refresh-Token verwenden falls vorhanden\n        final newRefreshToken = data['refreshToken'];\n        final currentRefreshToken = await TokenStorage.getRefreshToken();\n        final finalRefreshToken = newRefreshToken ?? currentRefreshToken;",
    "category": "invite",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 128,
    "column": 99,
    "original": "),\n                backgroundColor: Colors.green,\n                duration: Duration(seconds: 2),\n              ),\n            );\n            \n            // Kurze Verzögerung für bessere UX\n            await Future.delayed(const Duration(milliseconds: 500));\n            \n            if (mounted) {\n              if (params != null) {\n                context.goNamed(routeName, pathParameters: params);\n              } else {\n                context.goNamed(routeName);\n              }\n            }\n          } else if (_inviteToken != null) {\n            // Fallback: Wenn Invite-Token in Query-Parametern, direkt zur Invite-Seite\n            AppLogger.app.i(",
    "suggested_key": "inviteBackgroundcolorColorsgreenDuration",
    "context": "ScaffoldMessenger.of(context).showSnackBar(\n              const SnackBar(\n                content: Text('Registrierung erfolgreich! Du wirst zur Einladung weitergeleitet...'),\n                backgroundColor: Colors.green,\n                duration: Duration(seconds: 2),\n              ),",
    "category": "invite",
    "confidence": 0.7,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 150,
    "column": 99,
    "original": "),\n                backgroundColor: Colors.green,\n                duration: Duration(seconds: 2),\n              ),\n            );\n            \n            // Kurze Verzögerung für bessere UX\n            await Future.delayed(const Duration(milliseconds: 500));\n            \n            if (mounted) {\n              context.goNamed(",
    "suggested_key": "inviteBackgroundcolorColorsgreenDuration",
    "context": "ScaffoldMessenger.of(context).showSnackBar(\n              const SnackBar(\n                content: Text('Registrierung erfolgreich! Du wirst zur Einladung weitergeleitet...'),\n                backgroundColor: Colors.green,\n                duration: Duration(seconds: 2),\n              ),",
    "category": "invite",
    "confidence": 0.7,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 219,
    "column": 50,
    "original": "];\n    final createdAtString = inviteData[",
    "suggested_key": "inviteFinalCreatedatstringInvitedata",
    "context": "final invitedByName = invitedByData?['username'] ?? 'Unbekannt';\n    \n    // Invite-Zeitstempel verarbeiten\n    final expiresAtString = inviteData['expiresAt'];\n    final createdAtString = inviteData['createdAt'];\n    final acceptedAtString = inviteData['acceptedAt']; // Falls bereits akzeptiert",
    "category": "invite",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 220,
    "column": 50,
    "original": "];\n    final acceptedAtString = inviteData[",
    "suggested_key": "inviteFinalAcceptedatstringInvitedata",
    "context": "// Invite-Zeitstempel verarbeiten\n    final expiresAtString = inviteData['expiresAt'];\n    final createdAtString = inviteData['createdAt'];\n    final acceptedAtString = inviteData['acceptedAt']; // Falls bereits akzeptiert\n    \n    DateTime? expiresAt;",
    "category": "invite",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 221,
    "column": 52,
    "original": "]; // Falls bereits akzeptiert\n    \n    DateTime? expiresAt;\n    bool isExpired = false;\n    bool isAccepted = false;\n    \n    try {\n      if (expiresAtString != null) {\n        expiresAt = DateTime.parse(expiresAtString);\n        isExpired = DateTime.now().isAfter(expiresAt);\n      }\n      if (acceptedAtString != null) {\n        isAccepted = true;\n      }\n    } catch (e) {\n      AppLogger.app.w(",
    "suggested_key": "inviteFallsBereitsAkzeptiert",
    "context": "// Invite-Zeitstempel verarbeiten\n    final expiresAtString = inviteData['expiresAt'];\n    final createdAtString = inviteData['createdAt'];\n    final acceptedAtString = inviteData['acceptedAt']; // Falls bereits akzeptiert\n    \n    DateTime? expiresAt;\n    bool isExpired = false;",
    "category": "invite",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 270,
    "column": 69,
    "original": ")}.${expiresAtLocal.month.toString().padLeft(2, ",
    "suggested_key": "inviteExpiresatlocalmonthtostringpadleft2",
    "context": "String validityText = '';\n    if (expiresAt != null) {\n      final expiresAtLocal = expiresAt.toLocal();\n      final dateStr = '${expiresAtLocal.day.toString().padLeft(2, '0')}.${expiresAtLocal.month.toString().padLeft(2, '0')}.${expiresAtLocal.year} ${expiresAtLocal.hour.toString().padLeft(2, '0')}:${expiresAtLocal.minute.toString().padLeft(2, '0')}';\n      \n      if (isAccepted) {\n        validityText = '\\n\\n✅ Diese Einladung wurde bereits akzeptiert.';",
    "category": "invite",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 270,
    "column": 120,
    "original": ")}.${expiresAtLocal.year} ${expiresAtLocal.hour.toString().padLeft(2, ",
    "suggested_key": "inviteExpiresatlocalyearExpiresatlocalhourtostringpadleft2",
    "context": "String validityText = '';\n    if (expiresAt != null) {\n      final expiresAtLocal = expiresAt.toLocal();\n      final dateStr = '${expiresAtLocal.day.toString().padLeft(2, '0')}.${expiresAtLocal.month.toString().padLeft(2, '0')}.${expiresAtLocal.year} ${expiresAtLocal.hour.toString().padLeft(2, '0')}:${expiresAtLocal.minute.toString().padLeft(2, '0')}';\n      \n      if (isAccepted) {\n        validityText = '\\n\\n✅ Diese Einladung wurde bereits akzeptiert.';",
    "category": "invite",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 270,
    "column": 193,
    "original": ")}:${expiresAtLocal.minute.toString().padLeft(2, ",
    "suggested_key": "inviteExpiresatlocalminutetostringpadleft2",
    "context": "String validityText = '';\n    if (expiresAt != null) {\n      final expiresAtLocal = expiresAt.toLocal();\n      final dateStr = '${expiresAtLocal.day.toString().padLeft(2, '0')}.${expiresAtLocal.month.toString().padLeft(2, '0')}.${expiresAtLocal.year} ${expiresAtLocal.hour.toString().padLeft(2, '0')}:${expiresAtLocal.minute.toString().padLeft(2, '0')}';\n      \n      if (isAccepted) {\n        validityText = '\\n\\n✅ Diese Einladung wurde bereits akzeptiert.';",
    "category": "invite",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 270,
    "column": 248,
    "original": ";\n      \n      if (isAccepted) {\n        validityText = ",
    "suggested_key": "inviteIfIsacceptedValiditytext",
    "context": "String validityText = '';\n    if (expiresAt != null) {\n      final expiresAtLocal = expiresAt.toLocal();\n      final dateStr = '${expiresAtLocal.day.toString().padLeft(2, '0')}.${expiresAtLocal.month.toString().padLeft(2, '0')}.${expiresAtLocal.year} ${expiresAtLocal.hour.toString().padLeft(2, '0')}:${expiresAtLocal.minute.toString().padLeft(2, '0')}';\n      \n      if (isAccepted) {\n        validityText = '\\n\\n✅ Diese Einladung wurde bereits akzeptiert.';",
    "category": "invite",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 273,
    "column": 72,
    "original": ";\n      } else if (isExpired) {\n        validityText = ",
    "suggested_key": "inviteElseIfIsexpired",
    "context": "final dateStr = '${expiresAtLocal.day.toString().padLeft(2, '0')}.${expiresAtLocal.month.toString().padLeft(2, '0')}.${expiresAtLocal.year} ${expiresAtLocal.hour.toString().padLeft(2, '0')}:${expiresAtLocal.minute.toString().padLeft(2, '0')}';\n      \n      if (isAccepted) {\n        validityText = '\\n\\n✅ Diese Einladung wurde bereits akzeptiert.';\n      } else if (isExpired) {\n        validityText = '\\n\\n❌ Diese Einladung ist am $dateStr abgelaufen.';\n      } else {",
    "category": "invite",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 275,
    "column": 74,
    "original": ";\n      } else {\n        validityText = ",
    "suggested_key": "inviteElseValiditytext",
    "context": "if (isAccepted) {\n        validityText = '\\n\\n✅ Diese Einladung wurde bereits akzeptiert.';\n      } else if (isExpired) {\n        validityText = '\\n\\n❌ Diese Einladung ist am $dateStr abgelaufen.';\n      } else {\n        validityText = '\\n\\n⏰ Gültig bis: $dateStr';\n      }",
    "category": "invite",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 277,
    "column": 51,
    "original": ";\n      }\n    }\n    \n    final baseInfoText = ",
    "suggested_key": "inviteFinalBaseinfotext",
    "context": "} else if (isExpired) {\n        validityText = '\\n\\n❌ Diese Einladung ist am $dateStr abgelaufen.';\n      } else {\n        validityText = '\\n\\n⏰ Gültig bis: $dateStr';\n      }\n    }",
    "category": "invite",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 327,
    "column": 49,
    "original": ";\n    }\n    \n    // Bei ungültigen Invites zusätzliche Info\n    if (!isInviteValid) {\n      infoText += ",
    "suggested_key": "inviteBeiUngültigenInvites",
    "context": "default:\n        AppLogger.app.w('❌ Unbekannter User-Status: $status');\n        actionText = 'Unbekannter Status: $status';\n        infoText = '$baseInfoText\\n\\n$actionText';\n    }\n    \n    // Bei ungültigen Invites zusätzliche Info",
    "category": "invite",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 332,
    "column": 76,
    "original": ";\n    }\n    \n    setState(() {\n      _infoMessage = infoText;\n      _inviteEmail = inviteEmail;\n      \n      // Button-Flags setzen\n      _showLoginButton = showLoginButton;\n      _showRegistrationButton = showRegisterButton; \n      _showLogoutButton = showLogoutButton;\n      _showAcceptInviteButton = showAcceptButton;\n      \n      // WICHTIG: Alte Fehlermeldung zurücksetzen!\n      _errorMessage = null;\n      \n      _isLoading = false;\n    });\n  }\n\n  // Neue Methode: World-Status für normale Navigation prüfen\n  Future<void> _checkWorldStatus() async {\n    if (_world == null) return;\n    \n    try {\n      // Prüfe ob User bereits Mitglied ist\n      _isJoined = await _worldService.isPlayerInWorld(_world!.id);\n      \n      // Prüfe Vorregistrierung\n      final preRegStatus = await _worldService.getPreRegistrationStatus(_world!.id);\n      _isPreRegistered = preRegStatus.isPreRegistered;\n      \n      AppLogger.app.d(",
    "suggested_key": "inviteSetstate_infomessageInfotext",
    "context": "// Bei ungültigen Invites zusätzliche Info\n    if (!isInviteValid) {\n      infoText += '\\n\\n⚠️ Diese Einladung kann nicht mehr verwendet werden.';\n    }\n    \n    setState(() {",
    "category": "invite",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1683,
    "column": 40,
    "original": ",\n                    style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),\n                  ),\n          ),\n        ),\n      );\n    }\n\n    // **LOGOUT BUTTON (wenn User mit falscher E-Mail angemeldet)**\n    if (_showLogoutButton) {\n      buttons.add(\n        Container(\n          width: double.infinity,\n          margin: const EdgeInsets.only(bottom: 12.0),\n          child: ElevatedButton(\n            onPressed: () async {\n              await _authService.logout();\n              // Nach Logout zur Landing-Page\n              if (mounted) {\n                context.go(",
    "suggested_key": "inviteStyleTextstylefontsize16",
    "context": "),\n                  )\n                : const Text(\n                    'Einladung annehmen',\n                    style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),\n                  ),\n          ),",
    "category": "invite",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 496,
    "column": 62,
    "original": "),\n              backgroundColor: Colors.green,\n            ),\n          );\n        }\n      } catch (e) {\n        if (mounted) {\n          // Prüfe ob es ein Token-Problem ist\n          if (e.toString().contains(",
    "suggested_key": "inviteBackgroundcolorColorsgreenCatch",
    "context": "if (success && mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            const SnackBar(\n              content: Text('Einladung erfolgreich versendet!'),\n              backgroundColor: Colors.green,\n            ),\n          );",
    "category": "invite",
    "confidence": 0.7,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\invite_dialog.dart",
    "line": 149,
    "column": 28,
    "original": "Einladung senden",
    "suggested_key": "inviteEinladungSenden",
    "context": "valueColor: AlwaysStoppedAnimation<Color>(Colors.white),\n                  ),\n                )\n              : const Text('Einladung senden'),\n          ),\n        ),\n      ],",
    "category": "invite",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 89,
    "column": 49,
    "original": ");\n    \n    // 2. Services initialisieren (jetzt sicher, da App bereits läuft)\n    try {\n      final authService = AuthService();\n      final apiService = ApiService.withAuth(authService);\n      final worldService = WorldService();\n      final inviteService = InviteService();\n\n      ServiceLocator.register<AuthService>(authService);\n      ServiceLocator.register<ApiService>(apiService);\n      ServiceLocator.register<WorldService>(worldService);\n      ServiceLocator.register<InviteService>(inviteService);\n      \n      AppLogger.app.i(",
    "suggested_key": "ui2ServicesInitialisieren",
    "context": "// 1. Environment initialisieren\n    await Env.initialize();\n    \n    AppLogger.app.i('🌍 Environment initialisiert');\n    \n    // 2. Services initialisieren (jetzt sicher, da App bereits läuft)\n    try {",
    "category": "ui",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 201,
    "column": 47,
    "original": ", 500);\n  }\n\n  Future<http.Response> deleteWithBody(String endpoint, Map<String, dynamic> data) async {\n    await _ensureInitialized();\n    \n    // Erweiterte Request-Kontext-Verwaltung für parallele Requests\n    _requestBodies[endpoint] = data;\n    \n    // Automatische Token-Validierung für geschützte Endpoints\n    if (!endpoint.startsWith(",
    "suggested_key": "ui500FuturehttpresponseDeletewithbodystring",
    "context": "headers: _headers,\n        );\n    }\n    return http.Response('Request retry failed', 500);\n  }\n\n  Future<http.Response> deleteWithBody(String endpoint, Map<String, dynamic> data) async {",
    "category": "ui",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 526,
    "column": 50,
    "original": "Modernste Sicherheit und faire Spielregeln für alle",
    "suggested_key": "uiModernsteSicherheitUnd",
    "context": "_buildFeatureCard(\n                                    icon: Icons.security,\n                                    title: 'Sicher & Fair',\n                                    description: 'Modernste Sicherheit und faire Spielregeln für alle',\n                                    color: Colors.orange,\n                                  ),\n                                  _buildFeatureCard(",
    "category": "ui",
    "confidence": 0.7,
    "widget_context": "Widget: Card",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 532,
    "column": 50,
    "original": "Optimierte Server für minimale Latenz",
    "suggested_key": "uiOptimierteServerFür",
    "context": "_buildFeatureCard(\n                                    icon: Icons.speed,\n                                    title: 'Blitzschnell',\n                                    description: 'Optimierte Server für minimale Latenz',\n                                    color: Colors.purple,\n                                  ),\n                                  _buildFeatureCard(",
    "category": "ui",
    "confidence": 0.7,
    "widget_context": "Widget: Card",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 537,
    "column": 44,
    "original": "Überall spielen",
    "suggested_key": "uiÜberallSpielen",
    "context": "),\n                                  _buildFeatureCard(\n                                    icon: Icons.devices,\n                                    title: 'Überall spielen',\n                                    description: 'Auf PC, Tablet oder Smartphone - immer dabei',\n                                    color: Colors.red,\n                                  ),",
    "category": "ui",
    "confidence": 0.7,
    "widget_context": "Widget: Card",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 572,
    "column": 35,
    "original": "Bereit für dein Abenteuer?",
    "suggested_key": "uiBereitFürDein",
    "context": "child: Column(\n                              children: [\n                                const Text(\n                                  'Bereit für dein Abenteuer?',\n                                  style: TextStyle(\n                                    fontSize: 28,\n                                    fontWeight: FontWeight.bold,",
    "category": "ui",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\main.dart",
    "line": 5,
    "column": 27,
    "original": ";\n\n// Service-Container für Dependency Injection\nclass ServiceLocator {\n  static final Map<Type, dynamic> _services = {};\n\n  static void register<T>(T service) {\n    _services[T] = service;\n  }\n\n  static T get<T>() {\n    final service = _services[T];\n    if (service == null) {\n      throw Exception(",
    "suggested_key": "uiServicecontainerFürDependency",
    "context": "import 'package:flutter/services.dart';\nimport 'package:flutter/foundation.dart';\nimport 'app.dart';\nimport 'config/logger.dart';\n\n// Service-Container für Dependency Injection\nclass ServiceLocator {",
    "category": "ui",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 210,
    "column": 19,
    "original": "Menü öffnen",
    "suggested_key": "uiMenüÖffnen",
    "context": "),\n                ),\n                Text(\n                  'Menü öffnen',\n                  style: TextStyle(\n                    color: Colors.grey[400],\n                    fontSize: 12,",
    "category": "ui",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\splash_screen.dart",
    "line": 65,
    "column": 31,
    "original": ") {\n          _timedOut = true;\n          final onTimeout = widget.onTimeout;\n          if (onTimeout != null) {\n            onTimeout();\n          }\n        }\n      } else {\n        await _runInitializationWithSteps();\n      }\n      \n      if (mounted) {\n        setState(() {\n          _isInitialized = true;\n        });\n        \n        // Kurze Verzögerung für smooth Transition\n        await Future.delayed(const Duration(milliseconds: 500));\n        \n        // KEIN reverse() mehr - das hat die App ausgeblendet!\n        // _animationController.reverse(); // ENTFERNT\n      }\n    } catch (e) {\n      AppLogger.logError(",
    "suggested_key": "ui_timedoutTrueFinal",
    "context": "}),\n        ]);\n        \n        if (result == 'timeout') {\n          _timedOut = true;\n          final onTimeout = widget.onTimeout;\n          if (onTimeout != null) {",
    "category": "ui",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\splash_screen.dart",
    "line": 248,
    "column": 19,
    "original": "Initialisierung dauert länger als erwartet...",
    "suggested_key": "uiInitialisierungDauertLänger",
    "context": "border: Border.all(color: Colors.orange.withOpacity(0.5)),\n                ),\n                child: const Text(\n                  'Initialisierung dauert länger als erwartet...',\n                  style: TextStyle(\n                    fontSize: 12,\n                    color: Colors.orange,",
    "category": "ui",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\splash_screen.dart",
    "line": 324,
    "column": 39,
    "original": "Überspringen",
    "suggested_key": "uiÜberspringen",
    "context": "_isInitialized = true;\n                      });\n                    },\n                    child: const Text('Überspringen'),\n                  ),\n                ],\n              ),",
    "category": "ui",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\user_info_widget.dart",
    "line": 179,
    "column": 37,
    "original": "Klicken für Details",
    "suggested_key": "uiKlickenFürDetails",
    "context": "),\n                                if (!_isExpanded)\n                                  Text(\n                                    'Klicken für Details',\n                                    style: TextStyle(\n                                      color: Colors.grey[400],\n                                      fontSize: 12,",
    "category": "ui",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\models\\world.dart",
    "line": 29,
    "column": 23,
    "original": "],\n      status: WorldStatus.values.firstWhere(\n        (e) => e.toString().split(",
    "suggested_key": "worldStatusWorldstatusvaluesfirstwhereE",
    "context": "factory World.fromJson(Map<String, dynamic> json) {\n    return World(\n      id: json['id'],\n      name: json['name'],\n      status: WorldStatus.values.firstWhere(\n        (e) => e.toString().split('.').last == json['status'],\n        orElse: () => WorldStatus.upcoming,",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\models\\world.dart",
    "line": 31,
    "column": 60,
    "original": "],\n        orElse: () => WorldStatus.upcoming,\n      ),\n      createdAt: DateTime.parse(json[",
    "suggested_key": "worldOrelseWorldstatusupcomingCreatedat",
    "context": "id: json['id'],\n      name: json['name'],\n      status: WorldStatus.values.firstWhere(\n        (e) => e.toString().split('.').last == json['status'],\n        orElse: () => WorldStatus.upcoming,\n      ),\n      createdAt: DateTime.parse(json['createdAt']),",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\models\\world.dart",
    "line": 34,
    "column": 48,
    "original": "]),\n      startsAt: DateTime.parse(json[",
    "suggested_key": "worldStartsatDatetimeparsejson",
    "context": "(e) => e.toString().split('.').last == json['status'],\n        orElse: () => WorldStatus.upcoming,\n      ),\n      createdAt: DateTime.parse(json['createdAt']),\n      startsAt: DateTime.parse(json['startsAt']),\n      endsAt: json['endsAt'] != null ? DateTime.parse(json['endsAt']) : null,\n    );",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\models\\world.dart",
    "line": 35,
    "column": 46,
    "original": "]),\n      endsAt: json[",
    "suggested_key": "worldEndsatJson",
    "context": "orElse: () => WorldStatus.upcoming,\n      ),\n      createdAt: DateTime.parse(json['createdAt']),\n      startsAt: DateTime.parse(json['startsAt']),\n      endsAt: json['endsAt'] != null ? DateTime.parse(json['endsAt']) : null,\n    );\n  }",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\models\\world.dart",
    "line": 69,
    "column": 24,
    "original": "; // Orange\n      case WorldStatus.open:\n        return ",
    "suggested_key": "worldOrangeCaseWorldstatusopen",
    "context": "String get statusColor {\n    switch (status) {\n      case WorldStatus.upcoming:\n        return '#FFA500'; // Orange\n      case WorldStatus.open:\n        return '#4CAF50'; // Green\n      case WorldStatus.running:",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\models\\world.dart",
    "line": 71,
    "column": 24,
    "original": "; // Green\n      case WorldStatus.running:\n        return ",
    "suggested_key": "worldGreenCaseWorldstatusrunning",
    "context": "case WorldStatus.upcoming:\n        return '#FFA500'; // Orange\n      case WorldStatus.open:\n        return '#4CAF50'; // Green\n      case WorldStatus.running:\n        return '#2196F3'; // Blue\n      case WorldStatus.closed:",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 191,
    "column": 71,
    "original": ");\n      \n      if (response.statusCode == 200) {\n        final List<dynamic> invitesJson = jsonDecode(response.body);\n        return invitesJson.map((json) => Invite.fromJson(json as Map<String, dynamic>)).toList();\n      } else {\n        throw Exception(",
    "suggested_key": "worldIfResponsestatuscode200",
    "context": "Future<List<Invite>> getInvites(int worldId) async {\n    try {\n      final response = await _apiService.get('/worlds/$worldId/invites');\n      \n      if (response.statusCode == 200) {\n        final List<dynamic> invitesJson = jsonDecode(response.body);",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 223,
    "column": 17,
    "original": ": token,\n        };\n        final response = await _apiService.deleteWithBody(",
    "suggested_key": "worldTokenFinalResponse",
    "context": "try {\n      if (token != null) {\n        final data = <String, dynamic>{\n          'token': token,\n        };\n        final response = await _apiService.deleteWithBody('/worlds/$worldId/invites/$inviteId', data);\n        return response.statusCode == 200;",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 225,
    "column": 94,
    "original": ", data);\n        return response.statusCode == 200;\n      } else {\n        final response = await _apiService.delete(",
    "suggested_key": "worldDataReturnResponsestatuscode",
    "context": "final data = <String, dynamic>{\n          'token': token,\n        };\n        final response = await _apiService.deleteWithBody('/worlds/$worldId/invites/$inviteId', data);\n        return response.statusCode == 200;\n      } else {\n        final response = await _apiService.delete('/worlds/$worldId/invites/$inviteId');",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 1,
    "column": 8,
    "original": "dart:convert",
    "suggested_key": "worldDartconvert",
    "context": "import 'dart:convert';\nimport 'dart:io';\nimport 'package:http/http.dart' as http;\nimport '../models/world.dart';",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 137,
    "column": 54,
    "original": ");\n      \n      if (response.statusCode == 200) {\n        final List<dynamic> worldsJson = jsonDecode(response.body);\n        return worldsJson.map((json) => World.fromJson(json)).toList();\n      } else {\n        throw Exception(",
    "suggested_key": "worldIfResponsestatuscode200",
    "context": "Future<List<World>> getWorlds() async {\n    try {\n      final response = await _apiService.get('/worlds');\n      \n      if (response.statusCode == 200) {\n        final List<dynamic> worldsJson = jsonDecode(response.body);",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 161,
    "column": 63,
    "original": ");\n      \n      if (response.statusCode == 200) {\n        final worldJson = jsonDecode(response.body);\n        return World.fromJson(worldJson);\n      } else {\n        throw Exception(",
    "suggested_key": "worldIfResponsestatuscode200",
    "context": "Future<World> getWorld(int worldId) async {\n    try {\n      final response = await _apiService.get('/worlds/$worldId');\n      \n      if (response.statusCode == 200) {\n        final worldJson = jsonDecode(response.body);",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 185,
    "column": 69,
    "original": ", {});\n      \n      if (response.statusCode == 200) {\n        final responseData = jsonDecode(response.body);\n        return responseData[",
    "suggested_key": "worldIfResponsestatuscode200",
    "context": "Future<bool> joinWorld(int worldId) async {\n    try {\n      final response = await _apiService.post('/worlds/$worldId/join', {});\n      \n      if (response.statusCode == 200) {\n        final responseData = jsonDecode(response.body);",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 342,
    "column": 74,
    "original": ");\n      \n      return response.statusCode == 200;\n    } catch (e) {\n      // 404 means user is not in this world, which is normal\n      // Don",
    "suggested_key": "worldReturnResponsestatuscode200",
    "context": "Future<bool> isPlayerInWorld(int worldId) async {\n    try {\n      final response = await _apiService.get('/worlds/$worldId/players/me');\n      \n      return response.statusCode == 200;\n    } catch (e) {",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 411,
    "column": 36,
    "original": "];\n        }\n      }\n      \n      // Fehlerbehandlung für spezifische HTTP-Status-Codes\n      if (response.statusCode == 409) {\n        AppLogger.app.w(",
    "suggested_key": "worldFehlerbehandlungFürSpezifische",
    "context": "'worldId': responseData['data']['world']?['id'],\n            'worldName': responseData['data']['world']?['name']\n          });\n          return responseData['data'];\n        }\n      }",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 133,
    "column": 40,
    "original": ");\n          }\n        }\n      }\n    } catch (e) {\n      AppLogger.logError(",
    "suggested_key": "worldCatchEApploggerlogerror",
    "context": "context.goNamed('world-join-by-token', pathParameters: {'token': _inviteToken!});\n          } else {\n            // Standard-Redirect zu Welten-Liste\n            context.goNamed('world-list');\n          }\n        }\n      }",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 225,
    "column": 63,
    "original": ",\n                                    style: Theme.of(context).textTheme.headlineMedium?.copyWith(\n                                      color: Colors.white,\n                                      fontWeight: FontWeight.bold,\n                                      fontSize: 24,\n                                    ),\n                                  ),\n                                  const SizedBox(height: 8),\n                                  Text(\n                                    ",
    "suggested_key": "worldStyleThemeofcontexttextthemeheadlinemediumcopywithColor",
    "context": "),\n                                  const SizedBox(height: 20),\n                                  Text(\n                                    'Willkommen bei Weltenwind',\n                                    style: Theme.of(context).textTheme.headlineMedium?.copyWith(\n                                      color: Colors.white,\n                                      fontWeight: FontWeight.bold,",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 234,
    "column": 81,
    "original": ",\n                                    style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                                      color: Colors.grey[300],\n                                      fontSize: 16,\n                                    ),\n                                    textAlign: TextAlign.center,\n                                  ),\n                                  const SizedBox(height: 32),\n                                  \n                                  // Username field with better validation\n                                  TextFormField(\n                                    controller: _usernameController,\n                                    style: const TextStyle(color: Colors.white),\n                                    autofillHints: const [AutofillHints.username],\n                                    textInputAction: TextInputAction.next,\n                                    onChanged: (_) {\n                                      if (!_hasInteractedWithUsername) {\n                                        setState(() {\n                                          _hasInteractedWithUsername = true;\n                                        });\n                                      }\n                                    },\n                                    decoration: InputDecoration(\n                                      labelText: ",
    "suggested_key": "worldStyleThemeofcontexttextthemebodylargecopywithColor",
    "context": "),\n                                  const SizedBox(height: 8),\n                                  Text(\n                                    'Melde dich an, um deine Welten zu verwalten',\n                                    style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                                      color: Colors.grey[300],\n                                      fontSize: 16,",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 160,
    "column": 51,
    "original": ", pathParameters: {",
    "suggested_key": "worldPathparameters",
    "context": "await Future.delayed(const Duration(milliseconds: 500));\n            \n            if (mounted) {\n              context.goNamed('world-join-by-token', pathParameters: {'token': _inviteToken!});\n            }\n          } else {\n            // Standard-Redirect zu Welten-Liste",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 160,
    "column": 77,
    "original": ": _inviteToken!});\n            }\n          } else {\n            // Standard-Redirect zu Welten-Liste\n            ScaffoldMessenger.of(context).showSnackBar(\n              const SnackBar(\n                content: Text(",
    "suggested_key": "world_invitetokenElseStandardredirect",
    "context": "await Future.delayed(const Duration(milliseconds: 500));\n            \n            if (mounted) {\n              context.goNamed('world-join-by-token', pathParameters: {'token': _inviteToken!});\n            }\n          } else {\n            // Standard-Redirect zu Welten-Liste",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 166,
    "column": 85,
    "original": "),\n                backgroundColor: Colors.green,\n                duration: Duration(seconds: 2),\n              ),\n            );\n            \n            context.goNamed(",
    "suggested_key": "worldBackgroundcolorColorsgreenDuration",
    "context": "// Standard-Redirect zu Welten-Liste\n            ScaffoldMessenger.of(context).showSnackBar(\n              const SnackBar(\n                content: Text('Registrierung erfolgreich! Willkommen bei Weltenwind!'),\n                backgroundColor: Colors.green,\n                duration: Duration(seconds: 2),\n              ),",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 172,
    "column": 40,
    "original": ");\n          }\n        }\n      }\n    } catch (e) {\n      AppLogger.logError(",
    "suggested_key": "worldCatchEApploggerlogerror",
    "context": "),\n            );\n            \n            context.goNamed('world-list');\n          }\n        }\n      }",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 262,
    "column": 66,
    "original": ",\n                              style: Theme.of(context).textTheme.bodyMedium?.copyWith(\n                                color: Colors.grey[300],\n                                fontSize: 16,\n                              ),\n                              textAlign: TextAlign.center,\n                            ),\n                            const SizedBox(height: 32),\n\n                            // Username field\n                            TextFormField(\n                              controller: _usernameController,\n                              style: const TextStyle(color: Colors.white),\n                              decoration: InputDecoration(\n                                labelText: ",
    "suggested_key": "worldStyleThemeofcontexttextthemebodymediumcopywithColor",
    "context": "),\n                            const SizedBox(height: 8),\n                            Text(\n                              'Erstelle dein Konto für Weltenwind',\n                              style: Theme.of(context).textTheme.bodyMedium?.copyWith(\n                                color: Colors.grey[300],\n                                fontSize: 16,",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 1,
    "column": 8,
    "original": "package:flutter/material.dart",
    "suggested_key": "worldPackagefluttermaterialdart",
    "context": "import 'package:flutter/material.dart';\nimport 'package:flutter/foundation.dart';\nimport '../../../config/logger.dart';\nimport '../../../core/models/world.dart';",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 2,
    "column": 8,
    "original": "package:flutter/foundation.dart",
    "suggested_key": "worldPackageflutterfoundationdart",
    "context": "import 'package:flutter/material.dart';\nimport 'package:flutter/foundation.dart';\nimport '../../../config/logger.dart';\nimport '../../../core/models/world.dart';\nimport '../../../core/services/world_service.dart';",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 26,
    "column": 30,
    "original": ";\n  bool _sortAscending = true;\n\n  // Getters\n  List<World> get worlds => _worlds;\n  List<World> get filteredWorlds => _filteredWorlds;\n  Map<int, int> get playerCounts => _playerCounts;\n  Map<int, bool> get preRegisteredWorlds => _preRegisteredWorlds;\n  Map<int, bool> get joinedWorlds => _joinedWorlds;\n  bool get isLoading => _isLoading;\n  String? get error => _error;\n  WorldStatus? get statusFilter => _statusFilter;\n  WorldCategory? get categoryFilter => _categoryFilter;\n  String get sortBy => _sortBy;\n  bool get sortAscending => _sortAscending;\n\n  WorldListController({\n    required WorldService worldService,\n    required InviteService inviteService,\n  })  : _worldService = worldService,\n        _inviteService = inviteService;\n\n  Future<void> loadWorlds() async {\n    _setLoading(true);\n    _error = null;\n\n    try {\n      _worlds = await _worldService.getWorlds();\n      await _loadPlayerCounts();\n      await _checkPlayerStatuses();\n      _applyFiltersAndSorting();\n    } catch (e) {\n      _error = ",
    "suggested_key": "worldBool_sortascendingTrue",
    "context": "// Filters & Sorting\n  WorldStatus? _statusFilter;\n  WorldCategory? _categoryFilter;\n  String _sortBy = 'startDate';\n  bool _sortAscending = true;\n\n  // Getters",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 168,
    "column": 47,
    "original": ")) {\n      return WorldCategory.pvp;\n    } else if (world.name.toLowerCase().contains(",
    "suggested_key": "worldReturnWorldcategorypvpElse",
    "context": "WorldCategory _getWorldCategory(World world) {\n    // This is a placeholder logic - you might want to adjust based on your needs\n    if (world.name.toLowerCase().contains('pvp')) {\n      return WorldCategory.pvp;\n    } else if (world.name.toLowerCase().contains('event')) {\n      return WorldCategory.event;",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 170,
    "column": 56,
    "original": ")) {\n      return WorldCategory.event;\n    } else if (world.name.toLowerCase().contains(",
    "suggested_key": "worldReturnWorldcategoryeventElse",
    "context": "// This is a placeholder logic - you might want to adjust based on your needs\n    if (world.name.toLowerCase().contains('pvp')) {\n      return WorldCategory.pvp;\n    } else if (world.name.toLowerCase().contains('event')) {\n      return WorldCategory.event;\n    } else if (world.name.toLowerCase().contains('experimental') || \n               world.name.toLowerCase().contains('test')) {",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 172,
    "column": 63,
    "original": ") || \n               world.name.toLowerCase().contains(",
    "suggested_key": "worldWorldnametolowercasecontains",
    "context": "return WorldCategory.pvp;\n    } else if (world.name.toLowerCase().contains('event')) {\n      return WorldCategory.event;\n    } else if (world.name.toLowerCase().contains('experimental') || \n               world.name.toLowerCase().contains('test')) {\n      return WorldCategory.experimental;\n    }",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 173,
    "column": 55,
    "original": ")) {\n      return WorldCategory.experimental;\n    }\n    return WorldCategory.classic;\n  }\n\n  Future<void> joinWorld(World world) async {\n    try {\n      await _worldService.joinWorld(world.id);\n      _joinedWorlds[world.id] = true;\n      \n      // Update player count\n      final currentCount = _playerCounts[world.id] ?? 0;\n      _playerCounts[world.id] = currentCount + 1;\n      \n      notifyListeners();\n    } catch (e) {\n      _error = ",
    "suggested_key": "worldReturnWorldcategoryexperimentalReturn",
    "context": "} else if (world.name.toLowerCase().contains('event')) {\n      return WorldCategory.event;\n    } else if (world.name.toLowerCase().contains('experimental') || \n               world.name.toLowerCase().contains('test')) {\n      return WorldCategory.experimental;\n    }\n    return WorldCategory.classic;",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_card.dart",
    "line": 1,
    "column": 8,
    "original": "package:flutter/material.dart",
    "suggested_key": "worldPackagefluttermaterialdart",
    "context": "import 'package:flutter/material.dart';\nimport '../../../core/models/world.dart';\nimport '../../../theme/app_theme.dart';",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_card.dart",
    "line": 3,
    "column": 38,
    "original": ";\n\nenum WorldCategory {\n  classic,\n  pvp,\n  event,\n  experimental,\n}\n\nclass WorldCard extends StatelessWidget {\n  final World world;\n  final int playerCount;\n  final WorldCategory category;\n  final bool isPreRegistered;\n  final bool isJoined;\n  final VoidCallback? onJoin;\n  final VoidCallback? onLeave;\n  final VoidCallback? onPlay;\n  final VoidCallback? onPreRegister;\n  final VoidCallback? onCancelPreRegistration;\n  final VoidCallback? onInvite;\n  final VoidCallback? onTap;\n\n  const WorldCard({\n    super.key,\n    required this.world,\n    required this.playerCount,\n    required this.category,\n    this.isPreRegistered = false,\n    this.isJoined = false,\n    this.onJoin,\n    this.onLeave,\n    this.onPlay,\n    this.onPreRegister,\n    this.onCancelPreRegistration,\n    this.onInvite,\n    this.onTap,\n  });\n\n  Color get categoryColor {\n    switch (category) {\n      case WorldCategory.classic:\n        return Colors.blue;\n      case WorldCategory.pvp:\n        return Colors.red;\n      case WorldCategory.event:\n        return Colors.purple;\n      case WorldCategory.experimental:\n        return Colors.orange;\n    }\n  }\n\n  String get categoryLabel {\n    switch (category) {\n      case WorldCategory.classic:\n        return ",
    "suggested_key": "worldEnumWorldcategoryClassic",
    "context": "import 'package:flutter/material.dart';\nimport '../../../core/models/world.dart';\nimport '../../../theme/app_theme.dart';\n\nenum WorldCategory {\n  classic,",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_card.dart",
    "line": 58,
    "column": 24,
    "original": ";\n      case WorldCategory.pvp:\n        return ",
    "suggested_key": "worldCaseWorldcategorypvpReturn",
    "context": "String get categoryLabel {\n    switch (category) {\n      case WorldCategory.classic:\n        return 'Classic';\n      case WorldCategory.pvp:\n        return 'PvP';\n      case WorldCategory.event:",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_card.dart",
    "line": 60,
    "column": 20,
    "original": ";\n      case WorldCategory.event:\n        return ",
    "suggested_key": "worldCaseWorldcategoryeventReturn",
    "context": "case WorldCategory.classic:\n        return 'Classic';\n      case WorldCategory.pvp:\n        return 'PvP';\n      case WorldCategory.event:\n        return 'Event';\n      case WorldCategory.experimental:",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_card.dart",
    "line": 62,
    "column": 22,
    "original": ";\n      case WorldCategory.experimental:\n        return ",
    "suggested_key": "worldCaseWorldcategoryexperimentalReturn",
    "context": "case WorldCategory.pvp:\n        return 'PvP';\n      case WorldCategory.event:\n        return 'Event';\n      case WorldCategory.experimental:\n        return 'Experimental';\n    }",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_card.dart",
    "line": 64,
    "column": 29,
    "original": ";\n    }\n  }\n\n  IconData get categoryIcon {\n    switch (category) {\n      case WorldCategory.classic:\n        return Icons.castle;\n      case WorldCategory.pvp:\n        return Icons.sports_kabaddi;\n      case WorldCategory.event:\n        return Icons.celebration;\n      case WorldCategory.experimental:\n        return Icons.science;\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return GestureDetector(\n      onTap: onTap,\n      child: Container(\n        margin: const EdgeInsets.only(bottom: 16),\n        decoration: BoxDecoration(\n          gradient: const LinearGradient(\n            begin: Alignment.topLeft,\n            end: Alignment.bottomRight,\n            colors: [\n              Color(0xFF1E1E1E),\n              Color(0xFF2A2A2A),\n            ],\n          ),\n          borderRadius: BorderRadius.circular(16),\n          border: Border.all(\n            color: world.isActive\n                ? categoryColor.withOpacity(0.5)\n                : Colors.grey.withOpacity(0.3),\n            width: world.isActive ? 2 : 1,\n          ),\n          boxShadow: world.isActive\n              ? [\n                  BoxShadow(\n                    color: categoryColor.withOpacity(0.3),\n                    blurRadius: 12,\n                    offset: const Offset(0, 4),\n                  ),\n                ]\n              : [],\n        ),\n        child: ClipRRect(\n          borderRadius: BorderRadius.circular(16),\n          child: Column(\n            children: [\n              _buildHeader(),\n              _buildContent(),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n\n  Widget _buildHeader() {\n    return Container(\n      padding: const EdgeInsets.all(16),\n      decoration: BoxDecoration(\n        gradient: LinearGradient(\n          begin: Alignment.topLeft,\n          end: Alignment.bottomRight,\n          colors: [\n            categoryColor.withOpacity(0.2),\n            categoryColor.withOpacity(0.1),\n          ],\n        ),\n      ),\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          Row(\n            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n            children: [\n              _buildCategoryBadge(),\n              _buildStatusBadge(),\n            ],\n          ),\n          const SizedBox(height: 16),\n          Row(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              _buildWorldIcon(),\n              const SizedBox(width: 16),\n              Expanded(\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    Text(\n                      world.name,\n                      style: const TextStyle(\n                        fontSize: 20,\n                        fontWeight: FontWeight.bold,\n                        color: Colors.white,\n                      ),\n                    ),\n                    const SizedBox(height: 4),\n                    Text(\n                      ",
    "suggested_key": "worldIcondataGetCategoryicon",
    "context": "case WorldCategory.event:\n        return 'Event';\n      case WorldCategory.experimental:\n        return 'Experimental';\n    }\n  }",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_card.dart",
    "line": 169,
    "column": 60,
    "original": ",\n                      style: TextStyle(\n                        fontSize: 14,\n                        color: Colors.grey[300],\n                      ),\n                      maxLines: 2,\n                      overflow: TextOverflow.ellipsis,\n                    ),\n                  ],\n                ),\n              ),\n            ],\n          ),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildWorldIcon() {\n    return Container(\n      width: 48,\n      height: 48,\n      decoration: BoxDecoration(\n        color: categoryColor.withOpacity(0.2),\n        borderRadius: BorderRadius.circular(12),\n        border: Border.all(\n          color: categoryColor.withOpacity(0.5),\n        ),\n      ),\n      child: Icon(\n        Icons.public,\n        color: categoryColor,\n        size: 24,\n      ),\n    );\n  }\n\n  Widget _buildCategoryBadge() {\n    return Container(\n      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),\n      decoration: BoxDecoration(\n        color: categoryColor.withOpacity(0.3),\n        borderRadius: BorderRadius.circular(20),\n        border: Border.all(\n          color: categoryColor.withOpacity(0.5),\n        ),\n      ),\n      child: Row(\n        mainAxisSize: MainAxisSize.min,\n        children: [\n          Icon(\n            categoryIcon,\n            size: 16,\n            color: categoryColor,\n          ),\n          const SizedBox(width: 6),\n          Text(\n            categoryLabel,\n            style: TextStyle(\n              color: categoryColor,\n              fontWeight: FontWeight.bold,\n              fontSize: 12,\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildStatusBadge() {\n    Color statusColor;\n    IconData statusIcon;\n    \n    switch (world.status) {\n      case WorldStatus.upcoming:\n        statusColor = Colors.orange;\n        statusIcon = Icons.schedule;\n        break;\n      case WorldStatus.open:\n        statusColor = Colors.green;\n        statusIcon = Icons.lock_open;\n        break;\n      case WorldStatus.running:\n        statusColor = Colors.blue;\n        statusIcon = Icons.play_circle;\n        break;\n      case WorldStatus.closed:\n        statusColor = Colors.red;\n        statusIcon = Icons.lock;\n        break;\n      case WorldStatus.archived:\n        statusColor = Colors.grey;\n        statusIcon = Icons.archive;\n        break;\n    }\n    \n    return Container(\n      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),\n      decoration: BoxDecoration(\n        color: statusColor.withOpacity(0.2),\n        borderRadius: BorderRadius.circular(20),\n        border: Border.all(\n          color: statusColor.withOpacity(0.5),\n        ),\n      ),\n      child: Row(\n        mainAxisSize: MainAxisSize.min,\n        children: [\n          Icon(\n            statusIcon,\n            size: 16,\n            color: statusColor,\n          ),\n          const SizedBox(width: 6),\n          Text(\n            world.statusText,\n            style: TextStyle(\n              color: statusColor,\n              fontWeight: FontWeight.bold,\n              fontSize: 12,\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildContent() {\n    return Container(\n      padding: const EdgeInsets.all(16),\n      child: Column(\n        children: [\n          _buildPlayerInfo(),\n          const SizedBox(height: 16),\n          _buildDateInfo(),\n          const SizedBox(height: 16),\n          _buildActionButtons(),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildPlayerInfo() {\n    return Row(\n      children: [\n        Icon(\n          Icons.people,\n          size: 16,\n          color: Colors.grey[400],\n        ),\n        const SizedBox(width: 4),\n        Text(\n          ",
    "suggested_key": "worldStyleTextstyleFontsize",
    "context": "),\n                    const SizedBox(height: 4),\n                    Text(\n                      'Eine spannende Welt voller Abenteuer',\n                      style: TextStyle(\n                        fontSize: 14,\n                        color: Colors.grey[300],",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_card.dart",
    "line": 321,
    "column": 38,
    "original": ",\n          style: TextStyle(\n            color: Colors.grey[400],\n            fontSize: 14,\n          ),\n        ),\n      ],\n    );\n  }\n\n  Widget _buildDateInfo() {\n    return Column(\n      crossAxisAlignment: CrossAxisAlignment.start,\n      children: [\n        Row(\n          children: [\n            Icon(\n              Icons.calendar_today,\n              size: 16,\n              color: Colors.grey[400],\n            ),\n            const SizedBox(width: 4),\n            Text(\n              ",
    "suggested_key": "worldStyleTextstyleColor",
    "context": "),\n        const SizedBox(width: 4),\n        Text(\n          '$playerCount Spieler aktiv',\n          style: TextStyle(\n            color: Colors.grey[400],\n            fontSize: 14,",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_card.dart",
    "line": 344,
    "column": 91,
    "original": ",\n              style: TextStyle(\n                color: Colors.grey[400],\n                fontSize: 14,\n              ),\n            ),\n          ],\n        ),\n        if (world.endsAt != null) ...[\n          Builder(\n            builder: (context) {\n              final endDate = world.endsAt!;\n              return Column(\n                children: [\n                  const SizedBox(height: 4),\n                  Row(\n                    children: [\n                      Icon(\n                        Icons.event_busy,\n                        size: 16,\n                        color: Colors.grey[400],\n                      ),\n                      const SizedBox(width: 4),\n                      Text(\n                        ",
    "suggested_key": "worldStyleTextstyleColor",
    "context": "),\n            const SizedBox(width: 4),\n            Text(\n              'Start: ${world.startsAt.day}.${world.startsAt.month}.${world.startsAt.year}',\n              style: TextStyle(\n                color: Colors.grey[400],\n                fontSize: 14,",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_card.dart",
    "line": 462,
    "column": 35,
    "original": ",\n      ));\n    }\n    \n    // Wenn keine Buttons verfügbar sind\n    if (buttons.isEmpty) {\n      return _buildStatusBadge();\n    }\n    \n    return Wrap(\n      spacing: 8,\n      runSpacing: 4,\n      children: buttons,\n    );\n  }\n  \n  Widget _buildButton({\n    required VoidCallback? onPressed,\n    required IconData icon,\n    required String? label,\n    required Color? color,\n    bool iconOnly = false,\n    String? tooltip,\n  }) {\n    if (onPressed == null) return const SizedBox.shrink();\n    \n    final button = iconOnly\n        ? ElevatedButton(\n            onPressed: onPressed,\n            style: ElevatedButton.styleFrom(\n              backgroundColor: color,\n              foregroundColor: Colors.white,\n              padding: const EdgeInsets.all(8),\n              shape: RoundedRectangleBorder(\n                borderRadius: BorderRadius.circular(8),\n              ),\n            ),\n            child: Icon(icon, size: 16),\n          )\n        : ElevatedButton.icon(\n            onPressed: onPressed,\n            icon: Icon(icon, size: 16),\n            label: Text(label ?? ",
    "suggested_key": "worldWennKeineButtons",
    "context": "label: null,\n        color: Colors.purple[600],\n        iconOnly: true,\n        tooltip: 'Spieler einladen',\n      ));\n    }",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_filters.dart",
    "line": 1,
    "column": 8,
    "original": "package:flutter/material.dart",
    "suggested_key": "worldPackagefluttermaterialdart",
    "context": "import 'package:flutter/material.dart';\nimport '../../../core/models/world.dart';\nimport './world_card.dart';",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_filters.dart",
    "line": 3,
    "column": 26,
    "original": ";\n\nclass WorldFilters extends StatelessWidget {\n  final WorldStatus? statusFilter;\n  final WorldCategory? categoryFilter;\n  final String sortBy;\n  final bool sortAscending;\n  final ValueChanged<WorldStatus?> onStatusChanged;\n  final ValueChanged<WorldCategory?> onCategoryChanged;\n  final ValueChanged<String> onSortByChanged;\n  final VoidCallback onSortOrderChanged;\n  final VoidCallback onResetFilters;\n\n  const WorldFilters({\n    super.key,\n    this.statusFilter,\n    this.categoryFilter,\n    required this.sortBy,\n    required this.sortAscending,\n    required this.onStatusChanged,\n    required this.onCategoryChanged,\n    required this.onSortByChanged,\n    required this.onSortOrderChanged,\n    required this.onResetFilters,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n      crossAxisAlignment: CrossAxisAlignment.start,\n      children: [\n        // Status Filter\n        _buildStatusFilter(),\n        const SizedBox(height: 12),\n        \n        // Category Filter\n        _buildCategoryFilter(),\n        const SizedBox(height: 12),\n        \n        // Sort Options\n        _buildSortOptions(),\n        const SizedBox(height: 12),\n        \n        // Active Filters & Reset\n        if (statusFilter != null || categoryFilter != null)\n          _buildActiveFilters(),\n      ],\n    );\n  }\n\n  Widget _buildStatusFilter() {\n    return SingleChildScrollView(\n      scrollDirection: Axis.horizontal,\n      padding: const EdgeInsets.symmetric(horizontal: 16),\n      child: Row(\n        children: [\n          Text(\n            ",
    "suggested_key": "worldClassWorldfiltersExtends",
    "context": "import 'package:flutter/material.dart';\nimport '../../../core/models/world.dart';\nimport './world_card.dart';\n\nclass WorldFilters extends StatelessWidget {\n  final WorldStatus? statusFilter;",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_filters.dart",
    "line": 196,
    "column": 38,
    "original": ",\n                  child: Text(",
    "suggested_key": "worldChildText",
    "context": "child: Text('Status'),\n                ),\n                DropdownMenuItem(\n                  value: 'playerCount',\n                  child: Text('Spieleranzahl'),\n                ),\n              ],",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_filters.dart",
    "line": 197,
    "column": 45,
    "original": "),\n                ),\n              ],\n              onChanged: (value) {\n                if (value != null) {\n                  onSortByChanged(value);\n                }\n              },\n            ),\n          ),\n          const SizedBox(width: 8),\n          Container(\n            height: 40,\n            decoration: BoxDecoration(\n              color: const Color(0xFF2D2D2D),\n              borderRadius: BorderRadius.circular(8),\n              border: Border.all(color: Colors.grey[600]!),\n            ),\n            child: IconButton(\n              icon: Icon(\n                sortAscending ? Icons.arrow_upward : Icons.arrow_downward,\n                color: Colors.grey[300],\n                size: 20,\n              ),\n              onPressed: onSortOrderChanged,\n              tooltip: sortAscending ? ",
    "suggested_key": "worldOnchangedValueIf",
    "context": "),\n                DropdownMenuItem(\n                  value: 'playerCount',\n                  child: Text('Spieleranzahl'),\n                ),\n              ],\n              onChanged: (value) {",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_filters.dart",
    "line": 347,
    "column": 24,
    "original": ";\n      case WorldCategory.pvp:\n        return ",
    "suggested_key": "worldCaseWorldcategorypvpReturn",
    "context": "String _getCategoryLabel(WorldCategory category) {\n    switch (category) {\n      case WorldCategory.classic:\n        return 'Classic';\n      case WorldCategory.pvp:\n        return 'PvP';\n      case WorldCategory.event:",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_filters.dart",
    "line": 349,
    "column": 20,
    "original": ";\n      case WorldCategory.event:\n        return ",
    "suggested_key": "worldCaseWorldcategoryeventReturn",
    "context": "case WorldCategory.classic:\n        return 'Classic';\n      case WorldCategory.pvp:\n        return 'PvP';\n      case WorldCategory.event:\n        return 'Event';\n      case WorldCategory.experimental:",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_filters.dart",
    "line": 351,
    "column": 22,
    "original": ";\n      case WorldCategory.experimental:\n        return ",
    "suggested_key": "worldCaseWorldcategoryexperimentalReturn",
    "context": "case WorldCategory.pvp:\n        return 'PvP';\n      case WorldCategory.event:\n        return 'Event';\n      case WorldCategory.experimental:\n        return 'Experimental';\n    }",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_list_header.dart",
    "line": 1,
    "column": 8,
    "original": "package:flutter/material.dart",
    "suggested_key": "worldPackagefluttermaterialdart",
    "context": "import 'package:flutter/material.dart';\nimport '../../../theme/app_theme.dart';\n\nclass WorldListHeader extends StatelessWidget {",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_list_header.dart",
    "line": 2,
    "column": 38,
    "original": ";\n\nclass WorldListHeader extends StatelessWidget {\n  final VoidCallback? onRefresh;\n  final VoidCallback? onCreateWorld;\n  final bool hasCreatePermission;\n\n  const WorldListHeader({\n    super.key,\n    this.onRefresh,\n    this.onCreateWorld,\n    this.hasCreatePermission = false,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n      children: [\n        // Logo\n        Container(\n          width: 80,\n          height: 80,\n          decoration: BoxDecoration(\n            color: AppTheme.primaryColor.withOpacity(0.2),\n            borderRadius: BorderRadius.circular(20),\n            border: Border.all(\n              color: AppTheme.primaryColor.withOpacity(0.5),\n              width: 2,\n            ),\n          ),\n          child: const Icon(\n            Icons.public,\n            size: 40,\n            color: AppTheme.primaryColor,\n          ),\n        ),\n        const SizedBox(height: 24),\n        \n        // Title\n        Text(\n          ",
    "suggested_key": "worldClassWorldlistheaderExtends",
    "context": "import 'package:flutter/material.dart';\nimport '../../../theme/app_theme.dart';\n\nclass WorldListHeader extends StatelessWidget {\n  final VoidCallback? onRefresh;",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_list_header.dart",
    "line": 42,
    "column": 22,
    "original": ",\n          style: Theme.of(context).textTheme.headlineLarge?.copyWith(\n            color: Colors.white,\n            fontWeight: FontWeight.bold,\n            fontSize: 36,\n          ),\n        ),\n        const SizedBox(height: 8),\n        \n        // Subtitle\n        Text(\n          ",
    "suggested_key": "worldStyleThemeofcontexttextthemeheadlinelargecopywithColor",
    "context": "// Title\n        Text(\n          'Weltenwind',\n          style: Theme.of(context).textTheme.headlineLarge?.copyWith(\n            color: Colors.white,\n            fontWeight: FontWeight.bold,",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_list_header.dart",
    "line": 53,
    "column": 28,
    "original": ",\n          style: Theme.of(context).textTheme.titleMedium?.copyWith(\n            color: Colors.grey[300],\n            fontSize: 18,\n          ),\n          textAlign: TextAlign.center,\n        ),\n        const SizedBox(height: 24),\n        \n        // Action Buttons\n        _buildActionButtons(),\n      ],\n    );\n  }\n\n  Widget _buildActionButtons() {\n    final buttons = <Widget>[];\n\n    if (onRefresh != null) {\n      buttons.add(\n        ElevatedButton.icon(\n          onPressed: onRefresh,\n          icon: const Icon(Icons.refresh, size: 18),\n          label: const Text(",
    "suggested_key": "worldStyleThemeofcontexttextthemetitlemediumcopywithColor",
    "context": "// Subtitle\n        Text(\n          'Wähle deine Welt',\n          style: Theme.of(context).textTheme.titleMedium?.copyWith(\n            color: Colors.grey[300],\n            fontSize: 18,",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_list_states.dart",
    "line": 1,
    "column": 8,
    "original": "package:flutter/material.dart",
    "suggested_key": "worldPackagefluttermaterialdart",
    "context": "import 'package:flutter/material.dart';\nimport '../../../theme/app_theme.dart';\n\nclass WorldListLoadingState extends StatelessWidget {",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_list_states.dart",
    "line": 2,
    "column": 38,
    "original": ";\n\nclass WorldListLoadingState extends StatelessWidget {\n  const WorldListLoadingState({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const Center(\n      child: Column(\n        mainAxisAlignment: MainAxisAlignment.center,\n        children: [\n          CircularProgressIndicator(\n            valueColor: AlwaysStoppedAnimation<Color>(AppTheme.primaryColor),\n          ),\n          SizedBox(height: 16),\n          Text(\n            ",
    "suggested_key": "worldClassWorldlistloadingstateExtends",
    "context": "import 'package:flutter/material.dart';\nimport '../../../theme/app_theme.dart';\n\nclass WorldListLoadingState extends StatelessWidget {\n  const WorldListLoadingState({super.key});",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_list_states.dart",
    "line": 18,
    "column": 38,
    "original": ",\n            style: TextStyle(\n              color: Colors.grey,\n              fontSize: 16,\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n\nclass WorldListEmptyState extends StatelessWidget {\n  final VoidCallback? onRefresh;\n  final bool hasActiveFilters;\n\n  const WorldListEmptyState({\n    super.key,\n    this.onRefresh,\n    this.hasActiveFilters = false,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n      child: Column(\n        mainAxisAlignment: MainAxisAlignment.center,\n        children: [\n          Icon(\n            Icons.public_off,\n            size: 64,\n            color: Colors.grey[600],\n          ),\n          const SizedBox(height: 16),\n          Text(\n            hasActiveFilters\n                ? ",
    "suggested_key": "worldStyleTextstyleColor",
    "context": "),\n          SizedBox(height: 16),\n          Text(\n            'Welten werden geladen...',\n            style: TextStyle(\n              color: Colors.grey,\n              fontSize: 16,",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_list_states.dart",
    "line": 55,
    "column": 19,
    "original": "Noch keine Welten verfügbar",
    "suggested_key": "worldNochKeineWelten",
    "context": "Text(\n            hasActiveFilters\n                ? 'Keine Welten gefunden'\n                : 'Noch keine Welten verfügbar',\n            style: TextStyle(\n              fontSize: 18,\n              fontWeight: FontWeight.bold,",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_list_states.dart",
    "line": 66,
    "column": 19,
    "original": "Versuche die Filter anzupassen oder zurückzusetzen.",
    "suggested_key": "worldVersucheDieFilter",
    "context": "const SizedBox(height: 8),\n          Text(\n            hasActiveFilters\n                ? 'Versuche die Filter anzupassen oder zurückzusetzen.'\n                : 'Schaue später noch einmal vorbei oder erstelle eine neue Welt.',\n            style: TextStyle(\n              fontSize: 14,",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_list_states.dart",
    "line": 67,
    "column": 19,
    "original": "Schaue später noch einmal vorbei oder erstelle eine neue Welt.",
    "suggested_key": "worldSchaueSpäterNoch",
    "context": "Text(\n            hasActiveFilters\n                ? 'Versuche die Filter anzupassen oder zurückzusetzen.'\n                : 'Schaue später noch einmal vorbei oder erstelle eine neue Welt.',\n            style: TextStyle(\n              fontSize: 14,\n              color: Colors.grey[500],",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 210,
    "column": 45,
    "original": "]);\n    \n    // Invite-Details extrahieren\n    final inviteData = tokenData[",
    "suggested_key": "worldInvitedetailsExtrahierenFinal",
    "context": "}\n    \n    // World aus Token-Daten laden\n    _world = World.fromJson(tokenData['world']);\n    \n    // Invite-Details extrahieren\n    final inviteData = tokenData['invite'];",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 242,
    "column": 55,
    "original": ";\n    final worldStatus = _world?.status ?? WorldStatus.upcoming;\n    final isUpcoming = worldStatus == WorldStatus.upcoming;\n    \n    // User-Status analysieren\n    final userStatusData = tokenData[",
    "suggested_key": "worldFinalWorldstatus_worldstatus",
    "context": "isInviteValid = !isExpired && !isAccepted;\n    \n    // World-Details\n    final worldName = _world?.name ?? 'Unbekannte Welt';\n    final worldStatus = _world?.status ?? WorldStatus.upcoming;\n    final isUpcoming = worldStatus == WorldStatus.upcoming;",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 247,
    "column": 49,
    "original": "];\n    final status = userStatusData[",
    "suggested_key": "worldFinalStatusUserstatusdata",
    "context": "final isUpcoming = worldStatus == WorldStatus.upcoming;\n    \n    // User-Status analysieren\n    final userStatusData = tokenData['userStatus'];\n    final status = userStatusData['status'];\n    final requiresAction = userStatusData['requiresAction'];",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 281,
    "column": 118,
    "original": ";\n    \n    // Je nach Status unterschiedliche Logik\n    switch (status) {\n      case ",
    "suggested_key": "worldJeNachStatus",
    "context": "}\n    }\n    \n    final baseInfoText = 'Du wurdest von $inviterText eingeladen, der Welt \"$worldName\" $actionTypeText.$validityText';\n    \n    // Je nach Status unterschiedliche Logik\n    switch (status) {",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 384,
    "column": 26,
    "original": "Willkommen in der Welt \"${_world?.name}\"! Das Invite wurde automatisch akzeptiert.",
    "suggested_key": "worldWillkommenInDer",
    "context": "if (result != null) {\n        setState(() {\n          _isJoined = true;\n          _infoMessage = 'Willkommen in der Welt \"${_world?.name}\"! Das Invite wurde automatisch akzeptiert.';\n        });\n        \n        if (mounted) {",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 390,
    "column": 29,
    "original": "Erfolgreich der Welt \"${_world!.name}\" beigetreten!",
    "suggested_key": "worldErfolgreichDerWelt",
    "context": "if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Erfolgreich der Welt \"${_world!.name}\" beigetreten!'),\n              backgroundColor: Colors.green,\n              duration: const Duration(seconds: 3),\n            ),",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 402,
    "column": 26,
    "original": "Du bist bereits Mitglied dieser Welt \"${_world?.name}\"!",
    "suggested_key": "worldDuBistBereits",
    "context": "if (e.toString().contains('Invite bereits akzeptiert')) {\n        setState(() {\n          _isJoined = true;\n          _infoMessage = 'Du bist bereits Mitglied dieser Welt \"${_world?.name}\"!';\n        });\n        \n        if (mounted) {",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 408,
    "column": 29,
    "original": "Du bist bereits Mitglied der Welt \"${_world?.name}\"!",
    "suggested_key": "worldDuBistBereits",
    "context": "if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Du bist bereits Mitglied der Welt \"${_world?.name}\"!'),\n              backgroundColor: Colors.orange,\n              duration: const Duration(seconds: 3),\n            ),",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 439,
    "column": 25,
    "original": "🎫 Versuche Invite-Akzeptierung für World-Join",
    "suggested_key": "worldVersucheInviteakzeptierungFür",
    "context": "// **INVITE-TOKEN FLOW: Invite akzeptieren**\n      if (widget.inviteToken != null) {\n        AppLogger.app.i('🎫 Versuche Invite-Akzeptierung für World-Join');\n        final inviteResult = await _worldService.acceptInvite(widget.inviteToken!);\n        \n        if (inviteResult != null) {",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 463,
    "column": 15,
    "original": "Erfolgreich der Welt \"${_world!.name}\" beigetreten!",
    "suggested_key": "worldErfolgreichDerWelt",
    "context": "if (mounted) {\n          final message = widget.inviteToken != null \n            ? 'Einladung akzeptiert! Willkommen in der Welt \"${_world!.name}\"!'\n            : 'Erfolgreich der Welt \"${_world!.name}\" beigetreten!';\n            \n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 526,
    "column": 75,
    "original": "),\n              backgroundColor: Colors.green,\n            ),\n          );\n        }\n      } else {\n        setState(() {\n          _joinError = ",
    "suggested_key": "worldBackgroundcolorColorsgreenElse",
    "context": "if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Erfolgreich für ${world.name} vorregistriert!'),\n              backgroundColor: Colors.green,\n            ),\n          );",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 568,
    "column": 79,
    "original": "),\n              backgroundColor: Colors.orange,\n            ),\n          );\n        }\n      } else {\n        setState(() {\n          _joinError = ",
    "suggested_key": "worldBackgroundcolorColorsorangeElse",
    "context": "if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Vorregistrierung für ${world.name} zurückgezogen.'),\n              backgroundColor: Colors.orange,\n            ),\n          );",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 633,
    "column": 60,
    "original": "),\n            backgroundColor: Colors.orange,\n          ),\n        );\n      }\n    } catch (e) {\n      setState(() {\n        _joinError = e.toString().replaceAll(",
    "suggested_key": "worldBackgroundcolorColorsorangeCatch",
    "context": "if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text('Du hast ${world.name} verlassen.'),\n            backgroundColor: Colors.orange,\n          ),\n        );",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 655,
    "column": 37,
    "original": ", pathParameters: {",
    "suggested_key": "worldPathparameters",
    "context": "final world = _world;\n    if (world == null) return;\n    // Navigate directly to world dashboard for playing\n    context.goNamed('world-dashboard', pathParameters: {'id': world.id.toString()});\n  }\n\n  // Welt-Status bestimmen",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 655,
    "column": 60,
    "original": ": world.id.toString()});\n  }\n\n  // Welt-Status bestimmen\n  String _getWorldStatusText() {\n    final world = _world;\n    if (world == null) return ",
    "suggested_key": "worldWorldidtostringWeltstatusBestimmen",
    "context": "final world = _world;\n    if (world == null) return;\n    // Navigate directly to world dashboard for playing\n    context.goNamed('world-dashboard', pathParameters: {'id': world.id.toString()});\n  }\n\n  // Welt-Status bestimmen",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 661,
    "column": 41,
    "original": ";\n    return world.statusText;\n  }\n\n  // Welt-Status-Farbe\n  Color _getWorldStatusColor() {\n    final world = _world;\n    if (world == null) return Colors.grey;\n    \n    switch (world.status) {\n      case WorldStatus.upcoming:\n        return Colors.orange;\n      case WorldStatus.open:\n        return Colors.green;\n      case WorldStatus.running:\n        return Colors.blue;\n      case WorldStatus.closed:\n        return Colors.red;\n      case WorldStatus.archived:\n        return Colors.grey;\n    }\n  }\n\n  // Kann der Benutzer beitreten?\n  // Retry-Funktion\n  Future<void> _retry() async {\n    await _loadWorldData();\n  }\n\n  // Navigation zu Registration mit vorausgefüllter E-Mail\n  void _navigateToRegistration(String email) {\n    AppLogger.app.i(",
    "suggested_key": "worldReturnWorldstatustextWeltstatusfarbe",
    "context": "// Welt-Status bestimmen\n  String _getWorldStatusText() {\n    final world = _world;\n    if (world == null) return 'Unbekannt';\n    return world.statusText;\n  }",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1084,
    "column": 45,
    "original": ",\n                        style: Theme.of(context).textTheme.headlineSmall?.copyWith(\n                          color: Colors.white,\n                          fontWeight: FontWeight.bold,\n                        ),\n                      ),\n                      const SizedBox(height: 16),\n                      Text(\n                        ",
    "suggested_key": "worldStyleThemeofcontexttextthemeheadlinesmallcopywithColor",
    "context": "),\n                      const SizedBox(height: 24),\n                      Text(\n                        'Welt nicht gefunden',\n                        style: Theme.of(context).textTheme.headlineSmall?.copyWith(\n                          color: Colors.white,\n                          fontWeight: FontWeight.bold,",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1092,
    "column": 89,
    "original": ",\n                        style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                          color: Colors.grey[300],\n                        ),\n                        textAlign: TextAlign.center,\n                      ),\n                      const SizedBox(height: 32),\n                      SizedBox(\n                        width: double.infinity,\n                        height: 48,\n                        child: ElevatedButton(\n                          onPressed: () => context.goNamed(",
    "suggested_key": "worldStyleThemeofcontexttextthemebodylargecopywithColor",
    "context": "),\n                      const SizedBox(height: 16),\n                      Text(\n                        'Die angeforderte Welt existiert nicht oder ist nicht verfügbar.',\n                        style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                          color: Colors.grey[300],\n                        ),",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1170,
    "column": 65,
    "original": ",\n                                style: Theme.of(context).textTheme.headlineMedium?.copyWith(\n                                  color: Colors.white,\n                                  fontWeight: FontWeight.bold,\n                                ),\n                              ),\n                              const SizedBox(height: 8),\n                              Row(\n                                children: [\n                                  Icon(Icons.calendar_today, size: 16, color: Colors.grey[400]),\n                                  const SizedBox(width: 4),\n                                  Text(\n                                    ",
    "suggested_key": "worldStyleThemeofcontexttextthemeheadlinemediumcopywithColor",
    "context": "crossAxisAlignment: CrossAxisAlignment.start,\n                            children: [\n                              Text(\n                                _world?.name ?? 'Unbekannte Welt',\n                                style: Theme.of(context).textTheme.headlineMedium?.copyWith(\n                                  color: Colors.white,\n                                  fontWeight: FontWeight.bold,",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1182,
    "column": 104,
    "original": ",\n                                    style: TextStyle(color: Colors.grey[400], fontSize: 14),\n                                  ),\n                                  if (_world?.endsAt != null) ...[\n                                    const SizedBox(width: 16),\n                                    Icon(Icons.event, size: 16, color: Colors.grey[400]),\n                                    const SizedBox(width: 4),\n                                    Text(\n                                      ",
    "suggested_key": "worldStyleTextstylecolorColorsgrey400",
    "context": "Icon(Icons.calendar_today, size: 16, color: Colors.grey[400]),\n                                  const SizedBox(width: 4),\n                                  Text(\n                                    'Start: ${_world?.startsAt.toString().split(' ')[0] ?? 'Unbekannt'}',\n                                    style: TextStyle(color: Colors.grey[400], fontSize: 14),\n                                  ),\n                                  if (_world?.endsAt != null) ...[",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1190,
    "column": 103,
    "original": ",\n                                      style: TextStyle(color: Colors.grey[400], fontSize: 14),\n                                    ),\n                                  ],\n                                ],\n                              ),\n                            ],\n                          ),\n                        ),\n                        Container(\n                          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),\n                          decoration: BoxDecoration(\n                            color: _getWorldStatusColor().withOpacity(0.2),\n                            borderRadius: BorderRadius.circular(20),\n                            border: Border.all(color: _getWorldStatusColor().withOpacity(0.5)),\n                          ),\n                          child: Row(\n                            mainAxisSize: MainAxisSize.min,\n                            children: [\n                              Icon(\n                                _getWorldStatusIcon(),\n                                color: _getWorldStatusColor(),\n                                size: 16,\n                              ),\n                              const SizedBox(width: 6),\n                              Text(\n                                _getWorldStatusText(),\n                                style: TextStyle(\n                                  color: _getWorldStatusColor(),\n                                  fontWeight: FontWeight.w600,\n                                  fontSize: 14,\n                                ),\n                              ),\n                            ],\n                          ),\n                        ),\n                      ],\n                    ),\n                  ],\n                ),\n              ),\n              \n              // Tab Bar\n              Container(\n                decoration: BoxDecoration(\n                  color: const Color(0xFF2A2A2A),\n                  border: Border(\n                    bottom: BorderSide(\n                      color: AppTheme.primaryColor.withOpacity(0.3),\n                      width: 1,\n                    ),\n                  ),\n                ),\n                child: TabBar(\n                  controller: _tabController,\n                  indicatorColor: AppTheme.primaryColor,\n                  indicatorWeight: 3,\n                  labelColor: AppTheme.primaryColor,\n                  unselectedLabelColor: Colors.grey[400],\n                  labelStyle: const TextStyle(fontWeight: FontWeight.w600),\n                  tabs: const [\n                    Tab(\n                      icon: Icon(Icons.description_outlined),\n                      text: ",
    "suggested_key": "worldStyleTextstylecolorColorsgrey400",
    "context": "Icon(Icons.event, size: 16, color: Colors.grey[400]),\n                                    const SizedBox(width: 4),\n                                    Text(\n                                      'Ende: ${_world?.endsAt.toString().split(' ')[0] ?? 'Unbekannt'}',\n                                      style: TextStyle(color: Colors.grey[400], fontSize: 14),\n                                    ),\n                                  ],",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1339,
    "column": 33,
    "original": ",\n                style: TextStyle(\n                  color: Colors.white,\n                  fontSize: 18,\n                  fontWeight: FontWeight.bold,\n                ),\n              ),\n            ],\n          ),\n          const SizedBox(height: 16),\n          Text(\n            ",
    "suggested_key": "worldStyleTextstyleColor",
    "context": "Icon(Icons.info_outline, color: AppTheme.primaryColor, size: 24),\n              SizedBox(width: 8),\n              Text(\n                'Über diese Welt',\n                style: TextStyle(\n                  color: Colors.white,\n                  fontSize: 18,",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1351,
    "column": 13,
    "original": "Erkunde unbekannte Gebiete, schließe Allianzen und werde zur Legende!",
    "suggested_key": "worldErkundeUnbekannteGebiete",
    "context": "const SizedBox(height: 16),\n          Text(\n            'Dies ist eine spannende Welt voller Abenteuer und Herausforderungen. '\n            'Erkunde unbekannte Gebiete, schließe Allianzen und werde zur Legende!',\n            style: TextStyle(color: Colors.grey[300], height: 1.5),\n          ),\n          const SizedBox(height: 24),",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1355,
    "column": 48,
    "original": ", Icons.category),\n          _buildInfoCard(",
    "suggested_key": "worldIconscategory_buildinfocard",
    "context": "style: TextStyle(color: Colors.grey[300], height: 1.5),\n          ),\n          const SizedBox(height: 24),\n          _buildInfoCard('Kategorie', 'Standard', Icons.category),\n          _buildInfoCard('Welt-ID', '#${_world?.id ?? 'N/A'}', Icons.tag),\n          _buildInfoCard('Erstellt', _world?.createdAt.toString().split(' ')[0] ?? 'Unbekannt', Icons.access_time),\n        ],",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1357,
    "column": 94,
    "original": ", Icons.access_time),\n        ],\n      ),\n    );\n  }\n  \n  Widget _buildRulesTab() {\n    return SingleChildScrollView(\n      padding: const EdgeInsets.all(24),\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          const Row(\n            children: [\n              Icon(Icons.rule, color: AppTheme.primaryColor, size: 24),\n              SizedBox(width: 8),\n              Text(\n                ",
    "suggested_key": "worldIconsaccess_timeWidget_buildrulestab",
    "context": "const SizedBox(height: 24),\n          _buildInfoCard('Kategorie', 'Standard', Icons.category),\n          _buildInfoCard('Welt-ID', '#${_world?.id ?? 'N/A'}', Icons.tag),\n          _buildInfoCard('Erstellt', _world?.createdAt.toString().split(' ')[0] ?? 'Unbekannt', Icons.access_time),\n        ],\n      ),\n    );",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1384,
    "column": 32,
    "original": "Respektiere andere Spieler",
    "suggested_key": "worldRespektiereAndereSpieler",
    "context": "],\n          ),\n          const SizedBox(height: 16),\n          _buildRuleItem('1.', 'Respektiere andere Spieler'),\n          _buildRuleItem('2.', 'Keine Cheats oder Exploits verwenden'),\n          _buildRuleItem('3.', 'Faire Spielweise ist Pflicht'),\n          _buildRuleItem('4.', 'Kommunikation nur im Spielchat'),",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1385,
    "column": 32,
    "original": "Keine Cheats oder Exploits verwenden",
    "suggested_key": "worldKeineCheatsOder",
    "context": "),\n          const SizedBox(height: 16),\n          _buildRuleItem('1.', 'Respektiere andere Spieler'),\n          _buildRuleItem('2.', 'Keine Cheats oder Exploits verwenden'),\n          _buildRuleItem('3.', 'Faire Spielweise ist Pflicht'),\n          _buildRuleItem('4.', 'Kommunikation nur im Spielchat'),\n          _buildRuleItem('5.', 'Entscheidungen der Spielleitung sind final'),",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1386,
    "column": 32,
    "original": "Faire Spielweise ist Pflicht",
    "suggested_key": "worldFaireSpielweiseIst",
    "context": "const SizedBox(height: 16),\n          _buildRuleItem('1.', 'Respektiere andere Spieler'),\n          _buildRuleItem('2.', 'Keine Cheats oder Exploits verwenden'),\n          _buildRuleItem('3.', 'Faire Spielweise ist Pflicht'),\n          _buildRuleItem('4.', 'Kommunikation nur im Spielchat'),\n          _buildRuleItem('5.', 'Entscheidungen der Spielleitung sind final'),\n        ],",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1387,
    "column": 63,
    "original": "),\n          _buildRuleItem(",
    "suggested_key": "world_buildruleitem",
    "context": "_buildRuleItem('1.', 'Respektiere andere Spieler'),\n          _buildRuleItem('2.', 'Keine Cheats oder Exploits verwenden'),\n          _buildRuleItem('3.', 'Faire Spielweise ist Pflicht'),\n          _buildRuleItem('4.', 'Kommunikation nur im Spielchat'),\n          _buildRuleItem('5.', 'Entscheidungen der Spielleitung sind final'),\n        ],\n      ),",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1405,
    "column": 17,
    "original": "Welt-Statistiken",
    "suggested_key": "worldWeltstatistiken",
    "context": "Icon(Icons.bar_chart, color: AppTheme.primaryColor, size: 24),\n              SizedBox(width: 8),\n              Text(\n                'Welt-Statistiken',\n                style: TextStyle(\n                  color: Colors.white,\n                  fontSize: 18,",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1419,
    "column": 63,
    "original": ", Icons.timer)),\n            ],\n          ),\n          const SizedBox(height: 16),\n          Row(\n            children: [\n              Expanded(child: _buildStatCard(",
    "suggested_key": "worldIconstimerConstSizedboxheight",
    "context": "children: [\n              Expanded(child: _buildStatCard('Spieler', '0 / 50', Icons.people)),\n              const SizedBox(width: 16),\n              Expanded(child: _buildStatCard('Dauer', '30 Tage', Icons.timer)),\n            ],\n          ),\n          const SizedBox(height: 16),",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Card",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1425,
    "column": 53,
    "original": ", _getWorldStatusText(), Icons.circle)),\n              const SizedBox(width: 16),\n              Expanded(child: _buildStatCard(",
    "suggested_key": "world_getworldstatustextIconscircleConst",
    "context": "const SizedBox(height: 16),\n          Row(\n            children: [\n              Expanded(child: _buildStatCard('Status', _getWorldStatusText(), Icons.circle)),\n              const SizedBox(width: 16),\n              Expanded(child: _buildStatCard('Typ', 'Standard', Icons.public)),\n            ],",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Card",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1427,
    "column": 62,
    "original": ", Icons.public)),\n            ],\n          ),\n        ],\n      ),\n    );\n  }\n  \n  Widget _buildInfoCard(String label, String value, IconData icon) {\n    return Container(\n      margin: const EdgeInsets.only(bottom: 12),\n      padding: const EdgeInsets.all(16),\n      decoration: BoxDecoration(\n        color: const Color(0xFF2A2A2A),\n        borderRadius: BorderRadius.circular(12),\n        border: Border.all(color: Colors.grey[800] ?? Colors.grey),\n      ),\n      child: Row(\n        children: [\n          Icon(icon, color: AppTheme.primaryColor, size: 20),\n          const SizedBox(width: 12),\n          Expanded(\n            child: Column(\n              crossAxisAlignment: CrossAxisAlignment.start,\n              children: [\n                Text(\n                  label,\n                  style: TextStyle(color: Colors.grey[400], fontSize: 12),\n                ),\n                const SizedBox(height: 2),\n                Text(\n                  value,\n                  style: const TextStyle(color: Colors.white, fontSize: 14, fontWeight: FontWeight.w500),\n                ),\n              ],\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n  \n  Widget _buildRuleItem(String number, String rule) {\n    return Container(\n      margin: const EdgeInsets.only(bottom: 12),\n      padding: const EdgeInsets.all(12),\n      decoration: BoxDecoration(\n        color: const Color(0xFF2A2A2A),\n        borderRadius: BorderRadius.circular(8),\n        border: Border.all(color: Colors.grey[800] ?? Colors.grey),\n      ),\n      child: Row(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          Container(\n            width: 28,\n            height: 28,\n            decoration: BoxDecoration(\n              color: AppTheme.primaryColor.withOpacity(0.2),\n              shape: BoxShape.circle,\n            ),\n            child: Center(\n              child: Text(\n                number,\n                style: const TextStyle(\n                  color: AppTheme.primaryColor,\n                  fontWeight: FontWeight.bold,\n                  fontSize: 12,\n                ),\n              ),\n            ),\n          ),\n          const SizedBox(width: 12),\n          Expanded(\n            child: Text(\n              rule,\n              style: TextStyle(color: Colors.grey[300], height: 1.3),\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n  \n  Widget _buildStatCard(String label, String value, IconData icon) {\n    return Container(\n      padding: const EdgeInsets.all(20),\n      decoration: BoxDecoration(\n        color: const Color(0xFF2A2A2A),\n        borderRadius: BorderRadius.circular(16),\n        border: Border.all(color: AppTheme.primaryColor.withOpacity(0.3)),\n      ),\n      child: Column(\n        children: [\n          Icon(icon, color: AppTheme.primaryColor, size: 32),\n          const SizedBox(height: 12),\n          Text(\n            value,\n            style: const TextStyle(\n              color: Colors.white,\n              fontSize: 20,\n              fontWeight: FontWeight.bold,\n            ),\n          ),\n          const SizedBox(height: 4),\n          Text(\n            label,\n            style: TextStyle(\n              color: Colors.grey[400],\n              fontSize: 14,\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n  \n  IconData _getWorldStatusIcon() {\n    switch (_world?.status) {\n      case WorldStatus.upcoming:\n        return Icons.schedule;\n      case WorldStatus.open:\n        return Icons.lock_open;\n      case WorldStatus.running:\n        return Icons.play_circle_outline;\n      case WorldStatus.closed:\n        return Icons.lock;\n      default:\n        return Icons.help_outline;\n    }\n  }\n\n  Widget _buildInfoRow(String label, String value) {\n    return Padding(\n      padding: const EdgeInsets.symmetric(vertical: 4),\n      child: Row(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          SizedBox(\n            width: 80,\n            child: Text(\n              ",
    "suggested_key": "worldIconspublicWidget_buildinfocardstring",
    "context": "children: [\n              Expanded(child: _buildStatCard('Status', _getWorldStatusText(), Icons.circle)),\n              const SizedBox(width: 16),\n              Expanded(child: _buildStatCard('Typ', 'Standard', Icons.public)),\n            ],\n          ),\n        ],",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Card",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1867,
    "column": 29,
    "original": "Diese Welt ist derzeit geschlossen",
    "suggested_key": "worldDieseWeltIst",
    "context": "const SizedBox(height: 8),\n                    Text(\n                      world.status == WorldStatus.closed\n                          ? 'Diese Welt ist derzeit geschlossen'\n                          : 'Diese Welt ist archiviert',\n                      style: TextStyle(\n                        color: Colors.grey[700],",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1868,
    "column": 29,
    "original": "Diese Welt ist archiviert",
    "suggested_key": "worldDieseWeltIst",
    "context": "Text(\n                      world.status == WorldStatus.closed\n                          ? 'Diese Welt ist derzeit geschlossen'\n                          : 'Diese Welt ist archiviert',\n                      style: TextStyle(\n                        color: Colors.grey[700],\n                        fontWeight: FontWeight.w500,",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 20,
    "column": 24,
    "original": ";\n\nclass WorldListPage extends StatefulWidget {\n  const WorldListPage({super.key});\n\n  @override\n  State<WorldListPage> createState() => _WorldListPageState();\n}\n\nclass _WorldListPageState extends State<WorldListPage> {\n  // DI-ready: ServiceLocator verwenden\n  late final AuthService _authService;\n  late final WorldService _worldService;\n  late final InviteService _inviteService;\n  \n  List<World> _worlds = [];\n  List<World> _filteredWorlds = [];\n  bool _isLoading = true;\n  String? _error;\n  \n  // Track button states for each world\n  final Map<int, bool> _preRegisteredWorlds = {};\n  final Map<int, bool> _joinedWorlds = {};\n  \n  // Filter und Sortierung\n  WorldStatus? _statusFilter;\n  WorldCategory? _categoryFilter;\n  String _sortBy = ",
    "suggested_key": "worldClassWorldlistpageExtends",
    "context": "import './widgets/world_filters.dart';\n\n// ServiceLocator Import für DI\nimport '../../main.dart';\n\nclass WorldListPage extends StatefulWidget {\n  const WorldListPage({super.key});",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 47,
    "column": 64,
    "original": "\n  bool _sortAscending = true;\n  \n  // Spieleranzahl (Simulation - später vom Backend)\n  final Map<int, int> _playerCounts = {};\n\n  @override\n  void initState() {\n    super.initState();\n    \n    // DI-ready: ServiceLocator verwenden mit robuster Fehlerbehandlung\n    _initializeServices();\n    _loadWorlds();\n  }\n\n  void _initializeServices() {\n    try {\n      if (ServiceLocator.has<AuthService>()) {\n        _authService = ServiceLocator.get<AuthService>();\n      } else {\n        _authService = AuthService();\n      }\n      \n      if (ServiceLocator.has<WorldService>()) {\n        _worldService = ServiceLocator.get<WorldService>();\n      } else {\n        _worldService = WorldService();\n      }\n      \n      if (ServiceLocator.has<InviteService>()) {\n        _inviteService = ServiceLocator.get<InviteService>();\n      } else {\n        _inviteService = InviteService();\n      }\n    } catch (e) {\n      AppLogger.app.w(",
    "suggested_key": "worldBool_sortascendingTrue",
    "context": "// Filter und Sortierung\n  WorldStatus? _statusFilter;\n  WorldCategory? _categoryFilter;\n  String _sortBy = 'startDate'; // 'startDate', 'name', 'status'\n  bool _sortAscending = true;\n  \n  // Spieleranzahl (Simulation - später vom Backend)",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 258,
    "column": 39,
    "original": ")) {\n          if (mounted) {\n            setState(() {\n              _joinedWorlds[world.id] = false;\n            });\n          }\n        } else {\n          // Only log other errors\n          AppLogger.logError(",
    "suggested_key": "worldIfMountedSetstate",
    "context": "}\n      } catch (e) {\n        // 404 means user is not in this world, which is normal\n        if (e.toString().contains('404')) {\n          if (mounted) {\n            setState(() {\n              _joinedWorlds[world.id] = false;",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 310,
    "column": 69,
    "original": "),\n            backgroundColor: Colors.green,\n          ),\n        );\n        // Navigate to world dashboard\n        context.goNamed(",
    "suggested_key": "worldBackgroundcolorColorsgreenNavigate",
    "context": "ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text('Erfolgreich zu ${world.name} beigetreten!'),\n            backgroundColor: Colors.green,\n          ),\n        );",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 315,
    "column": 41,
    "original": ", pathParameters: {",
    "suggested_key": "worldPathparameters",
    "context": "),\n        );\n        // Navigate to world dashboard\n        context.goNamed('world-dashboard', pathParameters: {'id': world.id.toString()});\n      }\n    } catch (e) {\n      if (mounted) {",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 315,
    "column": 64,
    "original": ": world.id.toString()});\n      }\n    } catch (e) {\n      if (mounted) {\n        // Prüfe ob es ein Token-Problem ist\n        if (e.toString().contains(",
    "suggested_key": "worldWorldidtostringCatchE",
    "context": "),\n        );\n        // Navigate to world dashboard\n        context.goNamed('world-dashboard', pathParameters: {'id': world.id.toString()});\n      }\n    } catch (e) {\n      if (mounted) {",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 350,
    "column": 73,
    "original": "),\n            backgroundColor: Colors.green,\n          ),\n        );\n      }\n    } catch (e) {\n      if (mounted) {\n        // Prüfe ob es ein Token-Problem ist\n        if (e.toString().contains(",
    "suggested_key": "worldBackgroundcolorColorsgreenCatch",
    "context": "ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text('Erfolgreich für ${world.name} vorregistriert!'),\n            backgroundColor: Colors.green,\n          ),\n        );",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 417,
    "column": 60,
    "original": "),\n            backgroundColor: Colors.orange,\n          ),\n        );\n      }\n    } catch (e) {\n      if (mounted) {\n        // Prüfe ob es ein Token-Problem ist\n        if (e.toString().contains(",
    "suggested_key": "worldBackgroundcolorColorsorangeCatch",
    "context": "ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text('Du hast ${world.name} verlassen.'),\n            backgroundColor: Colors.orange,\n          ),\n        );",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 456,
    "column": 77,
    "original": "),\n            backgroundColor: Colors.orange,\n          ),\n        );\n      }\n    } catch (e) {\n      if (mounted) {\n        // Prüfe ob es ein Token-Problem ist\n        if (e.toString().contains(",
    "suggested_key": "worldBackgroundcolorColorsorangeCatch",
    "context": "ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text('Vorregistrierung für ${world.name} zurückgezogen.'),\n            backgroundColor: Colors.orange,\n          ),\n        );",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 527,
    "column": 32,
    "original": ", pathParameters: {",
    "suggested_key": "worldPathparameters",
    "context": "// Deep-Link zur World-Join-Page\n  void _navigateToWorldJoin(World world) {\n    context.goNamed('world-join', pathParameters: {'id': world.id.toString()});\n  }\n\n  void _playWorld(World world) {",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 527,
    "column": 55,
    "original": ": world.id.toString()});\n  }\n\n  void _playWorld(World world) {\n    // Navigate directly to world dashboard for playing\n    context.goNamed(",
    "suggested_key": "worldWorldidtostringVoid_playworldworld",
    "context": "// Deep-Link zur World-Join-Page\n  void _navigateToWorldJoin(World world) {\n    context.goNamed('world-join', pathParameters: {'id': world.id.toString()});\n  }\n\n  void _playWorld(World world) {",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 532,
    "column": 37,
    "original": ", pathParameters: {",
    "suggested_key": "worldPathparameters",
    "context": "void _playWorld(World world) {\n    // Navigate directly to world dashboard for playing\n    context.goNamed('world-dashboard', pathParameters: {'id': world.id.toString()});\n  }\n\n// Filter and sort methods removed - now using WorldFilters widget",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 532,
    "column": 60,
    "original": ": world.id.toString()});\n  }\n\n// Filter and sort methods removed - now using WorldFilters widget\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: BackgroundWidget(\n        child: Stack(\n          children: [\n            // Main content\n            Center(\n              child: SingleChildScrollView(\n                padding: const EdgeInsets.all(24.0),\n                child: Center(\n                  child: ConstrainedBox(\n                    constraints: const BoxConstraints(maxWidth: 800),\n                    child: Card(\n                      elevation: 12,\n                      color: const Color(0xFF1A1A1A), // Dunkle Karte\n                      shape: RoundedRectangleBorder(\n                        borderRadius: BorderRadius.circular(20),\n                        side: BorderSide(\n                          color: AppTheme.primaryColor.withOpacity(0.3),\n                          width: 1,\n                        ),\n                      ),\n                      child: Container(\n                        decoration: BoxDecoration(\n                          borderRadius: BorderRadius.circular(20),\n                          gradient: const LinearGradient(\n                            begin: Alignment.topLeft,\n                            end: Alignment.bottomRight,\n                            colors: [\n                              Color(0xFF1A1A1A),\n                              Color(0xFF2A2A2A),\n                            ],\n                          ),\n                        ),\n                        child: Padding(\n                          padding: const EdgeInsets.all(32.0),\n                          child: Column(\n                            mainAxisSize: MainAxisSize.min,\n                            children: [\n                              // Logo\n                              Container(\n                                width: 80,\n                                height: 80,\n                                decoration: BoxDecoration(\n                                  color: AppTheme.primaryColor.withOpacity(0.2),\n                                  borderRadius: BorderRadius.circular(20),\n                                  border: Border.all(\n                                    color: AppTheme.primaryColor.withOpacity(0.5),\n                                    width: 2,\n                                  ),\n                                ),\n                                child: const Icon(\n                                  Icons.public,\n                                  size: 40,\n                                  color: AppTheme.primaryColor,\n                                ),\n                              ),\n                              const SizedBox(height: 24),\n                              \n                              // Title\n                              Text(\n                                ",
    "suggested_key": "worldWorldidtostringFilterAnd",
    "context": "void _playWorld(World world) {\n    // Navigate directly to world dashboard for playing\n    context.goNamed('world-dashboard', pathParameters: {'id': world.id.toString()});\n  }\n\n// Filter and sort methods removed - now using WorldFilters widget",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 599,
    "column": 44,
    "original": ",\n                                style: Theme.of(context).textTheme.headlineLarge?.copyWith(\n                                  color: Colors.white,\n                                  fontWeight: FontWeight.bold,\n                                ),\n                              ),\n                              const SizedBox(height: 8),\n                              \n                              // Subtitle\n                              Text(\n                                ",
    "suggested_key": "worldStyleThemeofcontexttextthemeheadlinelargecopywithColor",
    "context": "// Title\n                              Text(\n                                'Weltenwind',\n                                style: Theme.of(context).textTheme.headlineLarge?.copyWith(\n                                  color: Colors.white,\n                                  fontWeight: FontWeight.bold,",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 609,
    "column": 54,
    "original": ",\n                                style: Theme.of(context).textTheme.headlineMedium?.copyWith(\n                                  color: Colors.grey[300],\n                                ),\n                                textAlign: TextAlign.center,\n                              ),\n                              const SizedBox(height: 24),\n                              \n                              // Filter und Sortierung\n                              if (!_isLoading && _worlds.isNotEmpty) ...[\n                                WorldFilters(\n                                  statusFilter: _statusFilter,\n                                  categoryFilter: _categoryFilter,\n                                  sortBy: _sortBy,\n                                  sortAscending: _sortAscending,\n                                  onStatusChanged: (status) {\n                                    setState(() {\n                                      _statusFilter = status;\n                                    });\n                                    _applyFiltersAndSorting();\n                                  },\n                                  onCategoryChanged: (category) {\n                                    setState(() {\n                                      _categoryFilter = category;\n                                    });\n                                    _applyFiltersAndSorting();\n                                  },\n                                  onSortByChanged: (sortBy) {\n                                    setState(() {\n                                      _sortBy = sortBy;\n                                    });\n                                    _applyFiltersAndSorting();\n                                  },\n                                  onSortOrderChanged: () {\n                                    setState(() {\n                                      _sortAscending = !_sortAscending;\n                                    });\n                                    _applyFiltersAndSorting();\n                                  },\n                                  onResetFilters: () {\n                                    setState(() {\n                                      _statusFilter = null;\n                                      _categoryFilter = null;\n                                      _sortBy = ",
    "suggested_key": "worldStyleThemeofcontexttextthemeheadlinemediumcopywithColor",
    "context": "// Subtitle\n                              Text(\n                                'Wähle deine Welt aus',\n                                style: Theme.of(context).textTheme.headlineMedium?.copyWith(\n                                  color: Colors.grey[300],\n                                ),",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 723,
    "column": 63,
    "original": ",\n                                        style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                                          color: Colors.grey[300],\n                                        ),\n                                        textAlign: TextAlign.center,\n                                      ),\n                                      const SizedBox(height: 8),\n                                      Text(\n                                        ",
    "suggested_key": "worldStyleThemeofcontexttextthemebodylargecopywithColor",
    "context": "),\n                                      const SizedBox(height: 16),\n                                      Text(\n                                        'Keine Welten gefunden',\n                                        style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                                          color: Colors.grey[300],\n                                        ),",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\pre_register_dialog.dart",
    "line": 90,
    "column": 92,
    "original": ",\n              style: TextStyle(\n                color: Colors.grey[300],\n              ),\n            ),\n            const SizedBox(height: 16),\n            TextFormField(\n              controller: _emailController,\n              keyboardType: TextInputType.emailAddress,\n              style: const TextStyle(color: Colors.white), // Weiße Schrift\n              decoration: InputDecoration(\n                labelText: ",
    "suggested_key": "worldStyleTextstyleColor",
    "context": "mainAxisSize: MainAxisSize.min,\n          children: [\n            Text(\n              'Geben Sie Ihre E-Mail-Adresse ein, um sich für diese Welt vorzuregistrieren:',\n              style: TextStyle(\n                color: Colors.grey[300],\n              ),",
    "category": "world",
    "confidence": 0.7,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\user_info_widget.dart",
    "line": 296,
    "column": 55,
    "original": ");\n                              }\n                            },\n                            icon: const Icon(Icons.logout, size: 16),\n                            label: const Text(",
    "suggested_key": "authIconConstIconiconslogout",
    "context": "onPressed: () async {\n                              await _authService.logout();\n                              if (context.mounted) {\n                                context.goNamed('login');\n                              }\n                            },\n                            icon: const Icon(Icons.logout, size: 16),",
    "category": "auth",
    "confidence": 0.65,
    "widget_context": "Widget: TextButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 406,
    "column": 43,
    "original": "Passwort vergessen?",
    "suggested_key": "buttonPasswortVergessen",
    "context": "TextButton(\n                                        onPressed: () => context.goNamed('forgot-password'),\n                                        child: const Text(\n                                          'Passwort vergessen?',\n                                          style: TextStyle(\n                                            color: AppTheme.primaryColor,\n                                            fontSize: 14,",
    "category": "button",
    "confidence": 0.65,
    "widget_context": "Widget: TextButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 327,
    "column": 93,
    "original": "),\n                                                  style: ElevatedButton.styleFrom(\n                                                    backgroundColor: Colors.transparent,\n                                                    shadowColor: Colors.transparent,\n                                                    shape: RoundedRectangleBorder(\n                                                      borderRadius: BorderRadius.circular(16),\n                                                    ),\n                                                  ),\n                                                  child: Row(\n                                                    mainAxisAlignment: MainAxisAlignment.center,\n                                                    children: [\n                                                      const Icon(\n                                                        Icons.rocket_launch,\n                                                        color: Colors.white,\n                                                        size: 24,\n                                                      ),\n                                                      const SizedBox(width: 12),\n                                                      Column(\n                                                        mainAxisAlignment: MainAxisAlignment.center,\n                                                        children: [\n                                                          const Text(\n                                                            ",
    "suggested_key": "buttonStyleElevatedbuttonstylefromBackgroundcolor",
    "context": "],\n                                                ),\n                                                child: ElevatedButton(\n                                                  onPressed: () => context.goNamed('register'),\n                                                  style: ElevatedButton.styleFrom(\n                                                    backgroundColor: Colors.transparent,\n                                                    shadowColor: Colors.transparent,",
    "category": "button",
    "confidence": 0.65,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 385,
    "column": 88,
    "original": "),\n                                                icon: const Icon(\n                                                  Icons.login,\n                                                  color: AppTheme.primaryColor,\n                                                ),\n                                                label: const Text(\n                                                  ",
    "suggested_key": "buttonIconConstIcon",
    "context": "),\n                                              ),\n                                              child: ElevatedButton.icon(\n                                                onPressed: () => context.goNamed('login'),\n                                                icon: const Icon(\n                                                  Icons.login,\n                                                  color: AppTheme.primaryColor,",
    "category": "button",
    "confidence": 0.65,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 653,
    "column": 34,
    "original": ", style: TextStyle(color: Colors.grey[600])),\n                          TextButton(\n                            onPressed: () {},\n                            child: Text(\n                              ",
    "suggested_key": "buttonStyleTextstylecolorColorsgrey600",
    "context": "),\n                            ),\n                          ),\n                          Text('•', style: TextStyle(color: Colors.grey[600])),\n                          TextButton(\n                            onPressed: () {},\n                            child: Text(",
    "category": "button",
    "confidence": 0.65,
    "widget_context": "Widget: TextButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 664,
    "column": 34,
    "original": ", style: TextStyle(color: Colors.grey[600])),\n                          TextButton(\n                            onPressed: () {},\n                            child: Text(\n                              ",
    "suggested_key": "buttonStyleTextstylecolorColorsgrey600",
    "context": "),\n                            ),\n                          ),\n                          Text('•', style: TextStyle(color: Colors.grey[600])),\n                          TextButton(\n                            onPressed: () {},\n                            child: Text(",
    "category": "button",
    "confidence": 0.65,
    "widget_context": "Widget: TextButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1740,
    "column": 53,
    "original": "Wird zurückgezogen...",
    "suggested_key": "buttonWirdZurückgezogen",
    "context": "child: ElevatedButton.icon(\n                    onPressed: (_isPreRegistering || _isJoining) ? null : _cancelPreRegistration,\n                    icon: const Icon(Icons.cancel),\n                    label: Text(_isPreRegistering ? 'Wird zurückgezogen...' : 'Vorregistrierung zurückziehen'),\n                    style: ElevatedButton.styleFrom(\n                      backgroundColor: Colors.red[600],\n                      foregroundColor: Colors.white,",
    "category": "button",
    "confidence": 0.65,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1760,
    "column": 53,
    "original": "Wird registriert...",
    "suggested_key": "buttonWirdRegistriert",
    "context": "child: ElevatedButton.icon(\n                    onPressed: (_isPreRegistering || _isJoining) ? null : _preRegisterWorld,\n                    icon: const Icon(Icons.how_to_reg),\n                    label: Text(_isPreRegistering ? 'Wird registriert...' : 'Vorregistrieren'),\n                    style: ElevatedButton.styleFrom(\n                      backgroundColor: Colors.orange[600],\n                      foregroundColor: Colors.white,",
    "category": "button",
    "confidence": 0.65,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1808,
    "column": 46,
    "original": "Wird verlassen...",
    "suggested_key": "buttonWirdVerlassen",
    "context": "child: ElevatedButton.icon(\n                    onPressed: _isJoining ? null : _leaveWorld,\n                    icon: const Icon(Icons.exit_to_app),\n                    label: Text(_isJoining ? 'Wird verlassen...' : 'Welt verlassen'),\n                    style: ElevatedButton.styleFrom(\n                      backgroundColor: Colors.red[600],\n                      foregroundColor: Colors.white,",
    "category": "button",
    "confidence": 0.65,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1829,
    "column": 46,
    "original": "Wird beigetreten...",
    "suggested_key": "buttonWirdBeigetreten",
    "context": "child: ElevatedButton.icon(\n                    onPressed: _isJoining ? null : _joinWorld,\n                    icon: const Icon(Icons.play_arrow),\n                    label: Text(_isJoining ? 'Wird beigetreten...' : 'Jetzt beitreten'),\n                    style: ElevatedButton.styleFrom(\n                      backgroundColor: AppTheme.primaryColor,\n                      foregroundColor: Colors.white,",
    "category": "button",
    "confidence": 0.65,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 455,
    "column": 69,
    "original": "),\n                        icon: const Icon(Icons.public),\n                        label: const Text(",
    "suggested_key": "buttonIconConstIconiconspublic",
    "context": "),\n                      ),\n                      ElevatedButton.icon(\n                        onPressed: () => context.goNamed('world-list'),\n                        icon: const Icon(Icons.public),\n                        label: const Text('Welten'),\n                        style: ElevatedButton.styleFrom(",
    "category": "button",
    "confidence": 0.65,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 151,
    "column": 35,
    "original": ");\n      return parts.length == 3;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  // Token-Ablaufzeit extrahieren\n  DateTime? _getTokenExpiration(String token) {\n    try {\n      final parts = token.split(",
    "suggested_key": "formReturnPartslength3",
    "context": "// JWT-Token Format validieren\n  bool _isValidJWT(String token) {\n    try {\n      final parts = token.split('.');\n      return parts.length == 3;\n    } catch (e) {\n      return false;",
    "category": "form",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\forgot_password_page.dart",
    "line": 199,
    "column": 61,
    "original": ",\n                                  labelStyle: TextStyle(color: Colors.grey[400]),\n                                  prefixIcon: const Icon(Icons.email, color: AppTheme.primaryColor),\n                                  filled: true,\n                                  fillColor: const Color(0xFF2D2D2D),\n                                  border: OutlineInputBorder(\n                                    borderRadius: BorderRadius.circular(12),\n                                    borderSide: BorderSide(color: Colors.grey[600]!),\n                                  ),\n                                  enabledBorder: OutlineInputBorder(\n                                    borderRadius: BorderRadius.circular(12),\n                                    borderSide: BorderSide(color: Colors.grey[600]!),\n                                  ),\n                                  focusedBorder: OutlineInputBorder(\n                                    borderRadius: BorderRadius.circular(12),\n                                    borderSide: const BorderSide(color: AppTheme.primaryColor, width: 2),\n                                  ),\n                                  errorBorder: OutlineInputBorder(\n                                    borderRadius: BorderRadius.circular(12),\n                                    borderSide: BorderSide(color: Colors.red[400]!),\n                                  ),\n                                  focusedErrorBorder: OutlineInputBorder(\n                                    borderRadius: BorderRadius.circular(12),\n                                    borderSide: BorderSide(color: Colors.red[400]!, width: 2),\n                                  ),\n                                ),\n                                validator: (value) {\n                                  if (value == null || value.trim().isEmpty) {\n                                    return ",
    "suggested_key": "formLabelstyleTextstylecolorColorsgrey400",
    "context": "textInputAction: TextInputAction.done,\n                                onFieldSubmitted: (_) => _isLoading ? null : _requestPasswordReset(),\n                                decoration: InputDecoration(\n                                  labelText: 'E-Mail-Adresse',\n                                  labelStyle: TextStyle(color: Colors.grey[400]),\n                                  prefixIcon: const Icon(Icons.email, color: AppTheme.primaryColor),\n                                  filled: true,",
    "category": "form",
    "confidence": 0.65,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 257,
    "column": 63,
    "original": ",\n                                      labelStyle: TextStyle(color: Colors.grey[400]),\n                                      prefixIcon: const Icon(Icons.person, color: AppTheme.primaryColor),\n                                      filled: true,\n                                      fillColor: const Color(0xFF2D2D2D),\n                                      border: OutlineInputBorder(\n                                        borderRadius: BorderRadius.circular(12),\n                                        borderSide: BorderSide(color: Colors.grey[600]!),\n                                      ),\n                                      enabledBorder: OutlineInputBorder(\n                                        borderRadius: BorderRadius.circular(12),\n                                        borderSide: BorderSide(color: Colors.grey[600]!),\n                                      ),\n                                      focusedBorder: OutlineInputBorder(\n                                        borderRadius: BorderRadius.circular(12),\n                                        borderSide: const BorderSide(color: AppTheme.primaryColor, width: 2),\n                                      ),\n                                      errorBorder: OutlineInputBorder(\n                                        borderRadius: BorderRadius.circular(12),\n                                        borderSide: BorderSide(color: Colors.red[400]!),\n                                      ),\n                                      focusedErrorBorder: OutlineInputBorder(\n                                        borderRadius: BorderRadius.circular(12),\n                                        borderSide: BorderSide(color: Colors.red[400]!, width: 2),\n                                      ),\n                                    ),\n                                    validator: (value) {\n                                      if (value == null || value.trim().isEmpty) {\n                                        return ",
    "suggested_key": "formLabelstyleTextstylecolorColorsgrey400",
    "context": "}\n                                    },\n                                    decoration: InputDecoration(\n                                      labelText: 'Benutzername',\n                                      labelStyle: TextStyle(color: Colors.grey[400]),\n                                      prefixIcon: const Icon(Icons.person, color: AppTheme.primaryColor),\n                                      filled: true,",
    "category": "form",
    "confidence": 0.65,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 285,
    "column": 83,
    "original": ";\n                                      }\n                                      if (value.trim().length < 3) {\n                                        return ",
    "suggested_key": "formIfValuetrimlength3",
    "context": "),\n                                    validator: (value) {\n                                      if (value == null || value.trim().isEmpty) {\n                                        return 'Bitte gib deinen Benutzernamen ein';\n                                      }\n                                      if (value.trim().length < 3) {\n                                        return 'Benutzername muss mindestens 3 Zeichen lang sein';",
    "category": "form",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 350,
    "column": 76,
    "original": ";\n                                      }\n                                      if (_hasInteractedWithPassword && value.length < 6) {\n                                        return ",
    "suggested_key": "formIf_hasinteractedwithpasswordValuelength",
    "context": "),\n                                    validator: (value) {\n                                      if (value == null || value.isEmpty) {\n                                        return 'Bitte gib dein Passwort ein';\n                                      }\n                                      if (_hasInteractedWithPassword && value.length < 6) {\n                                        return 'Passwort muss mindestens 6 Zeichen lang sein';",
    "category": "form",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 276,
    "column": 57,
    "original": ",\n                                labelStyle: TextStyle(color: Colors.grey[400]),\n                                prefixIcon: const Icon(Icons.person, color: AppTheme.primaryColor),\n                                filled: true,\n                                fillColor: const Color(0xFF2D2D2D),\n                                border: OutlineInputBorder(\n                                  borderRadius: BorderRadius.circular(12),\n                                  borderSide: BorderSide(color: Colors.grey[600]!),\n                                ),\n                                enabledBorder: OutlineInputBorder(\n                                  borderRadius: BorderRadius.circular(12),\n                                  borderSide: BorderSide(color: Colors.grey[600]!),\n                                ),\n                                focusedBorder: OutlineInputBorder(\n                                  borderRadius: BorderRadius.circular(12),\n                                  borderSide: const BorderSide(color: AppTheme.primaryColor, width: 2),\n                                ),\n                                errorBorder: OutlineInputBorder(\n                                  borderRadius: BorderRadius.circular(12),\n                                  borderSide: BorderSide(color: Colors.red[400]!),\n                                ),\n                                focusedErrorBorder: OutlineInputBorder(\n                                  borderRadius: BorderRadius.circular(12),\n                                  borderSide: BorderSide(color: Colors.red[400]!, width: 2),\n                                ),\n                              ),\n                              validator: (value) {\n                                if (value == null || value.trim().isEmpty) {\n                                  return ",
    "suggested_key": "formLabelstyleTextstylecolorColorsgrey400",
    "context": "controller: _usernameController,\n                              style: const TextStyle(color: Colors.white),\n                              decoration: InputDecoration(\n                                labelText: 'Benutzername',\n                                labelStyle: TextStyle(color: Colors.grey[400]),\n                                prefixIcon: const Icon(Icons.person, color: AppTheme.primaryColor),\n                                filled: true,",
    "category": "form",
    "confidence": 0.65,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 304,
    "column": 72,
    "original": ";\n                                }\n                                if (value.length < 3) {\n                                  return ",
    "suggested_key": "formIfValuelength3",
    "context": "),\n                              validator: (value) {\n                                if (value == null || value.trim().isEmpty) {\n                                  return 'Benutzername ist erforderlich';\n                                }\n                                if (value.length < 3) {\n                                  return 'Benutzername muss mindestens 3 Zeichen lang sein';",
    "category": "form",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 323,
    "column": 51,
    "original": ",\n                                labelStyle: TextStyle(color: Colors.grey[400]),\n                                prefixIcon: const Icon(Icons.email, color: AppTheme.primaryColor),\n                                filled: true,\n                                fillColor: const Color(0xFF2D2D2D),\n                                border: OutlineInputBorder(\n                                  borderRadius: BorderRadius.circular(12),\n                                  borderSide: BorderSide(color: Colors.grey[600]!),\n                                ),\n                                enabledBorder: OutlineInputBorder(\n                                  borderRadius: BorderRadius.circular(12),\n                                  borderSide: BorderSide(color: Colors.grey[600]!),\n                                ),\n                                focusedBorder: OutlineInputBorder(\n                                  borderRadius: BorderRadius.circular(12),\n                                  borderSide: const BorderSide(color: AppTheme.primaryColor, width: 2),\n                                ),\n                                errorBorder: OutlineInputBorder(\n                                  borderRadius: BorderRadius.circular(12),\n                                  borderSide: BorderSide(color: Colors.red[400]!),\n                                ),\n                                focusedErrorBorder: OutlineInputBorder(\n                                  borderRadius: BorderRadius.circular(12),\n                                  borderSide: BorderSide(color: Colors.red[400]!, width: 2),\n                                ),\n                              ),\n                              validator: (value) {\n                                if (value == null || value.trim().isEmpty) {\n                                  return ",
    "suggested_key": "formLabelstyleTextstylecolorColorsgrey400",
    "context": "controller: _emailController,\n                              style: const TextStyle(color: Colors.white),\n                              decoration: InputDecoration(\n                                labelText: 'E-Mail',\n                                labelStyle: TextStyle(color: Colors.grey[400]),\n                                prefixIcon: const Icon(Icons.email, color: AppTheme.primaryColor),\n                                filled: true,",
    "category": "form",
    "confidence": 0.65,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 408,
    "column": 68,
    "original": ";\n                                }\n                                if (value.length < 6) {\n                                  return ",
    "suggested_key": "formIfValuelength6",
    "context": "),\n                              validator: (value) {\n                                if (value == null || value.isEmpty) {\n                                  return 'Passwort ist erforderlich';\n                                }\n                                if (value.length < 6) {\n                                  return 'Passwort muss mindestens 6 Zeichen lang sein';",
    "category": "form",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 283,
    "column": 49,
    "original": "Mindestens 6 Zeichen",
    "suggested_key": "formMindestens6Zeichen",
    "context": "borderRadius: BorderRadius.circular(12),\n                                      borderSide: BorderSide(color: Colors.red[400]!, width: 2),\n                                    ),\n                                    helperText: 'Mindestens 6 Zeichen',\n                                    helperStyle: TextStyle(color: Colors.grey[500], fontSize: 12),\n                                  ),\n                                  validator: (value) {",
    "category": "form",
    "confidence": 0.65,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 288,
    "column": 46,
    "original": "Bitte gib ein neues Passwort ein",
    "suggested_key": "formBitteGibEin",
    "context": "),\n                                  validator: (value) {\n                                    if (value == null || value.isEmpty) {\n                                      return 'Bitte gib ein neues Passwort ein';\n                                    }\n                                    if (value.length < 6) {\n                                      return 'Passwort muss mindestens 6 Zeichen lang sein';",
    "category": "form",
    "confidence": 0.65,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 355,
    "column": 46,
    "original": "Bitte bestätige dein neues Passwort",
    "suggested_key": "formBitteBestätigeDein",
    "context": "),\n                                  validator: (value) {\n                                    if (value == null || value.isEmpty) {\n                                      return 'Bitte bestätige dein neues Passwort';\n                                    }\n                                    if (value != _passwordController.text) {\n                                      return 'Die Passwörter stimmen nicht überein';",
    "category": "form",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 358,
    "column": 46,
    "original": "Die Passwörter stimmen nicht überein",
    "suggested_key": "formDiePasswörterStimmen",
    "context": "return 'Bitte bestätige dein neues Passwort';\n                                    }\n                                    if (value != _passwordController.text) {\n                                      return 'Die Passwörter stimmen nicht überein';\n                                    }\n                                    return null;\n                                  },",
    "category": "form",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 386,
    "column": 57,
    "original": "Mindestens 6 Zeichen",
    "suggested_key": "formMindestens6Zeichen",
    "context": "),\n                                      ),\n                                      const SizedBox(height: 8),\n                                      _buildRequirement('Mindestens 6 Zeichen', \n                                        _passwordController.text.length >= 6),\n                                      _buildRequirement('Keine Leerzeichen', \n                                        !_passwordController.text.contains(' ')),",
    "category": "form",
    "confidence": 0.65,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 388,
    "column": 57,
    "original": "Keine Leerzeichen",
    "suggested_key": "formKeineLeerzeichen",
    "context": "const SizedBox(height: 8),\n                                      _buildRequirement('Mindestens 6 Zeichen', \n                                        _passwordController.text.length >= 6),\n                                      _buildRequirement('Keine Leerzeichen', \n                                        !_passwordController.text.contains(' ')),\n                                      _buildRequirement('Passwörter stimmen überein', \n                                        _passwordController.text.isNotEmpty &&",
    "category": "form",
    "confidence": 0.65,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 389,
    "column": 78,
    "original": ")),\n                                      _buildRequirement(",
    "suggested_key": "form_buildrequirement",
    "context": "_buildRequirement('Mindestens 6 Zeichen', \n                                        _passwordController.text.length >= 6),\n                                      _buildRequirement('Keine Leerzeichen', \n                                        !_passwordController.text.contains(' ')),\n                                      _buildRequirement('Passwörter stimmen überein', \n                                        _passwordController.text.isNotEmpty && \n                                        _passwordController.text == _confirmPasswordController.text),",
    "category": "form",
    "confidence": 0.65,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 390,
    "column": 84,
    "original": ", \n                                        _passwordController.text.isNotEmpty && \n                                        _passwordController.text == _confirmPasswordController.text),\n                                    ],\n                                  ),\n                                ),\n                                const SizedBox(height: 16),\n                              ],\n                              \n                              // Error message\n                              if (_errorMessage != null)\n                                Container(\n                                  width: double.infinity,\n                                  padding: const EdgeInsets.all(12),\n                                  margin: const EdgeInsets.only(bottom: 16),\n                                  decoration: BoxDecoration(\n                                    color: Colors.red[900]!.withOpacity(0.3),\n                                    borderRadius: BorderRadius.circular(8),\n                                    border: Border.all(color: Colors.red[400]!.withOpacity(0.5)),\n                                  ),\n                                  child: Row(\n                                    children: [\n                                      Icon(Icons.error_outline, color: Colors.red[400], size: 20),\n                                      const SizedBox(width: 8),\n                                      Expanded(\n                                        child: Text(\n                                          _errorMessage!,\n                                          style: TextStyle(color: Colors.red[200], fontSize: 14),\n                                        ),\n                                      ),\n                                    ],\n                                  ),\n                                ),\n                              \n                              // Submit button\n                              if (!_isSuccess)\n                                SizedBox(\n                                  width: double.infinity,\n                                  height: 56,\n                                  child: ElevatedButton(\n                                    onPressed: _isLoading ? null : _resetPassword,\n                                    style: ElevatedButton.styleFrom(\n                                      backgroundColor: AppTheme.primaryColor,\n                                      foregroundColor: Colors.white,\n                                      shape: RoundedRectangleBorder(\n                                        borderRadius: BorderRadius.circular(12),\n                                      ),\n                                      elevation: 8,\n                                      shadowColor: AppTheme.primaryColor.withOpacity(0.5),\n                                    ),\n                                    child: _isLoading\n                                        ? const SizedBox(\n                                            height: 20,\n                                            width: 20,\n                                            child: CircularProgressIndicator(\n                                              strokeWidth: 2,\n                                              valueColor: AlwaysStoppedAnimation<Color>(Colors.white),\n                                            ),\n                                          )\n                                        : const Text(\n                                            ",
    "suggested_key": "form_passwordcontrollertextisnotempty_passwordcontrollertext_confirmpasswordcontrollertext",
    "context": "_passwordController.text.length >= 6),\n                                      _buildRequirement('Keine Leerzeichen', \n                                        !_passwordController.text.contains(' ')),\n                                      _buildRequirement('Passwörter stimmen überein', \n                                        _passwordController.text.isNotEmpty && \n                                        _passwordController.text == _confirmPasswordController.text),\n                                    ],",
    "category": "form",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 7,
    "column": 8,
    "original": "../../../core/services/invite_service.dart",
    "suggested_key": "formCoreservicesinvite_servicedart",
    "context": "import '../../../core/models/world.dart';\nimport '../../../core/services/world_service.dart';\nimport '../../../core/services/auth_service.dart';\nimport '../../../core/services/invite_service.dart';\nimport '../widgets/world_card.dart';\n\nclass WorldListController extends ChangeNotifier {",
    "category": "form",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 8,
    "column": 35,
    "original": ";\n\nclass WorldListController extends ChangeNotifier {\n  final WorldService _worldService;\n  final InviteService _inviteService;\n\n  // State\n  List<World> _worlds = [];\n  List<World> _filteredWorlds = [];\n  final Map<int, int> _playerCounts = {};\n  final Map<int, bool> _preRegisteredWorlds = {};\n  final Map<int, bool> _joinedWorlds = {};\n  bool _isLoading = false;\n  String? _error;\n\n  // Filters & Sorting\n  WorldStatus? _statusFilter;\n  WorldCategory? _categoryFilter;\n  String _sortBy = ",
    "suggested_key": "formClassWorldlistcontrollerExtends",
    "context": "import '../../../core/services/world_service.dart';\nimport '../../../core/services/auth_service.dart';\nimport '../../../core/services/invite_service.dart';\nimport '../widgets/world_card.dart';\n\nclass WorldListController extends ChangeNotifier {\n  final WorldService _worldService;",
    "category": "form",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 999,
    "column": 37,
    "original": ",\n                        style: Theme.of(context).textTheme.headlineSmall?.copyWith(\n                          color: Colors.white,\n                          fontWeight: FontWeight.bold,\n                        ),\n                      ),\n                      const SizedBox(height: 16),\n                      Text(\n                        _infoMessage ?? ",
    "suggested_key": "formStyleThemeofcontexttextthemeheadlinesmallcopywithColor",
    "context": "),\n                      const SizedBox(height: 24),\n                      Text(\n                        'Information',\n                        style: Theme.of(context).textTheme.headlineSmall?.copyWith(\n                          color: Colors.white,\n                          fontWeight: FontWeight.bold,",
    "category": "form",
    "confidence": 0.65,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1007,
    "column": 69,
    "original": ",\n                        style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                          color: Colors.grey[300],\n                        ),\n                        textAlign: TextAlign.center,\n                      ),\n                      const SizedBox(height: 32),\n                      \n                      // **NEUE INTELLIGENTE BUTTONS**\n                      _buildActionButtons(),\n                      \n                      // **INVITE-FLOWS: Kein \"Zurück\"-Link (User kommt von externem Link)**\n                      if (widget.inviteToken == null) ...[\n                        const SizedBox(height: 16),\n                        TextButton(\n                          onPressed: () => context.goNamed(",
    "suggested_key": "formStyleThemeofcontexttextthemebodylargecopywithColor",
    "context": "),\n                      const SizedBox(height: 16),\n                      Text(\n                        _infoMessage ?? 'Keine Information verfügbar',\n                        style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                          color: Colors.grey[300],\n                        ),",
    "category": "form",
    "confidence": 0.65,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\invite_dialog.dart",
    "line": 82,
    "column": 43,
    "original": ",\n                labelStyle: TextStyle(color: Colors.grey[400]),\n                prefixIcon: const Icon(Icons.email, color: AppTheme.primaryColor),\n                filled: true,\n                fillColor: const Color(0xFF2D2D2D),\n                border: OutlineInputBorder(\n                  borderRadius: BorderRadius.circular(12),\n                  borderSide: BorderSide(color: Colors.grey[600]!),\n                ),\n                enabledBorder: OutlineInputBorder(\n                  borderRadius: BorderRadius.circular(12),\n                  borderSide: BorderSide(color: Colors.grey[600]!),\n                ),\n                focusedBorder: OutlineInputBorder(\n                  borderRadius: BorderRadius.circular(12),\n                  borderSide: const BorderSide(color: AppTheme.primaryColor),\n                ),\n                errorBorder: OutlineInputBorder(\n                  borderRadius: BorderRadius.circular(12),\n                  borderSide: BorderSide(color: Colors.red[400]!),\n                ),\n              ),\n              validator: (value) {\n                if (value == null || value.isEmpty) {\n                  return ",
    "suggested_key": "formLabelstyleTextstylecolorColorsgrey400",
    "context": "keyboardType: TextInputType.emailAddress,\n              style: const TextStyle(color: Colors.white), // Weiße Schrift\n              decoration: InputDecoration(\n                labelText: 'E-Mail-Adresse',\n                labelStyle: TextStyle(color: Colors.grey[400]),\n                prefixIcon: const Icon(Icons.email, color: AppTheme.primaryColor),\n                filled: true,",
    "category": "form",
    "confidence": 0.65,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\pre_register_dialog.dart",
    "line": 101,
    "column": 43,
    "original": ",\n                labelStyle: TextStyle(color: Colors.grey[400]),\n                prefixIcon: const Icon(Icons.email, color: AppTheme.primaryColor),\n                filled: true,\n                fillColor: const Color(0xFF2D2D2D),\n                border: OutlineInputBorder(\n                  borderRadius: BorderRadius.circular(12),\n                  borderSide: BorderSide(color: Colors.grey[600]!),\n                ),\n                enabledBorder: OutlineInputBorder(\n                  borderRadius: BorderRadius.circular(12),\n                  borderSide: BorderSide(color: Colors.grey[600]!),\n                ),\n                focusedBorder: OutlineInputBorder(\n                  borderRadius: BorderRadius.circular(12),\n                  borderSide: const BorderSide(color: AppTheme.primaryColor),\n                ),\n                errorBorder: OutlineInputBorder(\n                  borderRadius: BorderRadius.circular(12),\n                  borderSide: BorderSide(color: Colors.red[400]!),\n                ),\n              ),\n              validator: (value) {\n                if (value == null || value.isEmpty) {\n                  return ",
    "suggested_key": "formLabelstyleTextstylecolorColorsgrey400",
    "context": "keyboardType: TextInputType.emailAddress,\n              style: const TextStyle(color: Colors.white), // Weiße Schrift\n              decoration: InputDecoration(\n                labelText: 'E-Mail-Adresse',\n                labelStyle: TextStyle(color: Colors.grey[400]),\n                prefixIcon: const Icon(Icons.email, color: AppTheme.primaryColor),\n                filled: true,",
    "category": "form",
    "confidence": 0.65,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 44,
    "column": 15,
    "original": ": _pendingRedirectRoute!,\n        ",
    "suggested_key": "navigation_pendingredirectroute",
    "context": "Map<String, dynamic>? getPendingRedirect() {\n    if (_pendingRedirectRoute != null) {\n      final redirect = {\n        'route': _pendingRedirectRoute!,\n        'params': _pendingRouteParams,\n        'inviteToken': _pendingInviteToken,\n      };",
    "category": "navigation",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\forgot_password_page.dart",
    "line": 1,
    "column": 8,
    "original": "package:flutter/material.dart",
    "suggested_key": "navigationPackagefluttermaterialdart",
    "context": "import 'package:flutter/material.dart';\nimport 'package:go_router/go_router.dart';\nimport '../../core/services/auth_service.dart';\nimport '../../theme/app_theme.dart';",
    "category": "navigation",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\forgot_password_page.dart",
    "line": 2,
    "column": 8,
    "original": "package:go_router/go_router.dart",
    "suggested_key": "navigationPackagego_routergo_routerdart",
    "context": "import 'package:flutter/material.dart';\nimport 'package:go_router/go_router.dart';\nimport '../../core/services/auth_service.dart';\nimport '../../theme/app_theme.dart';\nimport '../../theme/background_widget.dart';",
    "category": "navigation",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\forgot_password_page.dart",
    "line": 3,
    "column": 8,
    "original": "../../core/services/auth_service.dart",
    "suggested_key": "navigationCoreservicesauth_servicedart",
    "context": "import 'package:flutter/material.dart';\nimport 'package:go_router/go_router.dart';\nimport '../../core/services/auth_service.dart';\nimport '../../theme/app_theme.dart';\nimport '../../theme/background_widget.dart';",
    "category": "navigation",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\forgot_password_page.dart",
    "line": 5,
    "column": 43,
    "original": ";\n\nclass ForgotPasswordPage extends StatefulWidget {\n  const ForgotPasswordPage({super.key});\n\n  @override\n  State<ForgotPasswordPage> createState() => _ForgotPasswordPageState();\n}\n\nclass _ForgotPasswordPageState extends State<ForgotPasswordPage> {\n  final _formKey = GlobalKey<FormState>();\n  final _emailController = TextEditingController();\n  final AuthService _authService = AuthService();\n  \n  bool _isLoading = false;\n  bool _isSuccess = false;\n  String? _errorMessage;\n  \n  // E-Mail-Validierung Regex\n  static final RegExp _emailRegex = RegExp(r",
    "suggested_key": "navigationClassForgotpasswordpageExtends",
    "context": "import 'package:go_router/go_router.dart';\nimport '../../core/services/auth_service.dart';\nimport '../../theme/app_theme.dart';\nimport '../../theme/background_widget.dart';\n\nclass ForgotPasswordPage extends StatefulWidget {\n  const ForgotPasswordPage({super.key});",
    "category": "navigation",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 1,
    "column": 8,
    "original": "package:flutter/material.dart",
    "suggested_key": "navigationPackagefluttermaterialdart",
    "context": "import 'package:flutter/material.dart';\nimport 'package:go_router/go_router.dart';\nimport '../../config/logger.dart';\nimport '../../core/services/auth_service.dart';",
    "category": "navigation",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 2,
    "column": 8,
    "original": "package:go_router/go_router.dart",
    "suggested_key": "navigationPackagego_routergo_routerdart",
    "context": "import 'package:flutter/material.dart';\nimport 'package:go_router/go_router.dart';\nimport '../../config/logger.dart';\nimport '../../core/services/auth_service.dart';\nimport '../../theme/app_theme.dart';",
    "category": "navigation",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 3,
    "column": 8,
    "original": "../../config/logger.dart",
    "suggested_key": "navigationConfigloggerdart",
    "context": "import 'package:flutter/material.dart';\nimport 'package:go_router/go_router.dart';\nimport '../../config/logger.dart';\nimport '../../core/services/auth_service.dart';\nimport '../../theme/app_theme.dart';\nimport '../../theme/background_widget.dart';",
    "category": "navigation",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 4,
    "column": 8,
    "original": "../../core/services/auth_service.dart",
    "suggested_key": "navigationCoreservicesauth_servicedart",
    "context": "import 'package:flutter/material.dart';\nimport 'package:go_router/go_router.dart';\nimport '../../config/logger.dart';\nimport '../../core/services/auth_service.dart';\nimport '../../theme/app_theme.dart';\nimport '../../theme/background_widget.dart';",
    "category": "navigation",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 119,
    "column": 53,
    "original": "] as String;\n            final params = pendingRedirect[",
    "suggested_key": "navigationAsStringFinal",
    "context": "_authService.clearPendingRedirect();\n            \n            // Redirect zur ursprünglichen Invite-Seite\n            final routeName = pendingRedirect['route'] as String;\n            final params = pendingRedirect['params'] as Map<String, String>?;\n            \n            if (params != null) {",
    "category": "navigation",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 120,
    "column": 51,
    "original": "] as Map<String, String>?;\n            \n            if (params != null) {\n              context.goNamed(routeName, pathParameters: params);\n            } else {\n              context.goNamed(routeName);\n            }\n          } else if (_inviteToken != null) {\n            // Fallback: Wenn Invite-Token in Query-Parametern, direkt zur Invite-Seite\n            AppLogger.app.i(",
    "suggested_key": "navigationAsMapstringString",
    "context": "// Redirect zur ursprünglichen Invite-Seite\n            final routeName = pendingRedirect['route'] as String;\n            final params = pendingRedirect['params'] as Map<String, String>?;\n            \n            if (params != null) {\n              context.goNamed(routeName, pathParameters: params);",
    "category": "navigation",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 1,
    "column": 8,
    "original": "package:flutter/material.dart",
    "suggested_key": "navigationPackagefluttermaterialdart",
    "context": "import 'package:flutter/material.dart';\nimport 'package:go_router/go_router.dart';\nimport '../../config/logger.dart';\nimport '../../core/services/auth_service.dart';",
    "category": "navigation",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 2,
    "column": 8,
    "original": "package:go_router/go_router.dart",
    "suggested_key": "navigationPackagego_routergo_routerdart",
    "context": "import 'package:flutter/material.dart';\nimport 'package:go_router/go_router.dart';\nimport '../../config/logger.dart';\nimport '../../core/services/auth_service.dart';\nimport '../../core/services/world_service.dart';",
    "category": "navigation",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 3,
    "column": 8,
    "original": "../../config/logger.dart",
    "suggested_key": "navigationConfigloggerdart",
    "context": "import 'package:flutter/material.dart';\nimport 'package:go_router/go_router.dart';\nimport '../../config/logger.dart';\nimport '../../core/services/auth_service.dart';\nimport '../../core/services/world_service.dart';\nimport '../../theme/app_theme.dart';",
    "category": "navigation",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 4,
    "column": 8,
    "original": "../../core/services/auth_service.dart",
    "suggested_key": "navigationCoreservicesauth_servicedart",
    "context": "import 'package:flutter/material.dart';\nimport 'package:go_router/go_router.dart';\nimport '../../config/logger.dart';\nimport '../../core/services/auth_service.dart';\nimport '../../core/services/world_service.dart';\nimport '../../theme/app_theme.dart';\nimport '../../theme/background_widget.dart';",
    "category": "navigation",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 5,
    "column": 8,
    "original": "../../core/services/world_service.dart",
    "suggested_key": "navigationCoreservicesworld_servicedart",
    "context": "import 'package:go_router/go_router.dart';\nimport '../../config/logger.dart';\nimport '../../core/services/auth_service.dart';\nimport '../../core/services/world_service.dart';\nimport '../../theme/app_theme.dart';\nimport '../../theme/background_widget.dart';",
    "category": "navigation",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 123,
    "column": 53,
    "original": "] as String;\n            final params = pendingRedirect[",
    "suggested_key": "navigationAsStringFinal",
    "context": "_authService.clearPendingRedirect();\n            \n            // Redirect zur ursprünglichen Invite-Seite\n            final routeName = pendingRedirect['route'] as String;\n            final params = pendingRedirect['params'] as Map<String, String>?;\n            \n            ScaffoldMessenger.of(context).showSnackBar(",
    "category": "navigation",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 124,
    "column": 51,
    "original": "] as Map<String, String>?;\n            \n            ScaffoldMessenger.of(context).showSnackBar(\n              const SnackBar(\n                content: Text(",
    "suggested_key": "navigationAsMapstringString",
    "context": "// Redirect zur ursprünglichen Invite-Seite\n            final routeName = pendingRedirect['route'] as String;\n            final params = pendingRedirect['params'] as Map<String, String>?;\n            \n            ScaffoldMessenger.of(context).showSnackBar(\n              const SnackBar(",
    "category": "navigation",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 1,
    "column": 8,
    "original": "package:flutter/material.dart",
    "suggested_key": "navigationPackagefluttermaterialdart",
    "context": "import 'package:flutter/material.dart';\nimport 'package:go_router/go_router.dart';\nimport '../../core/services/auth_service.dart';\nimport '../../theme/app_theme.dart';",
    "category": "navigation",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 2,
    "column": 8,
    "original": "package:go_router/go_router.dart",
    "suggested_key": "navigationPackagego_routergo_routerdart",
    "context": "import 'package:flutter/material.dart';\nimport 'package:go_router/go_router.dart';\nimport '../../core/services/auth_service.dart';\nimport '../../theme/app_theme.dart';\nimport '../../theme/background_widget.dart';",
    "category": "navigation",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 3,
    "column": 8,
    "original": "../../core/services/auth_service.dart",
    "suggested_key": "navigationCoreservicesauth_servicedart",
    "context": "import 'package:flutter/material.dart';\nimport 'package:go_router/go_router.dart';\nimport '../../core/services/auth_service.dart';\nimport '../../theme/app_theme.dart';\nimport '../../theme/background_widget.dart';",
    "category": "navigation",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 5,
    "column": 43,
    "original": ";\n\nclass ResetPasswordPage extends StatefulWidget {\n  final String token;\n  \n  const ResetPasswordPage({\n    super.key,\n    required this.token,\n  });\n\n  @override\n  State<ResetPasswordPage> createState() => _ResetPasswordPageState();\n}\n\nclass _ResetPasswordPageState extends State<ResetPasswordPage> with SingleTickerProviderStateMixin {\n  final _formKey = GlobalKey<FormState>();\n  final _passwordController = TextEditingController();\n  final _confirmPasswordController = TextEditingController();\n  final AuthService _authService = AuthService();\n  \n  late AnimationController _animationController;\n  late Animation<double> _fadeAnimation;\n  \n  bool _isLoading = false;\n  bool _isSuccess = false;\n  String? _errorMessage;\n  bool _obscurePassword = true;\n  bool _obscureConfirmPassword = true;\n  \n  // Für bessere Validierung\n  bool _hasInteractedWithPassword = false;\n  bool _hasInteractedWithConfirmPassword = false;\n\n  @override\n  void initState() {\n    super.initState();\n    \n    // Animation Setup\n    _animationController = AnimationController(\n      duration: const Duration(milliseconds: 800),\n      vsync: this,\n    );\n    _fadeAnimation = Tween<double>(\n      begin: 0.0,\n      end: 1.0,\n    ).animate(CurvedAnimation(\n      parent: _animationController,\n      curve: Curves.easeIn,\n    ));\n    \n    _animationController.forward();\n  }\n\n  @override\n  void dispose() {\n    _animationController.dispose();\n    _passwordController.dispose();\n    _confirmPasswordController.dispose();\n    super.dispose();\n  }\n\n  Future<void> _resetPassword() async {\n    if (!_formKey.currentState!.validate()) {\n      return;\n    }\n\n    setState(() {\n      _isLoading = true;\n      _errorMessage = null;\n      _isSuccess = false;\n    });\n\n    try {\n      final success = await _authService.resetPassword(\n        widget.token,\n        _passwordController.text,\n      );\n\n      if (success && mounted) {\n        setState(() {\n          _isSuccess = true;\n        });\n        \n        // Erfolgsmeldung zeigen und nach 3 Sekunden zum Login\n        await Future.delayed(const Duration(seconds: 3));\n        if (mounted) {\n          context.goNamed(",
    "suggested_key": "navigationClassResetpasswordpageExtends",
    "context": "import 'package:go_router/go_router.dart';\nimport '../../core/services/auth_service.dart';\nimport '../../theme/app_theme.dart';\nimport '../../theme/background_widget.dart';\n\nclass ResetPasswordPage extends StatefulWidget {\n  final String token;",
    "category": "navigation",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1,
    "column": 8,
    "original": "package:flutter/material.dart",
    "suggested_key": "navigationPackagefluttermaterialdart",
    "context": "import 'package:flutter/material.dart';\nimport 'package:flutter/foundation.dart';\nimport 'package:go_router/go_router.dart';\nimport '../../config/logger.dart';",
    "category": "navigation",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 2,
    "column": 8,
    "original": "package:flutter/foundation.dart",
    "suggested_key": "navigationPackageflutterfoundationdart",
    "context": "import 'package:flutter/material.dart';\nimport 'package:flutter/foundation.dart';\nimport 'package:go_router/go_router.dart';\nimport '../../config/logger.dart';\nimport '../../core/models/world.dart';",
    "category": "navigation",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 3,
    "column": 8,
    "original": "package:go_router/go_router.dart",
    "suggested_key": "navigationPackagego_routergo_routerdart",
    "context": "import 'package:flutter/material.dart';\nimport 'package:flutter/foundation.dart';\nimport 'package:go_router/go_router.dart';\nimport '../../config/logger.dart';\nimport '../../core/models/world.dart';\nimport '../../core/services/world_service.dart';",
    "category": "navigation",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 4,
    "column": 8,
    "original": "../../config/logger.dart",
    "suggested_key": "navigationConfigloggerdart",
    "context": "import 'package:flutter/material.dart';\nimport 'package:flutter/foundation.dart';\nimport 'package:go_router/go_router.dart';\nimport '../../config/logger.dart';\nimport '../../core/models/world.dart';\nimport '../../core/services/world_service.dart';\nimport '../../core/services/auth_service.dart';",
    "category": "navigation",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 6,
    "column": 8,
    "original": "../../core/services/world_service.dart",
    "suggested_key": "navigationCoreservicesworld_servicedart",
    "context": "import 'package:go_router/go_router.dart';\nimport '../../config/logger.dart';\nimport '../../core/models/world.dart';\nimport '../../core/services/world_service.dart';\nimport '../../core/services/auth_service.dart';\nimport '../../core/services/api_service.dart';\nimport '../../theme/app_theme.dart';",
    "category": "navigation",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 11,
    "column": 8,
    "original": "../../shared/widgets/user_info_widget.dart",
    "suggested_key": "navigationSharedwidgetsuser_info_widgetdart",
    "context": "import '../../core/services/api_service.dart';\nimport '../../theme/app_theme.dart';\nimport '../../theme/background_widget.dart';\nimport '../../shared/widgets/user_info_widget.dart';\nimport '../../shared/widgets/navigation_widget.dart';\n\n// ServiceLocator Import für DI",
    "category": "navigation",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 12,
    "column": 8,
    "original": "../../shared/widgets/navigation_widget.dart",
    "suggested_key": "navigationSharedwidgetsnavigation_widgetdart",
    "context": "import '../../theme/app_theme.dart';\nimport '../../theme/background_widget.dart';\nimport '../../shared/widgets/user_info_widget.dart';\nimport '../../shared/widgets/navigation_widget.dart';\n\n// ServiceLocator Import für DI\nimport '../../main.dart';",
    "category": "navigation",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 15,
    "column": 24,
    "original": ";\n\n// Flow-Type-Enum für klare Trennung der beiden User-Journeys\nenum WorldJoinFlowType {\n  normal,   // Normale Navigation: User kommt von World-List\n  invite,   // Invite-Flow: User kommt über externen Link\n}\n\nclass WorldJoinPage extends StatefulWidget {\n  final String? worldId;\n  final String? inviteToken;\n  final WorldJoinFlowType flowType;\n  \n  const WorldJoinPage({\n    super.key, \n    this.worldId, \n    this.inviteToken,\n    required this.flowType,\n  });\n\n  @override\n  State<WorldJoinPage> createState() => _WorldJoinPageState();\n}\n\nclass _WorldJoinPageState extends State<WorldJoinPage> with SingleTickerProviderStateMixin {\n  // DI-ready: ServiceLocator verwenden\n  late final WorldService _worldService;\n  late final AuthService _authService;\n  \n  // Tab Controller\n  late TabController _tabController;\n  \n  bool _isLoading = false;\n  bool _isJoining = false;\n  bool _isPreRegistering = false;\n  bool _isAuthenticated = false;\n  bool _isJoined = false;\n  bool _isPreRegistered = false;\n  World? _world;\n  String? _errorMessage;\n  String? _infoMessage;\n  String? _joinError;\n  bool _showRegistrationButton = false;\n  bool _showLogoutButton = false;\n  String? _inviteEmail;\n  bool _showLoginButton = false;\n  bool _showAcceptInviteButton = false;\n  bool isInviteValid = true; // Neue Variable für Gültigkeit der Einladung\n\n  @override\n  void initState() {\n    super.initState();\n    \n    _tabController = TabController(length: 1, vsync: this);\n    _initializeServices();\n    _loadWorldData();\n  }\n  \n  @override\n  void dispose() {\n    _tabController.dispose();\n    super.dispose();\n  }\n\n  @override\n  void didChangeDependencies() {\n    super.didChangeDependencies();\n    // Authentication-Status bei Kontext-Änderungen prüfen\n    _checkAuthenticationStatus();\n  }\n\n  void _initializeServices() {\n    try {\n      if (ServiceLocator.has<WorldService>()) {\n        _worldService = ServiceLocator.get<WorldService>();\n      } else {\n        _worldService = WorldService();\n      }\n      \n      if (ServiceLocator.has<AuthService>()) {\n        _authService = ServiceLocator.get<AuthService>();\n      } else {\n        _authService = AuthService();\n      }\n      \n      // Authentication-Status prüfen\n      _checkAuthenticationStatus();\n    } catch (e) {\n      AppLogger.app.w(",
    "suggested_key": "navigationFlowtypeenumFürKlare",
    "context": "import '../../shared/widgets/navigation_widget.dart';\n\n// ServiceLocator Import für DI\nimport '../../main.dart';\n\n// Flow-Type-Enum für klare Trennung der beiden User-Journeys\nenum WorldJoinFlowType {",
    "category": "navigation",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 451,
    "column": 56,
    "original": ");\n        success = await _worldService.joinWorld(_world!.id);\n      }\n      \n      if (success) {\n        setState(() {\n          _isJoined = true;\n        });\n        \n        if (mounted) {\n          final message = widget.inviteToken != null \n            ? ",
    "suggested_key": "navigationSuccessAwait_worldservicejoinworld_worldid",
    "context": "}\n      } else {\n        // **NORMALE NAVIGATION: Standard World-Join**\n        AppLogger.app.i('🌍 Versuche normalen World-Join');\n        success = await _worldService.joinWorld(_world!.id);\n      }",
    "category": "navigation",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 699,
    "column": 30,
    "original": ", queryParameters: {",
    "suggested_key": "navigationQueryparameters",
    "context": "_authService.setPendingInviteRedirect(widget.inviteToken!);\n    }\n    \n    context.goNamed('register', queryParameters: {'email': email, 'invite_token': widget.inviteToken});\n  }\n\n  // Navigation zu Login",
    "category": "navigation",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 777,
    "column": 42,
    "original": ",\n                routeParams: {",
    "suggested_key": "navigationRouteparams",
    "context": "// Navigation widget (only show when authenticated)\n            if (_isAuthenticated)\n              NavigationWidget(\n                currentRoute: 'world-join',\n                routeParams: {'id': widget.worldId},\n                isJoinedWorld: _isJoined,\n              ),",
    "category": "navigation",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 778,
    "column": 34,
    "original": ": widget.worldId},\n                isJoinedWorld: _isJoined,\n              ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildErrorState() {\n    return Center(\n      child: Padding(\n        padding: const EdgeInsets.all(24.0),\n        child: Center(\n          child: ConstrainedBox(\n            constraints: const BoxConstraints(maxWidth: 500),\n            child: Card(\n              elevation: 12,\n              color: const Color(0xFF1A1A1A), // Dunkle Karte\n              shape: RoundedRectangleBorder(\n                borderRadius: BorderRadius.circular(20),\n                side: BorderSide(\n                  color: AppTheme.primaryColor.withOpacity(0.3),\n                  width: 1,\n                ),\n              ),\n              child: Container(\n                decoration: BoxDecoration(\n                  borderRadius: BorderRadius.circular(20),\n                  gradient: const LinearGradient(\n                    begin: Alignment.topLeft,\n                    end: Alignment.bottomRight,\n                    colors: [\n                      Color(0xFF1A1A1A),\n                      Color(0xFF2A2A2A),\n                    ],\n                  ),\n                ),\n                child: Padding(\n                  padding: const EdgeInsets.all(32.0),\n                  child: Column(\n                    mainAxisSize: MainAxisSize.min,\n                    children: [\n                      Icon(\n                        Icons.error_outline,\n                        size: 80,\n                        color: Colors.red[400],\n                      ),\n                      const SizedBox(height: 24),\n                      Text(\n                        ",
    "suggested_key": "navigationWidgetworldidIsjoinedworld_isjoined",
    "context": "if (_isAuthenticated)\n              NavigationWidget(\n                currentRoute: 'world-join',\n                routeParams: {'id': widget.worldId},\n                isJoinedWorld: _isJoined,\n              ),\n          ],",
    "category": "navigation",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 1,
    "column": 8,
    "original": "package:flutter/material.dart",
    "suggested_key": "navigationPackagefluttermaterialdart",
    "context": "import 'package:flutter/material.dart';\nimport 'package:flutter/foundation.dart';\nimport 'package:go_router/go_router.dart';\nimport '../../config/logger.dart';",
    "category": "navigation",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 2,
    "column": 8,
    "original": "package:flutter/foundation.dart",
    "suggested_key": "navigationPackageflutterfoundationdart",
    "context": "import 'package:flutter/material.dart';\nimport 'package:flutter/foundation.dart';\nimport 'package:go_router/go_router.dart';\nimport '../../config/logger.dart';\nimport '../../core/services/auth_service.dart';",
    "category": "navigation",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 3,
    "column": 8,
    "original": "package:go_router/go_router.dart",
    "suggested_key": "navigationPackagego_routergo_routerdart",
    "context": "import 'package:flutter/material.dart';\nimport 'package:flutter/foundation.dart';\nimport 'package:go_router/go_router.dart';\nimport '../../config/logger.dart';\nimport '../../core/services/auth_service.dart';\nimport '../../core/services/world_service.dart';",
    "category": "navigation",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 4,
    "column": 8,
    "original": "../../config/logger.dart",
    "suggested_key": "navigationConfigloggerdart",
    "context": "import 'package:flutter/material.dart';\nimport 'package:flutter/foundation.dart';\nimport 'package:go_router/go_router.dart';\nimport '../../config/logger.dart';\nimport '../../core/services/auth_service.dart';\nimport '../../core/services/world_service.dart';\nimport '../../core/services/invite_service.dart';",
    "category": "navigation",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 5,
    "column": 8,
    "original": "../../core/services/auth_service.dart",
    "suggested_key": "navigationCoreservicesauth_servicedart",
    "context": "import 'package:flutter/foundation.dart';\nimport 'package:go_router/go_router.dart';\nimport '../../config/logger.dart';\nimport '../../core/services/auth_service.dart';\nimport '../../core/services/world_service.dart';\nimport '../../core/services/invite_service.dart';\nimport '../../core/models/world.dart';",
    "category": "navigation",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 6,
    "column": 8,
    "original": "../../core/services/world_service.dart",
    "suggested_key": "navigationCoreservicesworld_servicedart",
    "context": "import 'package:go_router/go_router.dart';\nimport '../../config/logger.dart';\nimport '../../core/services/auth_service.dart';\nimport '../../core/services/world_service.dart';\nimport '../../core/services/invite_service.dart';\nimport '../../core/models/world.dart';\nimport '../../theme/app_theme.dart';",
    "category": "navigation",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 17,
    "column": 8,
    "original": "./widgets/world_filters.dart",
    "suggested_key": "navigationWidgetsworld_filtersdart",
    "context": "import '../../shared/widgets/user_info_widget.dart';\nimport '../../shared/widgets/navigation_widget.dart';\nimport './widgets/world_card.dart';\nimport './widgets/world_filters.dart';\n\n// ServiceLocator Import für DI\nimport '../../main.dart';",
    "category": "navigation",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 135,
    "column": 69,
    "original": "Token fehlt",
    "suggested_key": "navigationTokenFehlt",
    "context": "});\n          \n          // If token is invalid, redirect to login\n          if (e.toString().contains('401') || e.toString().contains('Token fehlt')) {\n            await _authService.logout();\n            // Cache invalidieren nach Logout\n            AppRouter.invalidateAuthCache();",
    "category": "navigation",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 140,
    "column": 37,
    "original": ");\n            }\n          }\n        }\n      }\n    }\n  }\n\n  void _generateMockPlayerCounts() {\n    final random = DateTime.now().millisecondsSinceEpoch;\n    for (final world in _worlds) {\n      // Generate realistic player counts based on world status\n      int baseCount = 0;\n      switch (world.status) {\n        case WorldStatus.upcoming:\n          baseCount = 5 + (random % 15); // 5-20 players\n          break;\n        case WorldStatus.open:\n          baseCount = 20 + (random % 30); // 20-50 players\n          break;\n        case WorldStatus.running:\n          baseCount = 50 + (random % 100); // 50-150 players\n          break;\n        case WorldStatus.closed:\n        case WorldStatus.archived:\n          baseCount = 0 + (random % 10); // 0-10 players\n          break;\n      }\n      _playerCounts[world.id] = baseCount;\n    }\n  }\n\n  void _applyFiltersAndSorting() {\n    List<World> filtered = List.from(_worlds);\n    \n    // Apply status filter\n    if (_statusFilter != null) {\n      filtered = filtered.where((world) => world.status == _statusFilter).toList();\n    }\n    \n    // Apply category filter (mock implementation)\n    if (_categoryFilter != null) {\n      // In real app, this would be based on world.category field\n      // For now, we",
    "suggested_key": "navigationVoid_generatemockplayercountsFinal",
    "context": "// Cache invalidieren nach Logout\n            AppRouter.invalidateAuthCache();\n            if (mounted) {\n              context.goNamed('login');\n            }\n          }\n        }",
    "category": "navigation",
    "confidence": 0.65,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 320,
    "column": 67,
    "original": "Token fehlt",
    "suggested_key": "navigationTokenFehlt",
    "context": "} catch (e) {\n      if (mounted) {\n        // Prüfe ob es ein Token-Problem ist\n        if (e.toString().contains('401') || e.toString().contains('Token fehlt')) {\n          await _authService.logout();\n          // Cache invalidieren nach Logout\n          AppRouter.invalidateAuthCache();",
    "category": "navigation",
    "confidence": 0.65,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 358,
    "column": 67,
    "original": "Token fehlt",
    "suggested_key": "navigationTokenFehlt",
    "context": "} catch (e) {\n      if (mounted) {\n        // Prüfe ob es ein Token-Problem ist\n        if (e.toString().contains('401') || e.toString().contains('Token fehlt')) {\n          await _authService.logout();\n          // Cache invalidieren nach Logout\n          AppRouter.invalidateAuthCache();",
    "category": "navigation",
    "confidence": 0.65,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 425,
    "column": 67,
    "original": "Token fehlt",
    "suggested_key": "navigationTokenFehlt",
    "context": "} catch (e) {\n      if (mounted) {\n        // Prüfe ob es ein Token-Problem ist\n        if (e.toString().contains('401') || e.toString().contains('Token fehlt')) {\n          await _authService.logout();\n          // Cache invalidieren nach Logout\n          AppRouter.invalidateAuthCache();",
    "category": "navigation",
    "confidence": 0.65,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 464,
    "column": 67,
    "original": "Token fehlt",
    "suggested_key": "navigationTokenFehlt",
    "context": "} catch (e) {\n      if (mounted) {\n        // Prüfe ob es ein Token-Problem ist\n        if (e.toString().contains('401') || e.toString().contains('Token fehlt')) {\n          await _authService.logout();\n          // Cache invalidieren nach Logout\n          AppRouter.invalidateAuthCache();",
    "category": "navigation",
    "confidence": 0.65,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 504,
    "column": 69,
    "original": "Token fehlt",
    "suggested_key": "navigationTokenFehlt",
    "context": "} catch (e) {\n        if (mounted) {\n          // Prüfe ob es ein Token-Problem ist\n          if (e.toString().contains('401') || e.toString().contains('Token fehlt')) {\n            await _authService.logout();\n            // Cache invalidieren nach Logout\n            AppRouter.invalidateAuthCache();",
    "category": "navigation",
    "confidence": 0.65,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1616,
    "column": 24,
    "original": ",\n              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),\n            ),\n          ),\n        ),\n      );\n    }\n\n    // **REGISTRATION BUTTON**\n    if (_showRegistrationButton && _inviteEmail != null) {\n      buttons.add(\n        Container(\n          width: double.infinity,\n          margin: const EdgeInsets.only(bottom: 12.0),\n          child: ElevatedButton(\n            onPressed: () {\n              // Redirect auf Register-Seite mit E-Mail vorausgefüllt\n              final registerRoute = ",
    "suggested_key": "uiStyleTextstylefontsize16",
    "context": "),\n            ),\n            child: const Text(\n              'Anmelden',\n              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),\n            ),\n          ),",
    "category": "ui",
    "confidence": 0.65,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1649,
    "column": 28,
    "original": ",\n              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),\n            ),\n          ),\n        ),\n      );\n    }\n\n    // **ACCEPT INVITE BUTTON (wenn User korrekt angemeldet)**\n    if (_showAcceptInviteButton && widget.inviteToken != null) {\n      buttons.add(\n        Container(\n          width: double.infinity,\n          margin: const EdgeInsets.only(bottom: 12.0),\n          child: ElevatedButton(\n            onPressed: _isJoining || !isInviteValid ? null : () => _joinWorld(),\n            style: ElevatedButton.styleFrom(\n              backgroundColor: Colors.green[600],\n              foregroundColor: Colors.white,\n              padding: const EdgeInsets.symmetric(vertical: 16),\n              shape: RoundedRectangleBorder(\n                borderRadius: BorderRadius.circular(12),\n              ),\n            ),\n            child: _isJoining\n                ? const SizedBox(\n                    height: 20,\n                    width: 20,\n                    child: CircularProgressIndicator(\n                      strokeWidth: 2,\n                      valueColor: AlwaysStoppedAnimation<Color>(Colors.white),\n                    ),\n                  )\n                : const Text(\n                    ",
    "suggested_key": "uiStyleTextstylefontsize16",
    "context": "),\n            ),\n            child: const Text(\n              'Registrieren',\n              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),\n            ),\n          ),",
    "category": "ui",
    "confidence": 0.65,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1714,
    "column": 24,
    "original": ",\n              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),\n            ),\n          ),\n        ),\n      );\n    }\n\n    // FALLBACK: Normale World-Join-Buttons wenn keine spezifischen Buttons\n    if (buttons.isEmpty) {\n      // **NORMALE WORLD-JOIN LOGIC** (wenn kein Invite-Token)\n      if (widget.inviteToken == null && _world != null) {\n        final world = _world!;\n        \n        // **STATUS-BASIERTE INTELLIGENTE BUTTON-LOGIK**\n        switch (world.status) {\n          case WorldStatus.upcoming:\n            // Vorregistrierung oder Zurückziehen\n            if (_isPreRegistered) {\n              buttons.add(\n                Container(\n                  width: double.infinity,\n                  margin: const EdgeInsets.only(bottom: 12.0),\n                  child: ElevatedButton.icon(\n                    onPressed: (_isPreRegistering || _isJoining) ? null : _cancelPreRegistration,\n                    icon: const Icon(Icons.cancel),\n                    label: Text(_isPreRegistering ? ",
    "suggested_key": "uiStyleTextstylefontsize16",
    "context": "),\n            ),\n            child: const Text(\n              'Abmelden',\n              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),\n            ),\n          ),",
    "category": "ui",
    "confidence": 0.65,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 288,
    "column": 24,
    "original": "Du musst dich mit der E-Mail-Adresse $inviteEmail registrieren.",
    "suggested_key": "buttonDuMusstDich",
    "context": "case 'not_logged_in':\n        if (requiresAction == 'register') {\n          // Mail ist unbekannt -> nur Register\n          actionText = 'Du musst dich mit der E-Mail-Adresse $inviteEmail registrieren.';\n          infoText = '$baseInfoText\\n\\n$actionText';\n          showRegisterButton = isInviteValid; // Nur bei gültigen Invites\n        }",
    "category": "button",
    "confidence": 0.6000000000000001,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 297,
    "column": 24,
    "original": "Dein Account mit $inviteEmail ist bereits registriert. Bitte melde dich an.",
    "suggested_key": "buttonDeinAccountMit",
    "context": "case 'user_exists_not_logged_in':\n        if (requiresAction == 'login') {\n          // Mail ist bekannt, User nicht angemeldet -> nur Login\n          actionText = 'Dein Account mit $inviteEmail ist bereits registriert. Bitte melde dich an.';\n          infoText = '$baseInfoText\\n\\n$actionText';\n          showLoginButton = isInviteValid; // Nur bei gültigen Invites\n        }",
    "category": "button",
    "confidence": 0.6000000000000001,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 307,
    "column": 24,
    "original": "Diese Einladung ist für $inviteEmail bestimmt, aber du bist als $currentUserEmail angemeldet.",
    "suggested_key": "buttonDieseEinladungIst",
    "context": "if (requiresAction == 'logout_and_register') {\n          final currentUserEmail = userStatusData['currentUser']?['email'];\n          // User mit falscher Mail angemeldet -> Logout + Register\n          actionText = 'Diese Einladung ist für $inviteEmail bestimmt, aber du bist als $currentUserEmail angemeldet.';\n          infoText = '$baseInfoText\\n\\n$actionText\\n\\nBitte melde dich ab und registriere dich mit der richtigen E-Mail-Adresse.';\n          showLogoutButton = isInviteValid; // Nur bei gültigen Invites\n        }",
    "category": "button",
    "confidence": 0.6000000000000001,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 308,
    "column": 22,
    "original": "$baseInfoText\\n\\n$actionText\\n\\nBitte melde dich ab und registriere dich mit der richtigen E-Mail-Adresse.",
    "suggested_key": "buttonBaseinfotextnnactiontextnnbitteMeldeDich",
    "context": "final currentUserEmail = userStatusData['currentUser']?['email'];\n          // User mit falscher Mail angemeldet -> Logout + Register\n          actionText = 'Diese Einladung ist für $inviteEmail bestimmt, aber du bist als $currentUserEmail angemeldet.';\n          infoText = '$baseInfoText\\n\\n$actionText\\n\\nBitte melde dich ab und registriere dich mit der richtigen E-Mail-Adresse.';\n          showLogoutButton = isInviteValid; // Nur bei gültigen Invites\n        }\n        break;",
    "category": "button",
    "confidence": 0.6000000000000001,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 316,
    "column": 24,
    "original": "Du bist mit der richtigen E-Mail-Adresse angemeldet und kannst die Einladung jetzt annehmen.",
    "suggested_key": "buttonDuBistMit",
    "context": "case 'correct_email':\n        if (requiresAction == 'join_world') {\n          // User richtig angemeldet -> nur Accept Button (KEIN Auto-Accept!)\n          actionText = 'Du bist mit der richtigen E-Mail-Adresse angemeldet und kannst die Einladung jetzt annehmen.';\n          infoText = '$baseInfoText\\n\\n$actionText';\n          showAcceptButton = isInviteValid; // Nur bei gültigen Invites",
    "category": "button",
    "confidence": 0.6000000000000001,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 32,
    "column": 98,
    "original": "...",
    "suggested_key": "errorText079",
    "context": "_pendingInviteToken = inviteToken;\n    _pendingRedirectRoute = 'world-join-by-token';\n    _pendingRouteParams = {'token': inviteToken};\n    AppLogger.auth.i('🎫 Invite-Redirect gesetzt', error: {'token': inviteToken.substring(0, 8) + '...'});\n  }\n\n  void setPendingRoute(String routeName, {Map<String, String>? params}) {",
    "category": "error",
    "confidence": 0.6000000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 489,
    "column": 106,
    "original": "...",
    "suggested_key": "errorText079",
    "context": "// Passwort zurücksetzen mit Token\n  Future<bool> resetPassword(String token, String newPassword) async {\n    try {\n      AppLogger.auth.i('🔄 Password-Reset wird versucht', error: {'tokenPreview': token.substring(0, 8) + '...'});\n      \n      final response = await _apiService.post('/auth/reset-password', {\n        'token': token,",
    "category": "error",
    "confidence": 0.6000000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 390,
    "column": 104,
    "original": "...",
    "suggested_key": "errorText079",
    "context": "return null;\n    } catch (e) {\n      AppLogger.logError('Fehler bei Token-Validierung', e, context: {'token': token.substring(0, 8) + '...'});\n      // Fallback für bessere UX\n      return null;\n    }",
    "category": "error",
    "confidence": 0.6000000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 399,
    "column": 92,
    "original": "...",
    "suggested_key": "errorText079",
    "context": "// Invite akzeptieren und User der Welt hinzufügen\n  Future<Map<String, dynamic>?> acceptInvite(String token) async {\n    try {\n      AppLogger.app.i('🎫 Invite wird akzeptiert', error: {'token': token.substring(0, 8) + '...'});\n      \n      // API-Call mit Authentifizierung (da User eingeloggt sein muss)\n      final response = await _apiService.post('/invites/accept/$token', {});",
    "category": "error",
    "confidence": 0.6000000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 417,
    "column": 98,
    "original": "...",
    "suggested_key": "errorText079",
    "context": "// Fehlerbehandlung für spezifische HTTP-Status-Codes\n      if (response.statusCode == 409) {\n        AppLogger.app.w('⚠️ Invite bereits akzeptiert', error: {'token': token.substring(0, 8) + '...'});\n        throw Exception('Invite bereits akzeptiert');\n      } else if (response.statusCode == 403) {\n        AppLogger.app.w('⚠️ E-Mail-Mismatch bei Invite', error: {'token': token.substring(0, 8) + '...'});",
    "category": "error",
    "confidence": 0.6000000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 420,
    "column": 99,
    "original": "...",
    "suggested_key": "errorText079",
    "context": "AppLogger.app.w('⚠️ Invite bereits akzeptiert', error: {'token': token.substring(0, 8) + '...'});\n        throw Exception('Invite bereits akzeptiert');\n      } else if (response.statusCode == 403) {\n        AppLogger.app.w('⚠️ E-Mail-Mismatch bei Invite', error: {'token': token.substring(0, 8) + '...'});\n        throw Exception('Diese Einladung ist nicht für deine E-Mail-Adresse bestimmt');\n      } else if (response.statusCode == 410) {\n        AppLogger.app.w('⚠️ Invite-Token abgelaufen', error: {'token': token.substring(0, 8) + '...'});",
    "category": "error",
    "confidence": 0.6000000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 423,
    "column": 96,
    "original": "...",
    "suggested_key": "errorText079",
    "context": "AppLogger.app.w('⚠️ E-Mail-Mismatch bei Invite', error: {'token': token.substring(0, 8) + '...'});\n        throw Exception('Diese Einladung ist nicht für deine E-Mail-Adresse bestimmt');\n      } else if (response.statusCode == 410) {\n        AppLogger.app.w('⚠️ Invite-Token abgelaufen', error: {'token': token.substring(0, 8) + '...'});\n        throw Exception('Invite-Token ist abgelaufen');\n      }",
    "category": "error",
    "confidence": 0.6000000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 429,
    "column": 106,
    "original": "...",
    "suggested_key": "errorText079",
    "context": "return null;\n    } catch (e) {\n      AppLogger.logError('Fehler bei Invite-Akzeptierung', e, context: {'token': token.substring(0, 8) + '...'});\n      rethrow;\n    }\n  }",
    "category": "error",
    "confidence": 0.6000000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 129,
    "column": 126,
    "original": "...",
    "suggested_key": "errorText079",
    "context": "}\n          } else if (_inviteToken != null) {\n            // Fallback: Wenn Invite-Token in Query-Parametern, direkt zur Invite-Seite\n            AppLogger.app.i('🎫 Invite-Token in Query - direkte Navigation', error: {'token': _inviteToken!.substring(0, 8) + '...'});\n            context.goNamed('world-join-by-token', pathParameters: {'token': _inviteToken!});\n          } else {\n            // Standard-Redirect zu Welten-Liste",
    "category": "error",
    "confidence": 0.6000000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 146,
    "column": 144,
    "original": "...",
    "suggested_key": "errorText079",
    "context": "}\n          } else if (_inviteToken != null) {\n            // Fallback: Wenn Invite-Token in Query-Parametern, direkt zur Invite-Seite\n            AppLogger.app.i('🎫 Invite-Token in Query nach Registration - direkte Navigation', error: {'token': _inviteToken!.substring(0, 8) + '...'});\n            \n            ScaffoldMessenger.of(context).showSnackBar(\n              const SnackBar(",
    "category": "error",
    "confidence": 0.6000000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 99,
    "column": 29,
    "original": "Der Reset-Link ist ungültig oder abgelaufen. Bitte fordere einen neuen Link an.",
    "suggested_key": "errorDerResetlinkIst",
    "context": "setState(() {\n          final error = e.toString().replaceAll('Exception: ', '');\n          if (error.contains('expired') || error.contains('invalid')) {\n            _errorMessage = 'Der Reset-Link ist ungültig oder abgelaufen. Bitte fordere einen neuen Link an.';\n          } else {\n            _errorMessage = error;\n          }",
    "category": "error",
    "confidence": 0.6000000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 421,
    "column": 24,
    "original": "Du kannst nun der Welt beitreten.",
    "suggested_key": "errorDuKannstNun",
    "context": "AppLogger.logError('Automatische Invite-Akzeptierung fehlgeschlagen', e);\n      // Fehler nicht als kritisch behandeln - User kann manuell beitreten\n      setState(() {\n        _infoMessage = 'Du kannst nun der Welt beitreten.';\n      });\n    }\n  }",
    "category": "error",
    "confidence": 0.6000000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 475,
    "column": 24,
    "original": "Beitritt fehlgeschlagen. Versuche es erneut.",
    "suggested_key": "errorBeitrittFehlgeschlagenVersuche",
    "context": "}\n      } else {\n        setState(() {\n          _joinError = 'Beitritt fehlgeschlagen. Versuche es erneut.';\n        });\n      }\n    } catch (e) {",
    "category": "error",
    "confidence": 0.6000000000000001,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 489,
    "column": 24,
    "original": "Diese Einladung wurde bereits akzeptiert.",
    "suggested_key": "errorDieseEinladungWurde",
    "context": "setState(() {\n        // Bessere Fehlermeldungen für verschiedene Szenarien\n        if (e.toString().contains('bereits akzeptiert')) {\n          _joinError = 'Diese Einladung wurde bereits akzeptiert.';\n          _isJoined = true; // User ist bereits Mitglied\n        } else if (e.toString().contains('nicht für deine E-Mail-Adresse')) {\n          _joinError = 'Diese Einladung ist nicht für deine E-Mail-Adresse bestimmt.';",
    "category": "error",
    "confidence": 0.6000000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 492,
    "column": 24,
    "original": "Diese Einladung ist nicht für deine E-Mail-Adresse bestimmt.",
    "suggested_key": "errorDieseEinladungIst",
    "context": "_joinError = 'Diese Einladung wurde bereits akzeptiert.';\n          _isJoined = true; // User ist bereits Mitglied\n        } else if (e.toString().contains('nicht für deine E-Mail-Adresse')) {\n          _joinError = 'Diese Einladung ist nicht für deine E-Mail-Adresse bestimmt.';\n        } else if (e.toString().contains('abgelaufen')) {\n          _joinError = 'Diese Einladung ist abgelaufen.';\n        } else {",
    "category": "error",
    "confidence": 0.6000000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 494,
    "column": 24,
    "original": "Diese Einladung ist abgelaufen.",
    "suggested_key": "errorDieseEinladungIst",
    "context": "} else if (e.toString().contains('nicht für deine E-Mail-Adresse')) {\n          _joinError = 'Diese Einladung ist nicht für deine E-Mail-Adresse bestimmt.';\n        } else if (e.toString().contains('abgelaufen')) {\n          _joinError = 'Diese Einladung ist abgelaufen.';\n        } else {\n          _joinError = 'Ein Fehler ist aufgetreten: ${e.toString().replaceAll('Exception: ', '')}';\n        }",
    "category": "error",
    "confidence": 0.6000000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 128,
    "column": 31,
    "original": "Registrierung erfolgreich! Du wirst zur Einladung weitergeleitet...",
    "suggested_key": "inviteRegistrierungErfolgreichDu",
    "context": "ScaffoldMessenger.of(context).showSnackBar(\n              const SnackBar(\n                content: Text('Registrierung erfolgreich! Du wirst zur Einladung weitergeleitet...'),\n                backgroundColor: Colors.green,\n                duration: Duration(seconds: 2),\n              ),",
    "category": "invite",
    "confidence": 0.6000000000000001,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 150,
    "column": 31,
    "original": "Registrierung erfolgreich! Du wirst zur Einladung weitergeleitet...",
    "suggested_key": "inviteRegistrierungErfolgreichDu",
    "context": "ScaffoldMessenger.of(context).showSnackBar(\n              const SnackBar(\n                content: Text('Registrierung erfolgreich! Du wirst zur Einladung weitergeleitet...'),\n                backgroundColor: Colors.green,\n                duration: Duration(seconds: 2),\n              ),",
    "category": "invite",
    "confidence": 0.6000000000000001,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 273,
    "column": 24,
    "original": "\\n\\n✅ Diese Einladung wurde bereits akzeptiert.",
    "suggested_key": "inviteNnDieseEinladung",
    "context": "final dateStr = '${expiresAtLocal.day.toString().padLeft(2, '0')}.${expiresAtLocal.month.toString().padLeft(2, '0')}.${expiresAtLocal.year} ${expiresAtLocal.hour.toString().padLeft(2, '0')}:${expiresAtLocal.minute.toString().padLeft(2, '0')}';\n      \n      if (isAccepted) {\n        validityText = '\\n\\n✅ Diese Einladung wurde bereits akzeptiert.';\n      } else if (isExpired) {\n        validityText = '\\n\\n❌ Diese Einladung ist am $dateStr abgelaufen.';\n      } else {",
    "category": "invite",
    "confidence": 0.6000000000000001,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 275,
    "column": 24,
    "original": "\\n\\n❌ Diese Einladung ist am $dateStr abgelaufen.",
    "suggested_key": "inviteNnDieseEinladung",
    "context": "if (isAccepted) {\n        validityText = '\\n\\n✅ Diese Einladung wurde bereits akzeptiert.';\n      } else if (isExpired) {\n        validityText = '\\n\\n❌ Diese Einladung ist am $dateStr abgelaufen.';\n      } else {\n        validityText = '\\n\\n⏰ Gültig bis: $dateStr';\n      }",
    "category": "invite",
    "confidence": 0.6000000000000001,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 332,
    "column": 19,
    "original": "\\n\\n⚠️ Diese Einladung kann nicht mehr verwendet werden.",
    "suggested_key": "inviteNnDieseEinladung",
    "context": "// Bei ungültigen Invites zusätzliche Info\n    if (!isInviteValid) {\n      infoText += '\\n\\n⚠️ Diese Einladung kann nicht mehr verwendet werden.';\n    }\n    \n    setState(() {",
    "category": "invite",
    "confidence": 0.6000000000000001,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 496,
    "column": 29,
    "original": "Einladung erfolgreich versendet!",
    "suggested_key": "inviteEinladungErfolgreichVersendet",
    "context": "if (success && mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            const SnackBar(\n              content: Text('Einladung erfolgreich versendet!'),\n              backgroundColor: Colors.green,\n            ),\n          );",
    "category": "invite",
    "confidence": 0.6000000000000001,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 166,
    "column": 31,
    "original": "Registrierung erfolgreich! Willkommen bei Weltenwind!",
    "suggested_key": "worldRegistrierungErfolgreichWillkommen",
    "context": "// Standard-Redirect zu Welten-Liste\n            ScaffoldMessenger.of(context).showSnackBar(\n              const SnackBar(\n                content: Text('Registrierung erfolgreich! Willkommen bei Weltenwind!'),\n                backgroundColor: Colors.green,\n                duration: Duration(seconds: 2),\n              ),",
    "category": "world",
    "confidence": 0.6000000000000001,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_list_states.dart",
    "line": 18,
    "column": 13,
    "original": "Welten werden geladen...",
    "suggested_key": "worldWeltenWerdenGeladen",
    "context": "),\n          SizedBox(height: 16),\n          Text(\n            'Welten werden geladen...',\n            style: TextStyle(\n              color: Colors.grey,\n              fontSize: 16,",
    "category": "world",
    "confidence": 0.6000000000000001,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_list_states.dart",
    "line": 66,
    "column": 19,
    "original": "Versuche die Filter anzupassen oder zurückzusetzen.",
    "suggested_key": "worldVersucheDieFilter",
    "context": "const SizedBox(height: 8),\n          Text(\n            hasActiveFilters\n                ? 'Versuche die Filter anzupassen oder zurückzusetzen.'\n                : 'Schaue später noch einmal vorbei oder erstelle eine neue Welt.',\n            style: TextStyle(\n              fontSize: 14,",
    "category": "world",
    "confidence": 0.6000000000000001,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_list_states.dart",
    "line": 67,
    "column": 19,
    "original": "Schaue später noch einmal vorbei oder erstelle eine neue Welt.",
    "suggested_key": "worldSchaueSpäterNoch",
    "context": "Text(\n            hasActiveFilters\n                ? 'Versuche die Filter anzupassen oder zurückzusetzen.'\n                : 'Schaue später noch einmal vorbei oder erstelle eine neue Welt.',\n            style: TextStyle(\n              fontSize: 14,\n              color: Colors.grey[500],",
    "category": "world",
    "confidence": 0.6000000000000001,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 384,
    "column": 26,
    "original": "Willkommen in der Welt \"${_world?.name}\"! Das Invite wurde automatisch akzeptiert.",
    "suggested_key": "worldWillkommenInDer",
    "context": "if (result != null) {\n        setState(() {\n          _isJoined = true;\n          _infoMessage = 'Willkommen in der Welt \"${_world?.name}\"! Das Invite wurde automatisch akzeptiert.';\n        });\n        \n        if (mounted) {",
    "category": "world",
    "confidence": 0.6000000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 390,
    "column": 29,
    "original": "Erfolgreich der Welt \"${_world!.name}\" beigetreten!",
    "suggested_key": "worldErfolgreichDerWelt",
    "context": "if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Erfolgreich der Welt \"${_world!.name}\" beigetreten!'),\n              backgroundColor: Colors.green,\n              duration: const Duration(seconds: 3),\n            ),",
    "category": "world",
    "confidence": 0.6000000000000001,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 402,
    "column": 26,
    "original": "Du bist bereits Mitglied dieser Welt \"${_world?.name}\"!",
    "suggested_key": "worldDuBistBereits",
    "context": "if (e.toString().contains('Invite bereits akzeptiert')) {\n        setState(() {\n          _isJoined = true;\n          _infoMessage = 'Du bist bereits Mitglied dieser Welt \"${_world?.name}\"!';\n        });\n        \n        if (mounted) {",
    "category": "world",
    "confidence": 0.6000000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 408,
    "column": 29,
    "original": "Du bist bereits Mitglied der Welt \"${_world?.name}\"!",
    "suggested_key": "worldDuBistBereits",
    "context": "if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Du bist bereits Mitglied der Welt \"${_world?.name}\"!'),\n              backgroundColor: Colors.orange,\n              duration: const Duration(seconds: 3),\n            ),",
    "category": "world",
    "confidence": 0.6000000000000001,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 462,
    "column": 15,
    "original": "Einladung akzeptiert! Willkommen in der Welt \"${_world!.name}\"!",
    "suggested_key": "worldEinladungAkzeptiertWillkommen",
    "context": "if (mounted) {\n          final message = widget.inviteToken != null \n            ? 'Einladung akzeptiert! Willkommen in der Welt \"${_world!.name}\"!'\n            : 'Erfolgreich der Welt \"${_world!.name}\" beigetreten!';\n            \n          ScaffoldMessenger.of(context).showSnackBar(",
    "category": "world",
    "confidence": 0.6000000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 463,
    "column": 15,
    "original": "Erfolgreich der Welt \"${_world!.name}\" beigetreten!",
    "suggested_key": "worldErfolgreichDerWelt",
    "context": "if (mounted) {\n          final message = widget.inviteToken != null \n            ? 'Einladung akzeptiert! Willkommen in der Welt \"${_world!.name}\"!'\n            : 'Erfolgreich der Welt \"${_world!.name}\" beigetreten!';\n            \n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(",
    "category": "world",
    "confidence": 0.6000000000000001,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 526,
    "column": 29,
    "original": "Erfolgreich für ${world.name} vorregistriert!",
    "suggested_key": "worldErfolgreichFürWorldname",
    "context": "if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Erfolgreich für ${world.name} vorregistriert!'),\n              backgroundColor: Colors.green,\n            ),\n          );",
    "category": "world",
    "confidence": 0.6000000000000001,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 568,
    "column": 29,
    "original": "Vorregistrierung für ${world.name} zurückgezogen.",
    "suggested_key": "worldVorregistrierungFürWorldname",
    "context": "if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Vorregistrierung für ${world.name} zurückgezogen.'),\n              backgroundColor: Colors.orange,\n            ),\n          );",
    "category": "world",
    "confidence": 0.6000000000000001,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 633,
    "column": 27,
    "original": "Du hast ${world.name} verlassen.",
    "suggested_key": "worldDuHastWorldname",
    "context": "if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text('Du hast ${world.name} verlassen.'),\n            backgroundColor: Colors.orange,\n          ),\n        );",
    "category": "world",
    "confidence": 0.6000000000000001,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1092,
    "column": 25,
    "original": "Die angeforderte Welt existiert nicht oder ist nicht verfügbar.",
    "suggested_key": "worldDieAngeforderteWelt",
    "context": "),\n                      const SizedBox(height: 16),\n                      Text(\n                        'Die angeforderte Welt existiert nicht oder ist nicht verfügbar.',\n                        style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                          color: Colors.grey[300],\n                        ),",
    "category": "world",
    "confidence": 0.6000000000000001,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1351,
    "column": 13,
    "original": "Erkunde unbekannte Gebiete, schließe Allianzen und werde zur Legende!",
    "suggested_key": "worldErkundeUnbekannteGebiete",
    "context": "const SizedBox(height: 16),\n          Text(\n            'Dies ist eine spannende Welt voller Abenteuer und Herausforderungen. '\n            'Erkunde unbekannte Gebiete, schließe Allianzen und werde zur Legende!',\n            style: TextStyle(color: Colors.grey[300], height: 1.5),\n          ),\n          const SizedBox(height: 24),",
    "category": "world",
    "confidence": 0.6000000000000001,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 310,
    "column": 27,
    "original": "Erfolgreich zu ${world.name} beigetreten!",
    "suggested_key": "worldErfolgreichZuWorldname",
    "context": "ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text('Erfolgreich zu ${world.name} beigetreten!'),\n            backgroundColor: Colors.green,\n          ),\n        );",
    "category": "world",
    "confidence": 0.6000000000000001,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 350,
    "column": 27,
    "original": "Erfolgreich für ${world.name} vorregistriert!",
    "suggested_key": "worldErfolgreichFürWorldname",
    "context": "ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text('Erfolgreich für ${world.name} vorregistriert!'),\n            backgroundColor: Colors.green,\n          ),\n        );",
    "category": "world",
    "confidence": 0.6000000000000001,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 417,
    "column": 27,
    "original": "Du hast ${world.name} verlassen.",
    "suggested_key": "worldDuHastWorldname",
    "context": "ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text('Du hast ${world.name} verlassen.'),\n            backgroundColor: Colors.orange,\n          ),\n        );",
    "category": "world",
    "confidence": 0.6000000000000001,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 456,
    "column": 27,
    "original": "Vorregistrierung für ${world.name} zurückgezogen.",
    "suggested_key": "worldVorregistrierungFürWorldname",
    "context": "ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text('Vorregistrierung für ${world.name} zurückgezogen.'),\n            backgroundColor: Colors.orange,\n          ),\n        );",
    "category": "world",
    "confidence": 0.6000000000000001,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 9,
    "column": 8,
    "original": "core/services/api_service.dart",
    "suggested_key": "authCoreservicesapi_servicedart",
    "context": "import 'shared/widgets/splash_screen.dart';\nimport 'main.dart';\nimport 'core/services/auth_service.dart';\nimport 'core/services/api_service.dart';\nimport 'core/services/world_service.dart';\nimport 'core/services/invite_service.dart';\nimport 'core/providers/locale_provider.dart';",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 10,
    "column": 8,
    "original": "core/services/world_service.dart",
    "suggested_key": "authCoreservicesworld_servicedart",
    "context": "import 'main.dart';\nimport 'core/services/auth_service.dart';\nimport 'core/services/api_service.dart';\nimport 'core/services/world_service.dart';\nimport 'core/services/invite_service.dart';\nimport 'core/providers/locale_provider.dart';\nimport 'l10n/app_localizations.dart';",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 11,
    "column": 8,
    "original": "core/services/invite_service.dart",
    "suggested_key": "authCoreservicesinvite_servicedart",
    "context": "import 'core/services/auth_service.dart';\nimport 'core/services/api_service.dart';\nimport 'core/services/world_service.dart';\nimport 'core/services/invite_service.dart';\nimport 'core/providers/locale_provider.dart';\nimport 'l10n/app_localizations.dart';",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 50,
    "column": 9,
    "original": "Lade Konfiguration...",
    "suggested_key": "authLadeKonfiguration",
    "context": "onTimeout: _onTimeout,\n      initSteps: const [\n        'Initialisiere App...',\n        'Lade Konfiguration...',\n        'Starte Services...',\n        'Prüfe Authentifizierung...',\n        'Bereit!',",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 51,
    "column": 9,
    "original": "Starte Services...",
    "suggested_key": "authStarteServices",
    "context": "initSteps: const [\n        'Initialisiere App...',\n        'Lade Konfiguration...',\n        'Starte Services...',\n        'Prüfe Authentifizierung...',\n        'Bereit!',\n      ],",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 52,
    "column": 9,
    "original": "Prüfe Authentifizierung...",
    "suggested_key": "authPrüfeAuthentifizierung",
    "context": "'Initialisiere App...',\n        'Lade Konfiguration...',\n        'Starte Services...',\n        'Prüfe Authentifizierung...',\n        'Bereit!',\n      ],\n      appName: Env.appName,",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 103,
    "column": 47,
    "original": ");\n      \n      // 3. Token-Validierung beim App-Start (VOR loadStoredUser)\n      bool isValid = false;\n      try {\n        isValid = await authService.validateTokensOnStart();\n        AppLogger.app.i(",
    "suggested_key": "auth3TokenvalidierungBeim",
    "context": "ServiceLocator.register<WorldService>(worldService);\n      ServiceLocator.register<InviteService>(inviteService);\n      \n      AppLogger.app.i('⚙️ Services registriert');\n      \n      // 3. Token-Validierung beim App-Start (VOR loadStoredUser)\n      bool isValid = false;",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 109,
    "column": 50,
    "original": ");\n        \n        if (!isValid) {\n          AppLogger.app.w(",
    "suggested_key": "authIfIsvalidApploggerappw",
    "context": "bool isValid = false;\n      try {\n        isValid = await authService.validateTokensOnStart();\n        AppLogger.app.i('🔑 Tokens valid: $isValid');\n        \n        if (!isValid) {\n          AppLogger.app.w('⚠️ Tokens ungültig - logout');",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 112,
    "column": 55,
    "original": ");\n          await authService.logout();\n        }\n      } catch (e) {\n        AppLogger.app.e(",
    "suggested_key": "authAwaitAuthservicelogoutCatch",
    "context": "AppLogger.app.i('🔑 Tokens valid: $isValid');\n        \n        if (!isValid) {\n          AppLogger.app.w('⚠️ Tokens ungültig - logout');\n          await authService.logout();\n        }\n      } catch (e) {",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 127,
    "column": 64,
    "original": ");\n          } else {\n            AppLogger.app.i(",
    "suggested_key": "authElseApploggerappi",
    "context": "final user = await authService.loadStoredUser();\n          if (user != null) {\n            authService.isAuthenticated.value = true;\n            AppLogger.app.i('👤 User geladen und authentifiziert');\n          } else {\n            AppLogger.app.i('👤 Kein gespeicherter User gefunden');\n          }",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\config\\env.dart",
    "line": 3,
    "column": 42,
    "original": ";\n  \n  // API Endpoints\n  static const String authEndpoint = ",
    "suggested_key": "authApiEndpointsStatic",
    "context": "class Env {\n  static const String apiUrl = 'http://192.168.2.168:3000';\n  static const String apiBasePath = '/api';\n  \n  // API Endpoints\n  static const String authEndpoint = '$apiBasePath/auth';",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\config\\env.dart",
    "line": 6,
    "column": 56,
    "original": ";\n  static const String worldsEndpoint = ",
    "suggested_key": "authStaticConstString",
    "context": "static const String apiBasePath = '/api';\n  \n  // API Endpoints\n  static const String authEndpoint = '$apiBasePath/auth';\n  static const String worldsEndpoint = '$apiBasePath/worlds';\n  \n  // App Configuration",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\config\\env.dart",
    "line": 7,
    "column": 60,
    "original": ";\n  \n  // App Configuration\n  static const String appName = ",
    "suggested_key": "authAppConfigurationStatic",
    "context": "// API Endpoints\n  static const String authEndpoint = '$apiBasePath/auth';\n  static const String worldsEndpoint = '$apiBasePath/worlds';\n  \n  // App Configuration\n  static const String appName = 'Weltenwind';",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\config\\env.dart",
    "line": 11,
    "column": 42,
    "original": ";\n  \n  // Storage Keys\n  static const String tokenKey = ",
    "suggested_key": "authStorageKeysStatic",
    "context": "// App Configuration\n  static const String appName = 'Weltenwind';\n  static const String appVersion = '1.0.0';\n  \n  // Storage Keys\n  static const String tokenKey = 'auth_token';",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\config\\env.dart",
    "line": 14,
    "column": 45,
    "original": ";\n  static const String refreshTokenKey = ",
    "suggested_key": "authStaticConstString",
    "context": "static const String appVersion = '1.0.0';\n  \n  // Storage Keys\n  static const String tokenKey = 'auth_token';\n  static const String refreshTokenKey = 'refresh_token';\n  static const String userIdKey = 'user_id';\n  static const String currentWorldKey = 'current_world';",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\config\\env.dart",
    "line": 15,
    "column": 55,
    "original": ";\n  static const String userIdKey = ",
    "suggested_key": "authStaticConstString",
    "context": "// Storage Keys\n  static const String tokenKey = 'auth_token';\n  static const String refreshTokenKey = 'refresh_token';\n  static const String userIdKey = 'user_id';\n  static const String currentWorldKey = 'current_world';",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\config\\env.dart",
    "line": 16,
    "column": 43,
    "original": ";\n  static const String currentWorldKey = ",
    "suggested_key": "authStaticConstString",
    "context": "// Storage Keys\n  static const String tokenKey = 'auth_token';\n  static const String refreshTokenKey = 'refresh_token';\n  static const String userIdKey = 'user_id';\n  static const String currentWorldKey = 'current_world';\n  \n  static Future<void> initialize() async {",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\config\\logger.dart",
    "line": 29,
    "column": 46,
    "original": "),\n      level: kDebugMode ? Level.debug : Level.info,\n      output: _getLogOutput(),\n    );\n\n    _navigationLogger = Logger(\n      printer: _getLogPrinter(prefix: ",
    "suggested_key": "authLevelKdebugmodeLeveldebug",
    "context": ");\n\n    _authLogger = Logger(\n      printer: _getLogPrinter(prefix: '[AUTH]'),\n      level: kDebugMode ? Level.debug : Level.info,\n      output: _getLogOutput(),\n    );",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\models\\user.dart",
    "line": 122,
    "column": 19,
    "original": "].toString(),\n      username: json[",
    "suggested_key": "authTostringUsernameJson",
    "context": "factory User.fromJson(Map<String, dynamic> json) {\n    return User(\n      id: json['id'].toString(),\n      username: json['username'],\n      email: json['email'],\n      createdAt: _parseDateTime(json['createdAt']),",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\models\\user.dart",
    "line": 124,
    "column": 25,
    "original": "],\n      createdAt: _parseDateTime(json[",
    "suggested_key": "authCreatedat_parsedatetimejson",
    "context": "return User(\n      id: json['id'].toString(),\n      username: json['username'],\n      email: json['email'],\n      createdAt: _parseDateTime(json['createdAt']),\n      lastLoginAt: json['lastLoginAt'] != null \n          ? _parseDateTime(json['lastLoginAt'])",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\models\\user.dart",
    "line": 126,
    "column": 37,
    "original": "] != null \n          ? _parseDateTime(json[",
    "suggested_key": "authNull_parsedatetimejson",
    "context": "username: json['username'],\n      email: json['email'],\n      createdAt: _parseDateTime(json['createdAt']),\n      lastLoginAt: json['lastLoginAt'] != null \n          ? _parseDateTime(json['lastLoginAt']) \n          : null,\n      isLocked: json['isLocked'],",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\models\\user.dart",
    "line": 129,
    "column": 31,
    "original": "],\n      roles: json[",
    "suggested_key": "authRolesJson",
    "context": "lastLoginAt: json['lastLoginAt'] != null \n          ? _parseDateTime(json['lastLoginAt']) \n          : null,\n      isLocked: json['isLocked'],\n      roles: json['roles'] != null\n          ? (json['roles'] as List)\n              .map((r) => UserRole.fromJson(r))",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 72,
    "column": 34,
    "original": "Bearer $_token",
    "suggested_key": "authBearer_token",
    "context": "};\n    \n    if (_token != null) {\n      headers['Authorization'] = 'Bearer $_token';\n    }\n    \n    return headers;",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 94,
    "column": 83,
    "original": ");\n            \n            final refreshed = await _authService.refreshTokenIfNeeded();\n            if (refreshed) {\n              final newToken = await _authService.getCurrentAccessToken();\n              if (newToken != null) {\n                setToken(newToken);\n                AppLogger.api.i(",
    "suggested_key": "authFinalRefreshedAwait",
    "context": "// Token erneuern wenn weniger als 60 Sekunden gültig\n          if (exp - now < 60) {\n            // Log Token-Refresh\n            AppLogger.api.i('🔄 Token läuft ab in ${exp - now}s - erneuere proaktiv');\n            \n            final refreshed = await _authService.refreshTokenIfNeeded();\n            if (refreshed) {",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 101,
    "column": 62,
    "original": ");\n              }\n            }\n          }\n        }\n      } catch (e) {\n        // Token validation error\n        AppLogger.api.w(",
    "suggested_key": "authCatchEToken",
    "context": "final newToken = await _authService.getCurrentAccessToken();\n              if (newToken != null) {\n                setToken(newToken);\n                AppLogger.api.i('✅ Token erfolgreich erneuert');\n              }\n            }\n          }",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 123,
    "column": 84,
    "original": ");\n          \n          final refreshed = await _authService.refreshTokenIfNeeded();\n          if (refreshed) {\n            final newToken = await _authService.getCurrentAccessToken();\n            if (newToken != null) {\n              setToken(newToken);\n              \n                          // Request mit neuem Token wiederholen\n            return await _retryRequest(endpoint, response.request!.method);\n            }\n          }\n        } catch (e) {\n          AppLogger.api.e(",
    "suggested_key": "authFinalRefreshedAwait",
    "context": "final expiresIn = int.tryParse(response.headers['x-token-expires-in'] ?? '0');\n      if (expiresIn != null && expiresIn < 60) {\n        try {\n          AppLogger.api.i('🔄 Proaktive Token-Erneuerung - läuft ab in ${expiresIn}s');\n          \n          final refreshed = await _authService.refreshTokenIfNeeded();\n          if (refreshed) {",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 142,
    "column": 67,
    "original": ")) {\n      try {\n        AppLogger.api.i(",
    "suggested_key": "authTryApploggerapii",
    "context": "}\n    \n    // Reaktive Token-Erneuerung bei 401\n    if (response.statusCode == 401 && !endpoint.startsWith('/auth/')) {\n      try {\n        AppLogger.api.i('🔄 Reactive Token-Refresh wegen 401');",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 144,
    "column": 60,
    "original": ");\n        \n        final refreshed = await _authService.refreshTokenIfNeeded();\n        if (refreshed) {\n          final newToken = await _authService.getCurrentAccessToken();\n          if (newToken != null) {\n            setToken(newToken);\n            \n            // Request mit neuem Token wiederholen\n            return await _retryRequest(endpoint, response.request!.method);\n          }\n        }\n      } catch (e) {\n        AppLogger.api.e(",
    "suggested_key": "authFinalRefreshedAwait",
    "context": "// Reaktive Token-Erneuerung bei 401\n    if (response.statusCode == 401 && !endpoint.startsWith('/auth/')) {\n      try {\n        AppLogger.api.i('🔄 Reactive Token-Refresh wegen 401');\n        \n        final refreshed = await _authService.refreshTokenIfNeeded();\n        if (refreshed) {",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 211,
    "column": 37,
    "original": ")) {\n      await _ensureValidToken();\n    }\n    \n    final request = http.Request(",
    "suggested_key": "authAwait_ensurevalidtokenFinal",
    "context": "_requestBodies[endpoint] = data;\n    \n    // Automatische Token-Validierung für geschützte Endpoints\n    if (!endpoint.startsWith('/auth/')) {\n      await _ensureValidToken();\n    }",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 229,
    "column": 33,
    "original": " || entry.key == ",
    "suggested_key": "authEntrykey",
    "context": "Map<String, dynamic> _sanitizeAuthData(Map<String, dynamic> data) {\n    final sanitized = <String, dynamic>{};\n    for (final entry in data.entries) {\n      if (entry.key == 'password' || entry.key == 'token') {\n        sanitized[entry.key] = '***';\n      } else {\n        sanitized[entry.key] = entry.value;",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 229,
    "column": 57,
    "original": ") {\n        sanitized[entry.key] = ",
    "suggested_key": "authSanitizedentrykey",
    "context": "Map<String, dynamic> _sanitizeAuthData(Map<String, dynamic> data) {\n    final sanitized = <String, dynamic>{};\n    for (final entry in data.entries) {\n      if (entry.key == 'password' || entry.key == 'token') {\n        sanitized[entry.key] = '***';\n      } else {\n        sanitized[entry.key] = entry.value;",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 230,
    "column": 36,
    "original": ";\n      } else {\n        sanitized[entry.key] = entry.value;\n      }\n    }\n    return sanitized;\n  }\n\n  // Helper für das Sanitieren von sensiblen Daten aus der Response-Body\n  String _sanitizeAuthResponse(String body) {\n    try {\n      final decodedBody = jsonDecode(body);\n      if (decodedBody is Map<String, dynamic>) {\n        final sanitized = <String, dynamic>{};\n        for (final entry in decodedBody.entries) {\n          if (entry.key.contains(",
    "suggested_key": "authElseSanitizedentrykeyEntryvalue",
    "context": "final sanitized = <String, dynamic>{};\n    for (final entry in data.entries) {\n      if (entry.key == 'password' || entry.key == 'token') {\n        sanitized[entry.key] = '***';\n      } else {\n        sanitized[entry.key] = entry.value;\n      }",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 265,
    "column": 33,
    "original": ", endpoint, headers: _headers);\n    \n    // Automatische Token-Validierung für geschützte Endpoints\n    if (!endpoint.startsWith(",
    "suggested_key": "authEndpointHeaders_headers",
    "context": "await _ensureInitialized();\n    \n    // Log API Request\n    AppLogger.logApiRequest('GET', endpoint, headers: _headers);\n    \n    // Automatische Token-Validierung für geschützte Endpoints\n    if (!endpoint.startsWith('/auth/')) {",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 268,
    "column": 37,
    "original": ")) {\n      await _ensureValidToken();\n    }\n    \n    try {\n      final response = await http.get(\n        Uri.parse(",
    "suggested_key": "authAwait_ensurevalidtokenTry",
    "context": "AppLogger.logApiRequest('GET', endpoint, headers: _headers);\n    \n    // Automatische Token-Validierung für geschützte Endpoints\n    if (!endpoint.startsWith('/auth/')) {\n      await _ensureValidToken();\n    }",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 302,
    "column": 48,
    "original": ") ? _sanitizeAuthData(data) : data;\n    AppLogger.logApiRequest(",
    "suggested_key": "auth_sanitizeauthdatadataDataApploggerlogapirequest",
    "context": "_requestBodies[endpoint] = data;\n    \n    // Log API Request (ohne sensitive Daten für Auth-Endpoints)\n    final logBody = endpoint.startsWith('/auth/') ? _sanitizeAuthData(data) : data;\n    AppLogger.logApiRequest('POST', endpoint, headers: _headers, body: logBody);\n    \n    // Automatische Token-Validierung für geschützte Endpoints",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 303,
    "column": 34,
    "original": ", endpoint, headers: _headers, body: logBody);\n    \n    // Automatische Token-Validierung für geschützte Endpoints\n    if (!endpoint.startsWith(",
    "suggested_key": "authEndpointHeaders_headers",
    "context": "// Log API Request (ohne sensitive Daten für Auth-Endpoints)\n    final logBody = endpoint.startsWith('/auth/') ? _sanitizeAuthData(data) : data;\n    AppLogger.logApiRequest('POST', endpoint, headers: _headers, body: logBody);\n    \n    // Automatische Token-Validierung für geschützte Endpoints\n    if (!endpoint.startsWith('/auth/')) {",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 306,
    "column": 37,
    "original": ")) {\n      await _ensureValidToken();\n    }\n    \n    try {\n      final response = await http.post(\n        Uri.parse(",
    "suggested_key": "authAwait_ensurevalidtokenTry",
    "context": "AppLogger.logApiRequest('POST', endpoint, headers: _headers, body: logBody);\n    \n    // Automatische Token-Validierung für geschützte Endpoints\n    if (!endpoint.startsWith('/auth/')) {\n      await _ensureValidToken();\n    }",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 318,
    "column": 58,
    "original": ") ? _sanitizeAuthResponse(response.body) : response.body;\n      AppLogger.logApiResponse(",
    "suggested_key": "auth_sanitizeauthresponseresponsebodyResponsebodyApploggerlogapiresponse",
    "context": ");\n      \n      // Log API Response (ohne sensitive Response-Daten)\n      final logResponseBody = endpoint.startsWith('/auth/') ? _sanitizeAuthResponse(response.body) : response.body;\n      AppLogger.logApiResponse('POST', endpoint, response.statusCode, body: logResponseBody);\n      \n      return await _handleResponse(response, endpoint);",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 336,
    "column": 33,
    "original": ", endpoint, headers: _headers, body: data);\n    \n    // Automatische Token-Validierung für geschützte Endpoints\n    if (!endpoint.startsWith(",
    "suggested_key": "authEndpointHeaders_headers",
    "context": "_requestBodies[endpoint] = data;\n    \n    // Log API Request\n    AppLogger.logApiRequest('PUT', endpoint, headers: _headers, body: data);\n    \n    // Automatische Token-Validierung für geschützte Endpoints\n    if (!endpoint.startsWith('/auth/')) {",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 339,
    "column": 37,
    "original": ")) {\n      await _ensureValidToken();\n    }\n    \n    try {\n      final response = await http.put(\n        Uri.parse(",
    "suggested_key": "authAwait_ensurevalidtokenTry",
    "context": "AppLogger.logApiRequest('PUT', endpoint, headers: _headers, body: data);\n    \n    // Automatische Token-Validierung für geschützte Endpoints\n    if (!endpoint.startsWith('/auth/')) {\n      await _ensureValidToken();\n    }",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 365,
    "column": 36,
    "original": ", endpoint, headers: _headers);\n    \n    // Automatische Token-Validierung für geschützte Endpoints\n    if (!endpoint.startsWith(",
    "suggested_key": "authEndpointHeaders_headers",
    "context": "await _ensureInitialized();\n    \n    // Log API Request\n    AppLogger.logApiRequest('DELETE', endpoint, headers: _headers);\n    \n    // Automatische Token-Validierung für geschützte Endpoints\n    if (!endpoint.startsWith('/auth/')) {",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 368,
    "column": 37,
    "original": ")) {\n      await _ensureValidToken();\n    }\n    \n    try {\n      final response = await http.delete(\n        Uri.parse(",
    "suggested_key": "authAwait_ensurevalidtokenTry",
    "context": "AppLogger.logApiRequest('DELETE', endpoint, headers: _headers);\n    \n    // Automatische Token-Validierung für geschützte Endpoints\n    if (!endpoint.startsWith('/auth/')) {\n      await _ensureValidToken();\n    }",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 1,
    "column": 8,
    "original": "dart:convert",
    "suggested_key": "authDartconvert",
    "context": "import 'dart:convert';\nimport 'package:flutter/foundation.dart';\nimport '../models/user.dart';\nimport '../../config/logger.dart';",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 2,
    "column": 8,
    "original": "package:flutter/foundation.dart",
    "suggested_key": "authPackageflutterfoundationdart",
    "context": "import 'dart:convert';\nimport 'package:flutter/foundation.dart';\nimport '../models/user.dart';\nimport '../../config/logger.dart';\nimport 'api_service.dart';",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 165,
    "column": 31,
    "original": "] as int;\n      \n      return DateTime.fromMillisecondsSinceEpoch(exp * 1000);\n    } catch (e) {\n      return null;\n    }\n  }\n\n  Future<User?> login(String username, String password) async {\n    AppLogger.logAuthEvent(",
    "suggested_key": "authAsIntReturn",
    "context": "if (parts.length != 3) return null;\n      \n      final payload = jsonDecode(utf8.decode(base64Url.decode(base64Url.normalize(parts[1]))));\n      final exp = payload['exp'] as int;\n      \n      return DateTime.fromMillisecondsSinceEpoch(exp * 1000);\n    } catch (e) {",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 260,
    "column": 25,
    "original": ": userData[",
    "suggested_key": "authUserdata",
    "context": "'userId': userData['id'],\n            'username': userData['username'],\n            'rolesCount': userData['_debug']['rolesCount'],\n            'roleDetails': userData['_debug']['roleDetails'],\n          });\n        }",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\auth_service.dart",
    "line": 260,
    "column": 59,
    "original": "],\n          });\n        }\n        \n        // User-Daten speichern\n        await TokenStorage.saveUserData(jsonEncode(userData));\n        \n        _currentUser = User.fromJson(userData);\n        isAuthenticated.value = true; // Reaktiven Status setzen\n        \n        // Fetch complete user data with roles\n        await fetchCurrentUser();\n        \n        AppLogger.logAuthEvent(",
    "suggested_key": "authUserdatenSpeichernAwait",
    "context": "'userId': userData['id'],\n            'username': userData['username'],\n            'rolesCount': userData['_debug']['rolesCount'],\n            'roleDetails': userData['_debug']['roleDetails'],\n          });\n        }",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 288,
    "column": 97,
    "original": ";\n                                      }\n                                      return null;\n                                    },\n                                  ),\n                                  const SizedBox(height: 16),\n                                  \n                                  // Password field with better validation\n                                  TextFormField(\n                                    controller: _passwordController,\n                                    obscureText: _obscurePassword,\n                                    style: const TextStyle(color: Colors.white),\n                                    autofillHints: const [AutofillHints.password],\n                                    textInputAction: TextInputAction.done,\n                                    onFieldSubmitted: (_) => _isLoading ? null : _login(),\n                                    onChanged: (_) {\n                                      if (!_hasInteractedWithPassword) {\n                                        setState(() {\n                                          _hasInteractedWithPassword = true;\n                                        });\n                                      }\n                                    },\n                                    decoration: InputDecoration(\n                                      labelText: ",
    "suggested_key": "authReturnNullConst",
    "context": "return 'Bitte gib deinen Benutzernamen ein';\n                                      }\n                                      if (value.trim().length < 3) {\n                                        return 'Benutzername muss mindestens 3 Zeichen lang sein';\n                                      }\n                                      return null;\n                                    },",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 310,
    "column": 42,
    "original": "Benutzername darf nur Buchstaben, Zahlen und Unterstriche enthalten",
    "suggested_key": "authBenutzernameDarfNur",
    "context": "return 'Benutzername muss mindestens 3 Zeichen lang sein';\n                                }\n                                if (!RegExp(r'^[a-zA-Z0-9_]+$').hasMatch(value)) {\n                                  return 'Benutzername darf nur Buchstaben, Zahlen und Unterstriche enthalten';\n                                }\n                                return null;\n                              },",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 411,
    "column": 87,
    "original": ";\n                                }\n                                return null;\n                              },\n                              textInputAction: TextInputAction.done,\n                            ),\n                            const SizedBox(height: 24),\n\n                            // Error message\n                            if (_registerError != null)\n                              Container(\n                                width: double.infinity,\n                                padding: const EdgeInsets.all(12),\n                                decoration: BoxDecoration(\n                                  color: Colors.red[900]!.withOpacity(0.3),\n                                  borderRadius: BorderRadius.circular(8),\n                                  border: Border.all(color: Colors.red[400]!.withOpacity(0.5)),\n                                ),\n                                child: Text(\n                                  _registerError!,\n                                  style: TextStyle(color: Colors.red[200]),\n                                  textAlign: TextAlign.center,\n                                ),\n                              ),\n                            if (_registerError != null) const SizedBox(height: 16),\n\n                            // Register button\n                            SizedBox(\n                              width: double.infinity,\n                              height: 56,\n                              child: ElevatedButton(\n                                onPressed: _isLoading ? null : _register,\n                                style: ElevatedButton.styleFrom(\n                                  backgroundColor: AppTheme.primaryColor,\n                                  foregroundColor: Colors.white,\n                                  shape: RoundedRectangleBorder(\n                                    borderRadius: BorderRadius.circular(12),\n                                  ),\n                                  elevation: 8,\n                                  shadowColor: AppTheme.primaryColor.withOpacity(0.5),\n                                ),\n                                child: _isLoading\n                                    ? const SizedBox(\n                                        height: 20,\n                                        width: 20,\n                                        child: CircularProgressIndicator(\n                                          strokeWidth: 2,\n                                          valueColor: AlwaysStoppedAnimation<Color>(Colors.white),\n                                        ),\n                                      )\n                                    : const Text(\n                                        ",
    "suggested_key": "authReturnNullTextinputaction",
    "context": "return 'Passwort ist erforderlich';\n                                }\n                                if (value.length < 6) {\n                                  return 'Passwort muss mindestens 6 Zeichen lang sein';\n                                }\n                                return null;\n                              },",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 291,
    "column": 46,
    "original": "Passwort muss mindestens 6 Zeichen lang sein",
    "suggested_key": "authPasswortMussMindestens",
    "context": "return 'Bitte gib ein neues Passwort ein';\n                                    }\n                                    if (value.length < 6) {\n                                      return 'Passwort muss mindestens 6 Zeichen lang sein';\n                                    }\n                                    if (value.contains(' ')) {\n                                      return 'Passwort darf keine Leerzeichen enthalten';",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 294,
    "column": 46,
    "original": "Passwort darf keine Leerzeichen enthalten",
    "suggested_key": "authPasswortDarfKeine",
    "context": "return 'Passwort muss mindestens 6 Zeichen lang sein';\n                                    }\n                                    if (value.contains(' ')) {\n                                      return 'Passwort darf keine Leerzeichen enthalten';\n                                    }\n                                    return null;\n                                  },",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 6,
    "column": 8,
    "original": "../features/auth/forgot_password_page.dart",
    "suggested_key": "authFeaturesauthforgot_password_pagedart",
    "context": "import '../config/logger.dart';\nimport '../features/auth/login_page.dart';\nimport '../features/auth/register_page.dart';\nimport '../features/auth/forgot_password_page.dart';\nimport '../features/auth/reset_password_page.dart';\nimport '../features/world/world_list_page.dart';\nimport '../features/world/world_join_page.dart';",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 7,
    "column": 8,
    "original": "../features/auth/reset_password_page.dart",
    "suggested_key": "authFeaturesauthreset_password_pagedart",
    "context": "import '../features/auth/login_page.dart';\nimport '../features/auth/register_page.dart';\nimport '../features/auth/forgot_password_page.dart';\nimport '../features/auth/reset_password_page.dart';\nimport '../features/world/world_list_page.dart';\nimport '../features/world/world_join_page.dart';\nimport '../features/dashboard/dashboard_page.dart';",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 8,
    "column": 8,
    "original": "../features/world/world_list_page.dart",
    "suggested_key": "authFeaturesworldworld_list_pagedart",
    "context": "import '../features/auth/register_page.dart';\nimport '../features/auth/forgot_password_page.dart';\nimport '../features/auth/reset_password_page.dart';\nimport '../features/world/world_list_page.dart';\nimport '../features/world/world_join_page.dart';\nimport '../features/dashboard/dashboard_page.dart';\nimport '../features/landing/landing_page.dart';",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 9,
    "column": 8,
    "original": "../features/world/world_join_page.dart",
    "suggested_key": "authFeaturesworldworld_join_pagedart",
    "context": "import '../features/auth/forgot_password_page.dart';\nimport '../features/auth/reset_password_page.dart';\nimport '../features/world/world_list_page.dart';\nimport '../features/world/world_join_page.dart';\nimport '../features/dashboard/dashboard_page.dart';\nimport '../features/landing/landing_page.dart';\nimport '../core/services/auth_service.dart';",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 10,
    "column": 8,
    "original": "../features/dashboard/dashboard_page.dart",
    "suggested_key": "authFeaturesdashboarddashboard_pagedart",
    "context": "import '../features/auth/reset_password_page.dart';\nimport '../features/world/world_list_page.dart';\nimport '../features/world/world_join_page.dart';\nimport '../features/dashboard/dashboard_page.dart';\nimport '../features/landing/landing_page.dart';\nimport '../core/services/auth_service.dart';\nimport '../theme/app_theme.dart';",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 11,
    "column": 8,
    "original": "../features/landing/landing_page.dart",
    "suggested_key": "authFeatureslandinglanding_pagedart",
    "context": "import '../features/world/world_list_page.dart';\nimport '../features/world/world_join_page.dart';\nimport '../features/dashboard/dashboard_page.dart';\nimport '../features/landing/landing_page.dart';\nimport '../core/services/auth_service.dart';\nimport '../theme/app_theme.dart';\nimport '../main.dart';",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 12,
    "column": 8,
    "original": "../core/services/auth_service.dart",
    "suggested_key": "authCoreservicesauth_servicedart",
    "context": "import '../features/world/world_join_page.dart';\nimport '../features/dashboard/dashboard_page.dart';\nimport '../features/landing/landing_page.dart';\nimport '../core/services/auth_service.dart';\nimport '../theme/app_theme.dart';\nimport '../main.dart';",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 102,
    "column": 24,
    "original": ";\n          }\n          \n          final isLoggedIn = await authService.isLoggedIn();\n\n          final isAuthRoute = state.matchedLocation.startsWith(",
    "suggested_key": "authFinalIsloggedinAwait",
    "context": "final authService = _getAuthService();\n          if (authService == null) {\n            // Services noch nicht verfügbar, zur Landing Page\n            return '/go';\n          }\n          \n          final isLoggedIn = await authService.isLoggedIn();",
    "category": "auth",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 657,
    "column": 41,
    "original": ",\n                              style: TextStyle(\n                                color: Colors.grey[400],\n                                fontSize: 14,\n                              ),\n                            ),\n                          ),\n                          Text(",
    "suggested_key": "buttonStyleTextstyleColor",
    "context": "TextButton(\n                            onPressed: () {},\n                            child: Text(\n                              'Impressum',\n                              style: TextStyle(\n                                color: Colors.grey[400],\n                                fontSize: 14,",
    "category": "button",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 446,
    "column": 66,
    "original": "),\n                        icon: const Icon(Icons.home),\n                        label: const Text(",
    "suggested_key": "buttonIconConstIconiconshome",
    "context": "mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n                    children: [\n                      ElevatedButton.icon(\n                        onPressed: () => context.goNamed('landing'),\n                        icon: const Icon(Icons.home),\n                        label: const Text('Startseite'),\n                        style: ElevatedButton.styleFrom(",
    "category": "button",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 448,
    "column": 54,
    "original": "),\n                        style: ElevatedButton.styleFrom(\n                          backgroundColor: AppTheme.primaryColor,\n                          foregroundColor: Colors.white,\n                        ),\n                      ),\n                      ElevatedButton.icon(\n                        onPressed: () => context.goNamed(",
    "suggested_key": "buttonStyleElevatedbuttonstylefromBackgroundcolor",
    "context": "ElevatedButton.icon(\n                        onPressed: () => context.goNamed('landing'),\n                        icon: const Icon(Icons.home),\n                        label: const Text('Startseite'),\n                        style: ElevatedButton.styleFrom(\n                          backgroundColor: AppTheme.primaryColor,\n                          foregroundColor: Colors.white,",
    "category": "button",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 457,
    "column": 50,
    "original": "),\n                        style: ElevatedButton.styleFrom(\n                          backgroundColor: AppTheme.surfaceColor,\n                          foregroundColor: AppTheme.textPrimary,\n                        ),\n                      ),\n                    ],\n                  ),\n                ],\n              ),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n\nclass AuthErrorPage extends StatelessWidget {\n  const AuthErrorPage({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Container(\n        decoration: BoxDecoration(\n          gradient: LinearGradient(\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n            colors: [\n              AppTheme.errorColor.withOpacity(0.1),\n              AppTheme.surfaceColor,\n            ],\n          ),\n        ),\n        child: Center(\n          child: Card(\n            elevation: 8,\n            shape: RoundedRectangleBorder(\n              borderRadius: BorderRadius.circular(16),\n            ),\n            child: Padding(\n              padding: const EdgeInsets.all(32.0),\n              child: Column(\n                mainAxisSize: MainAxisSize.min,\n                children: [\n                  const Icon(\n                    Icons.lock_outline,\n                    size: 64,\n                    color: AppTheme.errorColor,\n                  ),\n                  const SizedBox(height: 24),\n                  Text(\n                    ",
    "suggested_key": "buttonStyleElevatedbuttonstylefromBackgroundcolor",
    "context": "ElevatedButton.icon(\n                        onPressed: () => context.goNamed('world-list'),\n                        icon: const Icon(Icons.public),\n                        label: const Text('Welten'),\n                        style: ElevatedButton.styleFrom(\n                          backgroundColor: AppTheme.surfaceColor,\n                          foregroundColor: AppTheme.textPrimary,",
    "category": "button",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 526,
    "column": 60,
    "original": "),\n                    icon: const Icon(Icons.login),\n                    label: const Text(",
    "suggested_key": "buttonIconConstIconiconslogin",
    "context": "),\n                  const SizedBox(height: 32),\n                  ElevatedButton.icon(\n                    onPressed: () => context.goNamed('login'),\n                    icon: const Icon(Icons.login),\n                    label: const Text('Anmelden'),\n                    style: ElevatedButton.styleFrom(",
    "category": "button",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 528,
    "column": 48,
    "original": "),\n                    style: ElevatedButton.styleFrom(\n                      backgroundColor: AppTheme.primaryColor,\n                      foregroundColor: Colors.white,\n                      padding: const EdgeInsets.symmetric(\n                        horizontal: 24,\n                        vertical: 12,\n                      ),\n                    ),\n                  ),\n                ],\n              ),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n\nclass WorldNotFoundPage extends StatelessWidget {\n  const WorldNotFoundPage({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Container(\n        decoration: BoxDecoration(\n          gradient: LinearGradient(\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n            colors: [\n              AppTheme.primaryColor.withOpacity(0.1),\n              AppTheme.surfaceColor,\n            ],\n          ),\n        ),\n        child: Center(\n          child: Card(\n            elevation: 8,\n            shape: RoundedRectangleBorder(\n              borderRadius: BorderRadius.circular(16),\n            ),\n            child: Padding(\n              padding: const EdgeInsets.all(32.0),\n              child: Column(\n                mainAxisSize: MainAxisSize.min,\n                children: [\n                  Icon(\n                    Icons.public_off,\n                    size: 64,\n                    color: AppTheme.primaryColor.withOpacity(0.7),\n                  ),\n                  const SizedBox(height: 24),\n                  Text(\n                    ",
    "suggested_key": "buttonStyleElevatedbuttonstylefromBackgroundcolor",
    "context": "ElevatedButton.icon(\n                    onPressed: () => context.goNamed('login'),\n                    icon: const Icon(Icons.login),\n                    label: const Text('Anmelden'),\n                    style: ElevatedButton.styleFrom(\n                      backgroundColor: AppTheme.primaryColor,\n                      foregroundColor: Colors.white,",
    "category": "button",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 599,
    "column": 65,
    "original": "),\n                    icon: const Icon(Icons.list),\n                    label: const Text(",
    "suggested_key": "buttonIconConstIconiconslist",
    "context": "),\n                  const SizedBox(height: 32),\n                  ElevatedButton.icon(\n                    onPressed: () => context.goNamed('world-list'),\n                    icon: const Icon(Icons.list),\n                    label: const Text('Alle Welten anzeigen'),\n                    style: ElevatedButton.styleFrom(",
    "category": "button",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 72,
    "column": 43,
    "original": ") {\n      items.add(NavigationItem(\n        icon: Icons.arrow_back,\n        label: ",
    "suggested_key": "buttonItemsaddnavigationitemIconIconsarrow_back",
    "context": "final items = <NavigationItem>[];\n    \n    // Zurück-Button (wenn nicht auf world-list)\n    if (widget.currentRoute != 'world-list') {\n      items.add(NavigationItem(\n        icon: Icons.arrow_back,\n        label: 'Zurück',",
    "category": "button",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\splash_screen.dart",
    "line": 314,
    "column": 56,
    "original": "),\n                  ),\n                  \n                  TextButton(\n                    onPressed: () {\n                      setState(() {\n                        _error = null;\n                        _isInitialized = true;\n                      });\n                    },\n                    child: const Text(",
    "suggested_key": "buttonTextbuttonOnpressedSetstate",
    "context": "});\n                      _initialize();\n                    },\n                    child: const Text('Erneut versuchen'),\n                  ),\n                  \n                  TextButton(",
    "category": "button",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\pre_register_dialog.dart",
    "line": 128,
    "column": 26,
    "original": "Bitte geben Sie eine gültige E-Mail-Adresse ein",
    "suggested_key": "dialogBitteGebenSie",
    "context": "return 'E-Mail-Adresse ist erforderlich';\n                }\n                if (!RegExp(r'^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$').hasMatch(value)) {\n                  return 'Bitte geben Sie eine gültige E-Mail-Adresse ein';\n                }\n                return null;\n              },",
    "category": "dialog",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 116,
    "column": 60,
    "original": ", error: e);\n        // Bei Token-Validierungsfehlern einfach ausloggen\n        await authService.logout();\n      }\n      \n      // 4. Gespeicherte User-Daten laden (nur wenn Tokens gültig)\n      if (isValid) {\n        try {\n          final user = await authService.loadStoredUser();\n          if (user != null) {\n            authService.isAuthenticated.value = true;\n            AppLogger.app.i(",
    "suggested_key": "errorErrorEBei",
    "context": "await authService.logout();\n        }\n      } catch (e) {\n        AppLogger.app.e('❌ Token-Validierung fehlgeschlagen', error: e);\n        // Bei Token-Validierungsfehlern einfach ausloggen\n        await authService.logout();\n      }",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 129,
    "column": 64,
    "original": ");\n          }\n        } catch (e) {\n          AppLogger.app.e(",
    "suggested_key": "errorCatchEApploggerappe",
    "context": "authService.isAuthenticated.value = true;\n            AppLogger.app.i('👤 User geladen und authentifiziert');\n          } else {\n            AppLogger.app.i('👤 Kein gespeicherter User gefunden');\n          }\n        } catch (e) {\n          AppLogger.app.e('❌ User-Load fehlgeschlagen', error: e);",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 132,
    "column": 54,
    "original": ", error: e);\n        }\n      } else {\n        AppLogger.app.i(",
    "suggested_key": "errorErrorEElse",
    "context": "AppLogger.app.i('👤 Kein gespeicherter User gefunden');\n          }\n        } catch (e) {\n          AppLogger.app.e('❌ User-Load fehlgeschlagen', error: e);\n        }\n      } else {\n        AppLogger.app.i('👤 Keine gültigen Tokens - User-Load übersprungen');",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 135,
    "column": 74,
    "original": ");\n      }\n      \n      // Auth-Cache beim App-Start invalidieren\n      AppRouter.invalidateCacheOnStart();\n      \n      AppLogger.app.i(",
    "suggested_key": "errorAuthcacheBeimAppstart",
    "context": "AppLogger.app.e('❌ User-Load fehlgeschlagen', error: e);\n        }\n      } else {\n        AppLogger.app.i('👤 Keine gültigen Tokens - User-Load übersprungen');\n      }\n      \n      // Auth-Cache beim App-Start invalidieren",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 141,
    "column": 55,
    "original": ");\n    } catch (e) {\n      AppLogger.app.e(",
    "suggested_key": "errorCatchEApploggerappe",
    "context": "// Auth-Cache beim App-Start invalidieren\n      AppRouter.invalidateCacheOnStart();\n      \n      AppLogger.app.i('✅ Initialisierung abgeschlossen');\n    } catch (e) {\n      AppLogger.app.e('❌ Service-Initialisierung fehlgeschlagen', error: e);\n      // Bei Auth-Service-Fehlern einfach weitermachen",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 143,
    "column": 64,
    "original": ", error: e);\n      // Bei Auth-Service-Fehlern einfach weitermachen\n      // Die App kann auch ohne gültige Tokens funktionieren\n    }\n  }\n  \n  // Timeout-Callback für SplashScreen\n  void _onTimeout() {\n    AppLogger.app.w(",
    "suggested_key": "errorErrorEBei",
    "context": "AppLogger.app.i('✅ Initialisierung abgeschlossen');\n    } catch (e) {\n      AppLogger.app.e('❌ Service-Initialisierung fehlgeschlagen', error: e);\n      // Bei Auth-Service-Fehlern einfach weitermachen\n      // Die App kann auch ohne gültige Tokens funktionieren\n    }",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\config\\logger.dart",
    "line": 41,
    "column": 47,
    "original": "),\n      level: Level.warning,\n      output: _getLogOutput(),\n    );\n  }\n\n  /// Custom Log Printer mit strukturiertem Format\n  static LogPrinter _getLogPrinter({String? prefix}) {\n    return PrettyPrinter(\n      methodCount: 2, // Stack trace depth\n      errorMethodCount: 8, // Error stack trace depth\n      lineLength: 120, // Width of the output\n      colors: kDebugMode, // Colorful log in debug mode\n      printEmojis: true, // Print emoji for each log level\n      dateTimeFormat: DateTimeFormat.onlyTimeAndSinceStart, // Include timestamp\n      noBoxingByDefault: false,\n    );\n  }\n\n  /// Log Output - Debug: Console, Release: File + Remote\n  static LogOutput _getLogOutput() {\n    if (kDebugMode) {\n      return ConsoleOutput();\n    } else {\n      // In Production: File + Remote Upload\n      return MultiOutput([\n        ConsoleOutput(),\n        FileOutput(), // Local file storage\n        // TODO: RemoteOutput(), // Upload to backend\n      ]);\n    }\n  }\n\n  // === Public API ===\n\n  /// General App Logger\n  static Logger get app => _logger;\n\n  /// API Calls & Responses\n  static Logger get api => _apiLogger;\n\n  /// Authentication Events\n  static Logger get auth => _authLogger;\n\n  /// Navigation & Routing\n  static Logger get navigation => _navigationLogger;\n\n  /// Errors & Crashes\n  static Logger get error => _errorLogger;\n\n  // === Convenience Methods ===\n\n  /// Log API Request\n  static void logApiRequest(String method, String url, {Map<String, dynamic>? headers, dynamic body}) {\n    api.i(",
    "suggested_key": "errorLevelLevelwarningOutput",
    "context": ");\n\n    _errorLogger = Logger(\n      printer: _getLogPrinter(prefix: '[ERROR]'),\n      level: Level.warning,\n      output: _getLogOutput(),\n    );",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\config\\logger.dart",
    "line": 95,
    "column": 26,
    "original": ", error: {\n      ",
    "suggested_key": "errorError",
    "context": "/// Log API Request\n  static void logApiRequest(String method, String url, {Map<String, dynamic>? headers, dynamic body}) {\n    api.i('🔄 $method $url', error: {\n      'method': method,\n      'url': url,\n      'headers': headers,",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\config\\logger.dart",
    "line": 109,
    "column": 12,
    "original": "${isSuccess ? ",
    "suggested_key": "errorIssuccess",
    "context": "final isSuccess = statusCode >= 200 && statusCode < 300;\n    final logger = isSuccess ? api.i : api.w;\n    \n    logger('${isSuccess ? '✅' : '⚠️'} $method $url → $statusCode', error: {\n      'method': method,\n      'url': url,\n      'statusCode': statusCode,",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\config\\logger.dart",
    "line": 109,
    "column": 65,
    "original": ", error: {\n      ",
    "suggested_key": "errorError",
    "context": "final isSuccess = statusCode >= 200 && statusCode < 300;\n    final logger = isSuccess ? api.i : api.w;\n    \n    logger('${isSuccess ? '✅' : '⚠️'} $method $url → $statusCode', error: {\n      'method': method,\n      'url': url,\n      'statusCode': statusCode,",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\config\\logger.dart",
    "line": 121,
    "column": 26,
    "original": ", error: error, stackTrace: stackTrace);\n  }\n\n  /// Log Authentication Event \n  static void logAuthEvent(String event, {String? username, Map<String, dynamic>? metadata}) {\n    auth.i(",
    "suggested_key": "errorErrorErrorStacktrace",
    "context": "/// Log API Error\n  static void logApiError(String method, String url, dynamic error, {StackTrace? stackTrace}) {\n    api.e('❌ $method $url', error: error, stackTrace: stackTrace);\n  }\n\n  /// Log Authentication Event",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\config\\logger.dart",
    "line": 126,
    "column": 21,
    "original": ", error: {\n      ",
    "suggested_key": "errorError",
    "context": "/// Log Authentication Event \n  static void logAuthEvent(String event, {String? username, Map<String, dynamic>? metadata}) {\n    auth.i('🔐 $event', error: {\n      'event': event,\n      'username': username,\n      'metadata': metadata,",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\config\\logger.dart",
    "line": 127,
    "column": 13,
    "original": ": event,\n      ",
    "suggested_key": "errorEvent",
    "context": "/// Log Authentication Event \n  static void logAuthEvent(String event, {String? username, Map<String, dynamic>? metadata}) {\n    auth.i('🔐 $event', error: {\n      'event': event,\n      'username': username,\n      'metadata': metadata,\n      'timestamp': DateTime.now().toIso8601String(),",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\config\\logger.dart",
    "line": 128,
    "column": 16,
    "original": ": username,\n      ",
    "suggested_key": "errorUsername",
    "context": "static void logAuthEvent(String event, {String? username, Map<String, dynamic>? metadata}) {\n    auth.i('🔐 $event', error: {\n      'event': event,\n      'username': username,\n      'metadata': metadata,\n      'timestamp': DateTime.now().toIso8601String(),\n    });",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\config\\logger.dart",
    "line": 136,
    "column": 32,
    "original": ", error: {\n      ",
    "suggested_key": "errorError",
    "context": "/// Log Navigation Event\n  static void logNavigation(String from, String to, {Map<String, dynamic>? params}) {\n    navigation.i('🧭 $from → $to', error: {\n      'from': from,\n      'to': to,\n      'params': params,",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\config\\logger.dart",
    "line": 146,
    "column": 23,
    "original": "💥 $message",
    "suggested_key": "errorMessage",
    "context": "/// Log Error with Context\n  static void logError(String message, dynamic error, {StackTrace? stackTrace, Map<String, dynamic>? context}) {\n    AppLogger.error.e('💥 $message', error: {\n      'message': message,\n      'error': error.toString(),\n      'context': context,",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\config\\logger.dart",
    "line": 156,
    "column": 11,
    "original": "👤 User: $action",
    "suggested_key": "errorUserAction",
    "context": "/// Log User Action\n  static void logUserAction(String action, {Map<String, dynamic>? context}) {\n    app.i('👤 User: $action', error: {\n      'action': action,\n      'context': context,\n      'timestamp': DateTime.now().toIso8601String(),",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 108,
    "column": 61,
    "original": ", error: e);\n        await _authService.refreshTokenIfNeeded();\n      } finally {\n        _isValidatingToken = false;\n      }\n    }\n  }\n\n  // Response-Interceptor mit Header-Parsing für proaktive Token-Erneuerung\n  Future<http.Response> _handleResponse(http.Response response, String endpoint) async {\n    // Proaktive Token-Erneuerung basierend auf Response-Headers\n    if (response.headers[",
    "suggested_key": "errorErrorEAwait",
    "context": "}\n      } catch (e) {\n        // Token validation error\n        AppLogger.api.w('⚠️ Token-Validierung fehlgeschlagen', error: e);\n        await _authService.refreshTokenIfNeeded();\n      } finally {\n        _isValidatingToken = false;",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 136,
    "column": 71,
    "original": ", error: e);\n        }\n      }\n    }\n    \n    // Reaktive Token-Erneuerung bei 401\n    if (response.statusCode == 401 && !endpoint.startsWith(",
    "suggested_key": "errorErrorEReaktive",
    "context": "}\n          }\n        } catch (e) {\n          AppLogger.api.e('❌ Proaktive Token-Erneuerung fehlgeschlagen', error: e);\n        }\n      }\n    }",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 157,
    "column": 56,
    "original": ", error: e);\n        // Bei Token-Refresh-Fehlern automatisch ausloggen\n        await _authService.logout();\n        // Cache invalidieren nach Logout\n        AppRouter.invalidateAuthCache();\n      }\n    }\n    return response;\n  }\n\n  // Vollständige Request-Wiederholung für alle HTTP-Methoden mit erweiterter Kontext-Verwaltung\n  Future<http.Response> _retryRequest(String endpoint, String method) async {\n    switch (method) {\n      case ",
    "suggested_key": "errorErrorEBei",
    "context": "}\n        }\n      } catch (e) {\n        AppLogger.api.e('❌ Token-Refresh fehlgeschlagen', error: e);\n        // Bei Token-Refresh-Fehlern automatisch ausloggen\n        await _authService.logout();\n        // Cache invalidieren nach Logout",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 279,
    "column": 36,
    "original": ", endpoint, response.statusCode, body: response.body);\n      \n      // Don",
    "suggested_key": "errorEndpointResponsestatuscodeBody",
    "context": ");\n      \n      // Log API Response\n      AppLogger.logApiResponse('GET', endpoint, response.statusCode, body: response.body);\n      \n      // Don't log 404 errors for player status checks\n      if (response.statusCode == 404 &&",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 283,
    "column": 30,
    "original": "/players/me",
    "suggested_key": "errorPlayersme",
    "context": "// Don't log 404 errors for player status checks\n      if (response.statusCode == 404 && \n          (endpoint.contains('/players/me') || endpoint.contains('/pre-register/me'))) {\n        return response;\n      }",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 283,
    "column": 66,
    "original": "/pre-register/me",
    "suggested_key": "errorPreregisterme",
    "context": "// Don't log 404 errors for player status checks\n      if (response.statusCode == 404 && \n          (endpoint.contains('/players/me') || endpoint.contains('/pre-register/me'))) {\n        return response;\n      }",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 290,
    "column": 33,
    "original": ", endpoint, error, stackTrace: stackTrace);\n      rethrow;\n    }\n  }\n\n  Future<http.Response> post(String endpoint, Map<String, dynamic> data) async {\n    await _ensureInitialized();\n    \n    // Erweiterte Request-Kontext-Verwaltung für parallele Requests\n    _requestBodies[endpoint] = data;\n    \n    // Log API Request (ohne sensitive Daten für Auth-Endpoints)\n    final logBody = endpoint.startsWith(",
    "suggested_key": "errorEndpointErrorStacktrace",
    "context": "return await _handleResponse(response, endpoint);\n    } catch (error, stackTrace) {\n      // Log API Error\n      AppLogger.logApiError('GET', endpoint, error, stackTrace: stackTrace);\n      rethrow;\n    }\n  }",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 319,
    "column": 37,
    "original": ", endpoint, response.statusCode, body: logResponseBody);\n      \n      return await _handleResponse(response, endpoint);\n    } catch (error, stackTrace) {\n      // Log API Error\n      AppLogger.logApiError(",
    "suggested_key": "errorEndpointResponsestatuscodeBody",
    "context": "// Log API Response (ohne sensitive Response-Daten)\n      final logResponseBody = endpoint.startsWith('/auth/') ? _sanitizeAuthResponse(response.body) : response.body;\n      AppLogger.logApiResponse('POST', endpoint, response.statusCode, body: logResponseBody);\n      \n      return await _handleResponse(response, endpoint);\n    } catch (error, stackTrace) {",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 324,
    "column": 34,
    "original": ", endpoint, error, stackTrace: stackTrace);\n      rethrow;\n    }\n  }\n\n  Future<http.Response> put(String endpoint, Map<String, dynamic> data) async {\n    await _ensureInitialized();\n    \n    // Erweiterte Request-Kontext-Verwaltung für parallele Requests\n    _requestBodies[endpoint] = data;\n    \n    // Log API Request\n    AppLogger.logApiRequest(",
    "suggested_key": "errorEndpointErrorStacktrace",
    "context": "return await _handleResponse(response, endpoint);\n    } catch (error, stackTrace) {\n      // Log API Error\n      AppLogger.logApiError('POST', endpoint, error, stackTrace: stackTrace);\n      rethrow;\n    }\n  }",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 351,
    "column": 36,
    "original": ", endpoint, response.statusCode, body: response.body);\n      \n      return await _handleResponse(response, endpoint);\n    } catch (error, stackTrace) {\n      // Log API Error\n      AppLogger.logApiError(",
    "suggested_key": "errorEndpointResponsestatuscodeBody",
    "context": ");\n      \n      // Log API Response\n      AppLogger.logApiResponse('PUT', endpoint, response.statusCode, body: response.body);\n      \n      return await _handleResponse(response, endpoint);\n    } catch (error, stackTrace) {",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 356,
    "column": 33,
    "original": ", endpoint, error, stackTrace: stackTrace);\n      rethrow;\n    }\n  }\n\n  Future<http.Response> delete(String endpoint) async {\n    await _ensureInitialized();\n    \n    // Log API Request\n    AppLogger.logApiRequest(",
    "suggested_key": "errorEndpointErrorStacktrace",
    "context": "return await _handleResponse(response, endpoint);\n    } catch (error, stackTrace) {\n      // Log API Error\n      AppLogger.logApiError('PUT', endpoint, error, stackTrace: stackTrace);\n      rethrow;\n    }\n  }",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 379,
    "column": 39,
    "original": ", endpoint, response.statusCode, body: response.body);\n      \n      return await _handleResponse(response, endpoint);\n    } catch (error, stackTrace) {\n      // Log API Error\n      AppLogger.logApiError(",
    "suggested_key": "errorEndpointResponsestatuscodeBody",
    "context": ");\n      \n      // Log API Response\n      AppLogger.logApiResponse('DELETE', endpoint, response.statusCode, body: response.body);\n      \n      return await _handleResponse(response, endpoint);\n    } catch (error, stackTrace) {",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\main.dart",
    "line": 18,
    "column": 23,
    "original": "Service $T not registered",
    "suggested_key": "errorServiceTNot",
    "context": "static T get<T>() {\n    final service = _services[T];\n    if (service == null) {\n      throw Exception('Service $T not registered');\n    }\n    return service as T;\n  }",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\main.dart",
    "line": 37,
    "column": 19,
    "original": "🚀 WeltenwindApp wird gestartet...",
    "suggested_key": "errorWeltenwindappWirdGestartet",
    "context": "// Initialisiere das Logging-System\n  AppLogger.initialize();\n  AppLogger.app.i('🚀 WeltenwindApp wird gestartet...');\n\n  // Flutter Error Handling\n  FlutterError.onError = (FlutterErrorDetails details) {",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\main.dart",
    "line": 42,
    "column": 7,
    "original": "Flutter Framework Error",
    "suggested_key": "errorFlutterFrameworkError",
    "context": "// Flutter Error Handling\n  FlutterError.onError = (FlutterErrorDetails details) {\n    AppLogger.logError(\n      'Flutter Framework Error',\n      details.exception,\n      stackTrace: details.stack,\n      context: {",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\main.dart",
    "line": 61,
    "column": 28,
    "original": ",\n      error,\n      stackTrace: stack,\n      context: {\n        ",
    "suggested_key": "errorErrorStacktraceStack",
    "context": "// Dart Error Handling (für unhandled exceptions)\n  WidgetsBinding.instance.platformDispatcher.onError = (error, stack) {\n    AppLogger.logError(\n      'Unhandled Dart Error',\n      error,\n      stackTrace: stack,\n      context: {",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 52,
    "column": 51,
    "original": ";\n  static const String worldDashboardRoute = ",
    "suggested_key": "errorStaticConstString",
    "context": "static const String registerRoute = 'register';\n  static const String forgotPasswordRoute = 'forgot-password';\n  static const String resetPasswordRoute = 'reset-password';\n  static const String worldListRoute = 'world-list';\n  static const String worldDashboardRoute = 'world-dashboard';\n  static const String worldJoinRoute = 'world-join';\n  static const String errorRoute = 'error';",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 53,
    "column": 61,
    "original": ";\n  static const String worldJoinRoute = ",
    "suggested_key": "errorStaticConstString",
    "context": "static const String forgotPasswordRoute = 'forgot-password';\n  static const String resetPasswordRoute = 'reset-password';\n  static const String worldListRoute = 'world-list';\n  static const String worldDashboardRoute = 'world-dashboard';\n  static const String worldJoinRoute = 'world-join';\n  static const String errorRoute = 'error';",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 54,
    "column": 51,
    "original": ";\n  static const String errorRoute = ",
    "suggested_key": "errorStaticConstString",
    "context": "static const String resetPasswordRoute = 'reset-password';\n  static const String worldListRoute = 'world-list';\n  static const String worldDashboardRoute = 'world-dashboard';\n  static const String worldJoinRoute = 'world-join';\n  static const String errorRoute = 'error';\n\n  // NavigatorKey für zukünftige Shell-Integration (z.B. BottomNav)",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 55,
    "column": 42,
    "original": ";\n\n  // NavigatorKey für zukünftige Shell-Integration (z.B. BottomNav)\n  static final GlobalKey<NavigatorState> _rootNavigatorKey = GlobalKey<NavigatorState>();\n\n  static GoRouter? _routerInstance;\n  static bool _isInitialized = false;\n  \n  // Helper method to safely get AuthService - komplett unabhängig von ServiceLocator\n  static AuthService? _getAuthService() {\n    try {\n      if (ServiceLocator.has<AuthService>()) {\n        return ServiceLocator.get<AuthService>();\n      }\n    } catch (e) {\n      AppLogger.navigation.w(",
    "suggested_key": "errorNavigatorkeyFürZukünftige",
    "context": "static const String worldListRoute = 'world-list';\n  static const String worldDashboardRoute = 'world-dashboard';\n  static const String worldJoinRoute = 'world-join';\n  static const String errorRoute = 'error';\n\n  // NavigatorKey für zukünftige Shell-Integration (z.B. BottomNav)\n  static final GlobalKey<NavigatorState> _rootNavigatorKey = GlobalKey<NavigatorState>();",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 70,
    "column": 55,
    "original": ", error: e);\n    }\n    // Kein Fallback - Services sind nicht verfügbar\n    return null;\n  }\n  \n  static GoRouter get router {\n    AppLogger.navigation.d(",
    "suggested_key": "errorErrorEKein",
    "context": "return ServiceLocator.get<AuthService>();\n      }\n    } catch (e) {\n      AppLogger.navigation.w('⚠️ ServiceLocator Fehler', error: e);\n    }\n    // Kein Fallback - Services sind nicht verfügbar\n    return null;",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 77,
    "column": 55,
    "original": ", error: {",
    "suggested_key": "errorError",
    "context": "}\n  \n  static GoRouter get router {\n    AppLogger.navigation.d('🔍 Router-Instanz angefragt', error: {'initialized': _routerInstance != null});\n    \n    if (_routerInstance != null) {\n      return _routerInstance!;",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 77,
    "column": 78,
    "original": ": _routerInstance != null});\n    \n    if (_routerInstance != null) {\n      return _routerInstance!;\n    }\n    \n    // Router nur einmal initialisieren\n    if (!_isInitialized) {\n      AppLogger.navigation.i(",
    "suggested_key": "error_routerinstanceNullIf",
    "context": "}\n  \n  static GoRouter get router {\n    AppLogger.navigation.d('🔍 Router-Instanz angefragt', error: {'initialized': _routerInstance != null});\n    \n    if (_routerInstance != null) {\n      return _routerInstance!;",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 114,
    "column": 56,
    "original": ", error: {",
    "suggested_key": "errorError",
    "context": "!isInviteRoute; // Invite-Routen ausschließen\n\n          if (!isLoggedIn && isProtectedRoute) {\n            AppLogger.navigation.i('🔒 Redirect zu Login', error: {'from': state.matchedLocation});\n            return '/go/auth/login';\n          }",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 114,
    "column": 72,
    "original": ": state.matchedLocation});\n            return ",
    "suggested_key": "errorStatematchedlocationReturn",
    "context": "!isInviteRoute; // Invite-Routen ausschließen\n\n          if (!isLoggedIn && isProtectedRoute) {\n            AppLogger.navigation.i('🔒 Redirect zu Login', error: {'from': state.matchedLocation});\n            return '/go/auth/login';\n          }",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 115,
    "column": 35,
    "original": ";\n          }\n\n          if (isLoggedIn && isAuthRoute) {\n            AppLogger.navigation.i(",
    "suggested_key": "errorIfIsloggedinIsauthroute",
    "context": "if (!isLoggedIn && isProtectedRoute) {\n            AppLogger.navigation.i('🔒 Redirect zu Login', error: {'from': state.matchedLocation});\n            return '/go/auth/login';\n          }\n\n          if (isLoggedIn && isAuthRoute) {",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 119,
    "column": 57,
    "original": ", error: {",
    "suggested_key": "errorError",
    "context": "}\n\n          if (isLoggedIn && isAuthRoute) {\n            AppLogger.navigation.i('🏠 Redirect zu Worlds', error: {'from': state.matchedLocation});\n            return '/go/worlds';\n          }",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 119,
    "column": 73,
    "original": ": state.matchedLocation});\n            return ",
    "suggested_key": "errorStatematchedlocationReturn",
    "context": "}\n\n          if (isLoggedIn && isAuthRoute) {\n            AppLogger.navigation.i('🏠 Redirect zu Worlds', error: {'from': state.matchedLocation});\n            return '/go/worlds';\n          }",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 120,
    "column": 31,
    "original": ";\n          }\n\n          // Invite-Routen werden durchgelassen (keine Weiterleitung)\n          if (isInviteRoute) {\n            AppLogger.navigation.i(",
    "suggested_key": "errorInviteroutenWerdenDurchgelassen",
    "context": "if (isLoggedIn && isAuthRoute) {\n            AppLogger.navigation.i('🏠 Redirect zu Worlds', error: {'from': state.matchedLocation});\n            return '/go/worlds';\n          }\n\n          // Invite-Routen werden durchgelassen (keine Weiterleitung)",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 125,
    "column": 81,
    "original": ", error: {",
    "suggested_key": "errorError",
    "context": "// Invite-Routen werden durchgelassen (keine Weiterleitung)\n          if (isInviteRoute) {\n            AppLogger.navigation.i('🎫 Invite-Route erkannt - keine Weiterleitung', error: {'route': state.matchedLocation});\n          }\n\n          return null;",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 125,
    "column": 98,
    "original": ": state.matchedLocation});\n          }\n\n          return null;\n        } catch (e) {\n          AppLogger.navigation.e(",
    "suggested_key": "errorStatematchedlocationReturnNull",
    "context": "// Invite-Routen werden durchgelassen (keine Weiterleitung)\n          if (isInviteRoute) {\n            AppLogger.navigation.i('🎫 Invite-Route erkannt - keine Weiterleitung', error: {'route': state.matchedLocation});\n          }\n\n          return null;",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 130,
    "column": 59,
    "original": ", error: e, stackTrace: StackTrace.current);\n          // Bei Fehlern zur Login-Seite weiterleiten\n          return ",
    "suggested_key": "errorErrorEStacktrace",
    "context": "return null;\n        } catch (e) {\n          AppLogger.navigation.e('❌ Router Redirect Fehler', error: e, stackTrace: StackTrace.current);\n          // Bei Fehlern zur Login-Seite weiterleiten\n          return '/go/auth/login';\n        }",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 132,
    "column": 33,
    "original": ";\n        }\n      },\n    \n    routes: [\n      // Landing page\n      GoRoute(\n        path: ",
    "suggested_key": "errorRoutesLandingPage",
    "context": "} catch (e) {\n          AppLogger.navigation.e('❌ Router Redirect Fehler', error: e, stackTrace: StackTrace.current);\n          // Bei Fehlern zur Login-Seite weiterleiten\n          return '/go/auth/login';\n        }\n      },",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 212,
    "column": 51,
    "original": "];\n          if (worldId == null) {\n            return CustomTransitionPage(\n              child: const ErrorPage(),\n              transitionsBuilder: (context, animation, secondaryAnimation, child) =>\n                SlideTransition(\n                  position: Tween<Offset>(\n                    begin: const Offset(0.0, 1.0),\n                    end: Offset.zero,\n                  ).animate(CurvedAnimation(\n                    parent: animation,\n                    curve: Curves.easeInOut,\n                  )),\n                  child: child,\n                ),\n            );\n          }\n          return CustomTransitionPage(\n            child: DashboardPage(worldId: worldId),\n            transitionsBuilder: (context, animation, secondaryAnimation, child) =>\n              SlideTransition(\n                position: Tween<Offset>(\n                  begin: const Offset(0.0, 1.0),\n                  end: Offset.zero,\n                ).animate(CurvedAnimation(\n                  parent: animation,\n                  curve: Curves.easeInOut,\n                )),\n                child: child,\n              ),\n          );\n        },\n      ),\n      // NORMALE WORLD-JOIN Route (über interne Navigation)\n      GoRoute(\n        path: ",
    "suggested_key": "errorIfWorldidNull",
    "context": "path: '/go/worlds/:id',\n        name: worldDashboardRoute,\n        pageBuilder: (context, state) {\n          final worldId = state.pathParameters['id'];\n          if (worldId == null) {\n            return CustomTransitionPage(\n              child: const ErrorPage(),",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: child property",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 250,
    "column": 51,
    "original": "];\n          if (worldId == null) {\n            return CustomTransitionPage(\n              child: const ErrorPage(),\n              transitionsBuilder: (context, animation, secondaryAnimation, child) =>\n                SlideTransition(\n                  position: Tween<Offset>(\n                    begin: const Offset(0.0, 1.0),\n                    end: Offset.zero,\n                  ).animate(CurvedAnimation(\n                    parent: animation,\n                    curve: Curves.easeInOut,\n                  )),\n                  child: child,\n                ),\n            );\n          }\n          return CustomTransitionPage(\n            child: WorldJoinPage(\n              worldId: worldId,\n              flowType: WorldJoinFlowType.normal, // KLARE FLOW-KENNZEICHNUNG\n            ),\n            transitionsBuilder: (context, animation, secondaryAnimation, child) =>\n              SlideTransition(\n                position: Tween<Offset>(\n                  begin: const Offset(0.0, 1.0),\n                  end: Offset.zero,\n                ).animate(CurvedAnimation(\n                  parent: animation,\n                  curve: Curves.easeInOut,\n                )),\n                child: child,\n              ),\n          );\n        },\n      ),\n      // INVITE-FLOW Route (externe Links)\n      GoRoute(\n        path: ",
    "suggested_key": "errorIfWorldidNull",
    "context": "path: '/go/worlds/:id/join',\n        name: worldJoinRoute,\n        pageBuilder: (context, state) {\n          final worldId = state.pathParameters['id'];\n          if (worldId == null) {\n            return CustomTransitionPage(\n              child: const ErrorPage(),",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: child property",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 293,
    "column": 36,
    "original": "⚠️ Invite-Token fehlt",
    "suggested_key": "errorInvitetokenFehlt",
    "context": "pageBuilder: (context, state) {\n          final token = state.pathParameters['token'];\n          if (token == null || token.isEmpty) {\n            AppLogger.navigation.w('⚠️ Invite-Token fehlt', error: {'path': state.matchedLocation});\n            return CustomTransitionPage(\n              child: const ErrorPage(),\n              transitionsBuilder: (context, animation, secondaryAnimation, child) =>",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 293,
    "column": 74,
    "original": ": state.matchedLocation});\n            return CustomTransitionPage(\n              child: const ErrorPage(),\n              transitionsBuilder: (context, animation, secondaryAnimation, child) =>\n                SlideTransition(\n                  position: Tween<Offset>(\n                    begin: const Offset(0.0, 1.0),\n                    end: Offset.zero,\n                  ).animate(CurvedAnimation(\n                    parent: animation,\n                    curve: Curves.easeInOut,\n                  )),\n                  child: child,\n                ),\n            );\n          }\n          AppLogger.navigation.i(",
    "suggested_key": "errorStatematchedlocationReturnCustomtransitionpage",
    "context": "pageBuilder: (context, state) {\n          final token = state.pathParameters['token'];\n          if (token == null || token.isEmpty) {\n            AppLogger.navigation.w('⚠️ Invite-Token fehlt', error: {'path': state.matchedLocation});\n            return CustomTransitionPage(\n              child: const ErrorPage(),\n              transitionsBuilder: (context, animation, secondaryAnimation, child) =>",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 309,
    "column": 57,
    "original": ", error: {",
    "suggested_key": "errorError",
    "context": "),\n            );\n          }\n          AppLogger.navigation.i('🎫 Invite-Token erkannt', error: {'token': token.substring(0, 8) + '...'});\n          return CustomTransitionPage(\n            child: WorldJoinPage(\n              inviteToken: token,",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: child property",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 309,
    "column": 74,
    "original": ": token.substring(0, 8) + ",
    "suggested_key": "errorTokensubstring08",
    "context": "),\n            );\n          }\n          AppLogger.navigation.i('🎫 Invite-Token erkannt', error: {'token': token.substring(0, 8) + '...'});\n          return CustomTransitionPage(\n            child: WorldJoinPage(\n              inviteToken: token,",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: child property",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 309,
    "column": 105,
    "original": "});\n          return CustomTransitionPage(\n            child: WorldJoinPage(\n              inviteToken: token,\n              flowType: WorldJoinFlowType.invite, // KLARE FLOW-KENNZEICHNUNG\n            ),\n            transitionsBuilder: (context, animation, secondaryAnimation, child) =>\n              SlideTransition(\n                position: Tween<Offset>(\n                  begin: const Offset(0.0, 1.0),\n                  end: Offset.zero,\n                ).animate(CurvedAnimation(\n                  parent: animation,\n                  curve: Curves.easeInOut,\n                )),\n                child: child,\n              ),\n          );\n        },\n      ),\n    ],\n    \n    // Verbesserte Fehlerbehandlung mit robuster 404-Erkennung\n    errorBuilder: (context, state) {\n      // Spezifische Fehlerbehandlung basierend auf Error-Typ\n      if (state.error is GoException) {\n        final goException = state.error as GoException;\n        \n        // Auth-Fehler\n        if (goException.message.contains(",
    "suggested_key": "errorReturnCustomtransitionpageChild",
    "context": "),\n            );\n          }\n          AppLogger.navigation.i('🎫 Invite-Token erkannt', error: {'token': token.substring(0, 8) + '...'});\n          return CustomTransitionPage(\n            child: WorldJoinPage(\n              inviteToken: token,",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: child property",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 338,
    "column": 46,
    "original": ")) {\n          return const AuthErrorPage();\n        }\n        \n        // Welt nicht gefunden - robuste Erkennung\n        if (goException.message.contains(",
    "suggested_key": "errorReturnConstAutherrorpage",
    "context": "final goException = state.error as GoException;\n        \n        // Auth-Fehler\n        if (goException.message.contains('401')) {\n          return const AuthErrorPage();\n        }",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 343,
    "column": 46,
    "original": ") && \n            (state.matchedLocation.contains(",
    "suggested_key": "errorStatematchedlocationcontains",
    "context": "}\n        \n        // Welt nicht gefunden - robuste Erkennung\n        if (goException.message.contains('404') && \n            (state.matchedLocation.contains('/worlds/') || \n             state.uri.pathSegments.contains('worlds'))) {\n          return const WorldNotFoundPage();",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 344,
    "column": 54,
    "original": ") || \n             state.uri.pathSegments.contains(",
    "suggested_key": "errorStateuripathsegmentscontains",
    "context": "// Welt nicht gefunden - robuste Erkennung\n        if (goException.message.contains('404') && \n            (state.matchedLocation.contains('/worlds/') || \n             state.uri.pathSegments.contains('worlds'))) {\n          return const WorldNotFoundPage();\n        }",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 345,
    "column": 53,
    "original": "))) {\n          return const WorldNotFoundPage();\n        }\n      }\n      \n      // Standard 404-Fehlerseite\n      return const ErrorPage();\n    },\n  );\n        \n        _isInitialized = true;\n      } catch (e) {\n        // Bei Fehler während der Initialisierung\n        AppLogger.navigation.e(",
    "suggested_key": "errorReturnConstWorldnotfoundpage",
    "context": "// Welt nicht gefunden - robuste Erkennung\n        if (goException.message.contains('404') && \n            (state.matchedLocation.contains('/worlds/') || \n             state.uri.pathSegments.contains('worlds'))) {\n          return const WorldNotFoundPage();\n        }\n      }",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 358,
    "column": 65,
    "original": ", error: e);\n        // Fallback: Minimaler Router nur mit Error Page\n        _routerInstance = GoRouter(\n          initialLocation: ",
    "suggested_key": "errorErrorEFallback",
    "context": "_isInitialized = true;\n      } catch (e) {\n        // Bei Fehler während der Initialisierung\n        AppLogger.navigation.e('❌ Router Initialisierungs-Fehler', error: e);\n        // Fallback: Minimaler Router nur mit Error Page\n        _routerInstance = GoRouter(\n          initialLocation: '/go',",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 361,
    "column": 32,
    "original": ",\n          routes: [\n            GoRoute(\n              path: ",
    "suggested_key": "errorRoutesGoroutePath",
    "context": "AppLogger.navigation.e('❌ Router Initialisierungs-Fehler', error: e);\n        // Fallback: Minimaler Router nur mit Error Page\n        _routerInstance = GoRouter(\n          initialLocation: '/go',\n          routes: [\n            GoRoute(\n              path: '/go',",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 364,
    "column": 25,
    "original": ",\n              builder: (context, state) => const ErrorPage(),\n            ),\n          ],\n        );\n        _isInitialized = true;\n      }\n    }\n    return _routerInstance!;\n  }\n\n  // Getter für NavigatorKey (für zukünftige Shell-Integration)\n  static GlobalKey<NavigatorState> get rootNavigatorKey => _rootNavigatorKey;\n  \n  // Public Methoden für Cache-Management\n  static void invalidateAuthCache() {\n    // Caching entfernt, daher keine Cache-Invalidierung mehr nötig\n  }\n  static bool? get cachedLoginState => null; // Caching entfernt\n  \n  // Cache beim App-Start invalidieren\n  static void invalidateCacheOnStart() {\n    // Caching entfernt, daher keine Cache-Invalidierung mehr nötig\n    AppLogger.navigation.i(",
    "suggested_key": "errorBuilderContextState",
    "context": "initialLocation: '/go',\n          routes: [\n            GoRoute(\n              path: '/go',\n              builder: (context, state) => const ErrorPage(),\n            ),\n          ],",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\splash_screen.dart",
    "line": 88,
    "column": 70,
    "original": ", e);\n      \n      if (mounted) {\n        setState(() {\n          _error = e.toString();\n        });\n      }\n    }\n  }\n\n  Future<void> _runInitializationWithSteps() async {\n    final initSteps = widget.initSteps;\n    if (initSteps != null && initSteps.isNotEmpty) {\n      for (int i = 0; i < initSteps.length; i++) {\n        if (mounted) {\n          setState(() {\n            _currentStepIndex = i;\n            _currentStepName = initSteps[i];\n          });\n        }\n        \n        // Simuliere Schritt-für-Schritt Initialisierung\n        await Future.delayed(const Duration(milliseconds: 300));\n      }\n    }\n    \n    // Führe die eigentliche Initialisierung aus\n    await widget.initializationFunction();\n  }\n\n  @override\n  void dispose() {\n    _animationController.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    if (_error != null) {\n      return _buildErrorScreen();\n    }\n    \n    if (_isInitialized) {\n      // Direkt das Child anzeigen ohne FadeTransition die ausblendet\n      return widget.child;\n    }\n    \n    return _buildSplashScreen();\n  }\n\n  Widget _buildSplashScreen() {\n    final initSteps = widget.initSteps;\n    final loadingText = widget.loadingText;\n    \n    return Scaffold(\n      backgroundColor: Theme.of(context).primaryColor,\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            // App Logo/Icon\n            widget.logo ?? Container(\n              width: 120,\n              height: 120,\n              decoration: BoxDecoration(\n                color: Colors.white,\n                borderRadius: BorderRadius.circular(20),\n                boxShadow: [\n                  BoxShadow(\n                    color: Colors.black.withOpacity(0.1),\n                    blurRadius: 10,\n                    offset: const Offset(0, 5),\n                  ),\n                ],\n              ),\n              child: const Icon(\n                Icons.public,\n                size: 60,\n                color: Colors.blue,\n              ),\n            ),\n            \n            const SizedBox(height: 40),\n            \n            // App Name\n            Text(\n              widget.appName ?? ",
    "suggested_key": "errorEIfMounted",
    "context": "// _animationController.reverse(); // ENTFERNT\n      }\n    } catch (e) {\n      AppLogger.logError('SplashScreen Initialisierung fehlgeschlagen', e);\n      \n      if (mounted) {\n        setState(() {",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\splash_screen.dart",
    "line": 280,
    "column": 40,
    "original": ",\n                style: TextStyle(\n                  fontSize: 24,\n                  fontWeight: FontWeight.bold,\n                ),\n              ),\n              \n              const SizedBox(height: 10),\n              \n              Text(\n                _error ?? ",
    "suggested_key": "errorStyleTextstyleFontsize",
    "context": "const SizedBox(height: 20),\n              \n              const Text(\n                'Initialisierungsfehler',\n                style: TextStyle(\n                  fontSize: 24,\n                  fontWeight: FontWeight.bold,",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\splash_screen.dart",
    "line": 290,
    "column": 46,
    "original": ",\n                textAlign: TextAlign.center,\n                style: const TextStyle(\n                  fontSize: 16,\n                  color: Colors.grey,\n                ),\n              ),\n              \n              const SizedBox(height: 30),\n              \n              Row(\n                mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n                children: [\n                  ElevatedButton(\n                    onPressed: () {\n                      setState(() {\n                        _error = null;\n                        _isInitialized = false;\n                        _timedOut = false;\n                        _currentStepIndex = 0;\n                        _currentStepName = null;\n                      });\n                      _initialize();\n                    },\n                    child: const Text(",
    "suggested_key": "errorTextalignTextaligncenterStyle",
    "context": "const SizedBox(height: 10),\n              \n              Text(\n                _error ?? 'Unbekannter Fehler',\n                textAlign: TextAlign.center,\n                style: const TextStyle(\n                  fontSize: 16,",
    "category": "error",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 68,
    "column": 7,
    "original": "X-Client-Time",
    "suggested_key": "inviteXclienttime",
    "context": "'Content-Type': 'application/json',\n      'X-Device-Fingerprint': deviceFingerprint,\n      'X-Client-Timezone': 'Europe/Berlin',\n      'X-Client-Time': DateTime.now().millisecondsSinceEpoch.toString(),\n    };\n    \n    if (_token != null) {",
    "category": "invite",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 85,
    "column": 37,
    "original": ");\n        if (parts.length == 3) {\n          final payload = jsonDecode(utf8.decode(base64Url.decode(base64Url.normalize(parts[1]))));\n          final exp = payload[",
    "suggested_key": "inviteIfPartslength3",
    "context": "try {\n        final token = _token;\n        if (token == null) return;\n        final parts = token.split('.');\n        if (parts.length == 3) {\n          final payload = jsonDecode(utf8.decode(base64Url.decode(base64Url.normalize(parts[1]))));\n          final exp = payload['exp'] as int;",
    "category": "invite",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 88,
    "column": 35,
    "original": "] as int;\n          final now = DateTime.now().millisecondsSinceEpoch ~/ 1000;\n          \n          // Token erneuern wenn weniger als 60 Sekunden gültig\n          if (exp - now < 60) {\n            // Log Token-Refresh\n            AppLogger.api.i(",
    "suggested_key": "inviteAsIntFinal",
    "context": "final parts = token.split('.');\n        if (parts.length == 3) {\n          final payload = jsonDecode(utf8.decode(base64Url.decode(base64Url.normalize(parts[1]))));\n          final exp = payload['exp'] as int;\n          final now = DateTime.now().millisecondsSinceEpoch ~/ 1000;\n          \n          // Token erneuern wenn weniger als 60 Sekunden gültig",
    "category": "invite",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 119,
    "column": 58,
    "original": ") {\n      final expiresIn = int.tryParse(response.headers[",
    "suggested_key": "inviteFinalExpiresinInttryparseresponseheaders",
    "context": "// Response-Interceptor mit Header-Parsing für proaktive Token-Erneuerung\n  Future<http.Response> _handleResponse(http.Response response, String endpoint) async {\n    // Proaktive Token-Erneuerung basierend auf Response-Headers\n    if (response.headers['x-token-expires-soon'] == 'true') {\n      final expiresIn = int.tryParse(response.headers['x-token-expires-in'] ?? '0');\n      if (expiresIn != null && expiresIn < 60) {\n        try {",
    "category": "invite",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 120,
    "column": 82,
    "original": ");\n      if (expiresIn != null && expiresIn < 60) {\n        try {\n          AppLogger.api.i(",
    "suggested_key": "inviteIfExpiresinNull",
    "context": "Future<http.Response> _handleResponse(http.Response response, String endpoint) async {\n    // Proaktive Token-Erneuerung basierend auf Response-Headers\n    if (response.headers['x-token-expires-soon'] == 'true') {\n      final expiresIn = int.tryParse(response.headers['x-token-expires-in'] ?? '0');\n      if (expiresIn != null && expiresIn < 60) {\n        try {\n          AppLogger.api.i('🔄 Proaktive Token-Erneuerung - läuft ab in ${expiresIn}s');",
    "category": "invite",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 215,
    "column": 54,
    "original": "${Env.apiUrl}${Env.apiBasePath}$endpoint",
    "suggested_key": "inviteEnvapiurlenvapibasepathendpoint",
    "context": "await _ensureValidToken();\n    }\n    \n    final request = http.Request('DELETE', Uri.parse('${Env.apiUrl}${Env.apiBasePath}$endpoint'));\n    request.headers.addAll(_headers);\n    request.body = jsonEncode(data);",
    "category": "invite",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 245,
    "column": 40,
    "original": ") || entry.key.contains(",
    "suggested_key": "inviteEntrykeycontains",
    "context": "if (decodedBody is Map<String, dynamic>) {\n        final sanitized = <String, dynamic>{};\n        for (final entry in decodedBody.entries) {\n          if (entry.key.contains('token') || entry.key.contains('Token')) {\n            sanitized[entry.key] = '***';\n          } else {\n            sanitized[entry.key] = entry.value;",
    "category": "invite",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 245,
    "column": 71,
    "original": ")) {\n            sanitized[entry.key] = ",
    "suggested_key": "inviteSanitizedentrykey",
    "context": "if (decodedBody is Map<String, dynamic>) {\n        final sanitized = <String, dynamic>{};\n        for (final entry in decodedBody.entries) {\n          if (entry.key.contains('token') || entry.key.contains('Token')) {\n            sanitized[entry.key] = '***';\n          } else {\n            sanitized[entry.key] = entry.value;",
    "category": "invite",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 246,
    "column": 40,
    "original": ";\n          } else {\n            sanitized[entry.key] = entry.value;\n          }\n        }\n        return jsonEncode(sanitized);\n      }\n    } catch (e) {\n      // If JSON parsing fails, return truncated body\n      return body.length > 100 ? ",
    "suggested_key": "inviteElseSanitizedentrykeyEntryvalue",
    "context": "final sanitized = <String, dynamic>{};\n        for (final entry in decodedBody.entries) {\n          if (entry.key.contains('token') || entry.key.contains('Token')) {\n            sanitized[entry.key] = '***';\n          } else {\n            sanitized[entry.key] = entry.value;\n          }",
    "category": "invite",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 1,
    "column": 8,
    "original": "dart:convert",
    "suggested_key": "inviteDartconvert",
    "context": "import 'dart:convert';\nimport 'dart:io';\nimport 'package:http/http.dart' as http;\nimport 'api_service.dart';",
    "category": "invite",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\invite_service.dart",
    "line": 30,
    "column": 33,
    "original": "] != null \n          ? DateTime.parse(json[",
    "suggested_key": "inviteNullDatetimeparsejson",
    "context": "createdAt: json['createdAt'] != null \n          ? DateTime.parse(json['createdAt'] as String) \n          : null,\n      expiresAt: json['expiresAt'] != null \n          ? DateTime.parse(json['expiresAt'] as String) \n          : null,\n    );",
    "category": "invite",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\token_storage.dart",
    "line": 2,
    "column": 8,
    "original": "package:flutter_secure_storage/flutter_secure_storage.dart",
    "suggested_key": "invitePackageflutter_secure_storageflutter_secure_storagedart",
    "context": "import 'package:flutter/foundation.dart' show kIsWeb;\nimport 'package:flutter_secure_storage/flutter_secure_storage.dart';\nimport 'package:shared_preferences/shared_preferences.dart';\n\nclass TokenStorage {",
    "category": "invite",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\token_storage.dart",
    "line": 3,
    "column": 8,
    "original": "package:shared_preferences/shared_preferences.dart",
    "suggested_key": "invitePackageshared_preferencesshared_preferencesdart",
    "context": "import 'package:flutter/foundation.dart' show kIsWeb;\nimport 'package:flutter_secure_storage/flutter_secure_storage.dart';\nimport 'package:shared_preferences/shared_preferences.dart';\n\nclass TokenStorage {\n  static const _accessTokenKey = 'access_token';",
    "category": "invite",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\invite_dialog.dart",
    "line": 109,
    "column": 26,
    "original": "Bitte geben Sie eine gültige E-Mail-Adresse ein",
    "suggested_key": "inviteBitteGebenSie",
    "context": "return 'E-Mail-Adresse ist erforderlich';\n                }\n                if (!RegExp(r'^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$').hasMatch(value)) {\n                  return 'Bitte geben Sie eine gültige E-Mail-Adresse ein';\n                }\n                return null;\n              },",
    "category": "invite",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\forgot_password_page.dart",
    "line": 145,
    "column": 53,
    "original": ",\n                              style: Theme.of(context).textTheme.headlineMedium?.copyWith(\n                                color: Colors.white,\n                                fontWeight: FontWeight.bold,\n                                fontSize: 24,\n                              ),\n                            ),\n                            const SizedBox(height: 8),\n                            \n                            Text(\n                              ",
    "suggested_key": "uiStyleThemeofcontexttextthemeheadlinemediumcopywithColor",
    "context": "const SizedBox(height: 20),\n                            \n                            Text(\n                              'Passwort zurücksetzen',\n                              style: Theme.of(context).textTheme.headlineMedium?.copyWith(\n                                color: Colors.white,\n                                fontWeight: FontWeight.bold,",
    "category": "ui",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\forgot_password_page.dart",
    "line": 155,
    "column": 125,
    "original": ",\n                              style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                                color: Colors.grey[300],\n                                fontSize: 14,\n                              ),\n                              textAlign: TextAlign.center,\n                            ),\n                            const SizedBox(height: 32),\n                            \n                            // Success Message\n                            if (_isSuccess)\n                              Container(\n                                width: double.infinity,\n                                padding: const EdgeInsets.all(12),\n                                margin: const EdgeInsets.only(bottom: 16),\n                                decoration: BoxDecoration(\n                                  color: Colors.green[900]!.withOpacity(0.3),\n                                  borderRadius: BorderRadius.circular(8),\n                                  border: Border.all(color: Colors.green[400]!.withOpacity(0.5)),\n                                ),\n                                child: Row(\n                                  children: [\n                                    Icon(Icons.check_circle_outline, color: Colors.green[400], size: 20),\n                                    const SizedBox(width: 8),\n                                    Expanded(\n                                      child: Text(\n                                        ",
    "suggested_key": "uiStyleThemeofcontexttextthemebodylargecopywithColor",
    "context": "const SizedBox(height: 8),\n                            \n                            Text(\n                              'Gib deine E-Mail-Adresse ein und wir senden dir einen Link zum Zurücksetzen deines Passworts.',\n                              style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                                color: Colors.grey[300],\n                                fontSize: 14,",
    "category": "ui",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\forgot_password_page.dart",
    "line": 181,
    "column": 94,
    "original": ",\n                                        style: TextStyle(color: Colors.green[200], fontSize: 14),\n                                      ),\n                                    ),\n                                  ],\n                                ),\n                              ),\n                            \n                            // Email field\n                            if (!_isSuccess)\n                              TextFormField(\n                                controller: _emailController,\n                                style: const TextStyle(color: Colors.white),\n                                keyboardType: TextInputType.emailAddress,\n                                autofillHints: const [AutofillHints.email],\n                                textInputAction: TextInputAction.done,\n                                onFieldSubmitted: (_) => _isLoading ? null : _requestPasswordReset(),\n                                decoration: InputDecoration(\n                                  labelText: ",
    "suggested_key": "uiStyleTextstylecolorColorsgreen200",
    "context": "const SizedBox(width: 8),\n                                    Expanded(\n                                      child: Text(\n                                        'E-Mail gesendet! Bitte überprüfe deinen Posteingang.',\n                                        style: TextStyle(color: Colors.green[200], fontSize: 14),\n                                      ),\n                                    ),",
    "category": "ui",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\forgot_password_page.dart",
    "line": 289,
    "column": 43,
    "original": "Link senden",
    "suggested_key": "uiLinkSenden",
    "context": "),\n                                        )\n                                      : const Text(\n                                          'Link senden',\n                                          style: TextStyle(\n                                            fontSize: 16,\n                                            fontWeight: FontWeight.bold,",
    "category": "ui",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 392,
    "column": 66,
    "original": ",\n                                              style: TextStyle(\n                                                color: Colors.grey[300],\n                                                fontSize: 14,\n                                              ),\n                                            ),\n                                          ),\n                                        ],\n                                      ),\n                                      \n                                      // Forgot Password Link\n                                      TextButton(\n                                        onPressed: () => context.goNamed(",
    "suggested_key": "uiStyleTextstyleColor",
    "context": "});\n                                            },\n                                            child: Text(\n                                              'Angemeldet bleiben',\n                                              style: TextStyle(\n                                                color: Colors.grey[300],\n                                                fontSize: 14,",
    "category": "ui",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 474,
    "column": 58,
    "original": ",\n                                                style: TextStyle(\n                                                  fontSize: 16,\n                                                  fontWeight: FontWeight.bold,\n                                                ),\n                                              ),\n                                      ),\n                                    ),\n                                  ),\n                                  const SizedBox(height: 24),\n                                  \n                                  // Divider with text\n                                  Row(\n                                    children: [\n                                      Expanded(\n                                        child: Divider(\n                                          color: Colors.grey[600],\n                                          thickness: 1,\n                                        ),\n                                      ),\n                                      Padding(\n                                        padding: const EdgeInsets.symmetric(horizontal: 16),\n                                        child: Text(\n                                          ",
    "suggested_key": "uiStyleTextstyleFontsize",
    "context": "),\n                                              )\n                                            : const Text(\n                                                'Anmelden',\n                                                style: TextStyle(\n                                                  fontSize: 16,\n                                                  fontWeight: FontWeight.bold,",
    "category": "ui",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 497,
    "column": 48,
    "original": ",\n                                          style: TextStyle(\n                                            color: Colors.grey[400],\n                                            fontSize: 14,\n                                          ),\n                                        ),\n                                      ),\n                                      Expanded(\n                                        child: Divider(\n                                          color: Colors.grey[600],\n                                          thickness: 1,\n                                        ),\n                                      ),\n                                    ],\n                                  ),\n                                  const SizedBox(height: 16),\n                                  \n                                  // Social Login Buttons (Placeholder)\n                                  Row(\n                                    mainAxisAlignment: MainAxisAlignment.center,\n                                    children: [\n                                      // Google Login\n                                      _buildSocialLoginButton(\n                                        onPressed: () {\n                                          ScaffoldMessenger.of(context).showSnackBar(\n                                            const SnackBar(\n                                              content: Text(",
    "suggested_key": "uiStyleTextstyleColor",
    "context": "Padding(\n                                        padding: const EdgeInsets.symmetric(horizontal: 16),\n                                        child: Text(\n                                          'oder',\n                                          style: TextStyle(\n                                            color: Colors.grey[400],\n                                            fontSize: 14,",
    "category": "ui",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 541,
    "column": 55,
    "original": ",\n                                      ),\n                                    ],\n                                  ),\n                                  const SizedBox(height: 20),\n                                  \n                                  // Register link\n                                  Row(\n                                    mainAxisAlignment: MainAxisAlignment.center,\n                                    children: [\n                                      Text(\n                                        ",
    "suggested_key": "uiConstSizedboxheight20",
    "context": ");\n                                        },\n                                        icon: Icons.code,\n                                        label: 'GitHub',\n                                      ),\n                                    ],\n                                  ),",
    "category": "ui",
    "confidence": 0.6,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 253,
    "column": 45,
    "original": ",\n                              style: Theme.of(context).textTheme.headlineMedium?.copyWith(\n                                color: Colors.white,\n                                fontWeight: FontWeight.bold,\n                                fontSize: 24,\n                              ),\n                            ),\n                            const SizedBox(height: 8),\n                            Text(\n                              ",
    "suggested_key": "uiStyleThemeofcontexttextthemeheadlinemediumcopywithColor",
    "context": "),\n                            const SizedBox(height: 20),\n                            Text(\n                              'Registrierung',\n                              style: Theme.of(context).textTheme.headlineMedium?.copyWith(\n                                color: Colors.white,\n                                fontWeight: FontWeight.bold,",
    "category": "ui",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\register_page.dart",
    "line": 462,
    "column": 54,
    "original": ",\n                                        style: TextStyle(\n                                          fontSize: 16,\n                                          fontWeight: FontWeight.bold,\n                                        ),\n                                      ),\n                              ),\n                            ),\n                            const SizedBox(height: 20),\n\n                            // Login link\n                            Row(\n                              mainAxisAlignment: MainAxisAlignment.center,\n                              children: [\n                                Text(\n                                  ",
    "suggested_key": "uiStyleTextstyleFontsize",
    "context": "),\n                                      )\n                                    : const Text(\n                                        'Registrieren',\n                                        style: TextStyle(\n                                          fontSize: 16,\n                                          fontWeight: FontWeight.bold,",
    "category": "ui",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 191,
    "column": 81,
    "original": "Neues Passwort festlegen",
    "suggested_key": "uiNeuesPasswortFestlegen",
    "context": "const SizedBox(height: 20),\n                              \n                              Text(\n                                _isSuccess ? 'Passwort erfolgreich geändert!' : 'Neues Passwort festlegen',\n                                style: Theme.of(context).textTheme.headlineMedium?.copyWith(\n                                  color: Colors.white,\n                                  fontWeight: FontWeight.bold,",
    "category": "ui",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 202,
    "column": 37,
    "original": "Du wirst automatisch zur Anmeldung weitergeleitet...",
    "suggested_key": "uiDuWirstAutomatisch",
    "context": "Text(\n                                _isSuccess \n                                  ? 'Du wirst automatisch zur Anmeldung weitergeleitet...'\n                                  : 'Bitte gib dein neues Passwort ein.',\n                                style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                                  color: Colors.grey[300],",
    "category": "ui",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 203,
    "column": 37,
    "original": "Bitte gib dein neues Passwort ein.",
    "suggested_key": "uiBitteGibDein",
    "context": "Text(\n                                _isSuccess \n                                  ? 'Du wirst automatisch zur Anmeldung weitergeleitet...'\n                                  : 'Bitte gib dein neues Passwort ein.',\n                                style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                                  color: Colors.grey[300],\n                                  fontSize: 14,",
    "category": "ui",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 378,
    "column": 41,
    "original": "Passwort-Anforderungen:",
    "suggested_key": "uiPasswortanforderungen",
    "context": "crossAxisAlignment: CrossAxisAlignment.start,\n                                    children: [\n                                      const Text(\n                                        'Passwort-Anforderungen:',\n                                        style: TextStyle(\n                                          color: Colors.white,\n                                          fontSize: 14,",
    "category": "ui",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 450,
    "column": 67,
    "original": ",\n                                            style: TextStyle(\n                                              fontSize: 16,\n                                              fontWeight: FontWeight.bold,\n                                            ),\n                                          ),\n                                  ),\n                                ),\n                              \n                              const SizedBox(height: 20),\n                              \n                              // Back to login link\n                              if (!_isSuccess)\n                                TextButton(\n                                  onPressed: () => context.goNamed(",
    "suggested_key": "uiStyleTextstyleFontsize",
    "context": "),\n                                          )\n                                        : const Text(\n                                            'Passwort zurücksetzen',\n                                            style: TextStyle(\n                                              fontSize: 16,\n                                              fontWeight: FontWeight.bold,",
    "category": "ui",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_card.dart",
    "line": 368,
    "column": 79,
    "original": ",\n                        style: TextStyle(\n                          color: Colors.grey[400],\n                          fontSize: 14,\n                        ),\n                      ),\n                    ],\n                  ),\n                ],\n              );\n            }\n          ),\n        ],\n      ],\n    );\n  }\n\n  Widget _buildActionButtons() {\n    final List<Widget> buttons = [];\n    \n    // Status-basierte Button-Logik\n    switch (world.status) {\n      case WorldStatus.upcoming:\n        // Vorregistrierung oder Zurückziehen\n        if (isPreRegistered) {\n          if (onCancelPreRegistration != null) {\n            buttons.add(_buildButton(\n              onPressed: onCancelPreRegistration,\n              icon: Icons.cancel,\n              label: ",
    "suggested_key": "uiStyleTextstyleColor",
    "context": "),\n                      const SizedBox(width: 4),\n                      Text(\n                        'Ende: ${endDate.day}.${endDate.month}.${endDate.year}',\n                        style: TextStyle(\n                          color: Colors.grey[400],\n                          fontSize: 14,",
    "category": "ui",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_filters.dart",
    "line": 60,
    "column": 22,
    "original": ",\n            style: TextStyle(\n              color: Colors.grey[300],\n              fontWeight: FontWeight.w600,\n            ),\n          ),\n          const SizedBox(width: 8),\n          ...WorldStatus.values.map((status) {\n            final isSelected = statusFilter == status;\n            return Padding(\n              padding: const EdgeInsets.only(right: 8),\n              child: FilterChip(\n                selected: isSelected,\n                label: Text(\n                  _getStatusLabel(status),\n                  style: TextStyle(\n                    color: isSelected ? Colors.white : Colors.grey[300],\n                  ),\n                ),\n                avatar: Icon(\n                  _getStatusIcon(status),\n                  size: 16,\n                  color: isSelected ? Colors.white : _getStatusColor(status),\n                ),\n                onSelected: (selected) {\n                  onStatusChanged(selected ? status : null);\n                },\n                backgroundColor: const Color(0xFF2D2D2D),\n                selectedColor: _getStatusColor(status).withOpacity(0.3),\n                checkmarkColor: Colors.white,\n                side: BorderSide(\n                  color: isSelected ? _getStatusColor(status) : Colors.grey[600]!,\n                ),\n              ),\n            );\n          }),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildCategoryFilter() {\n    return SingleChildScrollView(\n      scrollDirection: Axis.horizontal,\n      padding: const EdgeInsets.symmetric(horizontal: 16),\n      child: Row(\n        children: [\n          Text(\n            ",
    "suggested_key": "uiStyleTextstyleColor",
    "context": "child: Row(\n        children: [\n          Text(\n            'Status: ',\n            style: TextStyle(\n              color: Colors.grey[300],\n              fontWeight: FontWeight.w600,",
    "category": "ui",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_filters.dart",
    "line": 108,
    "column": 25,
    "original": ",\n            style: TextStyle(\n              color: Colors.grey[300],\n              fontWeight: FontWeight.w600,\n            ),\n          ),\n          const SizedBox(width: 8),\n          ...WorldCategory.values.map((category) {\n            final isSelected = categoryFilter == category;\n            return Padding(\n              padding: const EdgeInsets.only(right: 8),\n              child: FilterChip(\n                selected: isSelected,\n                label: Row(\n                  mainAxisSize: MainAxisSize.min,\n                  children: [\n                    Icon(\n                      _getCategoryIcon(category),\n                      size: 16,\n                      color: isSelected ? Colors.white : _getCategoryColor(category),\n                    ),\n                    const SizedBox(width: 4),\n                    Text(\n                      _getCategoryLabel(category),\n                      style: TextStyle(\n                        color: isSelected ? Colors.white : Colors.grey[300],\n                      ),\n                    ),\n                  ],\n                ),\n                onSelected: (selected) {\n                  onCategoryChanged(selected ? category : null);\n                },\n                backgroundColor: const Color(0xFF2D2D2D),\n                selectedColor: _getCategoryColor(category).withOpacity(0.3),\n                checkmarkColor: Colors.white,\n                side: BorderSide(\n                  color: isSelected ? _getCategoryColor(category) : Colors.grey[600]!,\n                ),\n              ),\n            );\n          }),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildSortOptions() {\n    return Container(\n      padding: const EdgeInsets.symmetric(horizontal: 16),\n      child: Row(\n        children: [\n          Text(\n            ",
    "suggested_key": "uiStyleTextstyleColor",
    "context": "child: Row(\n        children: [\n          Text(\n            'Kategorie: ',\n            style: TextStyle(\n              color: Colors.grey[300],\n              fontWeight: FontWeight.w600,",
    "category": "ui",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_filters.dart",
    "line": 161,
    "column": 30,
    "original": ",\n            style: TextStyle(\n              color: Colors.grey[300],\n              fontWeight: FontWeight.w600,\n            ),\n          ),\n          const SizedBox(width: 8),\n          Container(\n            height: 40,\n            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 4),\n            decoration: BoxDecoration(\n              color: const Color(0xFF2D2D2D),\n              borderRadius: BorderRadius.circular(8),\n              border: Border.all(color: Colors.grey[600]!),\n            ),\n            child: DropdownButton<String>(\n              value: sortBy,\n              dropdownColor: const Color(0xFF2D2D2D),\n              style: const TextStyle(color: Colors.white),\n              underline: Container(),\n              icon: Icon(Icons.arrow_drop_down, color: Colors.grey[300]),\n              items: const [\n                DropdownMenuItem(\n                  value: ",
    "suggested_key": "uiStyleTextstyleColor",
    "context": "child: Row(\n        children: [\n          Text(\n            'Sortieren nach: ',\n            style: TextStyle(\n              color: Colors.grey[300],\n              fontWeight: FontWeight.w600,",
    "category": "ui",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_filters.dart",
    "line": 184,
    "column": 36,
    "original": ",\n                  child: Text(",
    "suggested_key": "uiChildText",
    "context": "icon: Icon(Icons.arrow_drop_down, color: Colors.grey[300]),\n              items: const [\n                DropdownMenuItem(\n                  value: 'startDate',\n                  child: Text('Startdatum'),\n                ),\n                DropdownMenuItem(",
    "category": "ui",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_filters.dart",
    "line": 185,
    "column": 42,
    "original": "),\n                ),\n                DropdownMenuItem(\n                  value: ",
    "suggested_key": "uiDropdownmenuitemValue",
    "context": "items: const [\n                DropdownMenuItem(\n                  value: 'startDate',\n                  child: Text('Startdatum'),\n                ),\n                DropdownMenuItem(\n                  value: 'name',",
    "category": "ui",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_filters.dart",
    "line": 188,
    "column": 31,
    "original": ",\n                  child: Text(",
    "suggested_key": "uiChildText",
    "context": "child: Text('Startdatum'),\n                ),\n                DropdownMenuItem(\n                  value: 'name',\n                  child: Text('Name'),\n                ),\n                DropdownMenuItem(",
    "category": "ui",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_filters.dart",
    "line": 189,
    "column": 36,
    "original": "),\n                ),\n                DropdownMenuItem(\n                  value: ",
    "suggested_key": "uiDropdownmenuitemValue",
    "context": "),\n                DropdownMenuItem(\n                  value: 'name',\n                  child: Text('Name'),\n                ),\n                DropdownMenuItem(\n                  value: 'status',",
    "category": "ui",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_filters.dart",
    "line": 192,
    "column": 33,
    "original": ",\n                  child: Text(",
    "suggested_key": "uiChildText",
    "context": "child: Text('Name'),\n                ),\n                DropdownMenuItem(\n                  value: 'status',\n                  child: Text('Status'),\n                ),\n                DropdownMenuItem(",
    "category": "ui",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_filters.dart",
    "line": 193,
    "column": 38,
    "original": "),\n                ),\n                DropdownMenuItem(\n                  value: ",
    "suggested_key": "uiDropdownmenuitemValue",
    "context": "),\n                DropdownMenuItem(\n                  value: 'status',\n                  child: Text('Status'),\n                ),\n                DropdownMenuItem(\n                  value: 'playerCount',",
    "category": "ui",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\widgets\\world_filters.dart",
    "line": 236,
    "column": 13,
    "original": "Aktive Filter: ",
    "suggested_key": "uiAktiveFilter",
    "context": "child: Row(\n        children: [\n          Text(\n            'Aktive Filter: ',\n            style: TextStyle(\n              color: Colors.grey[400],\n              fontSize: 12,",
    "category": "ui",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 267,
    "column": 28,
    "original": ";\n    if (expiresAt != null) {\n      final expiresAtLocal = expiresAt.toLocal();\n      final dateStr = ",
    "suggested_key": "uiIfExpiresatNull",
    "context": ": 'beizutreten';\n    \n    // Gültigkeitstext erstellen\n    String validityText = '';\n    if (expiresAt != null) {\n      final expiresAtLocal = expiresAt.toLocal();\n      final dateStr = '${expiresAtLocal.day.toString().padLeft(2, '0')}.${expiresAtLocal.month.toString().padLeft(2, '0')}.${expiresAtLocal.year} ${expiresAtLocal.hour.toString().padLeft(2, '0')}:${expiresAtLocal.minute.toString().padLeft(2, '0')}';",
    "category": "ui",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 325,
    "column": 60,
    "original": ");\n        actionText = ",
    "suggested_key": "uiActiontext",
    "context": "break;\n        \n      default:\n        AppLogger.app.w('❌ Unbekannter User-Status: $status');\n        actionText = 'Unbekannter Status: $status';\n        infoText = '$baseInfoText\\n\\n$actionText';\n    }",
    "category": "ui",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 326,
    "column": 50,
    "original": ";\n        infoText = ",
    "suggested_key": "uiInfotext",
    "context": "default:\n        AppLogger.app.w('❌ Unbekannter User-Status: $status');\n        actionText = 'Unbekannter Status: $status';\n        infoText = '$baseInfoText\\n\\n$actionText';\n    }",
    "category": "ui",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1253,
    "column": 42,
    "original": ",\n                    ),\n                    Tab(\n                      icon: Icon(Icons.rule_outlined),\n                      text: ",
    "suggested_key": "uiTabIconIconiconsrule_outlined",
    "context": "tabs: const [\n                    Tab(\n                      icon: Icon(Icons.description_outlined),\n                      text: 'Beschreibung',\n                    ),\n                    Tab(\n                      icon: Icon(Icons.rule_outlined),",
    "category": "ui",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1257,
    "column": 41,
    "original": ",\n                    ),\n                    Tab(\n                      icon: Icon(Icons.analytics_outlined),\n                      text: ",
    "suggested_key": "uiTabIconIconiconsanalytics_outlined",
    "context": "),\n                    Tab(\n                      icon: Icon(Icons.rule_outlined),\n                      text: 'Spielregeln',\n                    ),\n                    Tab(\n                      icon: Icon(Icons.analytics_outlined),",
    "category": "ui",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1261,
    "column": 41,
    "original": ",\n                    ),\n                  ],\n                ),\n              ),\n              \n              // Tab Content\n              SizedBox(\n                height: 300, // Feste Höhe für Tab-Content\n                child: TabBarView(\n                  controller: _tabController,\n                  children: [\n                    _buildDescriptionTab(),\n                    _buildRulesTab(),\n                    _buildStatisticsTab(),\n                  ],\n                ),\n              ),\n              \n              // Action Buttons\n              Container(\n                padding: const EdgeInsets.all(24),\n                decoration: const BoxDecoration(\n                  color: Color(0xFF1A1A1A),\n                  borderRadius: BorderRadius.only(\n                    bottomLeft: Radius.circular(24),\n                    bottomRight: Radius.circular(24),\n                  ),\n                ),\n                child: Column(\n                  children: [\n                    _buildActionButtons(),\n                    \n                    // Join-Fehler anzeigen\n                    if (_joinError != null) ...[\n                      const SizedBox(height: 16),\n                      Container(\n                        padding: const EdgeInsets.all(12),\n                        decoration: BoxDecoration(\n                          color: Colors.red.withOpacity(0.1),\n                          borderRadius: BorderRadius.circular(8),\n                          border: Border.all(color: Colors.red.withOpacity(0.3)),\n                        ),\n                        child: Row(\n                          children: [\n                            Icon(Icons.error_outline, color: Colors.red[400], size: 20),\n                            const SizedBox(width: 8),\n                            Expanded(\n                              child: Text(\n                                _joinError ?? ",
    "suggested_key": "uiTabContentSizedbox",
    "context": "),\n                    Tab(\n                      icon: Icon(Icons.analytics_outlined),\n                      text: 'Statistiken',\n                    ),\n                  ],\n                ),",
    "category": "ui",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1374,
    "column": 29,
    "original": ",\n                style: TextStyle(\n                  color: Colors.white,\n                  fontSize: 18,\n                  fontWeight: FontWeight.bold,\n                ),\n              ),\n            ],\n          ),\n          const SizedBox(height: 16),\n          _buildRuleItem(",
    "suggested_key": "uiStyleTextstyleColor",
    "context": "Icon(Icons.rule, color: AppTheme.primaryColor, size: 24),\n              SizedBox(width: 8),\n              Text(\n                'Spielregeln',\n                style: TextStyle(\n                  color: Colors.white,\n                  fontSize: 18,",
    "category": "ui",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1388,
    "column": 32,
    "original": "Entscheidungen der Spielleitung sind final",
    "suggested_key": "uiEntscheidungenDerSpielleitung",
    "context": "_buildRuleItem('2.', 'Keine Cheats oder Exploits verwenden'),\n          _buildRuleItem('3.', 'Faire Spielweise ist Pflicht'),\n          _buildRuleItem('4.', 'Kommunikation nur im Spielchat'),\n          _buildRuleItem('5.', 'Entscheidungen der Spielleitung sind final'),\n        ],\n      ),\n    );",
    "category": "ui",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_join_page.dart",
    "line": 1568,
    "column": 23,
    "original": ",\n              style: Theme.of(context).textTheme.bodySmall?.copyWith(\n                color: Colors.grey[400],\n                fontWeight: FontWeight.w500,\n              ),\n            ),\n          ),\n          Expanded(\n            child: Text(\n              value,\n              style: Theme.of(context).textTheme.bodySmall?.copyWith(\n                color: Colors.white,\n              ),\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n  \n  Widget _buildActionButtons() {\n    List<Widget> buttons = [];\n\n    // **LOGIN BUTTON (wenn User existiert aber nicht angemeldet)**\n    if (_showLoginButton && _inviteEmail != null) {\n      buttons.add(\n        Container(\n          width: double.infinity,\n          margin: const EdgeInsets.only(bottom: 12.0),\n          child: ElevatedButton(\n            onPressed: () {\n              // Redirect auf Login-Seite mit E-Mail vorausgefüllt\n              final loginRoute = ",
    "suggested_key": "uiStyleThemeofcontexttextthemebodysmallcopywithColor",
    "context": "SizedBox(\n            width: 80,\n            child: Text(\n              '$label:',\n              style: Theme.of(context).textTheme.bodySmall?.copyWith(\n                color: Colors.grey[400],\n                fontWeight: FontWeight.w500,",
    "category": "ui",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 731,
    "column": 79,
    "original": ",\n                                        style: Theme.of(context).textTheme.bodyMedium?.copyWith(\n                                          color: Colors.grey[400],\n                                        ),\n                                        textAlign: TextAlign.center,\n                                      ),\n                                    ],\n                                  ),\n                                )\n                              else\n                                Column(\n                                  children: _filteredWorlds.map((world) => WorldCard(\n                                    world: world,\n                                    playerCount: _playerCounts[world.id] ?? 0,\n                                    category: _getWorldCategory(world),\n                                    isPreRegistered: _preRegisteredWorlds[world.id] ?? false,\n                                    isJoined: _joinedWorlds[world.id] ?? false,\n                                    onJoin: world.canJoin && !(_joinedWorlds[world.id] ?? false) \n                                      ? () => _joinWorld(world) \n                                      : null,\n                                    onLeave: (_joinedWorlds[world.id] ?? false)\n                                      ? () => _leaveWorld(world)\n                                      : null,\n                                    onPlay: (_joinedWorlds[world.id] ?? false) && \n                                            (world.status == WorldStatus.open || world.status == WorldStatus.running)\n                                      ? () => _playWorld(world)\n                                      : null,\n                                    onPreRegister: world.canPreRegister && !(_preRegisteredWorlds[world.id] ?? false)\n                                      ? () => _preRegisterWorld(world)\n                                      : null,\n                                    onCancelPreRegistration: (_preRegisteredWorlds[world.id] ?? false)\n                                      ? () => _cancelPreRegistration(world)\n                                      : null,\n                                    onInvite: world.canInvite\n                                      ? () => _createInvite(world)\n                                      : null,\n                                    onTap: () => _navigateToWorldJoin(world),\n                                  )).toList(),\n                                ),\n                              \n                              const SizedBox(height: 24),\n                              \n                              // Action buttons\n                              Row(\n                                mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n                                children: [\n                                  SizedBox(\n                                    height: 48,\n                                    child: ElevatedButton.icon(\n                                      onPressed: _loadWorlds,\n                                      icon: const Icon(Icons.refresh),\n                                      label: const Text(",
    "suggested_key": "uiStyleThemeofcontexttextthemebodymediumcopywithColor",
    "context": "),\n                                      const SizedBox(height: 8),\n                                      Text(\n                                        'Versuche andere Filter-Einstellungen.',\n                                        style: Theme.of(context).textTheme.bodyMedium?.copyWith(\n                                          color: Colors.grey[400],\n                                        ),",
    "category": "ui",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\invite_dialog.dart",
    "line": 70,
    "column": 86,
    "original": ",\n              style: TextStyle(\n                color: Colors.grey[300],\n              ),\n            ),\n            const SizedBox(height: 16),\n            TextFormField(\n              controller: _emailController,\n              autofocus: true, // Barrierefreiheit: Sofortiger Fokus\n              keyboardType: TextInputType.emailAddress,\n              style: const TextStyle(color: Colors.white), // Weiße Schrift\n              decoration: InputDecoration(\n                labelText: ",
    "suggested_key": "uiStyleTextstyleColor",
    "context": "mainAxisSize: MainAxisSize.min,\n          children: [\n            Text(\n              'Geben Sie die E-Mail-Adresse der Person ein, die Sie einladen möchten:',\n              style: TextStyle(\n                color: Colors.grey[300],\n              ),",
    "category": "ui",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\pre_register_dialog.dart",
    "line": 43,
    "column": 57,
    "original": "),\n            backgroundColor: Colors.green,\n          ),\n        );\n      }\n    } catch (e) {\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text(",
    "suggested_key": "uiBackgroundcolorColorsgreenCatch",
    "context": "Navigator.of(context).pop(true);\n        ScaffoldMessenger.of(context).showSnackBar(\n          const SnackBar(\n            content: Text('Vorregistrierung erfolgreich!'),\n            backgroundColor: Colors.green,\n          ),\n        );",
    "category": "ui",
    "confidence": 0.6,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 12,
    "column": 8,
    "original": "core/providers/locale_provider.dart",
    "suggested_key": "worldCoreproviderslocale_providerdart",
    "context": "import 'core/services/api_service.dart';\nimport 'core/services/world_service.dart';\nimport 'core/services/invite_service.dart';\nimport 'core/providers/locale_provider.dart';\nimport 'l10n/app_localizations.dart';\n\nclass WeltenwindApp extends StatefulWidget {",
    "category": "world",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 13,
    "column": 36,
    "original": ";\n\nclass WeltenwindApp extends StatefulWidget {\n  const WeltenwindApp({super.key});\n\n  @override\n  State<WeltenwindApp> createState() => _WeltenwindAppState();\n}\n\nclass _WeltenwindAppState extends State<WeltenwindApp> {\n  final LocaleProvider _localeProvider = LocaleProvider();\n  \n  @override\n  void initState() {\n    super.initState();\n    // Listener für Locale-Änderungen\n    _localeProvider.addListener(() {\n      setState(() {});\n    });\n  }\n  \n  @override\n  void dispose() {\n    _localeProvider.removeListener(() {});\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    AppLogger.app.d(",
    "suggested_key": "worldClassWeltenwindappExtends",
    "context": "import 'core/services/world_service.dart';\nimport 'core/services/invite_service.dart';\nimport 'core/providers/locale_provider.dart';\nimport 'l10n/app_localizations.dart';\n\nclass WeltenwindApp extends StatefulWidget {\n  const WeltenwindApp({super.key});",
    "category": "world",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 42,
    "column": 53,
    "original": ");\n    \n    return SplashScreen(\n      initializationFunction: _initializeApp,\n      timeout: const Duration(seconds: 8),\n      onTimeout: _onTimeout,\n      initSteps: const [\n        ",
    "suggested_key": "worldReturnSplashscreenInitializationfunction",
    "context": "@override\n  Widget build(BuildContext context) {\n    AppLogger.app.d('🏗️ WeltenwindApp wird gebaut...');\n    \n    return SplashScreen(\n      initializationFunction: _initializeApp,",
    "category": "world",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\config\\env.dart",
    "line": 10,
    "column": 44,
    "original": ";\n  static const String appVersion = ",
    "suggested_key": "worldStaticConstString",
    "context": "static const String worldsEndpoint = '$apiBasePath/worlds';\n  \n  // App Configuration\n  static const String appName = 'Weltenwind';\n  static const String appVersion = '1.0.0';\n  \n  // Storage Keys",
    "category": "world",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\config\\logger.dart",
    "line": 1,
    "column": 8,
    "original": "package:logger/logger.dart",
    "suggested_key": "worldPackageloggerloggerdart",
    "context": "import 'package:logger/logger.dart';\nimport 'package:flutter/foundation.dart';\n\n/// Zentrale Logger-Konfiguration für Weltenwind Flutter Client",
    "category": "world",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\config\\logger.dart",
    "line": 2,
    "column": 8,
    "original": "package:flutter/foundation.dart",
    "suggested_key": "worldPackageflutterfoundationdart",
    "context": "import 'package:logger/logger.dart';\nimport 'package:flutter/foundation.dart';\n\n/// Zentrale Logger-Konfiguration für Weltenwind Flutter Client\nclass AppLogger {",
    "category": "world",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\models\\world.dart",
    "line": 36,
    "column": 27,
    "original": "] != null ? DateTime.parse(json[",
    "suggested_key": "worldNullDatetimeparsejson",
    "context": "),\n      createdAt: DateTime.parse(json['createdAt']),\n      startsAt: DateTime.parse(json['startsAt']),\n      endsAt: json['endsAt'] != null ? DateTime.parse(json['endsAt']) : null,\n    );\n  }",
    "category": "world",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 383,
    "column": 34,
    "original": "] == true && responseData[",
    "suggested_key": "worldTrueResponsedata",
    "context": "if (response.statusCode == 200) {\n        final responseData = jsonDecode(response.body);\n        if (responseData['success'] == true && responseData['data'] != null) {\n          return responseData['data'];\n        }\n      }",
    "category": "world",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 383,
    "column": 66,
    "original": "] != null) {\n          return responseData[",
    "suggested_key": "worldNullReturnResponsedata",
    "context": "if (response.statusCode == 200) {\n        final responseData = jsonDecode(response.body);\n        if (responseData['success'] == true && responseData['data'] != null) {\n          return responseData['data'];\n        }\n      }",
    "category": "world",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\world_service.dart",
    "line": 384,
    "column": 36,
    "original": "];\n        }\n      }\n      \n      return null;\n    } catch (e) {\n      AppLogger.logError(",
    "suggested_key": "worldReturnNullCatch",
    "context": "if (response.statusCode == 200) {\n        final responseData = jsonDecode(response.body);\n        if (responseData['success'] == true && responseData['data'] != null) {\n          return responseData['data'];\n        }\n      }",
    "category": "world",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\dashboard\\dashboard_page.dart",
    "line": 73,
    "column": 46,
    "original": ",\n                              style: Theme.of(context).textTheme.headlineMedium?.copyWith(\n                                color: Colors.white,\n                                fontWeight: FontWeight.bold,\n                              ),\n                            ),\n                            const SizedBox(height: 16),\n                            \n                            // Subtitle\n                            Text(\n                              ",
    "suggested_key": "worldStyleThemeofcontexttextthemeheadlinemediumcopywithColor",
    "context": "// Title\n                            Text(\n                              'Welt-Dashboard',\n                              style: Theme.of(context).textTheme.headlineMedium?.copyWith(\n                                color: Colors.white,\n                                fontWeight: FontWeight.bold,",
    "category": "world",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\dashboard\\dashboard_page.dart",
    "line": 83,
    "column": 49,
    "original": ",\n                              style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                                color: Colors.grey[300],\n                              ),\n                            ),\n                            const SizedBox(height: 32),\n                            \n                            // Info message\n                            Container(\n                              padding: const EdgeInsets.all(16),\n                              decoration: BoxDecoration(\n                                color: AppTheme.primaryColor.withOpacity(0.1),\n                                borderRadius: BorderRadius.circular(12),\n                                border: Border.all(\n                                  color: AppTheme.primaryColor.withOpacity(0.3),\n                                ),\n                              ),\n                              child: Row(\n                                children: [\n                                  const Icon(\n                                    Icons.construction,\n                                    color: AppTheme.primaryColor,\n                                    size: 24,\n                                  ),\n                                  const SizedBox(width: 12),\n                                  Expanded(\n                                    child: Text(\n                                      ",
    "suggested_key": "worldStyleThemeofcontexttextthemebodylargecopywithColor",
    "context": "// Subtitle\n                            Text(\n                              'Welt ID: $worldId',\n                              style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                                color: Colors.grey[300],\n                              ),",
    "category": "world",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 247,
    "column": 56,
    "original": ",\n                                            style: TextStyle(\n                                              fontSize: 56,\n                                              fontWeight: FontWeight.bold,\n                                              color: Colors.white,\n                                              letterSpacing: 3,\n                                              shadows: [\n                                                Shadow(\n                                                  color: AppTheme.primaryColor.withOpacity(0.5),\n                                                  blurRadius: 20,\n                                                ),\n                                              ],\n                                            ),\n                                          ),\n                                        ),\n                                        \n                                        const SizedBox(height: 20),\n                                        \n                                        // Enhanced Subtitle\n                                        Text(\n                                          ",
    "suggested_key": "worldStyleTextstyleFontsize",
    "context": "stops: const [0.0, 0.5, 1.0],\n                                          ).createShader(bounds),\n                                          child: Text(\n                                            'Weltenwind',\n                                            style: TextStyle(\n                                              fontSize: 56,\n                                              fontWeight: FontWeight.bold,",
    "category": "world",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 267,
    "column": 77,
    "original": ",\n                                          style: TextStyle(\n                                            color: Colors.grey[200],\n                                            fontSize: 22,\n                                            fontWeight: FontWeight.w300,\n                                            letterSpacing: 1,\n                                          ),\n                                          textAlign: TextAlign.center,\n                                        ),\n                                        \n                                        const SizedBox(height: 12),\n                                        \n                                        // Tagline\n                                        Container(\n                                          padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 8),\n                                          decoration: BoxDecoration(\n                                            border: Border.all(\n                                              color: AppTheme.primaryColor.withOpacity(0.3),\n                                            ),\n                                            borderRadius: BorderRadius.circular(20),\n                                          ),\n                                          child: Text(\n                                            ",
    "suggested_key": "worldStyleTextstyleColor",
    "context": "// Enhanced Subtitle\n                                        Text(\n                                          'Dein Portal zu unendlichen Welten',\n                                          style: TextStyle(\n                                            color: Colors.grey[200],\n                                            fontSize: 22,",
    "category": "world",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 479,
    "column": 61,
    "original": ",\n                            style: TextStyle(\n                              fontSize: 32,\n                              fontWeight: FontWeight.bold,\n                              color: Colors.white,\n                            ),\n                            textAlign: TextAlign.center,\n                          ),\n                          const SizedBox(height: 16),\n                          Text(\n                            ",
    "suggested_key": "worldStyleTextstyleFontsize",
    "context": "child: Column(\n                        children: [\n                          const Text(\n                            'Was macht Weltenwind besonders?',\n                            style: TextStyle(\n                              fontSize: 32,\n                              fontWeight: FontWeight.bold,",
    "category": "world",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 513,
    "column": 62,
    "original": ",\n                                    description: ",
    "suggested_key": "worldDescription",
    "context": "children: [\n                                  _buildFeatureCard(\n                                    icon: Icons.public,\n                                    title: 'Unendliche Welten',\n                                    description: 'Erkunde hunderte einzigartige Spielwelten oder erschaffe deine eigene',\n                                    color: Colors.blue,\n                                  ),",
    "category": "world",
    "confidence": 0.6,
    "widget_context": "Widget: Card",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 519,
    "column": 54,
    "original": ",\n                                    description: ",
    "suggested_key": "worldDescription",
    "context": "),\n                                  _buildFeatureCard(\n                                    icon: Icons.group,\n                                    title: 'Community',\n                                    description: 'Verbinde dich mit Spielern aus der ganzen Welt',\n                                    color: Colors.green,\n                                  ),",
    "category": "world",
    "confidence": 0.6,
    "widget_context": "Widget: Card",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 520,
    "column": 97,
    "original": ",\n                                    color: Colors.green,\n                                  ),\n                                  _buildFeatureCard(\n                                    icon: Icons.security,\n                                    title: ",
    "suggested_key": "worldColorColorsgreen_buildfeaturecard",
    "context": "_buildFeatureCard(\n                                    icon: Icons.group,\n                                    title: 'Community',\n                                    description: 'Verbinde dich mit Spielern aus der ganzen Welt',\n                                    color: Colors.green,\n                                  ),\n                                  _buildFeatureCard(",
    "category": "world",
    "confidence": 0.6,
    "widget_context": "Widget: Card",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 581,
    "column": 35,
    "original": "Schließe dich tausenden Spielern an und starte noch heute!",
    "suggested_key": "worldSchließeDichTausenden",
    "context": "),\n                                const SizedBox(height: 16),\n                                Text(\n                                  'Schließe dich tausenden Spielern an und starte noch heute!',\n                                  style: TextStyle(\n                                    fontSize: 16,\n                                    color: Colors.grey[300],",
    "category": "world",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 633,
    "column": 25,
    "original": "© 2024 Weltenwind. Alle Rechte vorbehalten.",
    "suggested_key": "world2024WeltenwindAlle",
    "context": "child: Column(\n                    children: [\n                      Text(\n                        '© 2024 Weltenwind. Alle Rechte vorbehalten.',\n                        style: TextStyle(\n                          color: Colors.grey[600],\n                          fontSize: 14,",
    "category": "world",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\controllers\\world_list_controller.dart",
    "line": 117,
    "column": 25,
    "original": ";\n    _sortAscending = true;\n    _applyFiltersAndSorting();\n  }\n\n  void _applyFiltersAndSorting() {\n    var filtered = List<World>.from(_worlds);\n\n    // Apply status filter\n    if (_statusFilter != null) {\n      filtered = filtered.where((world) => world.status == _statusFilter).toList();\n    }\n\n    // Apply category filter\n    if (_categoryFilter != null) {\n      filtered = filtered.where((world) {\n        return _getWorldCategory(world) == _categoryFilter;\n      }).toList();\n    }\n\n    // Apply sorting\n    filtered.sort((a, b) {\n      int comparison = 0;\n\n      switch (_sortBy) {\n        case ",
    "suggested_key": "world_sortascendingTrue_applyfiltersandsorting",
    "context": "void resetFilters() {\n    _statusFilter = null;\n    _categoryFilter = null;\n    _sortBy = 'startDate';\n    _sortAscending = true;\n    _applyFiltersAndSorting();\n  }",
    "category": "world",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 652,
    "column": 59,
    "original": ";\n                                      _sortAscending = true;\n                                    });\n                                    _applyFiltersAndSorting();\n                                  },\n                                ),\n                                const SizedBox(height: 16),\n                              ],\n                              \n                              // World list\n                              if (_isLoading)\n                                const Center(\n                                  child: CircularProgressIndicator(\n                                    valueColor: AlwaysStoppedAnimation<Color>(AppTheme.primaryColor),\n                                  ),\n                                )\n                              else if (_error != null)\n                                Container(\n                                  padding: const EdgeInsets.all(16),\n                                  decoration: BoxDecoration(\n                                    color: (Colors.red[900] ?? Colors.red).withOpacity(0.3),\n                                    borderRadius: BorderRadius.circular(12),\n                                    border: Border.all(\n                                      color: (Colors.red[400] ?? Colors.red).withOpacity(0.5),\n                                    ),\n                                  ),\n                                  child: Column(\n                                    children: [\n                                      Icon(\n                                        Icons.error,\n                                        size: 48,\n                                        color: Colors.red[400],\n                                      ),\n                                      const SizedBox(height: 16),\n                                      Text(\n                                        ",
    "suggested_key": "world_sortascendingTrue_applyfiltersandsorting",
    "context": "setState(() {\n                                      _statusFilter = null;\n                                      _categoryFilter = null;\n                                      _sortBy = 'startDate';\n                                      _sortAscending = true;\n                                    });\n                                    _applyFiltersAndSorting();",
    "category": "world",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 583,
    "column": 41,
    "original": ",\n                    style: Theme.of(context).textTheme.headlineMedium?.copyWith(\n                      color: AppTheme.textPrimary,\n                      fontWeight: FontWeight.bold,\n                    ),\n                  ),\n                  const SizedBox(height: 16),\n                  Text(\n                    ",
    "suggested_key": "worldStyleThemeofcontexttextthemeheadlinemediumcopywithColor",
    "context": "),\n                  const SizedBox(height: 24),\n                  Text(\n                    'Welt nicht gefunden',\n                    style: Theme.of(context).textTheme.headlineMedium?.copyWith(\n                      color: AppTheme.textPrimary,\n                      fontWeight: FontWeight.bold,",
    "category": "world",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 591,
    "column": 80,
    "original": ",\n                    style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                      color: AppTheme.textSecondary,\n                    ),\n                    textAlign: TextAlign.center,\n                  ),\n                  const SizedBox(height: 32),\n                  ElevatedButton.icon(\n                    onPressed: () => context.goNamed(",
    "suggested_key": "worldStyleThemeofcontexttextthemebodylargecopywithColor",
    "context": "),\n                  const SizedBox(height: 16),\n                  Text(\n                    'Die angeforderte Welt existiert nicht oder wurde entfernt.',\n                    style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                      color: AppTheme.textSecondary,\n                    ),",
    "category": "world",
    "confidence": 0.6,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 61,
    "column": 91,
    "original": "),\n        backgroundColor: Colors.orange[700],\n        duration: const Duration(seconds: 3),\n      ),\n    );\n  }\n  \n  List<NavigationItem> _getNavigationItems() {\n    final items = <NavigationItem>[];\n    \n    // Zurück-Button (wenn nicht auf world-list)\n    if (widget.currentRoute != ",
    "suggested_key": "worldBackgroundcolorColorsorange700Duration",
    "context": "void _showJoinRequiredMessage() {\n    ScaffoldMessenger.of(context).showSnackBar(\n      SnackBar(\n        content: const Text('Sie müssen erst der Welt beitreten, um das Dashboard zu sehen'),\n        backgroundColor: Colors.orange[700],\n        duration: const Duration(seconds: 3),\n      ),",
    "category": "world",
    "confidence": 0.6,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 357,
    "column": 53,
    "original": ")) {\n      return Tooltip(\n        message: ",
    "suggested_key": "worldReturnTooltipMessage",
    "context": ");\n    \n    // Tooltip hinzufügen wenn disabled\n    if (isDisabled && item.label.contains('Dashboard')) {\n      return Tooltip(\n        message: 'Sie müssen der Welt beitreten, um das Dashboard zu sehen',\n        child: widget,",
    "category": "world",
    "confidence": 0.6,
    "widget_context": "Widget: Tooltip",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\user_info_widget.dart",
    "line": 73,
    "column": 24,
    "original": ":\n        return Colors.indigo[400] ?? Colors.indigo;\n      case ",
    "suggested_key": "worldReturnColorsindigo400Colorsindigo",
    "context": "return Colors.blue[400] ?? Colors.blue;\n      case 'mod':\n        return Colors.orange[400] ?? Colors.orange;\n      case 'world-admin':\n        return Colors.indigo[400] ?? Colors.indigo;\n      case 'user':\n      default:",
    "category": "world",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\user_info_widget.dart",
    "line": 75,
    "column": 17,
    "original": ":\n      default:\n        return Colors.green[400] ?? Colors.green;\n    }\n  }\n  \n  @override\n  Widget build(BuildContext context) {\n    final user = _authService.currentUser;\n    if (user == null) return const SizedBox.shrink();\n    \n    return Positioned(\n      top: 16,\n      left: 16,\n      child: FadeTransition(\n        opacity: _fadeAnimation,\n        child: GestureDetector(\n          onTap: _toggleExpanded,\n          child: AnimatedContainer(\n            duration: const Duration(milliseconds: 300),\n            width: _isExpanded ? 320 : 180,\n            decoration: BoxDecoration(\n              color: const Color(0xFF1A1A1A).withOpacity(0.95),\n              borderRadius: BorderRadius.circular(16),\n              border: Border.all(\n                color: AppTheme.primaryColor.withOpacity(0.3),\n                width: 1,\n              ),\n              boxShadow: [\n                BoxShadow(\n                  color: Colors.black.withOpacity(0.3),\n                  blurRadius: 12,\n                  offset: const Offset(0, 4),\n                ),\n              ],\n            ),\n            child: Material(\n              color: Colors.transparent,\n              child: InkWell(\n                onTap: _toggleExpanded,\n                borderRadius: BorderRadius.circular(16),\n                child: Padding(\n                  padding: const EdgeInsets.all(12.0),\n                  child: Column(\n                    mainAxisSize: MainAxisSize.min,\n                    crossAxisAlignment: CrossAxisAlignment.start,\n                    children: [\n                      // Header mit Avatar und Name\n                      Row(\n                        children: [\n                          // Avatar\n                          Container(\n                            width: 40,\n                            height: 40,\n                            decoration: BoxDecoration(\n                              color: AppTheme.primaryColor.withOpacity(0.2),\n                              shape: BoxShape.circle,\n                              border: Border.all(\n                                color: AppTheme.primaryColor.withOpacity(0.5),\n                                width: 2,\n                              ),\n                            ),\n                            child: Center(\n                              child: Text(\n                                user.username.substring(0, 1).toUpperCase(),\n                                style: const TextStyle(\n                                  color: AppTheme.primaryColor,\n                                  fontSize: 18,\n                                  fontWeight: FontWeight.bold,\n                                ),\n                              ),\n                            ),\n                          ),\n                          const SizedBox(width: 12),\n                          // Name und Status\n                          Expanded(\n                            child: Column(\n                              crossAxisAlignment: CrossAxisAlignment.start,\n                              children: [\n                                Row(\n                                  children: [\n                                    Flexible(\n                                      child: Text(\n                                        user.username,\n                                        style: const TextStyle(\n                                          color: Colors.white,\n                                          fontSize: 16,\n                                          fontWeight: FontWeight.bold,\n                                        ),\n                                        overflow: TextOverflow.ellipsis,\n                                      ),\n                                    ),\n                                    if (user.isLocked ?? false) ...[\n                                      const SizedBox(width: 8),\n                                      Icon(\n                                        Icons.lock,\n                                        color: Colors.red[400],\n                                        size: 16,\n                                      ),\n                                    ],\n                                  ],\n                                ),\n                                if (!_isExpanded)\n                                  Text(\n                                    ",
    "suggested_key": "worldDefaultReturnColorsgreen400",
    "context": "return Colors.orange[400] ?? Colors.orange;\n      case 'world-admin':\n        return Colors.indigo[400] ?? Colors.indigo;\n      case 'user':\n      default:\n        return Colors.green[400] ?? Colors.green;\n    }",
    "category": "world",
    "confidence": 0.6,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\models\\user.dart",
    "line": 145,
    "column": 33,
    "original": "${dateValue}Z",
    "suggested_key": "formDatevaluez",
    "context": "} catch (e) {\n        // Try different date formats\n        try {\n          return DateTime.parse('${dateValue}Z'); // Add Z if missing timezone\n        } catch (e2) {\n          // If all parsing fails, return current time\n          return DateTime.now();",
    "category": "form",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\main.dart",
    "line": 48,
    "column": 30,
    "original": ": details.informationCollector?.toString(),\n      },\n    );\n    \n    // In Debug Mode auch zur Console\n    if (kDebugMode) {\n      FlutterError.presentError(details);\n    }\n  };\n\n  // Dart Error Handling (für unhandled exceptions)\n  WidgetsBinding.instance.platformDispatcher.onError = (error, stack) {\n    AppLogger.logError(\n      ",
    "suggested_key": "formDetailsinformationcollectortostringInDebug",
    "context": "context: {\n        'library': details.library,\n        'context': details.context?.toString(),\n        'informationCollector': details.informationCollector?.toString(),\n      },\n    );",
    "category": "form",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 2,
    "column": 8,
    "original": "package:flutter_localizations/flutter_localizations.dart",
    "suggested_key": "navigationPackageflutter_localizationsflutter_localizationsdart",
    "context": "import 'package:flutter/material.dart';\nimport 'package:flutter_localizations/flutter_localizations.dart';\nimport 'config/env.dart';\nimport 'config/logger.dart';\nimport 'routing/app_router.dart';",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 3,
    "column": 8,
    "original": "config/env.dart",
    "suggested_key": "navigationConfigenvdart",
    "context": "import 'package:flutter/material.dart';\nimport 'package:flutter_localizations/flutter_localizations.dart';\nimport 'config/env.dart';\nimport 'config/logger.dart';\nimport 'routing/app_router.dart';\nimport 'shared/widgets/splash_screen.dart';",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 4,
    "column": 8,
    "original": "config/logger.dart",
    "suggested_key": "navigationConfigloggerdart",
    "context": "import 'package:flutter/material.dart';\nimport 'package:flutter_localizations/flutter_localizations.dart';\nimport 'config/env.dart';\nimport 'config/logger.dart';\nimport 'routing/app_router.dart';\nimport 'shared/widgets/splash_screen.dart';\nimport 'main.dart';",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 5,
    "column": 8,
    "original": "routing/app_router.dart",
    "suggested_key": "navigationRoutingapp_routerdart",
    "context": "import 'package:flutter_localizations/flutter_localizations.dart';\nimport 'config/env.dart';\nimport 'config/logger.dart';\nimport 'routing/app_router.dart';\nimport 'shared/widgets/splash_screen.dart';\nimport 'main.dart';\nimport 'core/services/auth_service.dart';",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 6,
    "column": 8,
    "original": "shared/widgets/splash_screen.dart",
    "suggested_key": "navigationSharedwidgetssplash_screendart",
    "context": "import 'config/env.dart';\nimport 'config/logger.dart';\nimport 'routing/app_router.dart';\nimport 'shared/widgets/splash_screen.dart';\nimport 'main.dart';\nimport 'core/services/auth_service.dart';\nimport 'core/services/api_service.dart';",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 8,
    "column": 8,
    "original": "core/services/auth_service.dart",
    "suggested_key": "navigationCoreservicesauth_servicedart",
    "context": "import 'routing/app_router.dart';\nimport 'shared/widgets/splash_screen.dart';\nimport 'main.dart';\nimport 'core/services/auth_service.dart';\nimport 'core/services/api_service.dart';\nimport 'core/services/world_service.dart';\nimport 'core/services/invite_service.dart';",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 53,
    "column": 9,
    "original": "Bereit!",
    "suggested_key": "navigationBereit",
    "context": "'Lade Konfiguration...',\n        'Starte Services...',\n        'Prüfe Authentifizierung...',\n        'Bereit!',\n      ],\n      appName: Env.appName,\n      child: MaterialApp.router(",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\config\\logger.dart",
    "line": 35,
    "column": 45,
    "original": "),\n      level: kDebugMode ? Level.debug : Level.info,\n      output: _getLogOutput(),\n    );\n\n    _errorLogger = Logger(\n      printer: _getLogPrinter(prefix: ",
    "suggested_key": "navigationLevelKdebugmodeLeveldebug",
    "context": ");\n\n    _navigationLogger = Logger(\n      printer: _getLogPrinter(prefix: '[NAV]'),\n      level: kDebugMode ? Level.debug : Level.info,\n      output: _getLogOutput(),\n    );",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 4,
    "column": 8,
    "original": "../../config/env.dart",
    "suggested_key": "navigationConfigenvdart",
    "context": "import 'dart:convert';\nimport 'package:flutter/foundation.dart';\nimport 'package:http/http.dart' as http;\nimport '../../config/env.dart';\nimport '../../config/logger.dart';\nimport 'auth_service.dart';\nimport '../../routing/app_router.dart';",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 5,
    "column": 8,
    "original": "../../config/logger.dart",
    "suggested_key": "navigationConfigloggerdart",
    "context": "import 'package:flutter/foundation.dart';\nimport 'package:http/http.dart' as http;\nimport '../../config/env.dart';\nimport '../../config/logger.dart';\nimport 'auth_service.dart';\nimport '../../routing/app_router.dart';",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 7,
    "column": 8,
    "original": "../../routing/app_router.dart",
    "suggested_key": "navigationRoutingapp_routerdart",
    "context": "import '../../config/env.dart';\nimport '../../config/logger.dart';\nimport 'auth_service.dart';\nimport '../../routing/app_router.dart';\n\nclass ApiService {\n  static final ApiService _instance = ApiService._internal();",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\dashboard\\dashboard_page.dart",
    "line": 4,
    "column": 8,
    "original": "../../shared/widgets/user_info_widget.dart",
    "suggested_key": "navigationSharedwidgetsuser_info_widgetdart",
    "context": "import 'package:flutter/material.dart';\nimport '../../theme/app_theme.dart';\nimport '../../theme/background_widget.dart';\nimport '../../shared/widgets/user_info_widget.dart';\nimport '../../shared/widgets/navigation_widget.dart';\n\nclass DashboardPage extends StatelessWidget {",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\dashboard\\dashboard_page.dart",
    "line": 5,
    "column": 8,
    "original": "../../shared/widgets/navigation_widget.dart",
    "suggested_key": "navigationSharedwidgetsnavigation_widgetdart",
    "context": "import '../../theme/app_theme.dart';\nimport '../../theme/background_widget.dart';\nimport '../../shared/widgets/user_info_widget.dart';\nimport '../../shared/widgets/navigation_widget.dart';\n\nclass DashboardPage extends StatelessWidget {\n  final String worldId;",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\dashboard\\dashboard_page.dart",
    "line": 134,
    "column": 45,
    "original": ",\n              routeParams: {",
    "suggested_key": "navigationRouteparams",
    "context": "// Navigation widget in top-right corner\n            NavigationWidget(\n              currentRoute: 'world-dashboard',\n              routeParams: {'id': worldId},\n              isJoinedWorld: true, // User muss in der Welt sein um das Dashboard zu sehen\n            ),",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 1,
    "column": 8,
    "original": "package:flutter/material.dart",
    "suggested_key": "navigationPackagefluttermaterialdart",
    "context": "import 'package:flutter/material.dart';\nimport 'package:go_router/go_router.dart';\nimport '../../theme/app_theme.dart';\nimport '../../theme/background_widget.dart';",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 2,
    "column": 8,
    "original": "package:go_router/go_router.dart",
    "suggested_key": "navigationPackagego_routergo_routerdart",
    "context": "import 'package:flutter/material.dart';\nimport 'package:go_router/go_router.dart';\nimport '../../theme/app_theme.dart';\nimport '../../theme/background_widget.dart';\nimport 'dart:math' as math;",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 5,
    "column": 18,
    "original": " as math;\n\nclass LandingPage extends StatefulWidget {\n  const LandingPage({super.key});\n\n  @override\n  State<LandingPage> createState() => _LandingPageState();\n}\n\nclass _LandingPageState extends State<LandingPage> with TickerProviderStateMixin {\n  late AnimationController _fadeController;\n  late AnimationController _slideController;\n  late AnimationController _pulseController;\n  late AnimationController _featureController;\n  late Animation<double> _fadeAnimation;\n  late Animation<Offset> _slideAnimation;\n  late Animation<double> _pulseAnimation;\n  late Animation<double> _featureAnimation;\n  \n  final ScrollController _scrollController = ScrollController();\n  bool _showFeatures = false;\n\n  @override\n  void initState() {\n    super.initState();\n    \n    // Main animations\n    _fadeController = AnimationController(\n      duration: const Duration(milliseconds: 1500),\n      vsync: this,\n    );\n    \n    _slideController = AnimationController(\n      duration: const Duration(milliseconds: 1200),\n      vsync: this,\n    );\n    \n    // Logo pulse animation\n    _pulseController = AnimationController(\n      duration: const Duration(seconds: 2),\n      vsync: this,\n    )..repeat(reverse: true);\n    \n    // Feature animation\n    _featureController = AnimationController(\n      duration: const Duration(milliseconds: 800),\n      vsync: this,\n    );\n    \n    _fadeAnimation = Tween<double>(\n      begin: 0.0,\n      end: 1.0,\n    ).animate(CurvedAnimation(\n      parent: _fadeController,\n      curve: Curves.easeInOut,\n    ));\n    \n    _slideAnimation = Tween<Offset>(\n      begin: const Offset(0, 0.3),\n      end: Offset.zero,\n    ).animate(CurvedAnimation(\n      parent: _slideController,\n      curve: Curves.easeOutCubic,\n    ));\n    \n    _pulseAnimation = Tween<double>(\n      begin: 0.95,\n      end: 1.05,\n    ).animate(CurvedAnimation(\n      parent: _pulseController,\n      curve: Curves.easeInOut,\n    ));\n    \n    _featureAnimation = Tween<double>(\n      begin: 0.0,\n      end: 1.0,\n    ).animate(CurvedAnimation(\n      parent: _featureController,\n      curve: Curves.easeOutBack,\n    ));\n    \n    // Start animations\n    _fadeController.forward();\n    Future.delayed(const Duration(milliseconds: 300), () {\n      _slideController.forward();\n    });\n    \n    // Show features after main animation\n    Future.delayed(const Duration(milliseconds: 1800), () {\n      if (mounted) {\n        setState(() {\n          _showFeatures = true;\n        });\n        _featureController.forward();\n      }\n    });\n  }\n\n  @override\n  void dispose() {\n    _fadeController.dispose();\n    _slideController.dispose();\n    _pulseController.dispose();\n    _featureController.dispose();\n    _scrollController.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    \n    return Scaffold(\n      body: BackgroundWidget(\n        child: SafeArea(\n          child: SingleChildScrollView(\n            controller: _scrollController,\n            physics: const BouncingScrollPhysics(),\n            child: Column(\n              children: [\n                // Hero Section\n                Container(\n                  constraints: BoxConstraints(\n                    minHeight: MediaQuery.of(context).size.height - MediaQuery.of(context).padding.top,\n                  ),\n                  child: Center(\n                    child: FadeTransition(\n                      opacity: _fadeAnimation,\n                      child: SlideTransition(\n                        position: _slideAnimation,\n                        child: Padding(\n                          padding: const EdgeInsets.all(24.0),\n                          child: Center(\n                            child: ConstrainedBox(\n                              constraints: const BoxConstraints(maxWidth: 600),\n                              child: Card(\n                                elevation: 16,\n                                color: const Color(0xFF1A1A1A),\n                                shape: RoundedRectangleBorder(\n                                  borderRadius: BorderRadius.circular(24),\n                                  side: BorderSide(\n                                    color: AppTheme.primaryColor.withOpacity(0.3),\n                                    width: 1,\n                                  ),\n                                ),\n                                child: Container(\n                                  decoration: BoxDecoration(\n                                    borderRadius: BorderRadius.circular(24),\n                                    gradient: const LinearGradient(\n                                      begin: Alignment.topLeft,\n                                      end: Alignment.bottomRight,\n                                      colors: [\n                                        Color(0xFF1A1A1A),\n                                        Color(0xFF2A2A2A),\n                                      ],\n                                    ),\n                                  ),\n                                  child: Padding(\n                                    padding: const EdgeInsets.symmetric(horizontal: 40.0, vertical: 48.0),\n                                    child: Column(\n                                      mainAxisSize: MainAxisSize.min,\n                                      children: [\n                                        // Animated Logo\n                                        AnimatedBuilder(\n                                          animation: _pulseAnimation,\n                                          builder: (context, child) {\n                                            return Transform.scale(\n                                              scale: _pulseAnimation.value,\n                                              child: Container(\n                                                width: 140,\n                                                height: 140,\n                                                decoration: BoxDecoration(\n                                                  color: AppTheme.primaryColor.withOpacity(0.15),\n                                                  borderRadius: BorderRadius.circular(35),\n                                                  border: Border.all(\n                                                    color: AppTheme.primaryColor.withOpacity(0.4),\n                                                    width: 2,\n                                                  ),\n                                                  boxShadow: [\n                                                    BoxShadow(\n                                                      color: AppTheme.primaryColor.withOpacity(0.4),\n                                                      blurRadius: 30,\n                                                      spreadRadius: 10,\n                                                    ),\n                                                  ],\n                                                ),\n                                                child: Stack(\n                                                  alignment: Alignment.center,\n                                                  children: [\n                                                    const Icon(\n                                                      Icons.public,\n                                                      size: 70,\n                                                      color: AppTheme.primaryColor,\n                                                    ),\n                                                    // Orbit animation\n                                                    ...List.generate(3, (index) {\n                                                      return TweenAnimationBuilder<double>(\n                                                        tween: Tween(begin: 0, end: 2 * math.pi),\n                                                        duration: Duration(seconds: 10 + index * 2),\n                                                        builder: (context, value, child) {\n                                                          return Transform.translate(\n                                                            offset: Offset(\n                                                              math.cos(value + (index * 2 * math.pi / 3)) * 50,\n                                                              math.sin(value + (index * 2 * math.pi / 3)) * 50,\n                                                            ),\n                                                            child: Container(\n                                                              width: 8,\n                                                              height: 8,\n                                                              decoration: BoxDecoration(\n                                                                color: AppTheme.primaryColor.withOpacity(0.8),\n                                                                shape: BoxShape.circle,\n                                                                boxShadow: const [\n                                                                  BoxShadow(\n                                                                    color: AppTheme.primaryColor,\n                                                                    blurRadius: 4,\n                                                                  ),\n                                                                ],\n                                                              ),\n                                                            ),\n                                                          );\n                                                        },\n                                                      );\n                                                    }),\n                                                  ],\n                                                ),\n                                              ),\n                                            );\n                                          },\n                                        ),\n                                        \n                                        const SizedBox(height: 40),\n                                        \n                                        // Title with enhanced gradient\n                                        ShaderMask(\n                                          shaderCallback: (bounds) => LinearGradient(\n                                            colors: [\n                                              AppTheme.primaryColor,\n                                              AppTheme.primaryColor.withBlue(255),\n                                              AppTheme.primaryColor,\n                                            ],\n                                            stops: const [0.0, 0.5, 1.0],\n                                          ).createShader(bounds),\n                                          child: Text(\n                                            ",
    "suggested_key": "navigationAsMathClass",
    "context": "import 'package:go_router/go_router.dart';\nimport '../../theme/app_theme.dart';\nimport '../../theme/background_widget.dart';\nimport 'dart:math' as math;\n\nclass LandingPage extends StatefulWidget {\n  const LandingPage({super.key});",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 1,
    "column": 8,
    "original": "package:flutter/material.dart",
    "suggested_key": "navigationPackagefluttermaterialdart",
    "context": "import 'package:flutter/material.dart';\nimport 'package:go_router/go_router.dart';\nimport '../config/logger.dart';\nimport '../features/auth/login_page.dart';",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 2,
    "column": 8,
    "original": "package:go_router/go_router.dart",
    "suggested_key": "navigationPackagego_routergo_routerdart",
    "context": "import 'package:flutter/material.dart';\nimport 'package:go_router/go_router.dart';\nimport '../config/logger.dart';\nimport '../features/auth/login_page.dart';\nimport '../features/auth/register_page.dart';",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 3,
    "column": 8,
    "original": "../config/logger.dart",
    "suggested_key": "navigationConfigloggerdart",
    "context": "import 'package:flutter/material.dart';\nimport 'package:go_router/go_router.dart';\nimport '../config/logger.dart';\nimport '../features/auth/login_page.dart';\nimport '../features/auth/register_page.dart';\nimport '../features/auth/forgot_password_page.dart';",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 4,
    "column": 8,
    "original": "../features/auth/login_page.dart",
    "suggested_key": "navigationFeaturesauthlogin_pagedart",
    "context": "import 'package:flutter/material.dart';\nimport 'package:go_router/go_router.dart';\nimport '../config/logger.dart';\nimport '../features/auth/login_page.dart';\nimport '../features/auth/register_page.dart';\nimport '../features/auth/forgot_password_page.dart';\nimport '../features/auth/reset_password_page.dart';",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 5,
    "column": 8,
    "original": "../features/auth/register_page.dart",
    "suggested_key": "navigationFeaturesauthregister_pagedart",
    "context": "import 'package:go_router/go_router.dart';\nimport '../config/logger.dart';\nimport '../features/auth/login_page.dart';\nimport '../features/auth/register_page.dart';\nimport '../features/auth/forgot_password_page.dart';\nimport '../features/auth/reset_password_page.dart';\nimport '../features/world/world_list_page.dart';",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 14,
    "column": 21,
    "original": ";\n\n// Custom Navigation Observer für Logging\nclass AppNavigationObserver extends NavigatorObserver {\n  @override\n  void didReplace({Route<dynamic>? newRoute, Route<dynamic>? oldRoute}) {\n    super.didReplace(newRoute: newRoute, oldRoute: oldRoute);\n    _logNavigation(oldRoute?.settings.name, newRoute?.settings.name, ",
    "suggested_key": "navigationCustomNavigationObserver",
    "context": "import '../features/landing/landing_page.dart';\nimport '../core/services/auth_service.dart';\nimport '../theme/app_theme.dart';\nimport '../main.dart';\n\n// Custom Navigation Observer für Logging\nclass AppNavigationObserver extends NavigatorObserver {",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 21,
    "column": 78,
    "original": ");\n  }\n\n  @override\n  void didPop(Route<dynamic> route, Route<dynamic>? previousRoute) {\n    super.didPop(route, previousRoute);\n    _logNavigation(route.settings.name, previousRoute?.settings.name, ",
    "suggested_key": "navigationOverrideVoidDidpoproutedynamic",
    "context": "@override\n  void didReplace({Route<dynamic>? newRoute, Route<dynamic>? oldRoute}) {\n    super.didReplace(newRoute: newRoute, oldRoute: oldRoute);\n    _logNavigation(oldRoute?.settings.name, newRoute?.settings.name, 'replace');\n  }\n\n  @override",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 27,
    "column": 75,
    "original": ");\n  }\n\n  @override\n  void didPush(Route<dynamic> route, Route<dynamic>? previousRoute) {\n    super.didPush(route, previousRoute);\n    _logNavigation(previousRoute?.settings.name, route.settings.name, ",
    "suggested_key": "navigationOverrideVoidDidpushroutedynamic",
    "context": "@override\n  void didPop(Route<dynamic> route, Route<dynamic>? previousRoute) {\n    super.didPop(route, previousRoute);\n    _logNavigation(route.settings.name, previousRoute?.settings.name, 'pop');\n  }\n\n  @override",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 33,
    "column": 76,
    "original": ");\n  }\n\n  void _logNavigation(String? from, String? to, String action) {\n    if (from != null && to != null) {\n      AppLogger.logNavigation(from, to, params: {",
    "suggested_key": "navigationVoid_lognavigationstringFrom",
    "context": "@override\n  void didPush(Route<dynamic> route, Route<dynamic>? previousRoute) {\n    super.didPush(route, previousRoute);\n    _logNavigation(previousRoute?.settings.name, route.settings.name, 'push');\n  }\n\n  void _logNavigation(String? from, String? to, String action) {",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 38,
    "column": 57,
    "original": ": action});\n    } else if (to != null) {\n      AppLogger.navigation.i(",
    "suggested_key": "navigationActionElseIf",
    "context": "void _logNavigation(String? from, String? to, String action) {\n    if (from != null && to != null) {\n      AppLogger.logNavigation(from, to, params: {'action': action});\n    } else if (to != null) {\n      AppLogger.navigation.i('🧭 Navigation: → $to ($action)');\n    }",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 40,
    "column": 60,
    "original": ");\n    }\n  }\n}\n\nclass AppRouter {\n  // Named Routes für bessere Navigation\n  static const String landingRoute = ",
    "suggested_key": "navigationClassApprouterNamed",
    "context": "if (from != null && to != null) {\n      AppLogger.logNavigation(from, to, params: {'action': action});\n    } else if (to != null) {\n      AppLogger.navigation.i('🧭 Navigation: → $to ($action)');\n    }\n  }\n}",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 47,
    "column": 46,
    "original": ";\n  static const String loginRoute = ",
    "suggested_key": "navigationStaticConstString",
    "context": "class AppRouter {\n  // Named Routes für bessere Navigation\n  static const String landingRoute = 'landing';\n  static const String loginRoute = 'login';\n  static const String registerRoute = 'register';\n  static const String forgotPasswordRoute = 'forgot-password';",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 48,
    "column": 42,
    "original": ";\n  static const String registerRoute = ",
    "suggested_key": "navigationStaticConstString",
    "context": "class AppRouter {\n  // Named Routes für bessere Navigation\n  static const String landingRoute = 'landing';\n  static const String loginRoute = 'login';\n  static const String registerRoute = 'register';\n  static const String forgotPasswordRoute = 'forgot-password';\n  static const String resetPasswordRoute = 'reset-password';",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 49,
    "column": 48,
    "original": ";\n  static const String forgotPasswordRoute = ",
    "suggested_key": "navigationStaticConstString",
    "context": "// Named Routes für bessere Navigation\n  static const String landingRoute = 'landing';\n  static const String loginRoute = 'login';\n  static const String registerRoute = 'register';\n  static const String forgotPasswordRoute = 'forgot-password';\n  static const String resetPasswordRoute = 'reset-password';\n  static const String worldListRoute = 'world-list';",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 50,
    "column": 61,
    "original": ";\n  static const String resetPasswordRoute = ",
    "suggested_key": "navigationStaticConstString",
    "context": "static const String landingRoute = 'landing';\n  static const String loginRoute = 'login';\n  static const String registerRoute = 'register';\n  static const String forgotPasswordRoute = 'forgot-password';\n  static const String resetPasswordRoute = 'reset-password';\n  static const String worldListRoute = 'world-list';\n  static const String worldDashboardRoute = 'world-dashboard';",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 51,
    "column": 59,
    "original": ";\n  static const String worldListRoute = ",
    "suggested_key": "navigationStaticConstString",
    "context": "static const String loginRoute = 'login';\n  static const String registerRoute = 'register';\n  static const String forgotPasswordRoute = 'forgot-password';\n  static const String resetPasswordRoute = 'reset-password';\n  static const String worldListRoute = 'world-list';\n  static const String worldDashboardRoute = 'world-dashboard';\n  static const String worldJoinRoute = 'world-join';",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 85,
    "column": 61,
    "original": ");\n      try {\n        _routerInstance = GoRouter(\n          initialLocation: ",
    "suggested_key": "navigationTry_routerinstanceGorouter",
    "context": "// Router nur einmal initialisieren\n    if (!_isInitialized) {\n      AppLogger.navigation.i('🚀 Router wird initialisiert...');\n      try {\n        _routerInstance = GoRouter(\n          initialLocation: '/go',",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 88,
    "column": 32,
    "original": ",\n          navigatorKey: _rootNavigatorKey,\n          \n          // Navigation Observer für User Journey Tracking\n          observers: [\n            AppNavigationObserver(),\n          ],\n          \n          // Redirect aktiviert - Services werden jetzt korrekt initialisiert\n          redirect: (context, state) async {\n        try {\n          final authService = _getAuthService();\n          if (authService == null) {\n            // Services noch nicht verfügbar, zur Landing Page\n            return ",
    "suggested_key": "navigationNavigatorkey_rootnavigatorkeyNavigation",
    "context": "AppLogger.navigation.i('🚀 Router wird initialisiert...');\n      try {\n        _routerInstance = GoRouter(\n          initialLocation: '/go',\n          navigatorKey: _rootNavigatorKey,\n          \n          // Navigation Observer für User Journey Tracking",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 107,
    "column": 73,
    "original": ");\n          final isInviteRoute = state.matchedLocation.startsWith(",
    "suggested_key": "navigationFinalIsinviterouteStatematchedlocationstartswith",
    "context": "final isLoggedIn = await authService.isLoggedIn();\n\n          final isAuthRoute = state.matchedLocation.startsWith('/go/auth');\n          final isInviteRoute = state.matchedLocation.startsWith('/go/world-join/'); // Invite-Routen sind öffentlich\n          final isProtectedRoute = (state.matchedLocation.startsWith('/go/worlds') ||\n                                  state.matchedLocation.startsWith('/go/dashboard')) &&",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 108,
    "column": 82,
    "original": "); // Invite-Routen sind öffentlich\n          final isProtectedRoute = (state.matchedLocation.startsWith(",
    "suggested_key": "navigationInviteroutenSindÖffentlich",
    "context": "final isLoggedIn = await authService.isLoggedIn();\n\n          final isAuthRoute = state.matchedLocation.startsWith('/go/auth');\n          final isInviteRoute = state.matchedLocation.startsWith('/go/world-join/'); // Invite-Routen sind öffentlich\n          final isProtectedRoute = (state.matchedLocation.startsWith('/go/worlds') ||\n                                  state.matchedLocation.startsWith('/go/dashboard')) &&\n                                  !isInviteRoute; // Invite-Routen ausschließen",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 109,
    "column": 81,
    "original": ") ||\n                                  state.matchedLocation.startsWith(",
    "suggested_key": "navigationStatematchedlocationstartswith",
    "context": "final isAuthRoute = state.matchedLocation.startsWith('/go/auth');\n          final isInviteRoute = state.matchedLocation.startsWith('/go/world-join/'); // Invite-Routen sind öffentlich\n          final isProtectedRoute = (state.matchedLocation.startsWith('/go/worlds') ||\n                                  state.matchedLocation.startsWith('/go/dashboard')) &&\n                                  !isInviteRoute; // Invite-Routen ausschließen",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 110,
    "column": 82,
    "original": ")) &&\n                                  !isInviteRoute; // Invite-Routen ausschließen\n\n          if (!isLoggedIn && isProtectedRoute) {\n            AppLogger.navigation.i(",
    "suggested_key": "navigationIsinviterouteInviteroutenAusschließen",
    "context": "final isAuthRoute = state.matchedLocation.startsWith('/go/auth');\n          final isInviteRoute = state.matchedLocation.startsWith('/go/world-join/'); // Invite-Routen sind öffentlich\n          final isProtectedRoute = (state.matchedLocation.startsWith('/go/worlds') ||\n                                  state.matchedLocation.startsWith('/go/dashboard')) &&\n                                  !isInviteRoute; // Invite-Routen ausschließen\n\n          if (!isLoggedIn && isProtectedRoute) {",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 139,
    "column": 19,
    "original": ",\n        name: landingRoute,\n        pageBuilder: (context, state) => CustomTransitionPage(\n          child: const LandingPage(),\n          transitionsBuilder: (context, animation, secondaryAnimation, child) =>\n            FadeTransition(opacity: animation, child: child),\n        ),\n      ),\n\n      // Auth routes\n      GoRoute(\n        path: ",
    "suggested_key": "navigationNameLandingroutePagebuilder",
    "context": "routes: [\n      // Landing page\n      GoRoute(\n        path: '/go',\n        name: landingRoute,\n        pageBuilder: (context, state) => CustomTransitionPage(\n          child: const LandingPage(),",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 150,
    "column": 30,
    "original": ",\n        name: loginRoute,\n        pageBuilder: (context, state) => CustomTransitionPage(\n          child: const LoginPage(),\n          transitionsBuilder: (context, animation, secondaryAnimation, child) =>\n            FadeTransition(opacity: animation, child: child),\n        ),\n      ),\n      GoRoute(\n        path: ",
    "suggested_key": "navigationNameLoginroutePagebuilder",
    "context": "// Auth routes\n      GoRoute(\n        path: '/go/auth/login',\n        name: loginRoute,\n        pageBuilder: (context, state) => CustomTransitionPage(\n          child: const LoginPage(),",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: child property",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 159,
    "column": 33,
    "original": ",\n        name: registerRoute,\n        pageBuilder: (context, state) => CustomTransitionPage(\n          child: const RegisterPage(),\n          transitionsBuilder: (context, animation, secondaryAnimation, child) =>\n            FadeTransition(opacity: animation, child: child),\n        ),\n      ),\n      GoRoute(\n        path: ",
    "suggested_key": "navigationNameRegisterroutePagebuilder",
    "context": "),\n      ),\n      GoRoute(\n        path: '/go/auth/register',\n        name: registerRoute,\n        pageBuilder: (context, state) => CustomTransitionPage(\n          child: const RegisterPage(),",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: child property",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 168,
    "column": 40,
    "original": ",\n        name: forgotPasswordRoute,\n        pageBuilder: (context, state) => CustomTransitionPage(\n          child: const ForgotPasswordPage(),\n          transitionsBuilder: (context, animation, secondaryAnimation, child) =>\n            FadeTransition(opacity: animation, child: child),\n        ),\n      ),\n      GoRoute(\n        path: ",
    "suggested_key": "navigationNameForgotpasswordroutePagebuilder",
    "context": "),\n      ),\n      GoRoute(\n        path: '/go/auth/forgot-password',\n        name: forgotPasswordRoute,\n        pageBuilder: (context, state) => CustomTransitionPage(\n          child: const ForgotPasswordPage(),",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: child property",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 177,
    "column": 39,
    "original": ",\n        name: resetPasswordRoute,\n        pageBuilder: (context, state) {\n          // Token aus Query-Parametern holen\n          final token = state.uri.queryParameters[",
    "suggested_key": "navigationNameResetpasswordroutePagebuilder",
    "context": "),\n      ),\n      GoRoute(\n        path: '/go/auth/reset-password',\n        name: resetPasswordRoute,\n        pageBuilder: (context, state) {\n          // Token aus Query-Parametern holen",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: child property",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 181,
    "column": 57,
    "original": "];\n          if (token == null || token.isEmpty) {\n            // Ohne Token zur Passwort-vergessen Seite weiterleiten\n            return CustomTransitionPage(\n              child: const ForgotPasswordPage(),\n              transitionsBuilder: (context, animation, secondaryAnimation, child) =>\n                FadeTransition(opacity: animation, child: child),\n            );\n          }\n          return CustomTransitionPage(\n            child: ResetPasswordPage(token: token),\n            transitionsBuilder: (context, animation, secondaryAnimation, child) =>\n              FadeTransition(opacity: animation, child: child),\n          );\n        },\n      ),\n\n      // World routes - NORMALE NAVIGATION\n      GoRoute(\n        path: ",
    "suggested_key": "navigationIfTokenNull",
    "context": "name: resetPasswordRoute,\n        pageBuilder: (context, state) {\n          // Token aus Query-Parametern holen\n          final token = state.uri.queryParameters['token'];\n          if (token == null || token.isEmpty) {\n            // Ohne Token zur Passwort-vergessen Seite weiterleiten\n            return CustomTransitionPage(",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: child property",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 200,
    "column": 26,
    "original": ",\n        name: worldListRoute,\n        pageBuilder: (context, state) => CustomTransitionPage(\n          child: const WorldListPage(),\n          transitionsBuilder: (context, animation, secondaryAnimation, child) =>\n            FadeTransition(opacity: animation, child: child),\n        ),\n      ),\n      GoRoute(\n        path: ",
    "suggested_key": "navigationNameWorldlistroutePagebuilder",
    "context": "// World routes - NORMALE NAVIGATION\n      GoRoute(\n        path: '/go/worlds',\n        name: worldListRoute,\n        pageBuilder: (context, state) => CustomTransitionPage(\n          child: const WorldListPage(),",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: child property",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 209,
    "column": 30,
    "original": ",\n        name: worldDashboardRoute,\n        pageBuilder: (context, state) {\n          final worldId = state.pathParameters[",
    "suggested_key": "navigationNameWorlddashboardroutePagebuilder",
    "context": "),\n      ),\n      GoRoute(\n        path: '/go/worlds/:id',\n        name: worldDashboardRoute,\n        pageBuilder: (context, state) {\n          final worldId = state.pathParameters['id'];",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: child property",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 247,
    "column": 35,
    "original": ",\n        name: worldJoinRoute,\n        pageBuilder: (context, state) {\n          final worldId = state.pathParameters[",
    "suggested_key": "navigationNameWorldjoinroutePagebuilder",
    "context": "),\n      // NORMALE WORLD-JOIN Route (über interne Navigation)\n      GoRoute(\n        path: '/go/worlds/:id/join',\n        name: worldJoinRoute,\n        pageBuilder: (context, state) {\n          final worldId = state.pathParameters['id'];",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: child property",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 289,
    "column": 15,
    "original": "world-join-by-token",
    "suggested_key": "navigationWorldjoinbytoken",
    "context": "// INVITE-FLOW Route (externe Links)\n      GoRoute(\n        path: '/go/world-join/:token',\n        name: 'world-join-by-token',\n        pageBuilder: (context, state) {\n          final token = state.pathParameters['token'];\n          if (token == null || token.isEmpty) {",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: child property",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 387,
    "column": 68,
    "original": ");\n  }\n}\n\n// Verbesserte Fehlerseiten\nclass ErrorPage extends StatelessWidget {\n  const ErrorPage({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Container(\n        decoration: BoxDecoration(\n          gradient: LinearGradient(\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n            colors: [\n              AppTheme.primaryColor.withOpacity(0.1),\n              AppTheme.surfaceColor,\n            ],\n          ),\n        ),\n        child: Center(\n          child: Card(\n            elevation: 8,\n            shape: RoundedRectangleBorder(\n              borderRadius: BorderRadius.circular(16),\n            ),\n            child: Padding(\n              padding: const EdgeInsets.all(32.0),\n              child: Column(\n                mainAxisSize: MainAxisSize.min,\n                children: [\n                  const Icon(\n                    Icons.error_outline,\n                    size: 64,\n                    color: AppTheme.errorColor,\n                  ),\n                  const SizedBox(height: 24),\n                  Text(\n                    ",
    "suggested_key": "navigationVerbesserteFehlerseitenClass",
    "context": "// Cache beim App-Start invalidieren\n  static void invalidateCacheOnStart() {\n    // Caching entfernt, daher keine Cache-Invalidierung mehr nötig\n    AppLogger.navigation.i('🔄 Auth-Cache beim App-Start invalidiert');\n  }\n}",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 1,
    "column": 8,
    "original": "package:flutter/material.dart",
    "suggested_key": "navigationPackagefluttermaterialdart",
    "context": "import 'package:flutter/material.dart';\nimport 'package:go_router/go_router.dart';\nimport '../../theme/app_theme.dart';",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 2,
    "column": 8,
    "original": "package:go_router/go_router.dart",
    "suggested_key": "navigationPackagego_routergo_routerdart",
    "context": "import 'package:flutter/material.dart';\nimport 'package:go_router/go_router.dart';\nimport '../../theme/app_theme.dart';\n\nclass NavigationWidget extends StatefulWidget {",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 3,
    "column": 35,
    "original": ";\n\nclass NavigationWidget extends StatefulWidget {\n  final String? currentRoute;\n  final Map<String, dynamic>? routeParams;\n  final bool? isJoinedWorld; // Ob der User in der aktuellen Welt registriert ist\n  \n  const NavigationWidget({\n    super.key,\n    this.currentRoute,\n    this.routeParams,\n    this.isJoinedWorld,\n  });\n\n  @override\n  State<NavigationWidget> createState() => _NavigationWidgetState();\n}\n\nclass _NavigationWidgetState extends State<NavigationWidget> with SingleTickerProviderStateMixin {\n  late AnimationController _animationController;\n  late Animation<double> _fadeAnimation;\n  bool _isExpanded = false;\n  \n  @override\n  void initState() {\n    super.initState();\n    \n    _animationController = AnimationController(\n      duration: const Duration(milliseconds: 300),\n      vsync: this,\n    );\n    \n    _fadeAnimation = Tween<double>(\n      begin: 0.0,\n      end: 1.0,\n    ).animate(CurvedAnimation(\n      parent: _animationController,\n      curve: Curves.easeInOut,\n    ));\n    \n    _animationController.forward();\n  }\n  \n  @override\n  void dispose() {\n    _animationController.dispose();\n    super.dispose();\n  }\n  \n  void _toggleExpanded() {\n    setState(() {\n      _isExpanded = !_isExpanded;\n    });\n  }\n  \n  void _showJoinRequiredMessage() {\n    ScaffoldMessenger.of(context).showSnackBar(\n      SnackBar(\n        content: const Text(",
    "suggested_key": "navigationClassNavigationwidgetExtends",
    "context": "import 'package:flutter/material.dart';\nimport 'package:go_router/go_router.dart';\nimport '../../theme/app_theme.dart';\n\nclass NavigationWidget extends StatefulWidget {\n  final String? currentRoute;",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 75,
    "column": 23,
    "original": ",\n        onTap: () => Navigator.of(context).canPop() \n          ? Navigator.of(context).pop()\n          : context.goNamed(",
    "suggested_key": "navigationOntapNavigatorofcontextcanpopNavigatorofcontextpop",
    "context": "if (widget.currentRoute != 'world-list') {\n      items.add(NavigationItem(\n        icon: Icons.arrow_back,\n        label: 'Zurück',\n        onTap: () => Navigator.of(context).canPop() \n          ? Navigator.of(context).pop()\n          : context.goNamed('world-list'),",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 78,
    "column": 40,
    "original": "),\n      ));\n      \n      items.add(NavigationItem(\n        icon: Icons.remove,\n        label: ",
    "suggested_key": "navigationItemsaddnavigationitemIconIconsremove",
    "context": "label: 'Zurück',\n        onTap: () => Navigator.of(context).canPop() \n          ? Navigator.of(context).pop()\n          : context.goNamed('world-list'),\n      ));\n      \n      items.add(NavigationItem(",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 83,
    "column": 17,
    "original": ",\n        onTap: () {},\n        isDivider: true,\n      ));\n    }\n    \n    // Immer zur Welten-Liste\n    items.add(NavigationItem(\n      icon: Icons.public,\n      label: ",
    "suggested_key": "navigationOntapIsdividerTrue",
    "context": "items.add(NavigationItem(\n        icon: Icons.remove,\n        label: '',\n        onTap: () {},\n        isDivider: true,\n      ));",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 92,
    "column": 31,
    "original": ",\n      onTap: () => context.goNamed(",
    "suggested_key": "navigationOntapContextgonamed",
    "context": "// Immer zur Welten-Liste\n    items.add(NavigationItem(\n      icon: Icons.public,\n      label: 'Welten-Übersicht',\n      onTap: () => context.goNamed('world-list'),\n      isActive: widget.currentRoute == 'world-list',\n    ));",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 93,
    "column": 47,
    "original": "),\n      isActive: widget.currentRoute == ",
    "suggested_key": "navigationIsactiveWidgetcurrentroute",
    "context": "items.add(NavigationItem(\n      icon: Icons.public,\n      label: 'Welten-Übersicht',\n      onTap: () => context.goNamed('world-list'),\n      isActive: widget.currentRoute == 'world-list',\n    ));",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 94,
    "column": 51,
    "original": ",\n    ));\n    \n    // Welt-Details anzeigen (von Dashboard oder wenn auf Join-Page)\n    if ((widget.currentRoute == ",
    "suggested_key": "navigationWeltdetailsAnzeigenVon",
    "context": "icon: Icons.public,\n      label: 'Welten-Übersicht',\n      onTap: () => context.goNamed('world-list'),\n      isActive: widget.currentRoute == 'world-list',\n    ));\n    \n    // Welt-Details anzeigen (von Dashboard oder wenn auf Join-Page)",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 98,
    "column": 49,
    "original": " || widget.currentRoute == ",
    "suggested_key": "navigationWidgetcurrentroute",
    "context": "));\n    \n    // Welt-Details anzeigen (von Dashboard oder wenn auf Join-Page)\n    if ((widget.currentRoute == 'world-dashboard' || widget.currentRoute == 'world-join') \n        && widget.routeParams?['id'] != null) {\n      final worldIdParam = widget.routeParams?['id'];\n      if (worldIdParam != null) {",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 98,
    "column": 88,
    "original": ") \n        && widget.routeParams?[",
    "suggested_key": "navigationWidgetrouteparams",
    "context": "));\n    \n    // Welt-Details anzeigen (von Dashboard oder wenn auf Join-Page)\n    if ((widget.currentRoute == 'world-dashboard' || widget.currentRoute == 'world-join') \n        && widget.routeParams?['id'] != null) {\n      final worldIdParam = widget.routeParams?['id'];\n      if (worldIdParam != null) {",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 99,
    "column": 35,
    "original": "] != null) {\n      final worldIdParam = widget.routeParams?[",
    "suggested_key": "navigationNullFinalWorldidparam",
    "context": "// Welt-Details anzeigen (von Dashboard oder wenn auf Join-Page)\n    if ((widget.currentRoute == 'world-dashboard' || widget.currentRoute == 'world-join') \n        && widget.routeParams?['id'] != null) {\n      final worldIdParam = widget.routeParams?['id'];\n      if (worldIdParam != null) {\n        items.add(NavigationItem(",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 100,
    "column": 51,
    "original": "];\n      if (worldIdParam != null) {\n        items.add(NavigationItem(\n          icon: Icons.info_outline,\n          label: ",
    "suggested_key": "navigationIfWorldidparamNull",
    "context": "// Welt-Details anzeigen (von Dashboard oder wenn auf Join-Page)\n    if ((widget.currentRoute == 'world-dashboard' || widget.currentRoute == 'world-join') \n        && widget.routeParams?['id'] != null) {\n      final worldIdParam = widget.routeParams?['id'];\n      if (worldIdParam != null) {\n        items.add(NavigationItem(\n          icon: Icons.info_outline,",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 104,
    "column": 31,
    "original": ",\n          onTap: () => context.goNamed(",
    "suggested_key": "navigationOntapContextgonamed",
    "context": "if (worldIdParam != null) {\n        items.add(NavigationItem(\n          icon: Icons.info_outline,\n          label: 'Welt-Details',\n          onTap: () => context.goNamed('world-join', \n            pathParameters: {'id': worldIdParam.toString()}\n          ),",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 105,
    "column": 51,
    "original": ", \n            pathParameters: {",
    "suggested_key": "navigationPathparameters",
    "context": "items.add(NavigationItem(\n          icon: Icons.info_outline,\n          label: 'Welt-Details',\n          onTap: () => context.goNamed('world-join', \n            pathParameters: {'id': worldIdParam.toString()}\n          ),\n          isActive: widget.currentRoute == 'world-join',",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 106,
    "column": 33,
    "original": ": worldIdParam.toString()}\n          ),\n          isActive: widget.currentRoute == ",
    "suggested_key": "navigationWorldidparamtostringIsactiveWidgetcurrentroute",
    "context": "icon: Icons.info_outline,\n          label: 'Welt-Details',\n          onTap: () => context.goNamed('world-join', \n            pathParameters: {'id': worldIdParam.toString()}\n          ),\n          isActive: widget.currentRoute == 'world-join',\n        ));",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 108,
    "column": 55,
    "original": ",\n        ));\n      }\n    }\n    \n    // Dashboard Link - nur aktiv wenn User in der Welt ist\n    if ((widget.currentRoute == ",
    "suggested_key": "navigationDashboardLinkNur",
    "context": "onTap: () => context.goNamed('world-join', \n            pathParameters: {'id': worldIdParam.toString()}\n          ),\n          isActive: widget.currentRoute == 'world-join',\n        ));\n      }\n    }",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 114,
    "column": 44,
    "original": " || widget.currentRoute == ",
    "suggested_key": "navigationWidgetcurrentroute",
    "context": "}\n    \n    // Dashboard Link - nur aktiv wenn User in der Welt ist\n    if ((widget.currentRoute == 'world-join' || widget.currentRoute == 'world-dashboard') \n        && widget.routeParams?['id'] != null) {\n      final worldIdParam = widget.routeParams?['id'];\n      if (worldIdParam != null) {",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 114,
    "column": 88,
    "original": ") \n        && widget.routeParams?[",
    "suggested_key": "navigationWidgetrouteparams",
    "context": "}\n    \n    // Dashboard Link - nur aktiv wenn User in der Welt ist\n    if ((widget.currentRoute == 'world-join' || widget.currentRoute == 'world-dashboard') \n        && widget.routeParams?['id'] != null) {\n      final worldIdParam = widget.routeParams?['id'];\n      if (worldIdParam != null) {",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 115,
    "column": 35,
    "original": "] != null) {\n      final worldIdParam = widget.routeParams?[",
    "suggested_key": "navigationNullFinalWorldidparam",
    "context": "// Dashboard Link - nur aktiv wenn User in der Welt ist\n    if ((widget.currentRoute == 'world-join' || widget.currentRoute == 'world-dashboard') \n        && widget.routeParams?['id'] != null) {\n      final worldIdParam = widget.routeParams?['id'];\n      if (worldIdParam != null) {\n        final worldId = worldIdParam.toString();",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 116,
    "column": 51,
    "original": "];\n      if (worldIdParam != null) {\n        final worldId = worldIdParam.toString();\n        final isJoined = widget.isJoinedWorld ?? false;\n        \n        items.add(NavigationItem(\n          icon: Icons.dashboard,\n          label: isJoined ? ",
    "suggested_key": "navigationIfWorldidparamNull",
    "context": "// Dashboard Link - nur aktiv wenn User in der Welt ist\n    if ((widget.currentRoute == 'world-join' || widget.currentRoute == 'world-dashboard') \n        && widget.routeParams?['id'] != null) {\n      final worldIdParam = widget.routeParams?['id'];\n      if (worldIdParam != null) {\n        final worldId = worldIdParam.toString();\n        final isJoined = widget.isJoinedWorld ?? false;",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 123,
    "column": 47,
    "original": "Dashboard (Beitreten erforderlich)",
    "suggested_key": "navigationDashboardBeitretenErforderlich",
    "context": "items.add(NavigationItem(\n          icon: Icons.dashboard,\n          label: isJoined ? 'Zum Dashboard' : 'Dashboard (Beitreten erforderlich)',\n          onTap: isJoined \n            ? () => context.goNamed('world-dashboard', pathParameters: {'id': worldId})\n            : () => _showJoinRequiredMessage(),",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 125,
    "column": 53,
    "original": ", pathParameters: {",
    "suggested_key": "navigationPathparameters",
    "context": "icon: Icons.dashboard,\n          label: isJoined ? 'Zum Dashboard' : 'Dashboard (Beitreten erforderlich)',\n          onTap: isJoined \n            ? () => context.goNamed('world-dashboard', pathParameters: {'id': worldId})\n            : () => _showJoinRequiredMessage(),\n          isActive: widget.currentRoute == 'world-dashboard',\n          isDisabled: !isJoined,",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 125,
    "column": 76,
    "original": ": worldId})\n            : () => _showJoinRequiredMessage(),\n          isActive: widget.currentRoute == ",
    "suggested_key": "navigationWorldid_showjoinrequiredmessageIsactive",
    "context": "icon: Icons.dashboard,\n          label: isJoined ? 'Zum Dashboard' : 'Dashboard (Beitreten erforderlich)',\n          onTap: isJoined \n            ? () => context.goNamed('world-dashboard', pathParameters: {'id': worldId})\n            : () => _showJoinRequiredMessage(),\n          isActive: widget.currentRoute == 'world-dashboard',\n          isDisabled: !isJoined,",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 127,
    "column": 60,
    "original": ",\n          isDisabled: !isJoined,\n        ));\n      }\n    }\n    \n    // Weitere Navigation Items können hier hinzugefügt werden\n    // z.B. Settings, Profile, etc.\n    \n    return items;\n  }\n  \n  @override\n  Widget build(BuildContext context) {\n    final navItems = _getNavigationItems();\n    \n    return Positioned(\n      top: 16,\n      right: 16,\n      child: FadeTransition(\n        opacity: _fadeAnimation,\n        child: AnimatedContainer(\n          duration: const Duration(milliseconds: 300),\n          decoration: BoxDecoration(\n            color: const Color(0xFF1A1A1A).withOpacity(0.95),\n            borderRadius: BorderRadius.circular(16),\n            border: Border.all(\n              color: AppTheme.primaryColor.withOpacity(0.3),\n              width: 1,\n            ),\n            boxShadow: [\n              BoxShadow(\n                color: Colors.black.withOpacity(0.3),\n                blurRadius: 12,\n                offset: const Offset(0, 4),\n              ),\n            ],\n          ),\n          child: Material(\n            color: Colors.transparent,\n            child: _isExpanded ? _buildExpandedView(navItems) : _buildCompactView(),\n          ),\n        ),\n      ),\n    );\n  }\n  \n  Widget _buildCompactView() {\n    return InkWell(\n      onTap: _toggleExpanded,\n      borderRadius: BorderRadius.circular(16),\n      child: Padding(\n        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),\n        child: Row(\n          mainAxisSize: MainAxisSize.min,\n          children: [\n            Container(\n              width: 36,\n              height: 36,\n              decoration: BoxDecoration(\n                color: AppTheme.primaryColor.withOpacity(0.2),\n                shape: BoxShape.circle,\n              ),\n              child: const Icon(\n                Icons.explore,\n                color: AppTheme.primaryColor,\n                size: 20,\n              ),\n            ),\n            const SizedBox(width: 12),\n            Column(\n              crossAxisAlignment: CrossAxisAlignment.start,\n              mainAxisSize: MainAxisSize.min,\n              children: [\n                const Text(\n                  ",
    "suggested_key": "navigationIsdisabledIsjoinedWeitere",
    "context": "onTap: isJoined \n            ? () => context.goNamed('world-dashboard', pathParameters: {'id': worldId})\n            : () => _showJoinRequiredMessage(),\n          isActive: widget.currentRoute == 'world-dashboard',\n          isDisabled: !isJoined,\n        ));\n      }",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 202,
    "column": 30,
    "original": ",\n                  style: TextStyle(\n                    color: Colors.white,\n                    fontSize: 14,\n                    fontWeight: FontWeight.w600,\n                  ),\n                ),\n                Text(\n                  ",
    "suggested_key": "navigationStyleTextstyleColor",
    "context": "mainAxisSize: MainAxisSize.min,\n              children: [\n                const Text(\n                  'Navigation',\n                  style: TextStyle(\n                    color: Colors.white,\n                    fontSize: 14,",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 262,
    "column": 30,
    "original": ",\n                  style: TextStyle(\n                    color: Colors.white,\n                    fontSize: 16,\n                    fontWeight: FontWeight.bold,\n                  ),\n                ),\n                const SizedBox(width: 40),\n                Icon(\n                  Icons.keyboard_arrow_up,\n                  color: Colors.grey[400],\n                  size: 24,\n                ),\n              ],\n            ),\n          ),\n        ),\n        \n        const Divider(color: Colors.grey, height: 1),\n        \n        // Navigation Items\n        ...items.map((item) => _buildNavigationItem(item)),\n      ],\n    );\n  }\n  \n  Widget _buildNavigationItem(NavigationItem item) {\n    if (item.isDivider) {\n      return const Padding(\n        padding: EdgeInsets.symmetric(vertical: 4),\n        child: Divider(color: Colors.grey, height: 1),\n      );\n    }\n    \n    final isActive = item.isActive;\n    final isDisabled = item.isDisabled;\n    \n    final widget = InkWell(\n      onTap: isDisabled ? null : () {\n        item.onTap();\n        if (!isDisabled) _toggleExpanded();\n      },\n      child: Container(\n        width: 220,\n        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),\n        decoration: BoxDecoration(\n          color: isActive ? AppTheme.primaryColor.withOpacity(0.1) : Colors.transparent,\n          border: Border(\n            left: BorderSide(\n              color: isActive ? AppTheme.primaryColor : Colors.transparent,\n              width: 3,\n            ),\n          ),\n        ),\n        child: Row(\n          children: [\n            Icon(\n              item.icon,\n              color: isDisabled \n                ? Colors.grey[600] \n                : (isActive ? AppTheme.primaryColor : Colors.grey[400]),\n              size: 20,\n            ),\n            const SizedBox(width: 12),\n            Expanded(\n              child: Text(\n                item.label,\n                style: TextStyle(\n                  color: isDisabled \n                    ? Colors.grey[600] \n                    : (isActive ? AppTheme.primaryColor : Colors.white),\n                  fontSize: 14,\n                  fontWeight: isActive ? FontWeight.w600 : FontWeight.normal,\n                  decoration: isDisabled ? TextDecoration.lineThrough : null,\n                ),\n              ),\n            ),\n            if (isActive && !isDisabled)\n              const Icon(\n                Icons.check_circle,\n                color: AppTheme.primaryColor,\n                size: 16,\n              ),\n            if (isDisabled)\n              Icon(\n                Icons.lock,\n                color: Colors.grey[600],\n                size: 16,\n              ),\n          ],\n        ),\n      ),\n    );\n    \n    // Tooltip hinzufügen wenn disabled\n    if (isDisabled && item.label.contains(",
    "suggested_key": "navigationStyleTextstyleColor",
    "context": "),\n                const SizedBox(width: 12),\n                const Text(\n                  'Navigation',\n                  style: TextStyle(\n                    color: Colors.white,\n                    fontSize: 16,",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\user_info_widget.dart",
    "line": 1,
    "column": 8,
    "original": "package:flutter/material.dart",
    "suggested_key": "navigationPackagefluttermaterialdart",
    "context": "import 'package:flutter/material.dart';\nimport 'package:go_router/go_router.dart';\nimport '../../core/services/auth_service.dart';\nimport '../../theme/app_theme.dart';",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\user_info_widget.dart",
    "line": 2,
    "column": 8,
    "original": "package:go_router/go_router.dart",
    "suggested_key": "navigationPackagego_routergo_routerdart",
    "context": "import 'package:flutter/material.dart';\nimport 'package:go_router/go_router.dart';\nimport '../../core/services/auth_service.dart';\nimport '../../theme/app_theme.dart';\nimport '../../main.dart';",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\user_info_widget.dart",
    "line": 3,
    "column": 8,
    "original": "../../core/services/auth_service.dart",
    "suggested_key": "navigationCoreservicesauth_servicedart",
    "context": "import 'package:flutter/material.dart';\nimport 'package:go_router/go_router.dart';\nimport '../../core/services/auth_service.dart';\nimport '../../theme/app_theme.dart';\nimport '../../main.dart';",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\user_info_widget.dart",
    "line": 5,
    "column": 24,
    "original": ";\n\nclass UserInfoWidget extends StatefulWidget {\n  const UserInfoWidget({super.key});\n\n  @override\n  State<UserInfoWidget> createState() => _UserInfoWidgetState();\n}\n\nclass _UserInfoWidgetState extends State<UserInfoWidget> with SingleTickerProviderStateMixin {\n  late final AuthService _authService;\n  late AnimationController _animationController;\n  late Animation<double> _fadeAnimation;\n  bool _isExpanded = false;\n  \n  @override\n  void initState() {\n    super.initState();\n    _authService = ServiceLocator.get<AuthService>();\n    \n    _animationController = AnimationController(\n      duration: const Duration(milliseconds: 300),\n      vsync: this,\n    );\n    \n    _fadeAnimation = Tween<double>(\n      begin: 0.0,\n      end: 1.0,\n    ).animate(CurvedAnimation(\n      parent: _animationController,\n      curve: Curves.easeInOut,\n    ));\n    \n    _animationController.forward();\n    \n    // Fetch current user data to ensure we have roles\n    _fetchUserData();\n  }\n  \n  Future<void> _fetchUserData() async {\n    final user = await _authService.fetchCurrentUser();\n    if (user != null && mounted) {\n      setState(() {});\n    }\n  }\n  \n  @override\n  void dispose() {\n    _animationController.dispose();\n    super.dispose();\n  }\n  \n  void _toggleExpanded() {\n    setState(() {\n      _isExpanded = !_isExpanded;\n    });\n  }\n  \n  Color _getRoleColor(String roleName) {\n    switch (roleName.toLowerCase()) {\n      case ",
    "suggested_key": "navigationClassUserinfowidgetExtends",
    "context": "import 'package:go_router/go_router.dart';\nimport '../../core/services/auth_service.dart';\nimport '../../theme/app_theme.dart';\nimport '../../main.dart';\n\nclass UserInfoWidget extends StatefulWidget {\n  const UserInfoWidget({super.key});",
    "category": "navigation",
    "confidence": 0.55,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 391,
    "column": 78,
    "original": ",\n                                                  style: TextStyle(\n                                                    color: AppTheme.primaryColor,\n                                                    fontSize: 16,\n                                                    fontWeight: FontWeight.w600,\n                                                  ),\n                                                ),\n                                                style: ElevatedButton.styleFrom(\n                                                  backgroundColor: Colors.transparent,\n                                                  shadowColor: Colors.transparent,\n                                                  shape: RoundedRectangleBorder(\n                                                    borderRadius: BorderRadius.circular(16),\n                                                  ),\n                                                ),\n                                              ),\n                                            ),\n                                          ],\n                                        ),\n                                        \n                                        const SizedBox(height: 40),\n                                        \n                                        // Stats Row\n                                        Row(\n                                          mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n                                          children: [\n                                            _buildStatItem(",
    "suggested_key": "uiStyleTextstyleColor",
    "context": "color: AppTheme.primaryColor,\n                                                ),\n                                                label: const Text(\n                                                  'Bereits Mitglied? Anmelden',\n                                                  style: TextStyle(\n                                                    color: AppTheme.primaryColor,\n                                                    fontSize: 16,",
    "category": "ui",
    "confidence": 0.55,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 601,
    "column": 39,
    "original": "Kostenlos registrieren →",
    "suggested_key": "uiKostenlosRegistrieren",
    "context": "),\n                                    ),\n                                    child: const Text(\n                                      'Kostenlos registrieren →',\n                                      style: TextStyle(\n                                        fontSize: 18,\n                                        fontWeight: FontWeight.bold,",
    "category": "ui",
    "confidence": 0.55,
    "widget_context": "Widget: ElevatedButton",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 49,
    "column": 9,
    "original": "Initialisiere App...",
    "suggested_key": "authInitialisiereApp",
    "context": "timeout: const Duration(seconds: 8),\n      onTimeout: _onTimeout,\n      initSteps: const [\n        'Initialisiere App...',\n        'Lade Konfiguration...',\n        'Starte Services...',\n        'Prüfe Authentifizierung...',",
    "category": "auth",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 50,
    "column": 9,
    "original": "Lade Konfiguration...",
    "suggested_key": "authLadeKonfiguration",
    "context": "onTimeout: _onTimeout,\n      initSteps: const [\n        'Initialisiere App...',\n        'Lade Konfiguration...',\n        'Starte Services...',\n        'Prüfe Authentifizierung...',\n        'Bereit!',",
    "category": "auth",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 51,
    "column": 9,
    "original": "Starte Services...",
    "suggested_key": "authStarteServices",
    "context": "initSteps: const [\n        'Initialisiere App...',\n        'Lade Konfiguration...',\n        'Starte Services...',\n        'Prüfe Authentifizierung...',\n        'Bereit!',\n      ],",
    "category": "auth",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 52,
    "column": 9,
    "original": "Prüfe Authentifizierung...",
    "suggested_key": "authPrüfeAuthentifizierung",
    "context": "'Initialisiere App...',\n        'Lade Konfiguration...',\n        'Starte Services...',\n        'Prüfe Authentifizierung...',\n        'Bereit!',\n      ],\n      appName: Env.appName,",
    "category": "auth",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\main.dart",
    "line": 37,
    "column": 19,
    "original": "🚀 WeltenwindApp wird gestartet...",
    "suggested_key": "errorWeltenwindappWirdGestartet",
    "context": "// Initialisiere das Logging-System\n  AppLogger.initialize();\n  AppLogger.app.i('🚀 WeltenwindApp wird gestartet...');\n\n  // Flutter Error Handling\n  FlutterError.onError = (FlutterErrorDetails details) {",
    "category": "error",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 309,
    "column": 101,
    "original": "...",
    "suggested_key": "errorText079",
    "context": "),\n            );\n          }\n          AppLogger.navigation.i('🎫 Invite-Token erkannt', error: {'token': token.substring(0, 8) + '...'});\n          return CustomTransitionPage(\n            child: WorldJoinPage(\n              inviteToken: token,",
    "category": "error",
    "confidence": 0.5,
    "widget_context": "Widget: child property",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 1,
    "column": 8,
    "original": "package:flutter/material.dart",
    "suggested_key": "uiPackagefluttermaterialdart",
    "context": "import 'package:flutter/material.dart';\nimport 'package:flutter_localizations/flutter_localizations.dart';\nimport 'config/env.dart';\nimport 'config/logger.dart';",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 68,
    "column": 21,
    "original": "), // German\n          Locale(",
    "suggested_key": "uiGermanLocale",
    "context": "GlobalCupertinoLocalizations.delegate,\n        ],\n        supportedLocales: const [\n          Locale('de'), // German\n          Locale('en'), // English\n        ],",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 69,
    "column": 21,
    "original": "), // English\n        ],\n        \n        theme: ThemeData(\n          primarySwatch: Colors.blue,\n          useMaterial3: true,\n        ),\n        routerConfig: AppRouter.router,\n        debugShowCheckedModeBanner: false,\n      ),\n    );\n  }\n\n  // Korrekte Initialisierungsfunktion NACH App-Start\n  Future<void> _initializeApp() async {\n    AppLogger.app.i(",
    "suggested_key": "uiEnglishThemeThemedata",
    "context": "],\n        supportedLocales: const [\n          Locale('de'), // German\n          Locale('en'), // English\n        ],\n        \n        theme: ThemeData(",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 84,
    "column": 38,
    "original": ");\n    \n    // 1. Environment initialisieren\n    await Env.initialize();\n    \n    AppLogger.app.i(",
    "suggested_key": "ui1EnvironmentInitialisieren",
    "context": "// Korrekte Initialisierungsfunktion NACH App-Start\n  Future<void> _initializeApp() async {\n    AppLogger.app.i('🚀 App startet...');\n    \n    // 1. Environment initialisieren\n    await Env.initialize();",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 89,
    "column": 49,
    "original": ");\n    \n    // 2. Services initialisieren (jetzt sicher, da App bereits läuft)\n    try {\n      final authService = AuthService();\n      final apiService = ApiService.withAuth(authService);\n      final worldService = WorldService();\n      final inviteService = InviteService();\n\n      ServiceLocator.register<AuthService>(authService);\n      ServiceLocator.register<ApiService>(apiService);\n      ServiceLocator.register<WorldService>(worldService);\n      ServiceLocator.register<InviteService>(inviteService);\n      \n      AppLogger.app.i(",
    "suggested_key": "ui2ServicesInitialisieren",
    "context": "// 1. Environment initialisieren\n    await Env.initialize();\n    \n    AppLogger.app.i('🌍 Environment initialisiert');\n    \n    // 2. Services initialisieren (jetzt sicher, da App bereits läuft)\n    try {",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\config\\logger.dart",
    "line": 23,
    "column": 45,
    "original": "),\n      level: kDebugMode ? Level.debug : Level.info,\n      output: _getLogOutput(),\n    );\n\n    _authLogger = Logger(\n      printer: _getLogPrinter(prefix: ",
    "suggested_key": "uiLevelKdebugmodeLeveldebug",
    "context": "// Spezielle Logger für verschiedene Bereiche\n    _apiLogger = Logger(\n      printer: _getLogPrinter(prefix: '[API]'),\n      level: kDebugMode ? Level.debug : Level.info,\n      output: _getLogOutput(),\n    );",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\models\\user.dart",
    "line": 18,
    "column": 23,
    "original": "],\n      description: json[",
    "suggested_key": "uiDescriptionJson",
    "context": "factory Role.fromJson(Map<String, dynamic> json) {\n    return Role(\n      id: json['id'],\n      name: json['name'],\n      description: json['description'],\n      permissions: json['permissions'] != null\n          ? (json['permissions'] as List)",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\models\\user.dart",
    "line": 19,
    "column": 37,
    "original": "],\n      permissions: json[",
    "suggested_key": "uiPermissionsJson",
    "context": "return Role(\n      id: json['id'],\n      name: json['name'],\n      description: json['description'],\n      permissions: json['permissions'] != null\n          ? (json['permissions'] as List)\n              .map((p) => RolePermission.fromJson(p))",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\models\\user.dart",
    "line": 51,
    "column": 19,
    "original": "],\n      userId: json[",
    "suggested_key": "uiUseridJson",
    "context": "factory UserRole.fromJson(Map<String, dynamic> json) {\n    return UserRole(\n      id: json['id'],\n      userId: json['userId'],\n      roleId: json['roleId'],\n      scopeType: json['scopeType'],",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\models\\user.dart",
    "line": 57,
    "column": 37,
    "original": "]),\n    );\n  }\n}\n\n// Permission model\nclass Permission {\n  final int id;\n  final String name;\n  final String? description;\n\n  Permission({\n    required this.id,\n    required this.name,\n    this.description,\n  });\n\n  factory Permission.fromJson(Map<String, dynamic> json) {\n    return Permission(\n      id: json[",
    "suggested_key": "uiPermissionModelClass",
    "context": "scopeType: json['scopeType'],\n      scopeObjectId: json['scopeObjectId'],\n      condition: json['condition'],\n      role: Role.fromJson(json['role']),\n    );\n  }\n}",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\models\\user.dart",
    "line": 77,
    "column": 23,
    "original": "],\n      description: json[",
    "suggested_key": "uiDescriptionJson",
    "context": "factory Permission.fromJson(Map<String, dynamic> json) {\n    return Permission(\n      id: json['id'],\n      name: json['name'],\n      description: json['description'],\n    );\n  }",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\models\\user.dart",
    "line": 78,
    "column": 37,
    "original": "],\n    );\n  }\n}\n\n// RolePermission model\nclass RolePermission {\n  final int id;\n  final Permission permission;\n\n  RolePermission({\n    required this.id,\n    required this.permission,\n  });\n\n  factory RolePermission.fromJson(Map<String, dynamic> json) {\n    return RolePermission(\n      id: json[",
    "suggested_key": "uiRolepermissionModelClass",
    "context": "return Permission(\n      id: json['id'],\n      name: json['name'],\n      description: json['description'],\n    );\n  }\n}",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\models\\user.dart",
    "line": 95,
    "column": 19,
    "original": "],\n      permission: Permission.fromJson(json[",
    "suggested_key": "uiPermissionPermissionfromjsonjson",
    "context": "factory RolePermission.fromJson(Map<String, dynamic> json) {\n    return RolePermission(\n      id: json['id'],\n      permission: Permission.fromJson(json['permission']),\n    );\n  }",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\models\\user.dart",
    "line": 96,
    "column": 55,
    "original": "]),\n    );\n  }\n}\n\nclass User {\n  final String id;\n  final String username;\n  final String email;\n  final DateTime createdAt;\n  final DateTime? lastLoginAt;\n  final bool? isLocked;\n  final List<UserRole>? roles;\n\n  User({\n    required this.id,\n    required this.username,\n    required this.email,\n    required this.createdAt,\n    this.lastLoginAt,\n    this.isLocked,\n    this.roles,\n  });\n\n  factory User.fromJson(Map<String, dynamic> json) {\n    return User(\n      id: json[",
    "suggested_key": "uiClassUserFinal",
    "context": "factory RolePermission.fromJson(Map<String, dynamic> json) {\n    return RolePermission(\n      id: json['id'],\n      permission: Permission.fromJson(json['permission']),\n    );\n  }\n}",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\providers\\locale_provider.dart",
    "line": 1,
    "column": 8,
    "original": "package:flutter/material.dart",
    "suggested_key": "uiPackagefluttermaterialdart",
    "context": "import 'package:flutter/material.dart';\n\nclass LocaleProvider extends ChangeNotifier {\n  static final LocaleProvider _instance = LocaleProvider._internal();",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\providers\\locale_provider.dart",
    "line": 9,
    "column": 43,
    "original": ");\n  \n  Locale get currentLocale => _currentLocale;\n  \n  void setLocale(Locale locale) {\n    if (_currentLocale != locale) {\n      _currentLocale = locale;\n      notifyListeners();\n    }\n  }\n  \n  void switchLanguage() {\n    final newLocale = _currentLocale.languageCode == ",
    "suggested_key": "uiLocaleGetCurrentlocale",
    "context": "LocaleProvider._internal();\n\n  // Standardsprache ist Deutsch\n  Locale _currentLocale = const Locale('de');\n  \n  Locale get currentLocale => _currentLocale;",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 1,
    "column": 8,
    "original": "dart:convert",
    "suggested_key": "uiDartconvert",
    "context": "import 'dart:convert';\nimport 'package:flutter/foundation.dart';\nimport 'package:http/http.dart' as http;\nimport '../../config/env.dart';",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 2,
    "column": 8,
    "original": "package:flutter/foundation.dart",
    "suggested_key": "uiPackageflutterfoundationdart",
    "context": "import 'dart:convert';\nimport 'package:flutter/foundation.dart';\nimport 'package:http/http.dart' as http;\nimport '../../config/env.dart';\nimport '../../config/logger.dart';",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 57,
    "column": 11,
    "original": "web_browser_${DateTime.now().millisecondsSinceEpoch}",
    "suggested_key": "uiWeb_browser_datetimenowmillisecondssinceepoch",
    "context": "return currentFingerprint;\n    }\n    final fingerprint = kIsWeb \n        ? 'web_browser_${DateTime.now().millisecondsSinceEpoch}'\n        : 'flutter_app_${DateTime.now().millisecondsSinceEpoch}';\n    _deviceFingerprint = fingerprint;\n    return fingerprint;",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 58,
    "column": 11,
    "original": "flutter_app_${DateTime.now().millisecondsSinceEpoch}",
    "suggested_key": "uiFlutter_app_datetimenowmillisecondssinceepoch",
    "context": "}\n    final fingerprint = kIsWeb \n        ? 'web_browser_${DateTime.now().millisecondsSinceEpoch}'\n        : 'flutter_app_${DateTime.now().millisecondsSinceEpoch}';\n    _deviceFingerprint = fingerprint;\n    return fingerprint;\n  }",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 65,
    "column": 7,
    "original": "Content-Type",
    "suggested_key": "uiContenttype",
    "context": "Map<String, String> get _headers {\n    final headers = <String, String>{\n      'Content-Type': 'application/json',\n      'X-Device-Fingerprint': deviceFingerprint,\n      'X-Client-Timezone': 'Europe/Berlin',\n      'X-Client-Time': DateTime.now().millisecondsSinceEpoch.toString(),",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 66,
    "column": 7,
    "original": "X-Device-Fingerprint",
    "suggested_key": "uiXdevicefingerprint",
    "context": "Map<String, String> get _headers {\n    final headers = <String, String>{\n      'Content-Type': 'application/json',\n      'X-Device-Fingerprint': deviceFingerprint,\n      'X-Client-Timezone': 'Europe/Berlin',\n      'X-Client-Time': DateTime.now().millisecondsSinceEpoch.toString(),\n    };",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 67,
    "column": 7,
    "original": "X-Client-Timezone",
    "suggested_key": "uiXclienttimezone",
    "context": "final headers = <String, String>{\n      'Content-Type': 'application/json',\n      'X-Device-Fingerprint': deviceFingerprint,\n      'X-Client-Timezone': 'Europe/Berlin',\n      'X-Client-Time': DateTime.now().millisecondsSinceEpoch.toString(),\n    };",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 67,
    "column": 28,
    "original": "Europe/Berlin",
    "suggested_key": "uiEuropeberlin",
    "context": "final headers = <String, String>{\n      'Content-Type': 'application/json',\n      'X-Device-Fingerprint': deviceFingerprint,\n      'X-Client-Timezone': 'Europe/Berlin',\n      'X-Client-Time': DateTime.now().millisecondsSinceEpoch.toString(),\n    };",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 172,
    "column": 21,
    "original": "${Env.apiUrl}${Env.apiBasePath}$endpoint",
    "suggested_key": "uiEnvapiurlenvapibasepathendpoint",
    "context": "switch (method) {\n      case 'GET':\n        return await http.get(\n          Uri.parse('${Env.apiUrl}${Env.apiBasePath}$endpoint'),\n          headers: _headers,\n        );\n      case 'POST':",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 175,
    "column": 17,
    "original": ":\n        final cachedBody = _requestBodies[endpoint];\n        if (cachedBody != null) {\n          return await http.post(\n            Uri.parse(",
    "suggested_key": "uiFinalCachedbody_requestbodiesendpoint",
    "context": "Uri.parse('${Env.apiUrl}${Env.apiBasePath}$endpoint'),\n          headers: _headers,\n        );\n      case 'POST':\n        final cachedBody = _requestBodies[endpoint];\n        if (cachedBody != null) {\n          return await http.post(",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 179,
    "column": 64,
    "original": "),\n            headers: _headers,\n            body: jsonEncode(cachedBody),\n          );\n        }\n        break;\n      case ",
    "suggested_key": "uiHeaders_headersBody",
    "context": "final cachedBody = _requestBodies[endpoint];\n        if (cachedBody != null) {\n          return await http.post(\n            Uri.parse('${Env.apiUrl}${Env.apiBasePath}$endpoint'),\n            headers: _headers,\n            body: jsonEncode(cachedBody),\n          );",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 185,
    "column": 16,
    "original": ":\n        final cachedBody = _requestBodies[endpoint];\n        if (cachedBody != null) {\n          return await http.put(\n            Uri.parse(",
    "suggested_key": "uiFinalCachedbody_requestbodiesendpoint",
    "context": ");\n        }\n        break;\n      case 'PUT':\n        final cachedBody = _requestBodies[endpoint];\n        if (cachedBody != null) {\n          return await http.put(",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 189,
    "column": 64,
    "original": "),\n            headers: _headers,\n            body: jsonEncode(cachedBody),\n          );\n        }\n        break;\n      case ",
    "suggested_key": "uiHeaders_headersBody",
    "context": "final cachedBody = _requestBodies[endpoint];\n        if (cachedBody != null) {\n          return await http.put(\n            Uri.parse('${Env.apiUrl}${Env.apiBasePath}$endpoint'),\n            headers: _headers,\n            body: jsonEncode(cachedBody),\n          );",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 195,
    "column": 19,
    "original": ":\n        return await http.delete(\n          Uri.parse(",
    "suggested_key": "uiReturnAwaitHttpdelete",
    "context": ");\n        }\n        break;\n      case 'DELETE':\n        return await http.delete(\n          Uri.parse('${Env.apiUrl}${Env.apiBasePath}$endpoint'),\n          headers: _headers,",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 197,
    "column": 62,
    "original": "),\n          headers: _headers,\n        );\n    }\n    return http.Response(",
    "suggested_key": "uiHeaders_headersReturn",
    "context": "break;\n      case 'DELETE':\n        return await http.delete(\n          Uri.parse('${Env.apiUrl}${Env.apiBasePath}$endpoint'),\n          headers: _headers,\n        );\n    }",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 201,
    "column": 47,
    "original": ", 500);\n  }\n\n  Future<http.Response> deleteWithBody(String endpoint, Map<String, dynamic> data) async {\n    await _ensureInitialized();\n    \n    // Erweiterte Request-Kontext-Verwaltung für parallele Requests\n    _requestBodies[endpoint] = data;\n    \n    // Automatische Token-Validierung für geschützte Endpoints\n    if (!endpoint.startsWith(",
    "suggested_key": "ui500FuturehttpresponseDeletewithbodystring",
    "context": "headers: _headers,\n        );\n    }\n    return http.Response('Request retry failed', 500);\n  }\n\n  Future<http.Response> deleteWithBody(String endpoint, Map<String, dynamic> data) async {",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 255,
    "column": 63,
    "original": " : body;\n    }\n    return body;\n  }\n\n\n  Future<http.Response> get(String endpoint) async {\n    await _ensureInitialized();\n    \n    // Log API Request\n    AppLogger.logApiRequest(",
    "suggested_key": "uiBodyReturnBody",
    "context": "}\n    } catch (e) {\n      // If JSON parsing fails, return truncated body\n      return body.length > 100 ? '${body.substring(0, 100)}...' : body;\n    }\n    return body;\n  }",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 274,
    "column": 60,
    "original": "),\n        headers: _headers,\n      );\n      \n      // Log API Response\n      AppLogger.logApiResponse(",
    "suggested_key": "uiHeaders_headersLog",
    "context": "try {\n      final response = await http.get(\n        Uri.parse('${Env.apiUrl}${Env.apiBasePath}$endpoint'),\n        headers: _headers,\n      );",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 312,
    "column": 60,
    "original": "),\n        headers: _headers,\n        body: jsonEncode(data),\n      );\n      \n      // Log API Response (ohne sensitive Response-Daten)\n      final logResponseBody = endpoint.startsWith(",
    "suggested_key": "uiHeaders_headersBody",
    "context": "try {\n      final response = await http.post(\n        Uri.parse('${Env.apiUrl}${Env.apiBasePath}$endpoint'),\n        headers: _headers,\n        body: jsonEncode(data),\n      );",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 345,
    "column": 60,
    "original": "),\n        headers: _headers,\n        body: jsonEncode(data),\n      );\n      \n      // Log API Response\n      AppLogger.logApiResponse(",
    "suggested_key": "uiHeaders_headersBody",
    "context": "try {\n      final response = await http.put(\n        Uri.parse('${Env.apiUrl}${Env.apiBasePath}$endpoint'),\n        headers: _headers,\n        body: jsonEncode(data),\n      );",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 374,
    "column": 60,
    "original": "),\n        headers: _headers,\n      );\n      \n      // Log API Response\n      AppLogger.logApiResponse(",
    "suggested_key": "uiHeaders_headersLog",
    "context": "try {\n      final response = await http.delete(\n        Uri.parse('${Env.apiUrl}${Env.apiBasePath}$endpoint'),\n        headers: _headers,\n      );",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\token_storage.dart",
    "line": 1,
    "column": 8,
    "original": "package:flutter/foundation.dart",
    "suggested_key": "uiPackageflutterfoundationdart",
    "context": "import 'package:flutter/foundation.dart' show kIsWeb;\nimport 'package:flutter_secure_storage/flutter_secure_storage.dart';\nimport 'package:shared_preferences/shared_preferences.dart';",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\forgot_password_page.dart",
    "line": 155,
    "column": 31,
    "original": "Gib deine E-Mail-Adresse ein und wir senden dir einen Link zum Zurücksetzen deines Passworts.",
    "suggested_key": "uiGibDeineEmailadresse",
    "context": "const SizedBox(height: 8),\n                            \n                            Text(\n                              'Gib deine E-Mail-Adresse ein und wir senden dir einen Link zum Zurücksetzen deines Passworts.',\n                              style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                                color: Colors.grey[300],\n                                fontSize: 14,",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\forgot_password_page.dart",
    "line": 181,
    "column": 41,
    "original": "E-Mail gesendet! Bitte überprüfe deinen Posteingang.",
    "suggested_key": "uiEmailGesendetBitte",
    "context": "const SizedBox(width: 8),\n                                    Expanded(\n                                      child: Text(\n                                        'E-Mail gesendet! Bitte überprüfe deinen Posteingang.',\n                                        style: TextStyle(color: Colors.green[200], fontSize: 14),\n                                      ),\n                                    ),",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\login_page.dart",
    "line": 597,
    "column": 25,
    "original": "Anmeldung läuft...",
    "suggested_key": "uiAnmeldungLäuft",
    "context": "),\n                      SizedBox(height: 16),\n                      Text(\n                        'Anmeldung läuft...',\n                        style: TextStyle(\n                          color: Colors.white,\n                          fontSize: 16,",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 191,
    "column": 46,
    "original": "Passwort erfolgreich geändert!",
    "suggested_key": "uiPasswortErfolgreichGeändert",
    "context": "const SizedBox(height: 20),\n                              \n                              Text(\n                                _isSuccess ? 'Passwort erfolgreich geändert!' : 'Neues Passwort festlegen',\n                                style: Theme.of(context).textTheme.headlineMedium?.copyWith(\n                                  color: Colors.white,\n                                  fontWeight: FontWeight.bold,",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 202,
    "column": 37,
    "original": "Du wirst automatisch zur Anmeldung weitergeleitet...",
    "suggested_key": "uiDuWirstAutomatisch",
    "context": "Text(\n                                _isSuccess \n                                  ? 'Du wirst automatisch zur Anmeldung weitergeleitet...'\n                                  : 'Bitte gib dein neues Passwort ein.',\n                                style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                                  color: Colors.grey[300],",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\auth\\reset_password_page.dart",
    "line": 203,
    "column": 37,
    "original": "Bitte gib dein neues Passwort ein.",
    "suggested_key": "uiBitteGibDein",
    "context": "Text(\n                                _isSuccess \n                                  ? 'Du wirst automatisch zur Anmeldung weitergeleitet...'\n                                  : 'Bitte gib dein neues Passwort ein.',\n                                style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                                  color: Colors.grey[300],\n                                  fontSize: 14,",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\dashboard\\dashboard_page.dart",
    "line": 1,
    "column": 8,
    "original": "package:flutter/material.dart",
    "suggested_key": "uiPackagefluttermaterialdart",
    "context": "import 'package:flutter/material.dart';\nimport '../../theme/app_theme.dart';\nimport '../../theme/background_widget.dart';\nimport '../../shared/widgets/user_info_widget.dart';",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\dashboard\\dashboard_page.dart",
    "line": 110,
    "column": 83,
    "original": ",\n                                      style: TextStyle(\n                                        color: Colors.grey[300],\n                                        fontSize: 16,\n                                      ),\n                                    ),\n                                  ),\n                                ],\n                              ),\n                            ),\n                          ],\n                        ),\n                      ),\n                    ),\n                  ),\n                ),\n              ),\n            ),\n            \n            // User info widget in top-left corner\n            const UserInfoWidget(),\n            \n            // Navigation widget in top-right corner\n            NavigationWidget(\n              currentRoute: ",
    "suggested_key": "uiStyleTextstyleColor",
    "context": "const SizedBox(width: 12),\n                                  Expanded(\n                                    child: Text(\n                                      'Das Dashboard befindet sich noch im Aufbau.',\n                                      style: TextStyle(\n                                        color: Colors.grey[300],\n                                        fontSize: 16,",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 289,
    "column": 79,
    "original": ",\n                                            style: TextStyle(\n                                              color: AppTheme.primaryColor.withOpacity(0.9),\n                                              fontSize: 14,\n                                              fontWeight: FontWeight.w500,\n                                            ),\n                                          ),\n                                        ),\n                                        \n                                        const SizedBox(height: 48),\n                                        \n                                        // CTA Buttons with enhanced styling\n                                        Column(\n                                          children: [\n                                            // Primary CTA - Register\n                                            MouseRegion(\n                                              cursor: SystemMouseCursors.click,\n                                              child: AnimatedContainer(\n                                                duration: const Duration(milliseconds: 200),\n                                                width: double.infinity,\n                                                height: 60,\n                                                decoration: BoxDecoration(\n                                                  gradient: LinearGradient(\n                                                    colors: [\n                                                      AppTheme.primaryColor,\n                                                      AppTheme.primaryColor.withBlue(255),\n                                                    ],\n                                                  ),\n                                                  borderRadius: BorderRadius.circular(16),\n                                                  boxShadow: [\n                                                    BoxShadow(\n                                                      color: AppTheme.primaryColor.withOpacity(0.4),\n                                                      blurRadius: 20,\n                                                      offset: const Offset(0, 8),\n                                                    ),\n                                                  ],\n                                                ),\n                                                child: ElevatedButton(\n                                                  onPressed: () => context.goNamed(",
    "suggested_key": "uiStyleTextstyleColor",
    "context": "borderRadius: BorderRadius.circular(20),\n                                          ),\n                                          child: Text(\n                                            '🎮 Spiele • 🌍 Erkunde • 🤝 Verbinde',\n                                            style: TextStyle(\n                                              color: AppTheme.primaryColor.withOpacity(0.9),\n                                              fontSize: 14,",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 348,
    "column": 85,
    "original": ",\n                                                            style: TextStyle(\n                                                              color: Colors.white,\n                                                              fontSize: 18,\n                                                              fontWeight: FontWeight.bold,\n                                                            ),\n                                                          ),\n                                                          Text(\n                                                            ",
    "suggested_key": "uiStyleTextstyleColor",
    "context": "mainAxisAlignment: MainAxisAlignment.center,\n                                                        children: [\n                                                          const Text(\n                                                            'Jetzt kostenlos starten',\n                                                            style: TextStyle(\n                                                              color: Colors.white,\n                                                              fontSize: 18,",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 356,
    "column": 92,
    "original": ",\n                                                            style: TextStyle(\n                                                              color: Colors.white.withOpacity(0.8),\n                                                              fontSize: 12,\n                                                            ),\n                                                          ),\n                                                        ],\n                                                      ),\n                                                    ],\n                                                  ),\n                                                ),\n                                              ),\n                                            ),\n                                            \n                                            const SizedBox(height: 16),\n                                            \n                                            // Secondary CTA - Login\n                                            Container(\n                                              width: double.infinity,\n                                              height: 56,\n                                              decoration: BoxDecoration(\n                                                color: const Color(0xFF2D2D2D),\n                                                borderRadius: BorderRadius.circular(16),\n                                                border: Border.all(\n                                                  color: AppTheme.primaryColor.withOpacity(0.5),\n                                                  width: 2,\n                                                ),\n                                              ),\n                                              child: ElevatedButton.icon(\n                                                onPressed: () => context.goNamed(",
    "suggested_key": "uiStyleTextstyleColor",
    "context": "),\n                                                          ),\n                                                          Text(\n                                                            'Keine Kreditkarte erforderlich',\n                                                            style: TextStyle(\n                                                              color: Colors.white.withOpacity(0.8),\n                                                              fontSize: 12,",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 428,
    "column": 75,
    "original": "),\n                                          ],\n                                        ),\n                                      ],\n                                    ),\n                                  ),\n                                ),\n                              ),\n                            ),\n                          ),\n                        ),\n                      ),\n                    ),\n                  ),\n                ),\n                \n                // Scroll indicator\n                if (_showFeatures)\n                  FadeTransition(\n                    opacity: _featureAnimation,\n                    child: Container(\n                      padding: const EdgeInsets.only(bottom: 20),\n                      child: Column(\n                        children: [\n                          Text(\n                            ",
    "suggested_key": "uiScrollIndicatorIf",
    "context": "width: 1,\n                                              color: Colors.grey[700],\n                                            ),\n                                            _buildStatItem('24/7', 'Online'),\n                                          ],\n                                        ),\n                                      ],",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 453,
    "column": 43,
    "original": ",\n                            style: TextStyle(\n                              color: Colors.grey[400],\n                              fontSize: 14,\n                            ),\n                          ),\n                          const SizedBox(height: 8),\n                          const Icon(\n                            Icons.expand_more,\n                            color: AppTheme.primaryColor,\n                            size: 30,\n                          ),\n                        ],\n                      ),\n                    ),\n                  ),\n                \n                // Features Section\n                if (_showFeatures)\n                  FadeTransition(\n                    opacity: _featureAnimation,\n                    child: Container(\n                      padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 60),\n                      child: Column(\n                        children: [\n                          const Text(\n                            ",
    "suggested_key": "uiStyleTextstyleColor",
    "context": "child: Column(\n                        children: [\n                          Text(\n                            'Entdecke mehr',\n                            style: TextStyle(\n                              color: Colors.grey[400],\n                              fontSize: 14,",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 489,
    "column": 65,
    "original": ",\n                            style: TextStyle(\n                              fontSize: 18,\n                              color: Colors.grey[300],\n                            ),\n                            textAlign: TextAlign.center,\n                          ),\n                          const SizedBox(height: 60),\n                          \n                          // Feature Grid\n                          LayoutBuilder(\n                            builder: (context, constraints) {\n                              final crossAxisCount = constraints.maxWidth > 800 ? 3 : \n                                                    constraints.maxWidth > 500 ? 2 : 1;\n                              return GridView.count(\n                                shrinkWrap: true,\n                                physics: const NeverScrollableScrollPhysics(),\n                                crossAxisCount: crossAxisCount,\n                                mainAxisSpacing: 24,\n                                crossAxisSpacing: 24,\n                                childAspectRatio: 1.2,\n                                children: [\n                                  _buildFeatureCard(\n                                    icon: Icons.public,\n                                    title: ",
    "suggested_key": "uiStyleTextstyleFontsize",
    "context": "),\n                          const SizedBox(height: 16),\n                          Text(\n                            'Erlebe Gaming auf einem neuen Level',\n                            style: TextStyle(\n                              fontSize: 18,\n                              color: Colors.grey[300],",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 525,
    "column": 58,
    "original": ",\n                                    description: ",
    "suggested_key": "uiDescription",
    "context": "),\n                                  _buildFeatureCard(\n                                    icon: Icons.security,\n                                    title: 'Sicher & Fair',\n                                    description: 'Modernste Sicherheit und faire Spielregeln für alle',\n                                    color: Colors.orange,\n                                  ),",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: Card",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 531,
    "column": 57,
    "original": ",\n                                    description: ",
    "suggested_key": "uiDescription",
    "context": "),\n                                  _buildFeatureCard(\n                                    icon: Icons.speed,\n                                    title: 'Blitzschnell',\n                                    description: 'Optimierte Server für minimale Latenz',\n                                    color: Colors.purple,\n                                  ),",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: Card",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 532,
    "column": 88,
    "original": ",\n                                    color: Colors.purple,\n                                  ),\n                                  _buildFeatureCard(\n                                    icon: Icons.devices,\n                                    title: ",
    "suggested_key": "uiColorColorspurple_buildfeaturecard",
    "context": "_buildFeatureCard(\n                                    icon: Icons.speed,\n                                    title: 'Blitzschnell',\n                                    description: 'Optimierte Server für minimale Latenz',\n                                    color: Colors.purple,\n                                  ),\n                                  _buildFeatureCard(",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: Card",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 537,
    "column": 60,
    "original": ",\n                                    description: ",
    "suggested_key": "uiDescription",
    "context": "),\n                                  _buildFeatureCard(\n                                    icon: Icons.devices,\n                                    title: 'Überall spielen',\n                                    description: 'Auf PC, Tablet oder Smartphone - immer dabei',\n                                    color: Colors.red,\n                                  ),",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: Card",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 544,
    "column": 50,
    "original": "Sammle Erfolge und exklusive Belohnungen",
    "suggested_key": "uiSammleErfolgeUnd",
    "context": "_buildFeatureCard(\n                                    icon: Icons.star,\n                                    title: 'Belohnungen',\n                                    description: 'Sammle Erfolge und exklusive Belohnungen',\n                                    color: Colors.amber,\n                                  ),\n                                ],",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: Card",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 572,
    "column": 35,
    "original": "Bereit für dein Abenteuer?",
    "suggested_key": "uiBereitFürDein",
    "context": "child: Column(\n                              children: [\n                                const Text(\n                                  'Bereit für dein Abenteuer?',\n                                  style: TextStyle(\n                                    fontSize: 28,\n                                    fontWeight: FontWeight.bold,",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\world\\world_list_page.dart",
    "line": 731,
    "column": 41,
    "original": "Versuche andere Filter-Einstellungen.",
    "suggested_key": "uiVersucheAndereFiltereinstellungen",
    "context": "),\n                                      const SizedBox(height: 8),\n                                      Text(\n                                        'Versuche andere Filter-Einstellungen.',\n                                        style: Theme.of(context).textTheme.bodyMedium?.copyWith(\n                                          color: Colors.grey[400],\n                                        ),",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\main.dart",
    "line": 1,
    "column": 8,
    "original": "package:flutter/material.dart",
    "suggested_key": "uiPackagefluttermaterialdart",
    "context": "import 'package:flutter/material.dart';\nimport 'package:flutter/services.dart';\nimport 'package:flutter/foundation.dart';\nimport 'app.dart';",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\main.dart",
    "line": 2,
    "column": 8,
    "original": "package:flutter/services.dart",
    "suggested_key": "uiPackageflutterservicesdart",
    "context": "import 'package:flutter/material.dart';\nimport 'package:flutter/services.dart';\nimport 'package:flutter/foundation.dart';\nimport 'app.dart';\nimport 'config/logger.dart';",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\main.dart",
    "line": 3,
    "column": 8,
    "original": "package:flutter/foundation.dart",
    "suggested_key": "uiPackageflutterfoundationdart",
    "context": "import 'package:flutter/material.dart';\nimport 'package:flutter/services.dart';\nimport 'package:flutter/foundation.dart';\nimport 'app.dart';\nimport 'config/logger.dart';",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\main.dart",
    "line": 5,
    "column": 8,
    "original": "config/logger.dart",
    "suggested_key": "uiConfigloggerdart",
    "context": "import 'package:flutter/services.dart';\nimport 'package:flutter/foundation.dart';\nimport 'app.dart';\nimport 'config/logger.dart';\n\n// Service-Container für Dependency Injection\nclass ServiceLocator {",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\main.dart",
    "line": 66,
    "column": 25,
    "original": ",\n      },\n    );\n    return true; // Handled\n  };\n\n  // Set preferred orientations\n  await SystemChrome.setPreferredOrientations([\n    DeviceOrientation.portraitUp,\n    DeviceOrientation.portraitDown,\n  ]);\n\n  AppLogger.app.i(",
    "suggested_key": "uiReturnTrueHandled",
    "context": "stackTrace: stack,\n      context: {\n        'type': 'dart_unhandled',\n        'isolate': 'main',\n      },\n    );\n    return true; // Handled",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 427,
    "column": 42,
    "original": ",\n                    style: Theme.of(context).textTheme.headlineMedium?.copyWith(\n                      color: AppTheme.textPrimary,\n                      fontWeight: FontWeight.bold,\n                    ),\n                  ),\n                  const SizedBox(height: 16),\n                  Text(\n                    ",
    "suggested_key": "uiStyleThemeofcontexttextthemeheadlinemediumcopywithColor",
    "context": "),\n                  const SizedBox(height: 24),\n                  Text(\n                    'Seite nicht gefunden',\n                    style: Theme.of(context).textTheme.headlineMedium?.copyWith(\n                      color: AppTheme.textPrimary,\n                      fontWeight: FontWeight.bold,",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 435,
    "column": 83,
    "original": ",\n                    style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                      color: AppTheme.textSecondary,\n                    ),\n                    textAlign: TextAlign.center,\n                  ),\n                  const SizedBox(height: 32),\n                  Row(\n                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n                    children: [\n                      ElevatedButton.icon(\n                        onPressed: () => context.goNamed(",
    "suggested_key": "uiStyleThemeofcontexttextthemebodylargecopywithColor",
    "context": "),\n                  const SizedBox(height: 16),\n                  Text(\n                    'Die angeforderte Seite existiert nicht oder wurde verschoben.',\n                    style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                      color: AppTheme.textSecondary,\n                    ),",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 510,
    "column": 40,
    "original": ",\n                    style: Theme.of(context).textTheme.headlineMedium?.copyWith(\n                      color: AppTheme.textPrimary,\n                      fontWeight: FontWeight.bold,\n                    ),\n                  ),\n                  const SizedBox(height: 16),\n                  Text(\n                    ",
    "suggested_key": "uiStyleThemeofcontexttextthemeheadlinemediumcopywithColor",
    "context": "),\n                  const SizedBox(height: 24),\n                  Text(\n                    'Zugriff verweigert',\n                    style: Theme.of(context).textTheme.headlineMedium?.copyWith(\n                      color: AppTheme.textPrimary,\n                      fontWeight: FontWeight.bold,",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 518,
    "column": 77,
    "original": ",\n                    style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                      color: AppTheme.textSecondary,\n                    ),\n                    textAlign: TextAlign.center,\n                  ),\n                  const SizedBox(height: 32),\n                  ElevatedButton.icon(\n                    onPressed: () => context.goNamed(",
    "suggested_key": "uiStyleThemeofcontexttextthemebodylargecopywithColor",
    "context": "),\n                  const SizedBox(height: 16),\n                  Text(\n                    'Du musst dich anmelden, um auf diese Seite zuzugreifen.',\n                    style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                      color: AppTheme.textSecondary,\n                    ),",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\loading_page.dart",
    "line": 1,
    "column": 8,
    "original": "package:flutter/material.dart",
    "suggested_key": "uiPackagefluttermaterialdart",
    "context": "import 'package:flutter/material.dart';\n\nclass LoadingPage extends StatelessWidget {\n  const LoadingPage({super.key});",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\navigation_widget.dart",
    "line": 210,
    "column": 31,
    "original": ",\n                  style: TextStyle(\n                    color: Colors.grey[400],\n                    fontSize: 12,\n                  ),\n                ),\n              ],\n            ),\n            const SizedBox(width: 12),\n            Icon(\n              Icons.keyboard_arrow_down,\n              color: Colors.grey[400],\n              size: 24,\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n  \n  Widget _buildExpandedView(List<NavigationItem> items) {\n    return Column(\n      mainAxisSize: MainAxisSize.min,\n      crossAxisAlignment: CrossAxisAlignment.start,\n      children: [\n        // Header\n        InkWell(\n          onTap: _toggleExpanded,\n          borderRadius: const BorderRadius.only(\n            topLeft: Radius.circular(16),\n            topRight: Radius.circular(16),\n          ),\n          child: Padding(\n            padding: const EdgeInsets.all(12.0),\n            child: Row(\n              mainAxisSize: MainAxisSize.min,\n              children: [\n                Container(\n                  width: 36,\n                  height: 36,\n                  decoration: BoxDecoration(\n                    color: AppTheme.primaryColor.withOpacity(0.2),\n                    shape: BoxShape.circle,\n                  ),\n                  child: const Icon(\n                    Icons.explore,\n                    color: AppTheme.primaryColor,\n                    size: 20,\n                  ),\n                ),\n                const SizedBox(width: 12),\n                const Text(\n                  ",
    "suggested_key": "uiStyleTextstyleColor",
    "context": "),\n                ),\n                Text(\n                  'Menü öffnen',\n                  style: TextStyle(\n                    color: Colors.grey[400],\n                    fontSize: 12,",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\pre_register_dialog.dart",
    "line": 43,
    "column": 27,
    "original": "Vorregistrierung erfolgreich!",
    "suggested_key": "uiVorregistrierungErfolgreich",
    "context": "Navigator.of(context).pop(true);\n        ScaffoldMessenger.of(context).showSnackBar(\n          const SnackBar(\n            content: Text('Vorregistrierung erfolgreich!'),\n            backgroundColor: Colors.green,\n          ),\n        );",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: Scaffold",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\splash_screen.dart",
    "line": 1,
    "column": 8,
    "original": "package:flutter/material.dart",
    "suggested_key": "uiPackagefluttermaterialdart",
    "context": "import 'package:flutter/material.dart';\nimport '../../config/logger.dart';\n\nclass SplashScreen extends StatefulWidget {",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\splash_screen.dart",
    "line": 2,
    "column": 8,
    "original": "../../config/logger.dart",
    "suggested_key": "uiConfigloggerdart",
    "context": "import 'package:flutter/material.dart';\nimport '../../config/logger.dart';\n\nclass SplashScreen extends StatefulWidget {\n  final Future<void> Function() initializationFunction;",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\splash_screen.dart",
    "line": 60,
    "column": 29,
    "original": "⏰ SplashScreen Initialisierung timeout",
    "suggested_key": "uiSplashscreenInitialisierungTimeout",
    "context": "final result = await Future.any([\n          _runInitializationWithSteps().then((_) => 'success'),\n          Future.delayed(timeout).then((_) {\n            AppLogger.app.w('⏰ SplashScreen Initialisierung timeout');\n            return 'timeout';\n          }),\n        ]);",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\splash_screen.dart",
    "line": 61,
    "column": 28,
    "original": ";\n          }),\n        ]);\n        \n        if (result == ",
    "suggested_key": "uiIfResult",
    "context": "_runInitializationWithSteps().then((_) => 'success'),\n          Future.delayed(timeout).then((_) {\n            AppLogger.app.w('⏰ SplashScreen Initialisierung timeout');\n            return 'timeout';\n          }),\n        ]);",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\splash_screen.dart",
    "line": 65,
    "column": 31,
    "original": ") {\n          _timedOut = true;\n          final onTimeout = widget.onTimeout;\n          if (onTimeout != null) {\n            onTimeout();\n          }\n        }\n      } else {\n        await _runInitializationWithSteps();\n      }\n      \n      if (mounted) {\n        setState(() {\n          _isInitialized = true;\n        });\n        \n        // Kurze Verzögerung für smooth Transition\n        await Future.delayed(const Duration(milliseconds: 500));\n        \n        // KEIN reverse() mehr - das hat die App ausgeblendet!\n        // _animationController.reverse(); // ENTFERNT\n      }\n    } catch (e) {\n      AppLogger.logError(",
    "suggested_key": "ui_timedoutTrueFinal",
    "context": "}),\n        ]);\n        \n        if (result == 'timeout') {\n          _timedOut = true;\n          final onTimeout = widget.onTimeout;\n          if (onTimeout != null) {",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\splash_screen.dart",
    "line": 174,
    "column": 37,
    "original": ",\n              style: const TextStyle(\n                fontSize: 32,\n                fontWeight: FontWeight.bold,\n                color: Colors.white,\n              ),\n            ),\n            \n            const SizedBox(height: 20),\n            \n            // Progress Indicator mit Steps\n            if (initSteps != null && initSteps.isNotEmpty) ...[\n              // Progress Bar\n              Container(\n                width: 200,\n                height: 4,\n                decoration: BoxDecoration(\n                  color: Colors.white.withOpacity(0.3),\n                  borderRadius: BorderRadius.circular(2),\n                ),\n                child: FractionallySizedBox(\n                  alignment: Alignment.centerLeft,\n                  widthFactor: (_currentStepIndex + 1) / initSteps.length,\n                  child: Container(\n                    decoration: BoxDecoration(\n                      color: Colors.white,\n                      borderRadius: BorderRadius.circular(2),\n                    ),\n                  ),\n                ),\n              ),\n              \n              const SizedBox(height: 10),\n              \n              // Current Step Text\n              if (_currentStepName != null)\n                Text(\n                  _currentStepName ?? ",
    "suggested_key": "uiStyleConstTextstyle",
    "context": "// App Name\n            Text(\n              widget.appName ?? 'App',\n              style: const TextStyle(\n                fontSize: 32,\n                fontWeight: FontWeight.bold,",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\splash_screen.dart",
    "line": 211,
    "column": 56,
    "original": ",\n                  style: const TextStyle(\n                    fontSize: 14,\n                    color: Colors.white70,\n                  ),\n                ),\n              \n              const SizedBox(height: 20),\n            ] else ...[\n              // Standard Loading Indicator\n              const CircularProgressIndicator(\n                valueColor: AlwaysStoppedAnimation<Color>(Colors.white),\n              ),\n            ],\n            \n            if (loadingText != null) ...[\n              const SizedBox(height: 20),\n              Text(\n                loadingText,\n                style: const TextStyle(\n                  fontSize: 16,\n                  color: Colors.white70,\n                ),\n              ),\n            ],\n            \n            // Timeout Warning\n            if (_timedOut) ...[\n              const SizedBox(height: 20),\n              Container(\n                padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),\n                decoration: BoxDecoration(\n                  color: Colors.orange.withOpacity(0.2),\n                  borderRadius: BorderRadius.circular(20),\n                  border: Border.all(color: Colors.orange.withOpacity(0.5)),\n                ),\n                child: const Text(\n                  ",
    "suggested_key": "uiStyleConstTextstyle",
    "context": "// Current Step Text\n              if (_currentStepName != null)\n                Text(\n                  _currentStepName ?? 'Initialisiere...',\n                  style: const TextStyle(\n                    fontSize: 14,\n                    color: Colors.white70,",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\splash_screen.dart",
    "line": 248,
    "column": 65,
    "original": ",\n                  style: TextStyle(\n                    fontSize: 12,\n                    color: Colors.orange,\n                  ),\n                ),\n              ),\n            ],\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildErrorScreen() {\n    return Scaffold(\n      backgroundColor: Colors.red.shade50,\n      body: Center(\n        child: Padding(\n          padding: const EdgeInsets.all(20),\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: [\n              Icon(\n                Icons.error_outline,\n                size: 80,\n                color: Colors.red.shade400,\n              ),\n              \n              const SizedBox(height: 20),\n              \n              const Text(\n                ",
    "suggested_key": "uiStyleTextstyleFontsize",
    "context": "border: Border.all(color: Colors.orange.withOpacity(0.5)),\n                ),\n                child: const Text(\n                  'Initialisierung dauert länger als erwartet...',\n                  style: TextStyle(\n                    fontSize: 12,\n                    color: Colors.orange,",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\user_info_widget.dart",
    "line": 179,
    "column": 57,
    "original": ",\n                                    style: TextStyle(\n                                      color: Colors.grey[400],\n                                      fontSize: 12,\n                                    ),\n                                  ),\n                              ],\n                            ),\n                          ),\n                          // Expand/Collapse Icon\n                          Icon(\n                            _isExpanded ? Icons.expand_less : Icons.expand_more,\n                            color: Colors.grey[400],\n                            size: 20,\n                          ),\n                        ],\n                      ),\n                      \n                      // Erweiterte Details\n                      if (_isExpanded) ...[\n                        const SizedBox(height: 12),\n                        const Divider(color: Colors.grey, height: 1),\n                        const SizedBox(height: 12),\n                        \n                        // Email\n                        Row(\n                          children: [\n                            Icon(Icons.email_outlined, size: 16, color: Colors.grey[400]),\n                            const SizedBox(width: 8),\n                            Expanded(\n                              child: Text(\n                                user.email,\n                                style: TextStyle(\n                                  color: Colors.grey[300],\n                                  fontSize: 14,\n                                ),\n                                overflow: TextOverflow.ellipsis,\n                              ),\n                            ),\n                          ],\n                        ),\n                        \n                        const SizedBox(height: 8),\n                        \n                                            // Rollen\n                    if (user.roles != null && user.roles!.isNotEmpty) ...[\n                      Row(\n                        children: [\n                          Icon(Icons.security, size: 16, color: Colors.grey[400]),\n                          const SizedBox(width: 8),\n                          Text(\n                            ",
    "suggested_key": "uiStyleTextstyleColor",
    "context": "),\n                                if (!_isExpanded)\n                                  Text(\n                                    'Klicken für Details',\n                                    style: TextStyle(\n                                      color: Colors.grey[400],\n                                      fontSize: 12,",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\user_info_widget.dart",
    "line": 230,
    "column": 37,
    "original": ",\n                            style: TextStyle(\n                              color: Colors.grey[400],\n                              fontSize: 14,\n                            ),\n                          ),\n                        ],\n                      ),\n                      const SizedBox(height: 6),\n                      Wrap(\n                        spacing: 6,\n                        runSpacing: 6,\n                        children: (user.roles ?? []).map((userRole) {\n                              final roleName = userRole.role.name;\n                              final scopeInfo = userRole.scopeType == ",
    "suggested_key": "uiStyleTextstyleColor",
    "context": "Icon(Icons.security, size: 16, color: Colors.grey[400]),\n                          const SizedBox(width: 8),\n                          Text(\n                            'Rollen:',\n                            style: TextStyle(\n                              color: Colors.grey[400],\n                              fontSize: 14,",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\user_info_widget.dart",
    "line": 246,
    "column": 37,
    "original": " (${userRole.scopeType})",
    "suggested_key": "uiUserrolescopetype",
    "context": "final roleName = userRole.role.name;\n                              final scopeInfo = userRole.scopeType == 'global' \n                                  ? '' \n                                  : ' (${userRole.scopeType})';\n                              \n                              return Container(\n                                padding: const EdgeInsets.symmetric(",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\user_info_widget.dart",
    "line": 271,
    "column": 39,
    "original": "$roleName$scopeInfo",
    "suggested_key": "uiRolenamescopeinfo",
    "context": "),\n                                    const SizedBox(width: 4),\n                                    Text(\n                                      '$roleName$scopeInfo',\n                                      style: TextStyle(\n                                        color: _getRoleColor(roleName),\n                                        fontSize: 12,",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\theme\\app_theme.dart",
    "line": 1,
    "column": 8,
    "original": "package:flutter/material.dart",
    "suggested_key": "uiPackagefluttermaterialdart",
    "context": "import 'package:flutter/material.dart';\n\nclass AppTheme {\n  // Primary Colors",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\theme\\background_widget.dart",
    "line": 1,
    "column": 8,
    "original": "package:flutter/material.dart",
    "suggested_key": "uiPackagefluttermaterialdart",
    "context": "import 'package:flutter/material.dart';\nimport 'app_theme.dart';\n\nclass BackgroundWidget extends StatelessWidget {",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\theme\\background_widget.dart",
    "line": 2,
    "column": 23,
    "original": ";\n\nclass BackgroundWidget extends StatelessWidget {\n  final Widget child;\n  final bool showOverlay;\n\n  const BackgroundWidget({\n    super.key,\n    required this.child,\n    this.showOverlay = false, // Changed default to false\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      decoration: const BoxDecoration(\n        image: DecorationImage(\n          image: AssetImage(",
    "suggested_key": "uiClassBackgroundwidgetExtends",
    "context": "import 'package:flutter/material.dart';\nimport 'app_theme.dart';\n\nclass BackgroundWidget extends StatelessWidget {\n  final Widget child;",
    "category": "ui",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 42,
    "column": 21,
    "original": "🏗️ WeltenwindApp wird gebaut...",
    "suggested_key": "worldWeltenwindappWirdGebaut",
    "context": "@override\n  Widget build(BuildContext context) {\n    AppLogger.app.d('🏗️ WeltenwindApp wird gebaut...');\n    \n    return SplashScreen(\n      initializationFunction: _initializeApp,",
    "category": "world",
    "confidence": 0.5,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 479,
    "column": 29,
    "original": "Was macht Weltenwind besonders?",
    "suggested_key": "worldWasMachtWeltenwind",
    "context": "child: Column(\n                        children: [\n                          const Text(\n                            'Was macht Weltenwind besonders?',\n                            style: TextStyle(\n                              fontSize: 32,\n                              fontWeight: FontWeight.bold,",
    "category": "world",
    "confidence": 0.5,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 581,
    "column": 35,
    "original": "Schließe dich tausenden Spielern an und starte noch heute!",
    "suggested_key": "worldSchließeDichTausenden",
    "context": "),\n                                const SizedBox(height: 16),\n                                Text(\n                                  'Schließe dich tausenden Spielern an und starte noch heute!',\n                                  style: TextStyle(\n                                    fontSize: 16,\n                                    color: Colors.grey[300],",
    "category": "world",
    "confidence": 0.5,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 633,
    "column": 25,
    "original": "© 2024 Weltenwind. Alle Rechte vorbehalten.",
    "suggested_key": "world2024WeltenwindAlle",
    "context": "child: Column(\n                    children: [\n                      Text(\n                        '© 2024 Weltenwind. Alle Rechte vorbehalten.',\n                        style: TextStyle(\n                          color: Colors.grey[600],\n                          fontSize: 14,",
    "category": "world",
    "confidence": 0.5,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 591,
    "column": 21,
    "original": "Die angeforderte Welt existiert nicht oder wurde entfernt.",
    "suggested_key": "worldDieAngeforderteWelt",
    "context": "),\n                  const SizedBox(height: 16),\n                  Text(\n                    'Die angeforderte Welt existiert nicht oder wurde entfernt.',\n                    style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                      color: AppTheme.textSecondary,\n                    ),",
    "category": "world",
    "confidence": 0.5,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 53,
    "column": 9,
    "original": "Bereit!",
    "suggested_key": "navigationBereit",
    "context": "'Lade Konfiguration...',\n        'Starte Services...',\n        'Prüfe Authentifizierung...',\n        'Bereit!',\n      ],\n      appName: Env.appName,\n      child: MaterialApp.router(",
    "category": "navigation",
    "confidence": 0.45,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 85,
    "column": 30,
    "original": "🚀 Router wird initialisiert...",
    "suggested_key": "navigationRouterWirdInitialisiert",
    "context": "// Router nur einmal initialisieren\n    if (!_isInitialized) {\n      AppLogger.navigation.i('🚀 Router wird initialisiert...');\n      try {\n        _routerInstance = GoRouter(\n          initialLocation: '/go',",
    "category": "navigation",
    "confidence": 0.45,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\app.dart",
    "line": 84,
    "column": 21,
    "original": "🚀 App startet...",
    "suggested_key": "uiAppStartet",
    "context": "// Korrekte Initialisierungsfunktion NACH App-Start\n  Future<void> _initializeApp() async {\n    AppLogger.app.i('🚀 App startet...');\n    \n    // 1. Environment initialisieren\n    await Env.initialize();",
    "category": "ui",
    "confidence": 0.4,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\core\\services\\api_service.dart",
    "line": 255,
    "column": 34,
    "original": "${body.substring(0, 100)}...",
    "suggested_key": "uiBodysubstring0100",
    "context": "}\n    } catch (e) {\n      // If JSON parsing fails, return truncated body\n      return body.length > 100 ? '${body.substring(0, 100)}...' : body;\n    }\n    return body;\n  }",
    "category": "ui",
    "confidence": 0.4,
    "widget_context": "Widget: unknown",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\dashboard\\dashboard_page.dart",
    "line": 110,
    "column": 39,
    "original": "Das Dashboard befindet sich noch im Aufbau.",
    "suggested_key": "uiDasDashboardBefindet",
    "context": "const SizedBox(width: 12),\n                                  Expanded(\n                                    child: Text(\n                                      'Das Dashboard befindet sich noch im Aufbau.',\n                                      style: TextStyle(\n                                        color: Colors.grey[300],\n                                        fontSize: 16,",
    "category": "ui",
    "confidence": 0.4,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\features\\landing\\landing_page.dart",
    "line": 572,
    "column": 35,
    "original": "Bereit für dein Abenteuer?",
    "suggested_key": "uiBereitFürDein",
    "context": "child: Column(\n                              children: [\n                                const Text(\n                                  'Bereit für dein Abenteuer?',\n                                  style: TextStyle(\n                                    fontSize: 28,\n                                    fontWeight: FontWeight.bold,",
    "category": "ui",
    "confidence": 0.4,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 435,
    "column": 21,
    "original": "Die angeforderte Seite existiert nicht oder wurde verschoben.",
    "suggested_key": "uiDieAngeforderteSeite",
    "context": "),\n                  const SizedBox(height: 16),\n                  Text(\n                    'Die angeforderte Seite existiert nicht oder wurde verschoben.',\n                    style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                      color: AppTheme.textSecondary,\n                    ),",
    "category": "ui",
    "confidence": 0.4,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\routing\\app_router.dart",
    "line": 518,
    "column": 21,
    "original": "Du musst dich anmelden, um auf diese Seite zuzugreifen.",
    "suggested_key": "uiDuMusstDich",
    "context": "),\n                  const SizedBox(height: 16),\n                  Text(\n                    'Du musst dich anmelden, um auf diese Seite zuzugreifen.',\n                    style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                      color: AppTheme.textSecondary,\n                    ),",
    "category": "ui",
    "confidence": 0.4,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\splash_screen.dart",
    "line": 211,
    "column": 39,
    "original": "Initialisiere...",
    "suggested_key": "uiInitialisiere",
    "context": "// Current Step Text\n              if (_currentStepName != null)\n                Text(\n                  _currentStepName ?? 'Initialisiere...',\n                  style: const TextStyle(\n                    fontSize: 14,\n                    color: Colors.white70,",
    "category": "ui",
    "confidence": 0.4,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  },
  {
    "file": "lib\\shared\\widgets\\splash_screen.dart",
    "line": 248,
    "column": 19,
    "original": "Initialisierung dauert länger als erwartet...",
    "suggested_key": "uiInitialisierungDauertLänger",
    "context": "border: Border.all(color: Colors.orange.withOpacity(0.5)),\n                ),\n                child: const Text(\n                  'Initialisierung dauert länger als erwartet...',\n                  style: TextStyle(\n                    fontSize: 12,\n                    color: Colors.orange,",
    "category": "ui",
    "confidence": 0.4,
    "widget_context": "Widget: Text",
    "quote_type": "'"
  }
]