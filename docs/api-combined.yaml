openapi: 3.0.3
info:
  title: Weltenwind API
  version: 1.0.0
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Token für Authentifizierung
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
          example: testuser
        email:
          type: string
          example: user@example.com
        roles:
          type: array
          description: Rollen des Benutzers mit Permissions
          items:
            type: object
            properties:
              id:
                type: integer
              userId:
                type: integer
              roleId:
                type: integer
              scopeType:
                type: string
                example: global
              scopeObjectId:
                type: string
                example: global
              condition:
                type: string
                nullable: true
              role:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                    example: user
                  description:
                    type: string
                  permissions:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        permission:
                          type: object
                          properties:
                            id:
                              type: integer
                            name:
                              type: string
                              example: system.view_own
                            description:
                              type: string
    Error:
      type: object
      properties:
        error:
          type: string
        code:
          type: integer
    World:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        status:
          $ref: '#/components/schemas/WorldStatus'
        createdAt:
          type: string
          format: date-time
        startsAt:
          type: string
          format: date-time
        endsAt:
          type: string
          format: date-time
          nullable: true
    WorldStatus:
      type: string
      enum:
        - upcoming
        - open
        - running
        - closed
        - archived
    Player:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        worldId:
          type: integer
        joinedAt:
          type: string
          format: date-time
        leftAt:
          type: string
          format: date-time
          nullable: true
        state:
          type: string
          nullable: true
    WorldInfo:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        status:
          type: string
          enum:
            - upcoming
            - open
            - running
            - closed
            - archived
        createdAt:
          type: string
          format: date-time
        startsAt:
          type: string
          format: date-time
        endsAt:
          type: string
          format: date-time
    InviteInfo:
      type: object
      properties:
        email:
          type: string
          format: email
        createdAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time
        acceptedAt:
          type: string
          format: date-time
          nullable: true
        invitedBy:
          type: object
          nullable: true
          properties:
            username:
              type: string
    UserStatus:
      type: object
      properties:
        status:
          type: string
          enum:
            - not_logged_in
            - user_exists_not_logged_in
            - correct_email
            - wrong_email
        requiresAction:
          type: string
          enum:
            - register
            - login
            - join_world
            - logout_and_register
        currentUser:
          type: object
          nullable: true
          properties:
            username:
              type: string
            email:
              type: string
              format: email
    CreatedInvite:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
          format: email
        token:
          type: string
        worldId:
          type: integer
        expiresAt:
          type: string
          format: date-time
    InviteDetails:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
          format: email
        token:
          type: string
        createdAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time
        acceptedAt:
          type: string
          format: date-time
          nullable: true
        invitedBy:
          type: object
          nullable: true
          properties:
            username:
              type: string
    ThemeData:
      type: object
      description: Vollständige Theme-Definition
      properties:
        name:
          type: string
          description: Theme-Name
          example: Default Weltenwind
        version:
          type: string
          description: Semantic Version
          pattern: ^\\d+\\.\\d+\\.\\d+$
          example: 1.0.0
        description:
          type: string
          description: Theme-Beschreibung
          example: Standard Weltenwind Theme mit mystischer Fantasy-Ästhetik
        colors:
          type: object
          description: Farbdefinitionen
          properties:
            primary:
              $ref: '#/components/schemas/ColorPalette'
            secondary:
              $ref: '#/components/schemas/ColorPalette'
            tertiary:
              $ref: '#/components/schemas/ColorPalette'
            background:
              type: object
              properties:
                surface_dark:
                  type: string
                  pattern: ^#[0-9A-Fa-f]{6}$
                  example: '#1E1E2E'
                surface_darker:
                  type: string
                  pattern: ^#[0-9A-Fa-f]{6}$
                  example: '#141420'
                surface_medium:
                  type: string
                  pattern: ^#[0-9A-Fa-f]{6}$
                  example: '#2A2A3E'
                surface_light:
                  type: string
                  pattern: ^#[0-9A-Fa-f]{6}$
                  example: '#3A3A52'
                surface_white:
                  type: string
                  pattern: ^#[0-9A-Fa-f]{6}$
                  example: '#F8F9FA'
                surface_gray:
                  type: string
                  pattern: ^#[0-9A-Fa-f]{6}$
                  example: '#E9ECEF'
            text:
              type: object
              properties:
                primary:
                  type: string
                  pattern: ^#[0-9A-Fa-f]{6}$
                  example: '#E0E0E0'
                secondary:
                  type: string
                  pattern: ^#[0-9A-Fa-f]{6}$
                  example: '#B0B0B0'
                tertiary:
                  type: string
                  pattern: ^#[0-9A-Fa-f]{6}$
                  example: '#808080'
                disabled:
                  type: string
                  pattern: ^#[0-9A-Fa-f]{6}$
                  example: '#505060'
                primary_light:
                  type: string
                  pattern: ^#[0-9A-Fa-f]{6}$
                  example: '#1F2937'
                secondary_light:
                  type: string
                  pattern: ^#[0-9A-Fa-f]{6}$
                  example: '#6B7280'
            status:
              type: object
              properties:
                success:
                  type: string
                  pattern: ^#[0-9A-Fa-f]{6}$
                  example: '#10B981'
                warning:
                  type: string
                  pattern: ^#[0-9A-Fa-f]{6}$
                  example: '#F59E0B'
                error:
                  type: string
                  pattern: ^#[0-9A-Fa-f]{6}$
                  example: '#EF4444'
                info:
                  type: string
                  pattern: ^#[0-9A-Fa-f]{6}$
                  example: '#3B82F6'
            effects:
              type: object
              properties:
                glow:
                  type: string
                  pattern: ^#[0-9A-Fa-f]{6}$
                  example: '#9D4EDD'
                shimmer:
                  type: string
                  pattern: ^#[0-9A-Fa-f]{6}$
                  example: '#FFD700'
                overlay:
                  type: string
                  pattern: ^#[0-9A-Fa-f]{8}$
                  example: '#80000000'
                glass:
                  type: string
                  pattern: ^#[0-9A-Fa-f]{8}$
                  example: '#1AFFFFFF'
        radius:
          type: object
          description: Border-Radius Werte
          properties:
            default:
              type: number
              minimum: 0
              example: 12
            small:
              type: number
              minimum: 0
              example: 8
            medium:
              type: number
              minimum: 0
              example: 12
            large:
              type: number
              minimum: 0
              example: 16
            xl:
              type: number
              minimum: 0
              example: 24
        spacing:
          type: object
          description: Spacing/Padding Werte
          properties:
            xs:
              type: number
              minimum: 0
              example: 4
            sm:
              type: number
              minimum: 0
              example: 8
            md:
              type: number
              minimum: 0
              example: 16
            lg:
              type: number
              minimum: 0
              example: 24
            xl:
              type: number
              minimum: 0
              example: 32
            xxl:
              type: number
              minimum: 0
              example: 48
        typography:
          type: object
          description: Typografie-Definitionen
          properties:
            heading:
              $ref: '#/components/schemas/TextStyle'
            body:
              $ref: '#/components/schemas/TextStyle'
            caption:
              $ref: '#/components/schemas/TextStyle'
        shadows:
          type: object
          description: Schatten-Definitionen
          properties:
            small:
              $ref: '#/components/schemas/Shadow'
            medium:
              $ref: '#/components/schemas/Shadow'
            large:
              $ref: '#/components/schemas/Shadow'
      required:
        - name
        - version
        - description
        - colors
        - radius
        - spacing
        - typography
        - shadows
    ColorPalette:
      type: object
      description: Farbpalette mit Varianten
      properties:
        value:
          type: string
          pattern: ^#[0-9A-Fa-f]{6}$
          description: Hauptfarbe
          example: '#4B3B79'
        light:
          type: string
          pattern: ^#[0-9A-Fa-f]{6}$
          description: Helle Variante
          example: '#6A5394'
        dark:
          type: string
          pattern: ^#[0-9A-Fa-f]{6}$
          description: Dunkle Variante
          example: '#2E1F4A'
        surface:
          type: string
          pattern: ^#[0-9A-Fa-f]{6}$
          description: Surface-Variante
          example: '#1A1025'
        accent:
          type: string
          pattern: ^#[0-9A-Fa-f]{6}$
          description: Akzent-Variante
          example: '#7C6BAF'
      required:
        - value
        - light
        - dark
    TextStyle:
      type: object
      description: Typografie-Style Definition
      properties:
        fontSize:
          type: number
          minimum: 8
          description: Schriftgröße in px
          example: 16
        fontWeight:
          type: string
          description: Schriftgewicht
          example: normal
        letterSpacing:
          type: number
          description: Buchstabenabstand
          example: 0.4
        lineHeight:
          type: number
          description: Zeilenhöhe
          example: 1.5
      required:
        - fontSize
        - fontWeight
    Shadow:
      type: object
      description: Schatten-Definition
      properties:
        blurRadius:
          type: number
          minimum: 0
          description: Unschärfe-Radius
          example: 4
        spreadRadius:
          type: number
          description: Spread-Radius
          example: 0
        offset:
          type: array
          description: Schatten-Versatz [x, y]
          items:
            type: number
          minItems: 2
          maxItems: 2
          example:
            - 0
            - 2
        color:
          type: string
          pattern: ^#[0-9A-Fa-f]{8}$
          description: Schatten-Farbe mit Alpha
          example: '#1A000000'
      required:
        - blurRadius
        - spreadRadius
        - offset
        - color
    ErrorResponse:
      type: object
      description: Standard Fehlerantwort
      properties:
        error:
          type: string
          description: Fehlermeldung
          example: Theme nicht gefunden
        message:
          type: string
          description: Detaillierte Fehlermeldung
          example: Das angeforderte Theme existiert nicht im System
      required:
        - error
paths:
  /api/auth/login:
    post:
      summary: Benutzer einloggen
      description: |
        **Permission:** Keine (öffentlich)

        Authentifiziert einen Benutzer und erstellt eine Session.
        Alle Benutzer können sich einloggen.
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Erfolgreicher Login
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: JWT Access Token (15 Minuten gültig)
                  refreshToken:
                    type: string
                    description: JWT Refresh Token (7 Tage gültig)
                  expiresIn:
                    type: integer
                    description: Access Token Ablaufzeit in Sekunden
                    example: 900
                  refreshExpiresIn:
                    type: integer
                    description: Refresh Token Ablaufzeit in Sekunden
                    example: 604800
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Ungültige Zugangsdaten
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Konto gesperrt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/auth/logout:
    post:
      summary: Benutzer ausloggen (Session beenden)
      description: |
        **Permission:** Keine (nur gültiges Token erforderlich)
        **CSRF-Protection:** Erforderlich

        Beendet eine Benutzer-Session.
        Erfordert ein gültiges JWT-Token und einen CSRF-Token.

        Der CSRF-Token muss zuvor über `/api/auth/csrf-token` abgerufen werden.
      tags:
        - Auth
      security:
        - bearerAuth: []
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer Token
          schema:
            type: string
            example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        - name: X-CSRF-Token
          in: header
          required: true
          description: CSRF-Token (erhältlich über /api/auth/csrf-token)
          schema:
            type: string
            example: a1b2c3d4e5f6g7h8i9j0...
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                _csrf:
                  type: string
                  description: Alternativer Ort für CSRF-Token (statt Header)
                  example: a1b2c3d4e5f6g7h8i9j0...
      responses:
        '200':
          description: Erfolgreich ausgeloggt
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  deleted:
                    type: integer
                example:
                  success: true
                  deleted: 1
        '401':
          description: Nicht autorisiert
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/auth/refresh:
    post:
      summary: Session verlängern
      description: |
        **Permission:** Keine (nur gültiges Token erforderlich)

        Verlängert eine aktive Benutzer-Session um weitere 15 Minuten.
        Erfordert ein gültiges JWT-Token und eine aktive Session.

        **Response-Headers:**
        - `X-New-Token`: Neuer Token (immer gesetzt)
        - `X-Token-Refreshed`: `true` (immer gesetzt)
      tags:
        - Auth
      security:
        - bearerAuth: []
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer Token
          schema:
            type: string
            example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Session erfolgreich verlängert
          headers:
            X-New-Token:
              description: Neuer JWT-Token
              schema:
                type: string
            X-Token-Refreshed:
              description: Token wurde erneuert
              schema:
                type: string
                example: 'true'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  expiresIn:
                    type: integer
                    description: Session-Dauer in Sekunden
                  token:
                    type: string
                    description: Neuer JWT-Token (auch im Body)
                example:
                  success: true
                  message: Session verlängert
                  expiresIn: 900
                  token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '401':
          description: Session nicht gefunden oder abgelaufen
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/auth/me:
    get:
      summary: Eigene Benutzerdaten abrufen
      description: |
        **Permission:** `system.view_own` (global scope)

        Ruft die eigenen Benutzerdaten ab.
        Erfordert die `system.view_own` Permission.
        Alle authentifizierten Benutzer haben diese Permission.
      tags:
        - Auth
      security:
        - bearerAuth: []
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer Token
          schema:
            type: string
            example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      responses:
        '200':
          description: Benutzerinformationen
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Nicht autorisiert
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Keine Berechtigung zum Anzeigen der eigenen Daten
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/auth/csrf-token:
    get:
      summary: CSRF-Token abrufen
      description: |
        **Permission:** Authentifizierung erforderlich

        Generiert einen neuen CSRF-Token für state-changing Operations.
        Der Token ist 1 Stunde gültig und wird nach Verwendung automatisch rotiert.

        CSRF-Tokens müssen bei allen state-changing Operations (POST, PUT, DELETE, PATCH)
        im Header `X-CSRF-Token` oder im Body als `_csrf` mitgesendet werden.
      tags:
        - Auth
      security:
        - bearerAuth: []
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer Token
          schema:
            type: string
            example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      responses:
        '200':
          description: CSRF-Token erfolgreich generiert
          content:
            application/json:
              schema:
                type: object
                properties:
                  csrfToken:
                    type: string
                    description: Der generierte CSRF-Token
                    example: a1b2c3d4e5f6g7h8i9j0...
                  expiresIn:
                    type: integer
                    description: Gültigkeit in Sekunden
                    example: 3600
                required:
                  - csrfToken
                  - expiresIn
          headers:
            X-CSRF-Token:
              description: Der neue CSRF-Token (bei Token-Rotation)
              schema:
                type: string
        '401':
          description: Nicht authentifiziert
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: CSRF-Token fehlt oder ungültig
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: CSRF-Token fehlt
                  message:
                    type: string
                    example: Diese Aktion erfordert einen gültigen CSRF-Token
  /api/auth/change-password:
    post:
      summary: Passwort ändern
      description: |
        **Permission:** Authentifizierung erforderlich
        **CSRF-Protection:** Erforderlich

        Ändert das Passwort des angemeldeten Benutzers.

        **Wichtig:** Diese Aktion führt eine Session-Rotation durch!
        Alle bestehenden Sessions werden invalidiert und neue Tokens ausgegeben.

        Das neue Passwort wird mit der gleichen Validierung wie bei der Registrierung geprüft:
        - Mindestlänge
        - Komplexität
        - Keine persönlichen Informationen
        - Kein häufig verwendetes Passwort
      tags:
        - Auth
      security:
        - bearerAuth: []
      parameters:
        - name: X-CSRF-Token
          in: header
          required: true
          description: CSRF-Token (erhältlich über /api/auth/csrf-token)
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - currentPassword
                - newPassword
              properties:
                currentPassword:
                  type: string
                  format: password
                  description: Das aktuelle Passwort
                  example: AltesSicheresPW123!
                newPassword:
                  type: string
                  format: password
                  description: Das neue Passwort
                  example: NeuesSicheresPW456!
                _csrf:
                  type: string
                  description: Alternativer Ort für CSRF-Token (statt Header)
      responses:
        '200':
          description: Passwort erfolgreich geändert mit neuen Tokens
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Passwort erfolgreich geändert
                  accessToken:
                    type: string
                    description: Neuer Access Token nach Session-Rotation
                  refreshToken:
                    type: string
                    description: Neuer Refresh Token nach Session-Rotation
                  expiresIn:
                    type: integer
                    description: Access Token Gültigkeit in Sekunden
                    example: 900
                  refreshExpiresIn:
                    type: integer
                    description: Refresh Token Gültigkeit in Sekunden
                    example: 604800
                  sessionRotated:
                    type: boolean
                    description: Bestätigung dass Session rotiert wurde
                    example: true
        '400':
          description: Validierungsfehler
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      error:
                        type: string
                        example: Aktuelles und neues Passwort erforderlich
                  - type: object
                    properties:
                      error:
                        type: string
                        example: Neues Passwort erfüllt nicht die Sicherheitsanforderungen
                      details:
                        type: object
                        properties:
                          score:
                            type: integer
                            example: 2
                          feedback:
                            type: object
                          suggestions:
                            type: array
                            items:
                              type: string
                          estimatedCrackTime:
                            type: string
        '401':
          description: Nicht authentifiziert oder falsches aktuelles Passwort
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Aktuelles Passwort ist falsch
        '403':
          description: CSRF-Token fehlt oder ungültig
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: CSRF-Token fehlt
  /api/auth/register:
    post:
      summary: Benutzer registrieren
      description: |
        **Permission:** Keine (öffentlich)

        Registriert einen neuen Benutzer.
        Alle Benutzer können sich registrieren.
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '201':
          description: Benutzer erfolgreich registriert
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: JWT Access Token (15 Minuten gültig)
                  refreshToken:
                    type: string
                    description: JWT Refresh Token (7 Tage gültig)
                  expiresIn:
                    type: integer
                    description: Access Token Ablaufzeit in Sekunden
                    example: 900
                  refreshExpiresIn:
                    type: integer
                    description: Refresh Token Ablaufzeit in Sekunden
                    example: 604800
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Ungültige Eingabedaten
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Benutzername oder E-Mail bereits vergeben
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/auth/request-reset:
    post:
      summary: Passwort-Reset anfordern
      description: |
        **Permission:** Keine (öffentlich)

        Fordert einen Passwort-Reset an.
        Alle Benutzer können einen Reset anfordern.
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Reset-Mail verschickt (immer, um Enumeration zu verhindern)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: Reset-Mail verschickt (falls E-Mail existiert)
  /api/auth/reset-password:
    post:
      summary: Passwort zurücksetzen
      description: |
        **Permission:** Keine (öffentlich mit gültigem Token)

        Setzt das Passwort mit einem Reset-Token zurück.
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - newPassword
              properties:
                token:
                  type: string
                newPassword:
                  type: string
      responses:
        '200':
          description: Passwort erfolgreich zurückgesetzt
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: Passwort erfolgreich zurückgesetzt
        '400':
          description: Token ungültig oder abgelaufen
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/auth/check-password-strength:
    post:
      summary: Passwort-Stärke prüfen
      description: |
        **Permission:** Keine (öffentlich)

        Prüft die Stärke eines Passworts und gibt detailliertes Feedback.
        Nutzt zxcvbn für erweiterte Analyse.
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  type: string
                  description: Das zu prüfende Passwort
                username:
                  type: string
                  description: Optional - wird geprüft ob im Passwort enthalten
                email:
                  type: string
                  description: Optional - wird geprüft ob im Passwort enthalten
      responses:
        '200':
          description: Passwort-Analyse erfolgreich
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                    description: Ob das Passwort die Mindestanforderungen erfüllt
                  score:
                    type: integer
                    minimum: 0
                    maximum: 4
                    description: Passwort-Stärke (0=sehr schwach, 4=sehr stark)
                  feedback:
                    type: array
                    items:
                      type: string
                    description: Liste von Problemen mit dem Passwort
                  suggestions:
                    type: array
                    items:
                      type: string
                    description: Verbesserungsvorschläge
                  estimatedCrackTime:
                    type: string
                    description: Geschätzte Zeit zum Knacken
                  strengthText:
                    type: string
                    enum:
                      - Sehr schwach
                      - Schwach
                      - Fair
                      - Gut
                      - Stark
                  strengthPercentage:
                    type: integer
                    minimum: 0
                    maximum: 100
                  strengthColor:
                    type: string
                    description: Hex-Farbe für UI-Anzeige
                example:
                  valid: false
                  score: 1
                  feedback:
                    - Passwort ist zu schwach
                    - Dies ist ein sehr häufiges Passwort
                  suggestions:
                    - Füge ein oder zwei weitere Wörter hinzu
                    - Vermeide häufige Passwörter
                  estimatedCrackTime: weniger als eine Sekunde
                  strengthText: Schwach
                  strengthPercentage: 40
                  strengthColor: '#f59e0b'
        '400':
          description: Passwort fehlt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/worlds:
    get:
      summary: Alle nicht archivierten Welten abrufen
      description: |
        **Permission:** `world.view` (global scope)

        Zeigt alle nicht archivierten Welten an.
        Erfordert die `world.view` Permission.
        Alle authentifizierten Benutzer haben diese Permission.
      tags:
        - Worlds
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Liste aller Welten
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/World'
        '403':
          description: Keine Berechtigung zum Weltzugriff
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/worlds/{id}:
    get:
      summary: Eine einzelne Welt abrufen
      description: |
        **Permission:** `world.view` (global scope)

        Zeigt eine spezifische Welt an.
        Erfordert die `world.view` Permission.
        Alle authentifizierten Benutzer haben diese Permission.
      tags:
        - Worlds
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID der Welt
      responses:
        '200':
          description: Welt gefunden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/World'
        '400':
          description: Ungültige Welt-ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Keine Berechtigung zum Weltzugriff
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Welt nicht gefunden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/worlds/{id}/edit:
    post:
      summary: Status einer Welt ändern
      description: |
        **Permission:** `world.edit` (world scope)

        Ändert den Status einer Welt.
        Erfordert die `world.edit` Permission für die spezifische Welt.
        Nur Admins und World-Admins haben diese Permission.
      tags:
        - Worlds
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  $ref: '#/components/schemas/WorldStatus'
      responses:
        '200':
          description: Welt erfolgreich aktualisiert
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  world:
                    $ref: '#/components/schemas/World'
        '400':
          description: Ungültige Welt-ID oder Status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Keine Bearbeitungsberechtigung für diese Welt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Welt nicht gefunden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/worlds/{id}/join:
    post:
      summary: Einer Welt beitreten
      description: |
        **Permission:** `player.join` (world scope)

        Tritt einer Welt bei.
        Erfordert die `player.join` Permission für die spezifische Welt.
        Alle authentifizierten Benutzer haben diese Permission.
      tags:
        - Worlds
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                inviteCode:
                  type: string
      responses:
        '200':
          description: Beitritt erfolgreich oder bereits beigetreten
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  code:
                    type: string
                    enum:
                      - success
                      - already_joined
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      playerId:
                        type: integer
              examples:
                success:
                  summary: Erfolgreich beigetreten
                  value:
                    success: true
                    code: success
                    message: Beitritt erfolgreich
                    data:
                      playerId: 123
                already_joined:
                  summary: Bereits beigetreten
                  value:
                    success: true
                    code: already_joined
                    message: Bereits beigetreten
                    data:
                      playerId: 123
        '403':
          description: Keine Berechtigung zum Beitritt dieser Welt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Welt nicht gefunden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/worlds/{id}/players/me:
    get:
      summary: Eigenen Spielstatus in einer Welt abrufen
      description: |
        **Permission:** `player.view_own` (world scope)

        Zeigt den eigenen Spielstatus in einer Welt an.
        Erfordert die `player.view_own` Permission für die spezifische Welt.
        Alle authentifizierten Benutzer haben diese Permission.
      tags:
        - Worlds
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Eigener Spielstatus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        '403':
          description: Keine Berechtigung zum Anzeigen des eigenen Spielstatus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Nicht gefunden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Welt verlassen
      description: |
        **Permission:** `player.leave` (world scope)

        Verlässt eine Welt.
        Erfordert die `player.leave` Permission für die spezifische Welt.
        Alle authentifizierten Benutzer haben diese Permission.
      tags:
        - Worlds
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Welt erfolgreich verlassen
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  code:
                    type: string
                    enum:
                      - success
                  message:
                    type: string
                example:
                  success: true
                  code: success
                  message: Welt erfolgreich verlassen
        '403':
          description: Keine Berechtigung zum Verlassen dieser Welt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Kein Spielstatus für diese Welt gefunden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/worlds/{id}/players:
    get:
      summary: Alle Spieler einer Welt abrufen
      description: |
        **Permission:** `player.view_all` (world scope)

        Zeigt alle Spieler einer Welt an.
        Erfordert die `player.view_all` Permission für die spezifische Welt.
        Nur Admins, Mods und World-Admins haben diese Permission.
      tags:
        - Worlds
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Liste der Spieler
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '403':
          description: Keine Berechtigung zum Anzeigen aller Spieler
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Welt nicht gefunden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/worlds/{id}/state:
    get:
      summary: Öffentlichen Status einer Welt abrufen
      description: |
        **Permission:** Keine (öffentlich)

        Zeigt den öffentlichen Status einer Welt an.
        Keine Authentifizierung oder Permission erforderlich.
      tags:
        - Worlds
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Status der Welt
          content:
            application/json:
              schema:
                type: object
                properties:
                  state:
                    $ref: '#/components/schemas/WorldStatus'
                  playerCount:
                    type: integer
                example:
                  state: open
                  playerCount: 5
        '404':
          description: Welt nicht gefunden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/worlds/{id}/pre-register:
    get:
      summary: Eigenen Pre-Register-Status abrufen
      description: |
        **Permission:** `player.view_own` (world scope)

        Zeigt den eigenen Pre-Register-Status in einer Welt an.
        Erfordert die `player.view_own` Permission für die spezifische Welt.
        Alle authentifizierten Benutzer haben diese Permission.
      tags:
        - Worlds
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Pre-Register-Status
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  isPreRegistered:
                    type: boolean
                  data:
                    nullable: true
                    type: object
                    properties:
                      id:
                        type: integer
                      email:
                        type: string
                        format: email
                      createdAt:
                        type: string
                        format: date-time
                      config:
                        type: object
              examples:
                registered:
                  summary: Vorregistriert
                  value:
                    success: true
                    isPreRegistered: true
                    data:
                      id: 123
                      email: user@example.com
                      createdAt: '2024-01-15T10:30:00Z'
                      config: {}
                not_registered:
                  summary: Nicht vorregistriert
                  value:
                    success: true
                    isPreRegistered: false
                    data: null
        '403':
          description: Keine Berechtigung zum Anzeigen des eigenen Pre-Register-Status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Welt oder Benutzer nicht gefunden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Pre-Registration für eine Welt
      description: |
        **Permission:** Keine (öffentlich)

        Vorregistrierung für eine Welt.
        Keine Authentifizierung oder Permission erforderlich.
      tags:
        - Worlds
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
      responses:
        '200':
          description: Pre-Registration erfolgreich oder bereits registriert
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  code:
                    type: string
                    enum:
                      - success
                      - already_registered
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
              examples:
                success:
                  summary: Erfolgreich registriert
                  value:
                    success: true
                    code: success
                    message: Pre-Registration erfolgreich
                    data:
                      id: 123
                already_registered:
                  summary: Bereits registriert
                  value:
                    success: true
                    code: already_registered
                    message: Bereits vorregistriert
        '400':
          description: Ungültige Eingabedaten
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Pre-Registration für eine Welt zurückziehen
      description: |
        **Permission:** Keine (öffentlich)

        Löscht eine Pre-Registration für die angegebene Welt und E-Mail-Adresse.
        Keine Authentifizierung oder Permission erforderlich.
      tags:
        - Worlds
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: email
          in: query
          required: true
          description: E-Mail-Adresse für Pre-Registration
          schema:
            type: string
            format: email
      responses:
        '200':
          description: Pre-Registration erfolgreich zurückgezogen
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  code:
                    type: string
                    enum:
                      - success
                  message:
                    type: string
                example:
                  success: true
                  code: success
                  message: Pre-Registration zurückgezogen
        '400':
          description: Ungültige Welt-ID oder E-Mail fehlt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Keine Pre-Registration für diese Welt und E-Mail gefunden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/invites/validate/{token}:
    get:
      tags:
        - Invites
      summary: Token validieren und Welt-Informationen abrufen
      description: |
        Validiert einen Invite-Token und gibt die Welt-Informationen zurück.
        Prüft auch E-Mail-Berechtigung basierend auf Login-Status.
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
          description: Der Invite-Token
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
          description: Optional - Bearer Token für angemeldete User
      responses:
        '200':
          description: Token erfolgreich validiert
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      world:
                        $ref: '#/components/schemas/WorldInfo'
                      invite:
                        $ref: '#/components/schemas/InviteInfo'
                      userStatus:
                        $ref: '#/components/schemas/UserStatus'
        '400':
          description: Token fehlt
        '404':
          description: Token ungültig oder abgelaufen
  /api/invites/accept/{token}:
    post:
      tags:
        - Invites
      summary: Einladung akzeptieren
      description: Akzeptiert eine Einladung und fügt den User zur Welt hinzu
      security:
        - bearerAuth: []
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
          description: Der Invite-Token
      responses:
        '200':
          description: Einladung erfolgreich akzeptiert
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                      world:
                        $ref: '#/components/schemas/WorldInfo'
                      invitedBy:
                        type: string
                      acceptedAt:
                        type: string
                        format: date-time
        '403':
          description: E-Mail-Mismatch oder fehlende Berechtigung
        '404':
          description: Ungültiger Token
        '409':
          description: Invite bereits akzeptiert
        '410':
          description: Token abgelaufen
  /api/invites/decline/{token}:
    post:
      tags:
        - Invites
      summary: Einladung ablehnen
      description: Lehnt eine Einladung ab (löscht sie)
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
          description: Der Invite-Token
      responses:
        '200':
          description: Einladung erfolgreich abgelehnt
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      world:
                        $ref: '#/components/schemas/WorldInfo'
                      invitedBy:
                        type: string
        '404':
          description: Ungültiger Token
        '409':
          description: Invite bereits akzeptiert
        '410':
          description: Token abgelaufen
  /api/invites:
    post:
      tags:
        - Invites
      summary: Einladungen erstellen
      description: Erstellt neue Einladungen für eine Welt (authentifiziert)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                worldId:
                  type: integer
                  description: ID der Welt
                email:
                  type: string
                  format: email
                  description: Einzelne E-Mail-Adresse
                emails:
                  type: array
                  items:
                    type: string
                    format: email
                  description: Array von E-Mail-Adressen
              required:
                - worldId
      responses:
        '200':
          description: Einladungen erfolgreich erstellt
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      invites:
                        type: array
                        items:
                          $ref: '#/components/schemas/CreatedInvite'
        '400':
          description: Ungültige Eingabe oder alle E-Mails haben bereits Einladungen
        '403':
          description: Keine Berechtigung (invite.create Permission erforderlich)
  /api/invites/public:
    post:
      tags:
        - Invites
      summary: Öffentliche Einladungen erstellen
      description: Erstellt öffentliche Einladungen (keine Authentifizierung erforderlich)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                worldId:
                  type: integer
                  description: ID der Welt
                email:
                  type: string
                  format: email
                  description: Einzelne E-Mail-Adresse
                emails:
                  type: array
                  items:
                    type: string
                    format: email
                  description: Array von E-Mail-Adressen
              required:
                - worldId
      responses:
        '200':
          description: Öffentliche Einladungen erfolgreich erstellt
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      invites:
                        type: array
                        items:
                          $ref: '#/components/schemas/CreatedInvite'
        '403':
          description: Welt ist nicht für öffentliche Einladungen geöffnet
        '404':
          description: Welt nicht gefunden
  /api/invites/world/{worldId}:
    get:
      tags:
        - Invites
      summary: Einladungen einer Welt anzeigen
      description: Gibt alle Einladungen einer Welt zurück
      parameters:
        - name: worldId
          in: path
          required: true
          schema:
            type: integer
          description: ID der Welt
      responses:
        '200':
          description: Einladungen erfolgreich abgerufen
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/InviteDetails'
        '400':
          description: Ungültige Welt-ID
  /api/invites/{id}:
    delete:
      tags:
        - Invites
      summary: Einladung löschen
      description: Löscht eine Einladung (authentifiziert)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID der Einladung
      responses:
        '200':
          description: Einladung erfolgreich gelöscht
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '403':
          description: Keine Berechtigung (invite.delete Permission erforderlich)
        '404':
          description: Einladung nicht gefunden
  /api/arb/languages:
    get:
      summary: Get available languages
      description: Retrieves all available ARB language files and their metadata
      tags:
        - ARB Management
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of available languages
          content:
            application/json:
              schema:
                type: object
                properties:
                  languages:
                    type: array
                    items:
                      type: object
                      properties:
                        code:
                          type: string
                          example: de
                        name:
                          type: string
                          example: Deutsch
                        keyCount:
                          type: integer
                          example: 207
                        lastModified:
                          type: string
                          format: date-time
                        isMaster:
                          type: boolean
                          example: true
        '403':
          description: Insufficient permissions
        '500':
          description: Server error
  /api/arb/compare:
    get:
      summary: Multi-language comparison view
      description: >-
        Retrieves all languages and performs a comprehensive comparison analysis, showing missing keys, completion
        status, and side-by-side comparisons
      tags:
        - ARB Management
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Complete multi-language comparison data
          content:
            application/json:
              schema:
                type: object
                properties:
                  languages:
                    type: array
                    description: List of all available languages
                    items:
                      type: object
                      properties:
                        code:
                          type: string
                          example: de
                        name:
                          type: string
                          example: Deutsch
                        keyCount:
                          type: integer
                          example: 207
                        lastModified:
                          type: string
                          format: date-time
                        isMaster:
                          type: boolean
                          example: true
                  masterLanguage:
                    type: string
                    description: Code of the master language (reference for comparison)
                    example: de
                  totalKeys:
                    type: integer
                    description: Total number of keys in the master language
                    example: 207
                  comparisonMatrix:
                    type: object
                    description: Matrix showing which keys are present in which languages
                    additionalProperties:
                      type: object
                      additionalProperties:
                        type: object
                        properties:
                          present:
                            type: boolean
                            description: Whether the key is present in this language
                            example: true
                          value:
                            type: string
                            description: The translated value (null if missing)
                            example: Willkommen
                    example:
                      de:
                        welcome:
                          present: true
                          value: Willkommen
                        login:
                          present: true
                          value: Anmelden
                      en:
                        welcome:
                          present: true
                          value: Welcome
                        login:
                          present: false
                          value: null
                  missingKeysReport:
                    type: object
                    description: Report of missing and extra keys per language
                    additionalProperties:
                      type: object
                      properties:
                        missing:
                          type: array
                          items:
                            type: string
                          description: Keys that are missing in this language
                          example:
                            - login
                            - register
                        extra:
                          type: array
                          items:
                            type: string
                          description: Keys that exist in this language but not in master
                          example: []
                        missingCount:
                          type: integer
                          description: Number of missing keys
                          example: 2
                        extraCount:
                          type: integer
                          description: Number of extra keys
                          example: 0
                        completeness:
                          type: string
                          description: Percentage of completeness
                          example: '90.3'
                    example:
                      de:
                        missing: []
                        extra: []
                        missingCount: 0
                        extraCount: 0
                        completeness: '100.0'
                      en:
                        missing:
                          - login
                          - register
                        extra: []
                        missingCount: 2
                        extraCount: 0
                        completeness: '90.3'
                  statistics:
                    type: object
                    description: Overall comparison statistics
                    properties:
                      totalLanguages:
                        type: integer
                        description: Total number of languages
                        example: 2
                      masterKeyCount:
                        type: integer
                        description: Number of keys in master language
                        example: 207
                      averageCompleteness:
                        type: number
                        description: Average completion percentage across all languages
                        example: 95.15
                      languagesWithMissingKeys:
                        type: integer
                        description: Number of languages with missing keys
                        example: 1
                  entries:
                    type: object
                    description: Full entry data for all languages (detailed view)
                    additionalProperties:
                      type: object
                      properties:
                        code:
                          type: string
                        name:
                          type: string
                        entries:
                          type: array
                          items:
                            type: object
                            properties:
                              key:
                                type: string
                              value:
                                type: string
                              metadata:
                                type: object
                        keyCount:
                          type: integer
                        lastModified:
                          type: string
                          format: date-time
                        isMaster:
                          type: boolean
                        keys:
                          type: array
                          items:
                            type: string
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Keine Berechtigung für Lokalisierungs-Management
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Fehler beim Erstellen der Sprachvergleichsansicht
  /api/arb/{language}:
    get:
      summary: Load ARB file
      description: Loads the content of a specific ARB language file
      tags:
        - ARB Management
      security:
        - bearerAuth: []
      parameters:
        - name: language
          in: path
          required: true
          schema:
            type: string
            enum:
              - de
              - en
          example: de
      responses:
        '200':
          description: ARB file content
          content:
            application/json:
              schema:
                type: object
                properties:
                  language:
                    type: string
                    example: de
                  entries:
                    type: array
                    items:
                      type: object
                      properties:
                        key:
                          type: string
                          example: welcomeMessage
                        value:
                          type: string
                          example: Willkommen bei Weltenwind!
                        metadata:
                          type: object
                          nullable: true
                          properties:
                            description:
                              type: string
                            context:
                              type: string
                            placeholders:
                              type: object
                  metadata:
                    type: object
                    properties:
                      keyCount:
                        type: integer
                      isMaster:
                        type: boolean
        '400':
          description: Invalid language code
        '403':
          description: Insufficient permissions
        '404':
          description: ARB file not found
        '500':
          description: Server error
    put:
      summary: Update ARB file
      description: Updates the master ARB file (German only)
      tags:
        - ARB Management
      security:
        - bearerAuth: []
      parameters:
        - name: language
          in: path
          required: true
          schema:
            type: string
            enum:
              - de
          example: de
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                entries:
                  type: array
                  items:
                    type: object
                    properties:
                      key:
                        type: string
                        example: welcomeMessage
                      value:
                        type: string
                        example: Willkommen bei Weltenwind!
                      metadata:
                        type: object
                        nullable: true
                        properties:
                          description:
                            type: string
                          context:
                            type: string
                          placeholders:
                            type: object
      responses:
        '200':
          description: ARB file updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: ARB-Datei erfolgreich aktualisiert
                  entryCount:
                    type: integer
                    example: 207
                  nextStep:
                    type: string
                    example: Führe das translate.ps1 Script aus um andere Sprachen zu aktualisieren
        '400':
          description: Invalid input or only German ARB can be edited
        '403':
          description: Insufficient permissions
        '500':
          description: Server error
  /api/arb/{language}/export:
    get:
      summary: Export ARB file
      description: Downloads the ARB file in the specified format (.arb or .json)
      tags:
        - ARB Management
      security:
        - bearerAuth: []
      parameters:
        - name: language
          in: path
          required: true
          schema:
            type: string
            enum:
              - de
              - en
          example: de
        - name: format
          in: query
          required: false
          schema:
            type: string
            enum:
              - arb
              - json
            default: arb
          description: Export format - 'arb' for standard Flutter ARB format, 'json' for structured JSON with metadata
          example: arb
      responses:
        '200':
          description: ARB file download
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    description: Standard ARB format (when format=arb)
                    additionalProperties: true
                    example:
                      welcomeMessage: Willkommen bei Weltenwind!
                      '@welcomeMessage':
                        description: Welcome message for new users
                        context: homepage
                  - type: object
                    description: Structured JSON format (when format=json)
                    properties:
                      metadata:
                        type: object
                        properties:
                          language:
                            type: string
                            example: de
                          exportDate:
                            type: string
                            format: date-time
                          keyCount:
                            type: integer
                            example: 207
                          exportedBy:
                            type: string
                            example: Weltenwind ARB Manager
                          exportedByUser:
                            type: string
                            example: admin
                      entries:
                        type: array
                        items:
                          type: object
                          properties:
                            key:
                              type: string
                            value:
                              type: string
                            metadata:
                              type: object
                              nullable: true
          headers:
            Content-Disposition:
              description: Attachment header with filename
              schema:
                type: string
                example: attachment; filename="app_de_export_2025-01-03.arb"
        '400':
          description: Invalid language code or format
        '403':
          description: Insufficient permissions
        '404':
          description: ARB file not found
        '500':
          description: Server error
  /api/arb/{language}/backups:
    get:
      summary: List backups for language
      description: Returns a list of all available backups for the specified language
      tags:
        - ARB Management
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: language
          required: true
          schema:
            type: string
            example: de
          description: Language code (e.g., 'de', 'en')
      responses:
        '200':
          description: Backup list retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  language:
                    type: string
                    example: de
                  backups:
                    type: array
                    items:
                      type: object
                      properties:
                        filename:
                          type: string
                          example: app_de.arb.backup_2024-01-15_143022
                        timestamp:
                          type: string
                          example: 2024-01-15_143022
                        created:
                          type: string
                          format: date-time
                        size:
                          type: number
                          example: 45678
                        displayName:
                          type: string
                          example: 2024.01.15 um 143022
        '400':
          description: Invalid language code
        '403':
          description: Insufficient permissions
        '500':
          description: Server error
  /api/arb/{language}/restore/{timestamp}:
    post:
      summary: Restore from backup
      description: Restores ARB data from a specific backup version
      tags:
        - ARB Management
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: language
          required: true
          schema:
            type: string
            example: de
          description: Language code (e.g., 'de', 'en')
        - in: path
          name: timestamp
          required: true
          schema:
            type: string
            example: 2024-01-15_143022
          description: Backup timestamp identifier
      responses:
        '200':
          description: Backup restored successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: DE-ARB erfolgreich aus Backup wiederhergestellt
                  restoredFrom:
                    type: string
                    example: 2024-01-15_143022
                  nextStep:
                    type: string
                    example: Lade die Seite neu um die wiederhergestellten Daten zu sehen
        '400':
          description: Invalid language code
        '403':
          description: Insufficient permissions
        '404':
          description: Backup not found
        '500':
          description: Server error
  /api/arb/{language}/backups/{timestamp}:
    delete:
      summary: Delete backup
      description: Deletes a specific backup version permanently
      tags:
        - ARB Management
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: language
          required: true
          schema:
            type: string
            example: de
          description: Language code (e.g., 'de', 'en')
        - in: path
          name: timestamp
          required: true
          schema:
            type: string
            example: 2025-08-01_143022
          description: Backup timestamp identifier
      responses:
        '200':
          description: Backup deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Backup vom 2025.08.01 um 14:30:22 wurde gelöscht
                  deletedFile:
                    type: string
                    example: app_de.arb.backup_2025-08-01_143022
        '400':
          description: Invalid language code
        '403':
          description: Insufficient permissions
        '404':
          description: Backup not found
        '500':
          description: Server error
  /api/themes:
    get:
      summary: Liste aller verfügbaren Themes
      description: Lädt eine Liste aller verfügbaren Theme-Dateien aus dem tokens/ Verzeichnis
      tags:
        - Themes
      responses:
        '200':
          description: Liste der verfügbaren Themes erfolgreich geladen
          content:
            application/json:
              schema:
                type: object
                properties:
                  themes:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          description: Benutzerfreundlicher Theme-Name
                          example: Default Weltenwind
                        filename:
                          type: string
                          description: Dateiname ohne Erweiterung
                          example: default
                        description:
                          type: string
                          description: Theme-Beschreibung
                          example: Standard Weltenwind Theme mit mystischer Fantasy-Ästhetik
                        version:
                          type: string
                          description: Theme-Version
                          example: 1.0.0
        '500':
          description: Serverfehler beim Laden der Theme-Liste
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/themes/{name}:
    get:
      summary: Einzelnes Theme laden
      description: Lädt die vollständigen Daten eines spezifischen Themes
      tags:
        - Themes
      parameters:
        - name: name
          in: path
          required: true
          description: Theme-Name (Dateiname ohne .json)
          schema:
            type: string
            example: default
      responses:
        '200':
          description: Theme erfolgreich geladen
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThemeData'
        '404':
          description: Theme nicht gefunden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Serverfehler beim Laden des Themes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Theme speichern
      description: Speichert ein Theme (nur für authentifizierte Benutzer)
      tags:
        - Themes
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          required: true
          description: Theme-Name (Dateiname ohne .json)
          schema:
            type: string
            example: custom
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThemeData'
      responses:
        '200':
          description: Theme erfolgreich gespeichert
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Theme erfolgreich gespeichert
                  theme:
                    type: string
                    example: custom
        '400':
          description: Ungültige Theme-Daten
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Nicht authentifiziert
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Keine Berechtigung (Admin erforderlich)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Serverfehler beim Speichern
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/themes/{name}/clone:
    post:
      summary: Theme klonen
      description: Erstellt eine Kopie eines bestehenden Themes mit neuem Namen
      tags:
        - Themes
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          required: true
          description: Quell-Theme Name
          schema:
            type: string
            example: default
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newName:
                  type: string
                  description: Name für das neue Theme
                  example: my-custom-theme
                newDescription:
                  type: string
                  description: Beschreibung für das neue Theme
                  example: Mein angepasstes Theme basierend auf Default
              required:
                - newName
      responses:
        '200':
          description: Theme erfolgreich geklont
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Theme erfolgreich geklont
                  source:
                    type: string
                    example: default
                  target:
                    type: string
                    example: my-custom-theme
        '400':
          description: Ungültige Anfrage (newName fehlt)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Nicht authentifiziert
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Quell-Theme nicht gefunden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Ziel-Theme existiert bereits
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Serverfehler beim Klonen
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
