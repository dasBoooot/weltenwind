openapi: 3.0.3
info:
  title: Weltenwind API
  version: 1.0.0
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
          example: testuser
        email:
          type: string
          example: user@example.com
        roles:
          type: array
          description: Rollen des Benutzers mit Permissions
          items:
            type: object
            properties:
              id:
                type: integer
              userId:
                type: integer
              roleId:
                type: integer
              scopeType:
                type: string
                example: global
              scopeObjectId:
                type: string
                example: global
              condition:
                type: string
                nullable: true
              role:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                    example: user
                  description:
                    type: string
                  permissions:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        permission:
                          type: object
                          properties:
                            id:
                              type: integer
                            name:
                              type: string
                              example: system.view_own
                            description:
                              type: string
    Error:
      type: object
      properties:
        error:
          type: string
        code:
          type: integer
    World:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        status:
          $ref: '#/components/schemas/WorldStatus'
        createdAt:
          type: string
          format: date-time
        startsAt:
          type: string
          format: date-time
        endsAt:
          type: string
          format: date-time
          nullable: true
    WorldStatus:
      type: string
      enum:
        - upcoming
        - open
        - running
        - closed
        - archived
    Player:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        worldId:
          type: integer
        joinedAt:
          type: string
          format: date-time
        leftAt:
          type: string
          format: date-time
          nullable: true
        state:
          type: string
          nullable: true
paths:
  /api/auth/login:
    post:
      summary: Benutzer einloggen
      description: |
        **Permission:** Keine (öffentlich)

        Authentifiziert einen Benutzer und erstellt eine Session.
        Alle Benutzer können sich einloggen.
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Erfolgreicher Login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Ungültige Zugangsdaten
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Konto gesperrt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/auth/logout:
    post:
      summary: Benutzer ausloggen (Session beenden)
      description: |
        **Permission:** Keine (nur gültiges Token erforderlich)

        Beendet eine Benutzer-Session.
        Erfordert nur ein gültiges JWT-Token.
      tags:
        - Auth
      security:
        - bearerAuth: []
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer Token
          schema:
            type: string
            example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Erfolgreich ausgeloggt
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  deleted:
                    type: integer
                example:
                  success: true
                  deleted: 1
        '401':
          description: Nicht autorisiert
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/auth/refresh:
    post:
      summary: Session verlängern
      description: |
        **Permission:** Keine (nur gültiges Token erforderlich)

        Verlängert eine aktive Benutzer-Session um weitere 15 Minuten.
        Erfordert ein gültiges JWT-Token und eine aktive Session.

        **Response-Headers:**
        - `X-New-Token`: Neuer Token (immer gesetzt)
        - `X-Token-Refreshed`: `true` (immer gesetzt)
      tags:
        - Auth
      security:
        - bearerAuth: []
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer Token
          schema:
            type: string
            example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Session erfolgreich verlängert
          headers:
            X-New-Token:
              description: Neuer JWT-Token
              schema:
                type: string
            X-Token-Refreshed:
              description: Token wurde erneuert
              schema:
                type: string
                example: 'true'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  expiresIn:
                    type: integer
                    description: Session-Dauer in Sekunden
                  token:
                    type: string
                    description: Neuer JWT-Token (auch im Body)
                example:
                  success: true
                  message: Session verlängert
                  expiresIn: 900
                  token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '401':
          description: Session nicht gefunden oder abgelaufen
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/auth/me:
    get:
      summary: Eigene Benutzerdaten abrufen
      description: |
        **Permission:** `system.view_own` (global scope)

        Ruft die eigenen Benutzerdaten ab.
        Erfordert die `system.view_own` Permission.
        Alle authentifizierten Benutzer haben diese Permission.
      tags:
        - Auth
      security:
        - bearerAuth: []
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer Token
          schema:
            type: string
            example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      responses:
        '200':
          description: Benutzerinformationen
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Nicht autorisiert
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Keine Berechtigung zum Anzeigen der eigenen Daten
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/auth/register:
    post:
      summary: Benutzer registrieren
      description: |
        **Permission:** Keine (öffentlich)

        Registriert einen neuen Benutzer.
        Alle Benutzer können sich registrieren.
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '201':
          description: Benutzer erfolgreich registriert
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Ungültige Eingabedaten
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Benutzername oder E-Mail bereits vergeben
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/auth/request-reset:
    post:
      summary: Passwort-Reset anfordern
      description: |
        **Permission:** Keine (öffentlich)

        Fordert einen Passwort-Reset an.
        Alle Benutzer können einen Reset anfordern.
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Reset-Mail verschickt (immer, um Enumeration zu verhindern)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: Reset-Mail verschickt (falls E-Mail existiert)
  /api/auth/reset-password:
    post:
      summary: Passwort zurücksetzen
      description: |
        **Permission:** Keine (öffentlich)

        Setzt das Passwort mit einem Reset-Token zurück.
        Alle Benutzer können ihr Passwort zurücksetzen.
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - password
              properties:
                token:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Passwort erfolgreich geändert
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: Passwort erfolgreich geändert
        '400':
          description: Ungültiger oder abgelaufener Token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/worlds:
    get:
      summary: Alle nicht archivierten Welten abrufen
      description: |
        **Permission:** `world.view` (global scope)

        Zeigt alle nicht archivierten Welten an.
        Erfordert die `world.view` Permission.
        Alle authentifizierten Benutzer haben diese Permission.
      tags:
        - Worlds
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Liste aller Welten
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/World'
        '403':
          description: Keine Berechtigung zum Weltzugriff
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/worlds/{id}:
    get:
      summary: Eine einzelne Welt abrufen
      description: |
        **Permission:** `world.view` (global scope)

        Zeigt eine spezifische Welt an.
        Erfordert die `world.view` Permission.
        Alle authentifizierten Benutzer haben diese Permission.
      tags:
        - Worlds
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID der Welt
      responses:
        '200':
          description: Welt gefunden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/World'
        '400':
          description: Ungültige Welt-ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Keine Berechtigung zum Weltzugriff
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Welt nicht gefunden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/worlds/{id}/edit:
    post:
      summary: Status einer Welt ändern
      description: |
        **Permission:** `world.edit` (world scope)

        Ändert den Status einer Welt.
        Erfordert die `world.edit` Permission für die spezifische Welt.
        Nur Admins und World-Admins haben diese Permission.
      tags:
        - Worlds
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  $ref: '#/components/schemas/WorldStatus'
      responses:
        '200':
          description: Welt erfolgreich aktualisiert
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  world:
                    $ref: '#/components/schemas/World'
        '400':
          description: Ungültige Welt-ID oder Status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Keine Bearbeitungsberechtigung für diese Welt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Welt nicht gefunden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/worlds/{id}/join:
    post:
      summary: Einer Welt beitreten
      description: |
        **Permission:** `player.join` (world scope)

        Tritt einer Welt bei.
        Erfordert die `player.join` Permission für die spezifische Welt.
        Alle authentifizierten Benutzer haben diese Permission.
      tags:
        - Worlds
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                inviteCode:
                  type: string
      responses:
        '200':
          description: Beitritt erfolgreich oder bereits beigetreten
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  code:
                    type: string
                    enum:
                      - success
                      - already_joined
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      playerId:
                        type: integer
              examples:
                success:
                  summary: Erfolgreich beigetreten
                  value:
                    success: true
                    code: success
                    message: Beitritt erfolgreich
                    data:
                      playerId: 123
                already_joined:
                  summary: Bereits beigetreten
                  value:
                    success: true
                    code: already_joined
                    message: Bereits beigetreten
                    data:
                      playerId: 123
        '403':
          description: Keine Berechtigung zum Beitritt dieser Welt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Welt nicht gefunden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/worlds/{id}/players/me:
    get:
      summary: Eigenen Spielstatus in einer Welt abrufen
      description: |
        **Permission:** `player.view_own` (world scope)

        Zeigt den eigenen Spielstatus in einer Welt an.
        Erfordert die `player.view_own` Permission für die spezifische Welt.
        Alle authentifizierten Benutzer haben diese Permission.
      tags:
        - Worlds
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Eigener Spielstatus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        '403':
          description: Keine Berechtigung zum Anzeigen des eigenen Spielstatus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Nicht gefunden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Welt verlassen
      description: |
        **Permission:** `player.leave` (world scope)

        Verlässt eine Welt.
        Erfordert die `player.leave` Permission für die spezifische Welt.
        Alle authentifizierten Benutzer haben diese Permission.
      tags:
        - Worlds
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Welt erfolgreich verlassen
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  code:
                    type: string
                    enum:
                      - success
                  message:
                    type: string
                example:
                  success: true
                  code: success
                  message: Welt erfolgreich verlassen
        '403':
          description: Keine Berechtigung zum Verlassen dieser Welt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Kein Spielstatus für diese Welt gefunden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/worlds/{id}/players:
    get:
      summary: Alle Spieler einer Welt abrufen
      description: |
        **Permission:** `player.view_all` (world scope)

        Zeigt alle Spieler einer Welt an.
        Erfordert die `player.view_all` Permission für die spezifische Welt.
        Nur Admins, Mods und World-Admins haben diese Permission.
      tags:
        - Worlds
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Liste der Spieler
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '403':
          description: Keine Berechtigung zum Anzeigen aller Spieler
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Welt nicht gefunden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/worlds/{id}/state:
    get:
      summary: Öffentlichen Status einer Welt abrufen
      description: |
        **Permission:** Keine (öffentlich)

        Zeigt den öffentlichen Status einer Welt an.
        Keine Authentifizierung oder Permission erforderlich.
      tags:
        - Worlds
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Status der Welt
          content:
            application/json:
              schema:
                type: object
                properties:
                  state:
                    $ref: '#/components/schemas/WorldStatus'
                  playerCount:
                    type: integer
                example:
                  state: open
                  playerCount: 5
        '404':
          description: Welt nicht gefunden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/worlds/{id}/invites:
    get:
      summary: Alle Einladungen einer Welt anzeigen
      description: |
        **Permission:** Keine (öffentlich)

        Zeigt alle Einladungen einer Welt an.
        Keine Authentifizierung oder Permission erforderlich.
        **Öffentlicher Endpoint für alle Benutzer.**
      tags:
        - Worlds
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Liste der Einladungen
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    email:
                      type: string
                      format: email
                    token:
                      type: string
                    createdAt:
                      type: string
                      format: date-time
                    expiresAt:
                      type: string
                      format: date-time
                    invitedBy:
                      type: object
                      properties:
                        username:
                          type: string
        '400':
          description: Ungültige Welt-ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Welt nicht gefunden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Spieler zu einer Welt einladen
      description: |
        **Permission:** `invite.create` (world scope)

        Erstellt Einladungen für eine Welt.
        Erfordert die `invite.create` Permission für die spezifische Welt.
        Nur Admins, Mods und World-Admins haben diese Permission.
        **Für authentifizierte Benutzer.**
      tags:
        - Worlds
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  required:
                    - email
                  properties:
                    email:
                      type: string
                      format: email
                      example: user@example.com
                - type: object
                  required:
                    - emails
                  properties:
                    emails:
                      type: array
                      items:
                        type: string
                        format: email
                        example: user@example.com
      responses:
        '200':
          description: Einladung(en) verschickt
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  code:
                    type: string
                    enum:
                      - success
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      invites:
                        type: array
                        items:
                          type: object
                          properties:
                            email:
                              type: string
                              format: email
                            token:
                              type: string
                example:
                  success: true
                  code: success
                  message: Einladung(en) verschickt
                  data:
                    invites:
                      - email: user@example.com
                        token: abc123def456
        '403':
          description: Keine Berechtigung zum Erstellen von Einladungen
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Welt nicht gefunden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/worlds/{id}/invites/{inviteId}:
    delete:
      summary: Einladung löschen
      description: |
        **Hybrid-Ansatz:**

        **Für authentifizierte Benutzer:** JWT-basiert mit `invite.delete` Permission
        **Für nicht-authentifizierte Benutzer:** Token-basiert (nur eigene Einladungen)

        - **JWT + Permission:** Privilegierte Benutzer (Admin, Mod, World-Admin) können alle Einladungen löschen
        - **Token:** Nicht-authentifizierte Benutzer können nur ihre eigenen Einladungen löschen
      tags:
        - Worlds
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: inviteId
          in: path
          required: true
          description: ID der zu löschenden Einladung
          schema:
            type: integer
        - name: token
          in: query
          required: false
          description: Token der Einladung (nur für nicht-authentifizierte Benutzer)
          schema:
            type: string
            example: abc123def456
      responses:
        '200':
          description: Einladung erfolgreich gelöscht
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: Einladung erfolgreich gelöscht
        '400':
          description: Token erforderlich oder ungültige Parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Ungültiger JWT Token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Keine Berechtigung zum Löschen von Einladungen oder ungültiger Token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Einladung nicht gefunden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/worlds/{id}/invites/public:
    post:
      summary: Öffentliche Einladungen für eine Welt erstellen
      description: |
        **Permission:** Keine (öffentlich)

        Erstellt öffentliche Einladungen für eine Welt.
        Keine Authentifizierung erforderlich.
        **Für Einladungen an nicht-registrierte Benutzer.**
        Nur für Welten mit Status 'open' oder 'upcoming' verfügbar.
      tags:
        - Worlds
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  required:
                    - email
                  properties:
                    email:
                      type: string
                      format: email
                      example: newuser@example.com
                - type: object
                  required:
                    - emails
                  properties:
                    emails:
                      type: array
                      items:
                        type: string
                        format: email
                        example: newuser@example.com
      responses:
        '200':
          description: Öffentliche Einladung(en) verschickt
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  code:
                    type: string
                    enum:
                      - success
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      invites:
                        type: array
                        items:
                          type: object
                          properties:
                            email:
                              type: string
                              format: email
                            token:
                              type: string
                example:
                  success: true
                  code: success
                  message: Öffentliche Einladung(en) verschickt
                  data:
                    invites:
                      - email: newuser@example.com
                        token: abc123def456
        '403':
          description: Welt ist nicht für Einladungen geöffnet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Welt nicht gefunden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/worlds/{id}/pre-register:
    get:
      summary: Eigenen Pre-Register-Status abrufen
      description: |
        **Permission:** `player.view_own` (world scope)

        Zeigt den eigenen Pre-Register-Status in einer Welt an.
        Erfordert die `player.view_own` Permission für die spezifische Welt.
        Alle authentifizierten Benutzer haben diese Permission.
      tags:
        - Worlds
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Pre-Register-Status
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  isPreRegistered:
                    type: boolean
                  data:
                    nullable: true
                    type: object
                    properties:
                      id:
                        type: integer
                      email:
                        type: string
                        format: email
                      createdAt:
                        type: string
                        format: date-time
                      config:
                        type: object
              examples:
                registered:
                  summary: Vorregistriert
                  value:
                    success: true
                    isPreRegistered: true
                    data:
                      id: 123
                      email: user@example.com
                      createdAt: '2024-01-15T10:30:00Z'
                      config: {}
                not_registered:
                  summary: Nicht vorregistriert
                  value:
                    success: true
                    isPreRegistered: false
                    data: null
        '403':
          description: Keine Berechtigung zum Anzeigen des eigenen Pre-Register-Status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Welt oder Benutzer nicht gefunden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Pre-Registration für eine Welt
      description: |
        **Permission:** Keine (öffentlich)

        Vorregistrierung für eine Welt.
        Keine Authentifizierung oder Permission erforderlich.
      tags:
        - Worlds
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
      responses:
        '200':
          description: Pre-Registration erfolgreich oder bereits registriert
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  code:
                    type: string
                    enum:
                      - success
                      - already_registered
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
              examples:
                success:
                  summary: Erfolgreich registriert
                  value:
                    success: true
                    code: success
                    message: Pre-Registration erfolgreich
                    data:
                      id: 123
                already_registered:
                  summary: Bereits registriert
                  value:
                    success: true
                    code: already_registered
                    message: Bereits vorregistriert
        '400':
          description: Ungültige Eingabedaten
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Pre-Registration für eine Welt zurückziehen
      description: |
        **Permission:** Keine (öffentlich)

        Löscht eine Pre-Registration für die angegebene Welt und E-Mail-Adresse.
        Keine Authentifizierung oder Permission erforderlich.
      tags:
        - Worlds
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: email
          in: query
          required: true
          description: E-Mail-Adresse für Pre-Registration
          schema:
            type: string
            format: email
      responses:
        '200':
          description: Pre-Registration erfolgreich zurückgezogen
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  code:
                    type: string
                    enum:
                      - success
                  message:
                    type: string
                example:
                  success: true
                  code: success
                  message: Pre-Registration zurückgezogen
        '400':
          description: Ungültige Welt-ID oder E-Mail fehlt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Keine Pre-Registration für diese Welt und E-Mail gefunden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
