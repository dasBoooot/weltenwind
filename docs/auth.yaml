openapi: 3.0.3
info:
  title: Weltenwind API
  version: 1.0.0
  description: |
    ## Token-Management
    
    ### Automatische Token-Erneuerung
    Bei allen authentifizierten Endpoints wird der Token automatisch erneuert, wenn er weniger als 60 Sekunden gültig ist.
    
    ### Response-Headers
    - `X-New-Token`: Neuer Token (wenn erneuert)
    - `X-Token-Refreshed`: `true` (wenn erneuert)
    
    ### Status-Codes
    - `440`: Session Timeout (Token abgelaufen)
    - `401`: Unauthorized (ungültiges Token)
    
    ### Verbesserte IP-Erkennung
    - Priorität: `x-forwarded-for` → `req.ip` → `req.socket.remoteAddress`
    - Standardisierte Device-Fingerprints: `x-device-fingerprint` → `user-agent`
    
    ### Session-Management
    - 15-Minuten Session-Dauer
    - Automatische Inaktivitäts-Timeout nach 1 Stunde
    - Zentrale Prisma-Instanz für bessere Performance
paths:
  /api/auth/login:
    post:
      summary: Benutzer einloggen
      description: |
        **Permission:** Keine (öffentlich)
        
        Authentifiziert einen Benutzer und erstellt eine Session.
        Alle Benutzer können sich einloggen.
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Erfolgreicher Login
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: JWT Access Token (15 Minuten gültig)
                  refreshToken:
                    type: string
                    description: JWT Refresh Token (7 Tage gültig)
                  expiresIn:
                    type: integer
                    description: Access Token Ablaufzeit in Sekunden
                    example: 900
                  refreshExpiresIn:
                    type: integer
                    description: Refresh Token Ablaufzeit in Sekunden
                    example: 604800
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Ungültige Zugangsdaten
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Konto gesperrt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/logout:
    post:
      summary: Benutzer ausloggen (Session beenden)
      description: |
        **Permission:** Keine (nur gültiges Token erforderlich)
        **CSRF-Protection:** Erforderlich
        
        Beendet eine Benutzer-Session.
        Erfordert ein gültiges JWT-Token und einen CSRF-Token.
        
        Der CSRF-Token muss zuvor über `/api/auth/csrf-token` abgerufen werden.
      tags: [Auth]
      security:
        - bearerAuth: []
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer Token
          schema:
            type: string
            example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        - name: X-CSRF-Token
          in: header
          required: true
          description: CSRF-Token (erhältlich über /api/auth/csrf-token)
          schema:
            type: string
            example: a1b2c3d4e5f6g7h8i9j0...
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                _csrf:
                  type: string
                  description: Alternativer Ort für CSRF-Token (statt Header)
                  example: a1b2c3d4e5f6g7h8i9j0...
      responses:
        '200':
          description: Erfolgreich ausgeloggt
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  deleted:
                    type: integer
                example:
                  success: true
                  deleted: 1
        '401':
          description: Nicht autorisiert
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/refresh:
    post:
      summary: Session verlängern
      description: |
        **Permission:** Keine (nur gültiges Token erforderlich)
        
        Verlängert eine aktive Benutzer-Session um weitere 15 Minuten.
        Erfordert ein gültiges JWT-Token und eine aktive Session.
        
        **Response-Headers:**
        - `X-New-Token`: Neuer Token (immer gesetzt)
        - `X-Token-Refreshed`: `true` (immer gesetzt)
      tags: [Auth]
      security:
        - bearerAuth: []
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer Token
          schema:
            type: string
            example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Session erfolgreich verlängert
          headers:
            X-New-Token:
              description: Neuer JWT-Token
              schema:
                type: string
            X-Token-Refreshed:
              description: Token wurde erneuert
              schema:
                type: string
                example: "true"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  expiresIn:
                    type: integer
                    description: Session-Dauer in Sekunden
                  token:
                    type: string
                    description: Neuer JWT-Token (auch im Body)
                example:
                  success: true
                  message: "Session verlängert"
                  expiresIn: 900
                  token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '401':
          description: Session nicht gefunden oder abgelaufen
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/me:
    get:
      summary: Eigene Benutzerdaten abrufen
      description: |
        **Permission:** `system.view_own` (global scope)
        
        Ruft die eigenen Benutzerdaten ab.
        Erfordert die `system.view_own` Permission.
        Alle authentifizierten Benutzer haben diese Permission.
      tags: [Auth]
      security:
        - bearerAuth: []
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer Token
          schema:
            type: string
            example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      responses:
        '200':
          description: Benutzerinformationen
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Nicht autorisiert
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Keine Berechtigung zum Anzeigen der eigenen Daten
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/csrf-token:
    get:
      summary: CSRF-Token abrufen
      description: |
        **Permission:** Authentifizierung erforderlich
        
        Generiert einen neuen CSRF-Token für state-changing Operations.
        Der Token ist 1 Stunde gültig und wird nach Verwendung automatisch rotiert.
        
        CSRF-Tokens müssen bei allen state-changing Operations (POST, PUT, DELETE, PATCH)
        im Header `X-CSRF-Token` oder im Body als `_csrf` mitgesendet werden.
      tags: [Auth]
      security:
        - bearerAuth: []
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer Token
          schema:
            type: string
            example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      responses:
        '200':
          description: CSRF-Token erfolgreich generiert
          content:
            application/json:
              schema:
                type: object
                properties:
                  csrfToken:
                    type: string
                    description: Der generierte CSRF-Token
                    example: "a1b2c3d4e5f6g7h8i9j0..."
                  expiresIn:
                    type: integer
                    description: Gültigkeit in Sekunden
                    example: 3600
                required:
                  - csrfToken
                  - expiresIn
          headers:
            X-CSRF-Token:
              description: Der neue CSRF-Token (bei Token-Rotation)
              schema:
                type: string
        '401':
          description: Nicht authentifiziert
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: CSRF-Token fehlt oder ungültig
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "CSRF-Token fehlt"
                  message:
                    type: string
                    example: "Diese Aktion erfordert einen gültigen CSRF-Token"

  /api/auth/change-password:
    post:
      summary: Passwort ändern
      description: |
        **Permission:** Authentifizierung erforderlich
        **CSRF-Protection:** Erforderlich
        
        Ändert das Passwort des angemeldeten Benutzers.
        
        **Wichtig:** Diese Aktion führt eine Session-Rotation durch!
        Alle bestehenden Sessions werden invalidiert und neue Tokens ausgegeben.
        
        Das neue Passwort wird mit der gleichen Validierung wie bei der Registrierung geprüft:
        - Mindestlänge
        - Komplexität
        - Keine persönlichen Informationen
        - Kein häufig verwendetes Passwort
      tags: [Auth]
      security:
        - bearerAuth: []
      parameters:
        - name: X-CSRF-Token
          in: header
          required: true
          description: CSRF-Token (erhältlich über /api/auth/csrf-token)
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - currentPassword
                - newPassword
              properties:
                currentPassword:
                  type: string
                  format: password
                  description: Das aktuelle Passwort
                  example: "AltesSicheresPW123!"
                newPassword:
                  type: string
                  format: password
                  description: Das neue Passwort
                  example: "NeuesSicheresPW456!"
                _csrf:
                  type: string
                  description: Alternativer Ort für CSRF-Token (statt Header)
      responses:
        '200':
          description: Passwort erfolgreich geändert mit neuen Tokens
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Passwort erfolgreich geändert"
                  accessToken:
                    type: string
                    description: Neuer Access Token nach Session-Rotation
                  refreshToken:
                    type: string
                    description: Neuer Refresh Token nach Session-Rotation
                  expiresIn:
                    type: integer
                    description: Access Token Gültigkeit in Sekunden
                    example: 900
                  refreshExpiresIn:
                    type: integer
                    description: Refresh Token Gültigkeit in Sekunden
                    example: 604800
                  sessionRotated:
                    type: boolean
                    description: Bestätigung dass Session rotiert wurde
                    example: true
        '400':
          description: Validierungsfehler
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      error:
                        type: string
                        example: "Aktuelles und neues Passwort erforderlich"
                  - type: object
                    properties:
                      error:
                        type: string
                        example: "Neues Passwort erfüllt nicht die Sicherheitsanforderungen"
                      details:
                        type: object
                        properties:
                          score:
                            type: integer
                            example: 2
                          feedback:
                            type: object
                          suggestions:
                            type: array
                            items:
                              type: string
                          estimatedCrackTime:
                            type: string
        '401':
          description: Nicht authentifiziert oder falsches aktuelles Passwort
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Aktuelles Passwort ist falsch"
        '403':
          description: CSRF-Token fehlt oder ungültig
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "CSRF-Token fehlt"

  /api/auth/register:
    post:
      summary: Benutzer registrieren
      description: |
        **Permission:** Keine (öffentlich)
        
        Registriert einen neuen Benutzer.
        Alle Benutzer können sich registrieren.
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, email, password]
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '201':
          description: Benutzer erfolgreich registriert
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: JWT Access Token (15 Minuten gültig)
                  refreshToken:
                    type: string
                    description: JWT Refresh Token (7 Tage gültig)
                  expiresIn:
                    type: integer
                    description: Access Token Ablaufzeit in Sekunden
                    example: 900
                  refreshExpiresIn:
                    type: integer
                    description: Refresh Token Ablaufzeit in Sekunden
                    example: 604800
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Ungültige Eingabedaten
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Benutzername oder E-Mail bereits vergeben
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/request-reset:
    post:
      summary: Passwort-Reset anfordern
      description: |
        **Permission:** Keine (öffentlich)
        
        Fordert einen Passwort-Reset an.
        Alle Benutzer können einen Reset anfordern.
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Reset-Mail verschickt (immer, um Enumeration zu verhindern)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "Reset-Mail verschickt (falls E-Mail existiert)"

  /api/auth/reset-password:
    post:
      summary: Passwort zurücksetzen
      description: |
        **Permission:** Keine (öffentlich mit gültigem Token)
        
        Setzt das Passwort mit einem Reset-Token zurück.
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [token, newPassword]
              properties:
                token:
                  type: string
                newPassword:
                  type: string
      responses:
        '200':
          description: Passwort erfolgreich zurückgesetzt
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "Passwort erfolgreich zurückgesetzt"
        '400':
          description: Token ungültig oder abgelaufen
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/check-password-strength:
    post:
      summary: Passwort-Stärke prüfen
      description: |
        **Permission:** Keine (öffentlich)
        
        Prüft die Stärke eines Passworts und gibt detailliertes Feedback.
        Nutzt zxcvbn für erweiterte Analyse.
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [password]
              properties:
                password:
                  type: string
                  description: Das zu prüfende Passwort
                username:
                  type: string
                  description: Optional - wird geprüft ob im Passwort enthalten
                email:
                  type: string
                  description: Optional - wird geprüft ob im Passwort enthalten
      responses:
        '200':
          description: Passwort-Analyse erfolgreich
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                    description: Ob das Passwort die Mindestanforderungen erfüllt
                  score:
                    type: integer
                    minimum: 0
                    maximum: 4
                    description: Passwort-Stärke (0=sehr schwach, 4=sehr stark)
                  feedback:
                    type: array
                    items:
                      type: string
                    description: Liste von Problemen mit dem Passwort
                  suggestions:
                    type: array
                    items:
                      type: string
                    description: Verbesserungsvorschläge
                  estimatedCrackTime:
                    type: string
                    description: Geschätzte Zeit zum Knacken
                  strengthText:
                    type: string
                    enum: [Sehr schwach, Schwach, Fair, Gut, Stark]
                  strengthPercentage:
                    type: integer
                    minimum: 0
                    maximum: 100
                  strengthColor:
                    type: string
                    description: Hex-Farbe für UI-Anzeige
                example:
                  valid: false
                  score: 1
                  feedback: 
                    - "Passwort ist zu schwach"
                    - "Dies ist ein sehr häufiges Passwort"
                  suggestions:
                    - "Füge ein oder zwei weitere Wörter hinzu"
                    - "Vermeide häufige Passwörter"
                  estimatedCrackTime: "weniger als eine Sekunde"
                  strengthText: "Schwach"
                  strengthPercentage: 40
                  strengthColor: "#f59e0b"
        '400':
          description: Passwort fehlt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
          example: testuser
        email:
          type: string
          example: user@example.com
        roles:
          type: array
          description: Rollen des Benutzers mit Permissions
          items:
            type: object
            properties:
              id:
                type: integer
              userId:
                type: integer
              roleId:
                type: integer
              scopeType:
                type: string
                example: global
              scopeObjectId:
                type: string
                example: global
              condition:
                type: string
                nullable: true
              role:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                    example: user
                  description:
                    type: string
                  permissions:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        permission:
                          type: object
                          properties:
                            id:
                              type: integer
                            name:
                              type: string
                              example: system.view_own
                            description:
                              type: string
    Error:
      type: object
      properties:
        error:
          type: string
        code:
          type: integer
