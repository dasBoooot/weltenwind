openapi: 3.0.3
info:
  title: Weltenwind API
  version: 1.0.0
  description: |
    ## World-Management
    
    ### Verbesserte API-Responses
    Alle Endpoints verwenden eine konsistente Response-Struktur:
    ```json
    {
      "success": true,
      "code": "success",
      "message": "Beschreibung",
      "data": { ... }
    }
    ```
    
    ### E-Mail-Deduplizierung
    - Automatische Deduplizierung bei Invite-Endpoints
    - Case-insensitive Email-Behandlung
    - Verhindert doppelte Einladungen
    
    ### Type-Safety
    - Sichere User-Guards für alle authentifizierten Endpoints
    - Robuste Token-Validierung
    - Zentrale Prisma-Instanz für bessere Performance
    
    ### Rate-Limiting (geplant)
    - Öffentliche Endpunkte werden mit Rate-Limiting geschützt
    - Spam-Schutz für `/pre-register`
paths:
  /api/worlds:
    get:
      summary: Alle nicht archivierten Welten abrufen
      description: |
        **Permission:** `world.view` (global scope)
        
        Zeigt alle nicht archivierten Welten an.
        Erfordert die `world.view` Permission.
        Alle authentifizierten Benutzer haben diese Permission.
      tags: [Worlds]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Liste aller Welten
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/World'
        '403':
          description: Keine Berechtigung zum Weltzugriff
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/worlds/{id}:
    get:
      summary: Eine einzelne Welt abrufen
      description: |
        **Permission:** `world.view` (global scope)
        
        Zeigt eine spezifische Welt an.
        Erfordert die `world.view` Permission.
        Alle authentifizierten Benutzer haben diese Permission.
      tags: [Worlds]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID der Welt
      responses:
        '200':
          description: Welt gefunden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/World'
        '400':
          description: Ungültige Welt-ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Keine Berechtigung zum Weltzugriff
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Welt nicht gefunden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/worlds/{id}/edit:
    post:
      summary: Status einer Welt ändern
      description: |
        **Permission:** `world.edit` (world scope)
        
        Ändert den Status einer Welt.
        Erfordert die `world.edit` Permission für die spezifische Welt.
        Nur Admins und World-Admins haben diese Permission.
      tags: [Worlds]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status:
                  $ref: '#/components/schemas/WorldStatus'
      responses:
        '200':
          description: Welt erfolgreich aktualisiert
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  world:
                    $ref: '#/components/schemas/World'
        '400':
          description: Ungültige Welt-ID oder Status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Keine Bearbeitungsberechtigung für diese Welt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Welt nicht gefunden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/worlds/{id}/join:
    post:
      summary: Einer Welt beitreten
      description: |
        **Permission:** `player.join` (world scope)
        
        Tritt einer Welt bei.
        Erfordert die `player.join` Permission für die spezifische Welt.
        Alle authentifizierten Benutzer haben diese Permission.
      tags: [Worlds]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                inviteCode:
                  type: string
      responses:
        '200':
          description: Beitritt erfolgreich oder bereits beigetreten
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  code:
                    type: string
                    enum: [success, already_joined]
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      playerId:
                        type: integer
              examples:
                success:
                  summary: Erfolgreich beigetreten
                  value:
                    success: true
                    code: "success"
                    message: "Beitritt erfolgreich"
                    data:
                      playerId: 123
                already_joined:
                  summary: Bereits beigetreten
                  value:
                    success: true
                    code: "already_joined"
                    message: "Bereits beigetreten"
                    data:
                      playerId: 123
        '403':
          description: Keine Berechtigung zum Beitritt dieser Welt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Welt nicht gefunden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/worlds/{id}/players/me:
    get:
      summary: Eigenen Spielstatus in einer Welt abrufen
      description: |
        **Permission:** `player.view_own` (world scope)
        
        Zeigt den eigenen Spielstatus in einer Welt an.
        Erfordert die `player.view_own` Permission für die spezifische Welt.
        Alle authentifizierten Benutzer haben diese Permission.
      tags: [Worlds]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Eigener Spielstatus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        '403':
          description: Keine Berechtigung zum Anzeigen des eigenen Spielstatus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Nicht gefunden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Welt verlassen
      description: |
        **Permission:** `player.leave` (world scope)
        
        Verlässt eine Welt.
        Erfordert die `player.leave` Permission für die spezifische Welt.
        Alle authentifizierten Benutzer haben diese Permission.
      tags: [Worlds]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Welt erfolgreich verlassen
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  code:
                    type: string
                    enum: [success]
                  message:
                    type: string
                example:
                  success: true
                  code: "success"
                  message: "Welt erfolgreich verlassen"
        '403':
          description: Keine Berechtigung zum Verlassen dieser Welt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Kein Spielstatus für diese Welt gefunden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/worlds/{id}/players:
    get:
      summary: Alle Spieler einer Welt abrufen
      description: |
        **Permission:** `player.view_all` (world scope)
        
        Zeigt alle Spieler einer Welt an.
        Erfordert die `player.view_all` Permission für die spezifische Welt.
        Nur Admins, Mods und World-Admins haben diese Permission.
      tags: [Worlds]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Liste der Spieler
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '403':
          description: Keine Berechtigung zum Anzeigen aller Spieler
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Welt nicht gefunden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/worlds/{id}/state:
    get:
      summary: Öffentlichen Status einer Welt abrufen
      description: |
        **Permission:** Keine (öffentlich)
        
        Zeigt den öffentlichen Status einer Welt an.
        Keine Authentifizierung oder Permission erforderlich.
      tags: [Worlds]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Status der Welt
          content:
            application/json:
              schema:
                type: object
                properties:
                  state:
                    $ref: '#/components/schemas/WorldStatus'
                  playerCount:
                    type: integer
                example:
                  state: open
                  playerCount: 5
        '404':
          description: Welt nicht gefunden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'







  /api/worlds/{id}/pre-register:
    get:
      summary: Eigenen Pre-Register-Status abrufen
      description: |
        **Permission:** `player.view_own` (world scope)
        
        Zeigt den eigenen Pre-Register-Status in einer Welt an.
        Erfordert die `player.view_own` Permission für die spezifische Welt.
        Alle authentifizierten Benutzer haben diese Permission.
      tags: [Worlds]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Pre-Register-Status
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  isPreRegistered:
                    type: boolean
                  data:
                    nullable: true
                    type: object
                    properties:
                      id:
                        type: integer
                      email:
                        type: string
                        format: email
                      createdAt:
                        type: string
                        format: date-time
                      config:
                        type: object
              examples:
                registered:
                  summary: Vorregistriert
                  value:
                    success: true
                    isPreRegistered: true
                    data:
                      id: 123
                      email: "user@example.com"
                      createdAt: "2024-01-15T10:30:00Z"
                      config: {}
                not_registered:
                  summary: Nicht vorregistriert
                  value:
                    success: true
                    isPreRegistered: false
                    data: null
        '403':
          description: Keine Berechtigung zum Anzeigen des eigenen Pre-Register-Status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Welt oder Benutzer nicht gefunden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Pre-Registration für eine Welt
      description: |
        **Permission:** Keine (öffentlich)
        
        Vorregistrierung für eine Welt.
        Keine Authentifizierung oder Permission erforderlich.
      tags: [Worlds]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
      responses:
        '200':
          description: Pre-Registration erfolgreich oder bereits registriert
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  code:
                    type: string
                    enum: [success, already_registered]
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
              examples:
                success:
                  summary: Erfolgreich registriert
                  value:
                    success: true
                    code: "success"
                    message: "Pre-Registration erfolgreich"
                    data:
                      id: 123
                already_registered:
                  summary: Bereits registriert
                  value:
                    success: true
                    code: "already_registered"
                    message: "Bereits vorregistriert"
        '400':
          description: Ungültige Eingabedaten
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Pre-Registration für eine Welt zurückziehen
      description: |
        **Permission:** Keine (öffentlich)
        
        Löscht eine Pre-Registration für die angegebene Welt und E-Mail-Adresse.
        Keine Authentifizierung oder Permission erforderlich.
      tags: [Worlds]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: email
          in: query
          required: true
          description: E-Mail-Adresse für Pre-Registration
          schema:
            type: string
            format: email
      responses:
        '200':
          description: Pre-Registration erfolgreich zurückgezogen
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  code:
                    type: string
                    enum: [success]
                  message:
                    type: string
                example:
                  success: true
                  code: "success"
                  message: "Pre-Registration zurückgezogen"
        '400':
          description: Ungültige Welt-ID oder E-Mail fehlt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Keine Pre-Registration für diese Welt und E-Mail gefunden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    World:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        status:
          $ref: '#/components/schemas/WorldStatus'
        createdAt:
          type: string
          format: date-time
        startsAt:
          type: string
          format: date-time
        endsAt:
          type: string
          format: date-time
          nullable: true
    WorldStatus:
      type: string
      enum: [upcoming, open, running, closed, archived]
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
          example: testuser
        email:
          type: string
          example: user@example.com
    Player:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        worldId:
          type: integer
        joinedAt:
          type: string
          format: date-time
        leftAt:
          type: string
          format: date-time
          nullable: true
        state:
          type: string
          nullable: true
    Error:
      type: object
      properties:
        error:
          type: string
        code:
          type: integer
